{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"source/rice/index.html","path":"rice/index.html","modified":0,"renderable":0},{"_id":"source/rice/map.html","path":"rice/map.html","modified":0,"renderable":0},{"_id":"source/xiaomo/index.html","path":"xiaomo/index.html","modified":0,"renderable":0},{"_id":"source/xiaomo/index3.html","path":"xiaomo/index3.html","modified":0,"renderable":0},{"_id":"source/xiaomo/timg.jpeg","path":"xiaomo/timg.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"source/rice/images/heilongjiang.jpg","path":"rice/images/heilongjiang.jpg","modified":0,"renderable":0},{"_id":"source/rice/images/jilin.jpg","path":"rice/images/jilin.jpg","modified":0,"renderable":0},{"_id":"source/rice/images/pic01.jpg","path":"rice/images/pic01.jpg","modified":0,"renderable":0},{"_id":"source/rice/images/liaoning.jpg","path":"rice/images/liaoning.jpg","modified":0,"renderable":0},{"_id":"source/rice/images/pic05.jpg","path":"rice/images/pic05.jpg","modified":0,"renderable":0},{"_id":"source/rice/images/pic04.jpg","path":"rice/images/pic04.jpg","modified":0,"renderable":0},{"_id":"source/rice/images/pic02.jpg","path":"rice/images/pic02.jpg","modified":0,"renderable":0},{"_id":"source/rice/images/pic03.jpg","path":"rice/images/pic03.jpg","modified":0,"renderable":0},{"_id":"source/rice/js/map-min.js","path":"rice/js/map-min.js","modified":0,"renderable":0},{"_id":"source/rice/images/pic06.jpg","path":"rice/images/pic06.jpg","modified":0,"renderable":0},{"_id":"source/xiaomo/css/default.css","path":"xiaomo/css/default.css","modified":0,"renderable":0},{"_id":"source/xiaomo/js/functions.js","path":"xiaomo/js/functions.js","modified":0,"renderable":0},{"_id":"source/xiaomo/js/jscex-async-powerpack.min.js","path":"xiaomo/js/jscex-async-powerpack.min.js","modified":0,"renderable":0},{"_id":"source/xiaomo/js/jscex-builderbase.min.js","path":"xiaomo/js/jscex-builderbase.min.js","modified":0,"renderable":0},{"_id":"source/xiaomo/js/jscex-async.min.js","path":"xiaomo/js/jscex-async.min.js","modified":0,"renderable":0},{"_id":"source/xiaomo/js/jscex-jit.js","path":"xiaomo/js/jscex-jit.js","modified":0,"renderable":0},{"_id":"source/xiaomo/js/jscex-parser.js","path":"xiaomo/js/jscex-parser.js","modified":0,"renderable":0},{"_id":"source/xiaomo/js/jscex.min.js","path":"xiaomo/js/jscex.min.js","modified":0,"renderable":0},{"_id":"source/xiaomo/js/love.js","path":"xiaomo/js/love.js","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/index.html","path":"xiaomo/qixi/index.html","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/rice/images/header.jpg","path":"rice/images/header.jpg","modified":0,"renderable":0},{"_id":"source/xiaomo/js/jquery.min.js","path":"xiaomo/js/jquery.min.js","modified":0,"renderable":0},{"_id":"source/rice/assets/css/font-awesome.min.css","path":"rice/assets/css/font-awesome.min.css","modified":0,"renderable":0},{"_id":"source/rice/assets/css/ie9.css","path":"rice/assets/css/ie9.css","modified":0,"renderable":0},{"_id":"source/rice/assets/css/ie8.css","path":"rice/assets/css/ie8.css","modified":0,"renderable":0},{"_id":"source/rice/assets/css/main.css","path":"rice/assets/css/main.css","modified":0,"renderable":0},{"_id":"source/rice/assets/js/jquery.scrolly.min.js","path":"rice/assets/js/jquery.scrolly.min.js","modified":0,"renderable":0},{"_id":"source/rice/assets/js/main.js","path":"rice/assets/js/main.js","modified":0,"renderable":0},{"_id":"source/rice/assets/sass/ie8.scss","path":"rice/assets/sass/ie8.scss","modified":0,"renderable":0},{"_id":"source/rice/assets/js/skel.min.js","path":"rice/assets/js/skel.min.js","modified":0,"renderable":0},{"_id":"source/rice/assets/js/util.js","path":"rice/assets/js/util.js","modified":0,"renderable":0},{"_id":"source/rice/assets/sass/ie9.scss","path":"rice/assets/sass/ie9.scss","modified":0,"renderable":0},{"_id":"source/rice/assets/sass/main.scss","path":"rice/assets/sass/main.scss","modified":0,"renderable":0},{"_id":"source/rice/js/res/chinaMapConfig.js","path":"rice/js/res/chinaMapConfig.js","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/css/iconfont.eot","path":"xiaomo/qixi/css/iconfont.eot","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/css/iconfont.svg","path":"xiaomo/qixi/css/iconfont.svg","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/css/animate.min.css","path":"xiaomo/qixi/css/animate.min.css","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/css/mobile-reset.css","path":"xiaomo/qixi/css/mobile-reset.css","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/css/iconfont.ttf","path":"xiaomo/qixi/css/iconfont.ttf","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/css/iconfont.woff","path":"xiaomo/qixi/css/iconfont.woff","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/css/style.css","path":"xiaomo/qixi/css/style.css","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/images/rw1.png","path":"xiaomo/qixi/images/rw1.png","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/css/swiper-3.3.1.min.css","path":"xiaomo/qixi/css/swiper-3.3.1.min.css","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/images/rw2.png","path":"xiaomo/qixi/images/rw2.png","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/images/xn1.png","path":"xiaomo/qixi/images/xn1.png","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/images/xn3.png","path":"xiaomo/qixi/images/xn3.png","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/images/xn2.png","path":"xiaomo/qixi/images/xn2.png","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/images/xn5.png","path":"xiaomo/qixi/images/xn5.png","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/images/xn4.png","path":"xiaomo/qixi/images/xn4.png","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/images/xx1.png","path":"xiaomo/qixi/images/xx1.png","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/images/xn6.png","path":"xiaomo/qixi/images/xn6.png","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/images/yue.png","path":"xiaomo/qixi/images/yue.png","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/images/xx2.png","path":"xiaomo/qixi/images/xx2.png","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/js/base.js","path":"xiaomo/qixi/js/base.js","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/js/swiper.animate1.0.2.min.js","path":"xiaomo/qixi/js/swiper.animate1.0.2.min.js","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/js/zepto.min.js","path":"xiaomo/qixi/js/zepto.min.js","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/fireworks.js","path":"js/src/fireworks.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"source/rice/assets/fonts/fontawesome-webfont.eot","path":"rice/assets/fonts/fontawesome-webfont.eot","modified":0,"renderable":0},{"_id":"source/rice/assets/fonts/FontAwesome.otf","path":"rice/assets/fonts/FontAwesome.otf","modified":0,"renderable":0},{"_id":"source/rice/assets/fonts/fontawesome-webfont.woff","path":"rice/assets/fonts/fontawesome-webfont.woff","modified":0,"renderable":0},{"_id":"source/rice/assets/fonts/fontawesome-webfont.woff2","path":"rice/assets/fonts/fontawesome-webfont.woff2","modified":0,"renderable":0},{"_id":"source/rice/assets/js/jquery.min.js","path":"rice/assets/js/jquery.min.js","modified":0,"renderable":0},{"_id":"source/rice/js/lib/raphael-min.js","path":"rice/js/lib/raphael-min.js","modified":0,"renderable":0},{"_id":"source/rice/js/lib/jquery-1.11.1.min.js","path":"rice/js/lib/jquery-1.11.1.min.js","modified":0,"renderable":0},{"_id":"source/xiaomo/qixi/js/swiper-3.3.1.min.js","path":"xiaomo/qixi/js/swiper-3.3.1.min.js","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/rice/assets/css/images/overlay1.png","path":"rice/assets/css/images/overlay1.png","modified":0,"renderable":0},{"_id":"source/rice/assets/css/images/overlay3.svg","path":"rice/assets/css/images/overlay3.svg","modified":0,"renderable":0},{"_id":"source/rice/assets/css/images/overlay2.png","path":"rice/assets/css/images/overlay2.png","modified":0,"renderable":0},{"_id":"source/rice/assets/css/images/overlay4.svg","path":"rice/assets/css/images/overlay4.svg","modified":0,"renderable":0},{"_id":"source/rice/assets/js/ie/PIE.htc","path":"rice/assets/js/ie/PIE.htc","modified":0,"renderable":0},{"_id":"source/rice/assets/js/ie/backgroundsize.min.htc","path":"rice/assets/js/ie/backgroundsize.min.htc","modified":0,"renderable":0},{"_id":"source/rice/assets/js/ie/html5shiv.js","path":"rice/assets/js/ie/html5shiv.js","modified":0,"renderable":0},{"_id":"source/rice/assets/js/ie/respond.min.js","path":"rice/assets/js/ie/respond.min.js","modified":0,"renderable":0},{"_id":"source/rice/assets/fonts/fontawesome-webfont.ttf","path":"rice/assets/fonts/fontawesome-webfont.ttf","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/rice/assets/fonts/fontawesome-webfont.svg","path":"rice/assets/fonts/fontawesome-webfont.svg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/xiaomo/aini.mp3","path":"xiaomo/aini.mp3","modified":0,"renderable":0}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487428506000},{"_id":"source/.DS_Store","hash":"b2a0b81a2df55b86990b386487e1597078bfca7c","modified":1531410152000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1523677104000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1523677104000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1523677104000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1523677104000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1523677104000},{"_id":"themes/next/.DS_Store","hash":"d4b7667b1450065c3aee77660c7ef4506e5e2927","modified":1530379729000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1523677104000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1523677104000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1523677104000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1523677104000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1523677104000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1523677104000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1523677104000},{"_id":"themes/next/_config.yml","hash":"8bed603444abe3df8e2271004b8aa9e1a3e5b3df","modified":1530379710000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1523677104000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1523677104000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1523677104000},{"_id":"source/_posts/2016年总结.md","hash":"8ec26ab0e1200a4775c9333b2c04d44c75cc2f88","modified":1487426481000},{"_id":"source/404/index.md","hash":"f6bc247d0744557d5cef3b2f98f133b596469f33","modified":1487326705000},{"_id":"source/_posts/.DS_Store","hash":"c78faa5336529283bccef2b87637e6e13371a4c9","modified":1531410118000},{"_id":"source/_posts/58到家数据库30条军规解读.md","hash":"099cbeab029f73cb1d73c6487405375f74f8a1ea","modified":1487431426000},{"_id":"source/_posts/JVM常量池及字符串-比较分析.md","hash":"7b24967dc3da3d4fea708c71e473a5c33bea050f","modified":1487421916000},{"_id":"source/_posts/Hello-Hexo.md","hash":"810829cb07c2b1f9b734bf82334e12470e23f91e","modified":1487405955000},{"_id":"source/_posts/Browser的通讯”.md","hash":"dab75821c59ad3e9007ed67b92b83ba1b88d52ee","modified":1487426201000},{"_id":"source/_posts/JVM虚拟机关于“不使用的对象手动赋值为null”的理解.md","hash":"e36906ce818b73e028c3381ccf9bdc2473ac27d7","modified":1487407775000},{"_id":"source/_posts/HashMap面试题总结！.md","hash":"4a94977a8b9ad104a7febc9ada211aeffefd604a","modified":1487425494000},{"_id":"source/_posts/Java8-Lambda表达式笔记.md","hash":"288073569e5df2b61c0a887c91a6cb31d9a2eaa0","modified":1530948569000},{"_id":"source/_posts/Java-8-最佳技巧.md","hash":"8f57d739eb85c5c3a881189a699b3f981a1367a0","modified":1487424343000},{"_id":"source/_posts/Java使用websocket和WebRTC实现视频通话.md","hash":"530234a9d95a624e36db294c7d6df31a698dbd1c","modified":1489205522000},{"_id":"source/_posts/Java8-常用内置函数接口笔记.md","hash":"20f284c6361487c577e415d669492234d8841351","modified":1530949307000},{"_id":"source/_posts/Java反射学习总结（三）.md","hash":"bf83a7c426a8d524ff94e064d976f924e1781a83","modified":1487423740000},{"_id":"source/_posts/Java反射学习总结（一.md","hash":"82551d6110c7ee275835089dbc583b93b02fb0d4","modified":1487423618000},{"_id":"source/_posts/Java反射学习总结（二）.md","hash":"1d516aa93b3e8237b18f2ed251eda0dc8f81d532","modified":1487423686000},{"_id":"source/_posts/Java基于zxing生成二维码demo.md","hash":"f292a2129b447dac7645b7f2c7bbce7fcfe96cb4","modified":1490269459000},{"_id":"source/_posts/Java反射学习总结（四）.md","hash":"64eedeee03c1fb13c48858966422b7a9b6af7c2b","modified":1491812089000},{"_id":"source/_posts/Java反射学习总结（五）.md","hash":"8fc2f8ec0996a27b1756821bc1a95b7bd89aa9e0","modified":1530380980000},{"_id":"source/_posts/Java接口是常量存放的最佳地点吗？.md","hash":"d11f0db07da3c7ffb7f0eb7007049e319c8ac414","modified":1487424044000},{"_id":"source/_posts/Java的静态-动态绑定.md","hash":"fb4458f5848f8084dc566aff1ec2444dca78f167","modified":1487422744000},{"_id":"source/_posts/Java泛型总结.md","hash":"a41bba81009b6714ebd0e2b0bba36926ba0085af","modified":1487424428000},{"_id":"source/_posts/Java网易短信接入demo.md","hash":"db444e448ee093a81c7812990c05777e5b871a77","modified":1490235630000},{"_id":"source/_posts/Logger级别.md","hash":"6c916740449296b10011b212064f6c616ce5b52c","modified":1487424261000},{"_id":"source/_posts/Mac下docker搭建hadoop集群.md","hash":"9b15188ec3fac8903976dcc0ca81bb4dc6d5ff64","modified":1531410165000},{"_id":"source/_posts/Volatile小结.md","hash":"8cc65612cfef3f54d01746cabfe560354a068a7a","modified":1488522912000},{"_id":"source/_posts/Mybatis-Criteria简化查询.md","hash":"dec8fafe1c35650a4b4f4949c0dc55c93510e899","modified":1531063501000},{"_id":"source/_posts/Spring初探（一）.md","hash":"c27320b0c72689c19ecb8605aff1ebc7c4cfb237","modified":1494320892000},{"_id":"source/_posts/apache-poi操作-适用于word-2007.md","hash":"f4d1d180478408df1092b01f5442566b71ce68f2","modified":1487426956000},{"_id":"source/_posts/jdk1-8的HashMap和ConcurrentHashMap.md","hash":"0dec0423744b951fe271b25a6b6515dc3fa75c60","modified":1487426282000},{"_id":"source/_posts/mysql-如何插入一列自增序号.md","hash":"70567660351b35ed8d9890353e5d11de2bfd346d","modified":1487422521000},{"_id":"source/_posts/nginx-基本入门-至今为止见过最好的-nginx-入门文章，没有之一。.md","hash":"94928e0c4bd4d00b5d8f1521ab9bfe77e51bdd45","modified":1487424832000},{"_id":"source/_posts/spring-ioc原理.md","hash":"5168180f6310e4130ccb21748922b62146ba12d0","modified":1489137042000},{"_id":"source/_posts/userId分库，怎么通过其他字段查询.md","hash":"ef9f6ebc07f6abc99bcf3df3b7c6a6d4e671f77c","modified":1492481636000},{"_id":"source/_posts/为什么volatile不能保证原子性而Atomic可以？.md","hash":"45fc052f68d0b5ed6dcf32a0a0461b05831d78a9","modified":1488441458000},{"_id":"source/_posts/关于Ajax的cache参数的测试.md","hash":"4ec0a4b0e4a484ba1f48d53b2ff890c198974b4d","modified":1487421966000},{"_id":"source/_posts/实验插入b站h5播放器.md","hash":"98d4f53452f25325084933bba9cc6745e4fd7211","modified":1487416781000},{"_id":"source/_posts/希尔排序.md","hash":"5cbd3b37d6aefd1bc571c16c0ecd4a84aa028a63","modified":1487599669000},{"_id":"source/_posts/我们为什么要用Spring，SpringMVC.md","hash":"9c3c919ecdbe20ecf3ad04e9064abe24c4bcf3b2","modified":1487423476000},{"_id":"source/_posts/关于多线程的饥饿和公平.md","hash":"195a2c6ab0b3faed47b546be873e1a92cd137a6d","modified":1487419499000},{"_id":"source/_posts/数据库系统分层优化.md","hash":"4f884683f053d30fac70626a75cdcae1c25cd015","modified":1487917695000},{"_id":"source/_posts/时间复杂度和空间复杂度详解.md","hash":"5d238a6d4a8d8db2b64051af41328f0dcdc5d093","modified":1487426821000},{"_id":"source/_posts/浅谈HashMap.md","hash":"cca9fa532f041013c0d27a635b83e84029422f94","modified":1487425128000},{"_id":"source/_posts/系统学习Spring-三-——Bean的高级装配.md","hash":"1ae0bae1ad6ef319c97f3b37e40e5dfac2e3b440","modified":1530366423000},{"_id":"source/_posts/高级for循环使用remove-add-问题.md","hash":"16fdb96be1e6a0177d0d1d292dc23aaeff093d77","modified":1487425667000},{"_id":"source/_posts/黑车司机发车器Java版.md","hash":"2b2b426f85f4c49b823165be1cd0753e6d7c6854","modified":1487403232000},{"_id":"source/_posts/系统学习Spring（二）——装配Bean.md","hash":"284f1b3bb8ddc37e3884a4d051fc2996cfd200b0","modified":1494398066000},{"_id":"source/about/index.md","hash":"88cb6d97c2a8eefbc4b0d946dc981a7118cdf3d6","modified":1490756426000},{"_id":"source/categories/index.md","hash":"828e3b04f191ce327a56100502b4783c94158118","modified":1530365574000},{"_id":"source/rice/.DS_Store","hash":"85a3c4d5cade0f602e0dc0f5c39f143cd7873a66","modified":1501588542000},{"_id":"source/rice/index.html","hash":"0b42b8857a06086de3c88c1a3a6463b2564bce53","modified":1487557379000},{"_id":"source/rice/map.html","hash":"f44d45f2592801292ca952a63ceff800f3ec5938","modified":1487414876000},{"_id":"source/tags/index.md","hash":"88d151c65c9fbd385d22c2169041b3c68610dd3d","modified":1487322985000},{"_id":"source/xiaomo/.project","hash":"b4c36a4e65ae39927460f392cae15e0b47b0545a","modified":1468664086000},{"_id":"source/xiaomo/.classpath","hash":"adf353d1d197733ae942e77806f259aac27e8eb7","modified":1468664084000},{"_id":"source/xiaomo/.DS_Store","hash":"bd96b5e4beeec6e7495d7a70469ad7bb950d1a5a","modified":1526267775000},{"_id":"source/xiaomo/index.html","hash":"c7790d84aace97beac9aba74793b89c65f83b575","modified":1530356883000},{"_id":"source/xiaomo/index3.html","hash":"3b4636fd86b9193c33e5846f04ae4ed810e25649","modified":1517134715000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1523677104000},{"_id":"source/xiaomo/timg.jpeg","hash":"b1deb75beca05bde46ef94762c5aa27a01f7c72a","modified":1517133828000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1523677104000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1523677104000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1523677104000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1523677104000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1523677104000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1523677104000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1523677104000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1523677104000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1523677104000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1523677104000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1523677104000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1523677104000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1523677104000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1523677104000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1523677104000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1523677104000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"4608850c5eff8601e71bec50aa6daef03bdea89c","modified":1530377477000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1523677104000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1523677104000},{"_id":"themes/next/layout/_layout.swig","hash":"bc412a16054474e1b2d8789565ec46ec719ad4fe","modified":1530378109000},{"_id":"themes/next/layout/.DS_Store","hash":"5925032db1b377826d16538b541db2241814e235","modified":1530379729000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1523677104000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1523677104000},{"_id":"themes/next/layout/index.swig","hash":"bc27019f0f367711e9adb907b405e30038142519","modified":1530364433000},{"_id":"themes/next/layout/post.swig","hash":"0f0bd3fc39b1c6faf6cb7e5d5208470ae8cf65e6","modified":1530364385000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1523677104000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1523677104000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1523677104000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1523677104000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1523677104000},{"_id":"themes/next/scripts/.DS_Store","hash":"ab0d5e6761bb41d326b2ac1cf9c19126e347b1c3","modified":1530360536000},{"_id":"themes/next/source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1530368491000},{"_id":"themes/next/source/.DS_Store","hash":"3139dc2f95579eb92b322ca990a73d865f924d81","modified":1530378034000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1523677104000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1523677104000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1523677104000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523677104000},{"_id":"source/_posts/Mac下docker搭建hadoop集群/1.png","hash":"ef7cf662fac0e4e349eb0b666b57a849e2f62347","modified":1531410061000},{"_id":"source/_posts/Mac下docker搭建hadoop集群/.DS_Store","hash":"bac7d9eea834517934a9d445314a4446c92a5379","modified":1531410118000},{"_id":"source/rice/assets/.DS_Store","hash":"900399c9126d9775c4b262fdda2288b3723c8d99","modified":1487557745000},{"_id":"source/rice/images/heilongjiang.jpg","hash":"648cab27fca38922572a8203a171d3d92fce45d3","modified":1433768070000},{"_id":"source/rice/images/jilin.jpg","hash":"d0ac1430e53ea7a852429373192365b893cf54e7","modified":1433811444000},{"_id":"source/rice/images/pic01.jpg","hash":"dfa04cf8c333f7d14cd9154f2aade06071c6114d","modified":1474909978000},{"_id":"source/rice/images/liaoning.jpg","hash":"3da64b6f787ff4d6fa8bbdadf7e7538acd07992e","modified":1433811532000},{"_id":"source/rice/images/pic05.jpg","hash":"20482e66b90a9a987c041b9176d686d513ae8b36","modified":1474909978000},{"_id":"source/rice/images/pic04.jpg","hash":"cf891c5b11579f8c56bce9746f30b120e28088a4","modified":1474909978000},{"_id":"source/rice/images/pic02.jpg","hash":"fd62f8dc5b54ca0f7612bcbf2a17435539e972cb","modified":1474909978000},{"_id":"source/rice/images/pic03.jpg","hash":"e6941ff7655039a354add64ceec76131a95951a4","modified":1474909978000},{"_id":"source/rice/js/map-min.js","hash":"37a8bfe180bd8cd5f47da927a77163f804a537eb","modified":1433815844000},{"_id":"source/rice/js/.DS_Store","hash":"d65e7af818e4e03905fb8a8cd154658877f38d24","modified":1487414480000},{"_id":"source/rice/images/pic06.jpg","hash":"2e258ce5f625e0d002ac224e8200a7df9023fe6d","modified":1474909978000},{"_id":"source/xiaomo/.settings/.jsdtscope","hash":"250bbdae7886c4c506953e7f84b4de6cd1ae56a2","modified":1468664086000},{"_id":"source/xiaomo/.settings/org.eclipse.core.resources.prefs","hash":"87ac215302adbaafa62ab2fdd3534d39854f70bc","modified":1468664580000},{"_id":"source/xiaomo/.settings/org.eclipse.jdt.core.prefs","hash":"ae52d68108f3de5e8b57a7a866f8eb30651fdba8","modified":1468664084000},{"_id":"source/xiaomo/.settings/org.eclipse.wst.common.project.facet.core.xml","hash":"09cee8ede024e0626b6fdd077e3469f6c0944c1a","modified":1468664086000},{"_id":"source/xiaomo/.settings/org.eclipse.wst.jsdt.ui.superType.container","hash":"87ab9531e1222351568346cf9057a0cae36112b8","modified":1468664086000},{"_id":"source/xiaomo/.settings/org.eclipse.wst.common.component","hash":"436766bbd857b20ffac0923c6acc6c08002a18ba","modified":1468664084000},{"_id":"source/xiaomo/.settings/org.eclipse.wst.jsdt.ui.superType.name","hash":"41dfc0a6c92707948578891c51d98c6443be63cc","modified":1468664086000},{"_id":"source/xiaomo/css/default.css","hash":"2c66040bc38ae8758a6a4bdb148da3e81c179c7c","modified":1463734558000},{"_id":"source/xiaomo/js/functions.js","hash":"a447ebcb001bd7c7f528528975c599800a409fe7","modified":1463734180000},{"_id":"source/xiaomo/js/jscex-async-powerpack.min.js","hash":"7d0a95300dd38e1d3c2e68103404da3303fd3c64","modified":1463734304000},{"_id":"source/xiaomo/js/jscex-builderbase.min.js","hash":"9858a96b5ce4020ea0c53f9c60c239ea5610f78d","modified":1463734395000},{"_id":"source/xiaomo/js/jscex-async.min.js","hash":"2ac1dd67892e4cccb81c8b95e472c16776ab47d2","modified":1463735189000},{"_id":"source/xiaomo/js/jscex-jit.js","hash":"767c3f3671cbfa25654c7d1545076acae51c2e38","modified":1463734418000},{"_id":"source/xiaomo/js/jscex-parser.js","hash":"8b02e6a02a0a2b4a08b92c687f7ad6a5adb39441","modified":1463734449000},{"_id":"source/xiaomo/js/jscex.min.js","hash":"1354a4edbab1e2d20d930357b9cf97886de3107c","modified":1463734467000},{"_id":"source/xiaomo/js/love.js","hash":"9c0a447e8f7ad25503016ec4e22af393d5e09bda","modified":1463734488000},{"_id":"source/xiaomo/qixi/index.html","hash":"94320b24a5327f3c544ea66390dda79feae59b5e","modified":1503922397000},{"_id":"source/xiaomo/qixi/.DS_Store","hash":"fac434c2694e0124668b411f1d76a6546a080ed6","modified":1503921172000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1523677104000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1523677104000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1523677104000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f499d334fb16e8fbf9583f1b585a4aa50772478f","modified":1530376481000},{"_id":"themes/next/layout/_macro/post.swig","hash":"e440e6dfcc3a297994daf85c155629113998f49e","modified":1530376647000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1523677104000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1523677104000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1523677104000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1523677104000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"2da4a04df2e14ba0906b63f8142b86959ee09d2c","modified":1530376926000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1523677104000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1523677104000},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"90dac1a54eb81faf612cfa9562b369f3216a648f","modified":1530379729000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1523677104000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1523677104000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1523677104000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1523677104000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1523677104000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1523677104000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1523677104000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1523677104000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1523677104000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1523677104000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1523677104000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1523677104000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1523677104000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1523677104000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1523677104000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1523677104000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1523677104000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1523677104000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1523677104000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1523677104000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1523677104000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1523677104000},{"_id":"themes/next/source/css/.DS_Store","hash":"0989701405bdf71a6d85a130d144d6c9017d93d7","modified":1530361107000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1523677104000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1523677104000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1523677104000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1523677104000},{"_id":"themes/next/source/images/.DS_Store","hash":"16025c213daefaf75659e5ac84990e01997b7a23","modified":1530375600000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1523677104000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1523677104000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1523677104000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1523677104000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1523677104000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1523677104000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1523677104000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1523677104000},{"_id":"themes/next/source/images/favicon.ico","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1475282440000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523677104000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523677104000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1523677104000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1523677104000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1523677104000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1523677104000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1523677104000},{"_id":"themes/next/source/js/.DS_Store","hash":"6a071e9c2899074e9cf29e040464ed2b0a90497a","modified":1530378034000},{"_id":"source/rice/images/header.jpg","hash":"71f5b603cd177cec190f077c097ec4b610dd28ee","modified":1474909978000},{"_id":"source/xiaomo/js/jquery.min.js","hash":"1327f754ff87d26bced46568543207e9df190aaa","modified":1441376786000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523677104000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523677104000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523677104000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523677104000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523677104000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523677104000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523677104000},{"_id":"source/rice/assets/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1474909978000},{"_id":"source/rice/assets/css/ie9.css","hash":"dcca6c7acdb20a19b6c7d7b48afae4c1a5813609","modified":1474909978000},{"_id":"source/rice/assets/css/ie8.css","hash":"c91b4a99b2bc0e2b8ce7e929394dfe80bdf58c8b","modified":1474909978000},{"_id":"source/rice/assets/css/.DS_Store","hash":"432b467cd210c0d9b14e6c0f6714d21e85531f79","modified":1487414938000},{"_id":"source/rice/assets/css/main.css","hash":"71a32dbb0af10c30af15cc0b4e006b0e5af41e7c","modified":1474909978000},{"_id":"source/rice/assets/js/jquery.scrolly.min.js","hash":"91ee4deda8189fde4432a8f58cfe3b5f2aed9dcf","modified":1474909978000},{"_id":"source/rice/assets/js/main.js","hash":"1e7d376488f18758f3e9e565a2ea6dbe6db05452","modified":1474909978000},{"_id":"source/rice/assets/js/.DS_Store","hash":"d938411ff65d9f50608f0c22177abc612daa5285","modified":1487557745000},{"_id":"source/rice/assets/sass/ie8.scss","hash":"6391ecc25e69a3bbc5e4821e6e688cc4cebe7aa1","modified":1474909978000},{"_id":"source/rice/assets/js/skel.min.js","hash":"763a8fc7504139cee50c453f87b5aa204965463a","modified":1474909978000},{"_id":"source/rice/assets/js/util.js","hash":"e32e958f74bd5edc4e1fbdd9fa6c30425d3c7954","modified":1474909978000},{"_id":"source/rice/assets/sass/ie9.scss","hash":"aa01048ef04a95b61730e46100a582e809e080cd","modified":1474909978000},{"_id":"source/rice/assets/sass/.DS_Store","hash":"e493aaf7f24004520fb27dc158695d2bde1da946","modified":1487414132000},{"_id":"source/rice/assets/sass/main.scss","hash":"68f75013d5b1b5f7820bd0190300eaa49f1de1e2","modified":1474909978000},{"_id":"source/rice/js/res/chinaMapConfig.js","hash":"661da892921ba246e365eb36f2a3d645c09339dd","modified":1433766592000},{"_id":"source/xiaomo/qixi/css/iconfont.eot","hash":"88e779e37baedeebc198cacf078d9ee67c8147d1","modified":1470719408000},{"_id":"source/xiaomo/qixi/css/iconfont.svg","hash":"5a208cd7c76ea52724c429fd182dcc54828a70c9","modified":1470719408000},{"_id":"source/xiaomo/qixi/css/animate.min.css","hash":"8411c1c0418521c96d07bcca0d9dbce7e832ccc9","modified":1470384888000},{"_id":"source/xiaomo/qixi/css/mobile-reset.css","hash":"e58d9e0cfa7a083e68207961cba4158ad7947011","modified":1470300400000},{"_id":"source/xiaomo/qixi/css/iconfont.ttf","hash":"23d1dc4641b55a9d0ec79d6eb53aca870dd4959c","modified":1470719408000},{"_id":"source/xiaomo/qixi/css/iconfont.woff","hash":"c67db8c74f16aa080ec004c9842158805a7328ec","modified":1470719408000},{"_id":"source/xiaomo/qixi/css/style.css","hash":"f7a12f3bab9beee0be2fa869336640c482d7b092","modified":1470719572000},{"_id":"source/xiaomo/qixi/images/rw1.png","hash":"8ed4ac818f7ea720a3f03275170f380c39eff9a0","modified":1470706158000},{"_id":"source/xiaomo/qixi/css/swiper-3.3.1.min.css","hash":"1d802f842351c7c2b53585641e4b288050845352","modified":1470368144000},{"_id":"source/xiaomo/qixi/images/rw2.png","hash":"9c4a865bae8cf98b078e2c84c1856291ba9c61f3","modified":1470705690000},{"_id":"source/xiaomo/qixi/images/xn1.png","hash":"122e8f6746491379f376df61d8b4b391745d74d0","modified":1470704998000},{"_id":"source/xiaomo/qixi/images/xn3.png","hash":"500e5b39af53086c96f770125a3a432a09921b0f","modified":1470706298000},{"_id":"source/xiaomo/qixi/images/xn2.png","hash":"91cca83d0f95705054fe5c693d05b0bdc4a5dc64","modified":1470705228000},{"_id":"source/xiaomo/qixi/images/xn5.png","hash":"7b99cdf9b0f7bb7af14809745778802f49b17a92","modified":1470711202000},{"_id":"source/xiaomo/qixi/images/xn4.png","hash":"bb8aecfe3c50ef00309a8d8f846d1a46dfff8ada","modified":1470711164000},{"_id":"source/xiaomo/qixi/images/xx1.png","hash":"6b9e701d576b7ea7c5a481dec7608c4497b35740","modified":1470706486000},{"_id":"source/xiaomo/qixi/images/xn6.png","hash":"b250eb4a1ede6f23bd46ae0d3cb14f7154b4b3ed","modified":1470711228000},{"_id":"source/xiaomo/qixi/images/yue.png","hash":"a1cc67de6af72a70d5653064c20c2d8619f8d8eb","modified":1470708634000},{"_id":"source/xiaomo/qixi/images/xx2.png","hash":"18c6b751194413b105afd6ce33a83b6da47fa166","modified":1470706422000},{"_id":"source/xiaomo/qixi/js/base.js","hash":"506b837dc26132d21458605c81b4aac7b7f182f4","modified":1470312436000},{"_id":"source/xiaomo/qixi/js/swiper.animate1.0.2.min.js","hash":"c4d0a285b35233a6a68702f5e0f281ee4464f363","modified":1470384962000},{"_id":"source/xiaomo/qixi/js/zepto.min.js","hash":"49a1d0559ea2ef3d392d67250c7d815a45081d1c","modified":1470368058000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1523677104000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1523677104000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1523677104000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1523677104000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1523677104000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1523677104000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1523677104000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1523677104000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1523677104000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1523677104000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1523677104000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1523677104000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1523677104000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1523677104000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1523677104000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1523677104000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1523677104000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1523677104000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1523677104000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1523677104000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1523677104000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1523677104000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1523677104000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1523677104000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1523677104000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1523677104000},{"_id":"themes/next/source/css/_common/.DS_Store","hash":"fc14143e9c0ea648b38f9d28650bb05cd2ab8b47","modified":1530361022000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"40b02be7d9d119c939f5206b4a5df528e46430cc","modified":1530375535000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1523677104000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1523677104000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/.DS_Store","hash":"d0566c8a507d8e9469c610370f49e0ab5138d6d9","modified":1530361114000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1523677104000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1523677104000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1523677104000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1523677104000},{"_id":"themes/next/source/images/avatar.png","hash":"2770709cdc4c68d2300af9f82082693816067a4c","modified":1478670399000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1523677104000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1523677104000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1523677104000},{"_id":"themes/next/source/js/src/fireworks.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":1530378023000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1523677104000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1523677104000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1523677104000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1523677104000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1523677104000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1523677104000},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"421bf176504fa509589bd8a48823f04d1d29c996","modified":1530368174000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1523677104000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1523677104000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1523677104000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1523677104000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1523677104000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1523677104000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1523677104000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1523677104000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1523677104000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1523677104000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1523677104000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1523677104000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1523677104000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1523677104000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1523677104000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1523677104000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1523677104000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1523677104000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1523677104000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1523677104000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1523677104000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1523677104000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1523677104000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1523677104000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1523677104000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1523677104000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1523677104000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1523677104000},{"_id":"source/rice/assets/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1474909978000},{"_id":"source/rice/assets/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1474909978000},{"_id":"source/rice/assets/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1474909978000},{"_id":"source/rice/assets/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1474909978000},{"_id":"source/rice/assets/js/jquery.min.js","hash":"276c87ff3e1e3155679c318938e74e5c1b76d809","modified":1474909978000},{"_id":"source/rice/js/lib/raphael-min.js","hash":"4eca4ab2292480e335bd1b6b5c9ad82da9b1c287","modified":1433814652000},{"_id":"source/rice/js/lib/jquery-1.11.1.min.js","hash":"7ed710bf2b3a08cee23950790208683b0346fb1c","modified":1433643362000},{"_id":"source/xiaomo/qixi/js/swiper-3.3.1.min.js","hash":"c19b19988eef3d767d2dd59a12e58603c56b0312","modified":1470368158000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1523677104000},{"_id":"source/rice/assets/css/images/overlay1.png","hash":"5cd80878bc91091e24afa27fc04d3e6eff16a1d9","modified":1474909978000},{"_id":"source/rice/assets/css/images/overlay3.svg","hash":"63896db41549b1d7532baa054ca306c0c56907b3","modified":1474909978000},{"_id":"source/rice/assets/css/images/overlay2.png","hash":"dafdf5c98330544648560caa3f0a8be6e12f20f8","modified":1474909978000},{"_id":"source/rice/assets/css/images/overlay4.svg","hash":"8a21d332a9ffba83926a4a34780057526fe748f4","modified":1474909978000},{"_id":"source/rice/assets/js/ie/PIE.htc","hash":"01f6ae411f6564921ce26dff192abb89335354b3","modified":1474909978000},{"_id":"source/rice/assets/js/ie/backgroundsize.min.htc","hash":"4c8ea4f264fcfb4fa2edb2cbdd9a088e5b9d034c","modified":1474909978000},{"_id":"source/rice/assets/js/ie/html5shiv.js","hash":"6ee35415750b51dd65a6521d1dd91aba3e2ae828","modified":1474909978000},{"_id":"source/rice/assets/js/ie/respond.min.js","hash":"8e786bcf921518f0c8c46d14a51235af2fb99926","modified":1474909978000},{"_id":"source/rice/assets/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1474909978000},{"_id":"source/rice/assets/sass/libs/_functions.scss","hash":"a1a1eef34dbcb3dd546c90cd202234f9b8289234","modified":1474909978000},{"_id":"source/rice/assets/sass/libs/_mixins.scss","hash":"60d8ca459aec9541a51475e06abec19e9dcf75d4","modified":1474909978000},{"_id":"source/rice/assets/sass/libs/_vars.scss","hash":"0c1f226584c3ae8dbfdf38451331e1e8e2b5de4c","modified":1474909978000},{"_id":"source/rice/assets/sass/libs/_skel.scss","hash":"1b692ac19e62f7519a8974535adcc9277d745b1b","modified":1474909978000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1523677104000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/.DS_Store","hash":"30a44978854be0be33836d1f885475a2a08dfcec","modified":1530370878000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1523677104000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1523677104000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1523677104000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1523677104000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1523677104000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1523677104000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1523677104000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1523677104000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1523677104000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1523677104000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1523677104000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1523677104000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1523677104000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1523677104000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1523677104000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1523677104000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1523677104000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c45bc6f24cb7e0e8d93e34e0f80daa380c6beb04","modified":1530370935000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1523677104000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1523677104000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1523677104000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1523677104000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1523677104000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1523677104000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1523677104000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1523677104000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1523677104000},{"_id":"source/rice/assets/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1474909978000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1523677104000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1523677104000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1523677104000},{"_id":"source/xiaomo/aini.mp3","hash":"e05bbfb9b4535599ccd566d8ad162942f2fe6a15","modified":1463735291000},{"_id":"public/sitemap.xml","hash":"ad2bc31fb9834f21d5b964505ca83ca3bb77d75b","modified":1531410254335},{"_id":"public/search.xml","hash":"1ad93d87f0ec45fb7911aafd5cf5d38ded4b4731","modified":1531410254415},{"_id":"public/404.html","hash":"791c607d3c4233c4735b6ac7f100b2bfb2ee6782","modified":1531410254497},{"_id":"public/categories/index.html","hash":"e3baf310b2fbb630def4ba207b32e9de3ae7ddb0","modified":1531410254497},{"_id":"public/tags/index.html","hash":"ae0a864470fc453d4d4d9200824e2c2b51a0e981","modified":1531410254497},{"_id":"public/about/index.html","hash":"c34498e6f7f765e30fbe33f2c951a5cc57da89f8","modified":1531410254497},{"_id":"public/2018/07/12/Mac下docker搭建hadoop集群/index.html","hash":"f55c31714884de196390ed36f16f8752be3b112d","modified":1531410254497},{"_id":"public/2018/07/07/Java8-常用内置函数接口笔记/index.html","hash":"82d2701516cd6ec7560403d3c0f9c24209c103eb","modified":1531410254497},{"_id":"public/2018/07/07/Java8-Lambda表达式笔记/index.html","hash":"4a5c2ed9a6ca3d0447b656aae5bccf98e8d391a8","modified":1531410254497},{"_id":"public/2018/07/06/Mybatis-Criteria简化查询/index.html","hash":"1dd62549d9793aabd2b4d5a36723cb6d3e943f4c","modified":1531410254498},{"_id":"public/2017/05/15/系统学习Spring-三-——Bean的高级装配/index.html","hash":"a9837b5279fc8bea4f8ee97cfcfa0ee56d6bb104","modified":1531410254498},{"_id":"public/2017/05/10/系统学习Spring（二）——装配Bean/index.html","hash":"a0062e711b4f266314ad790bf0e54a3bbd21c3d3","modified":1531410254498},{"_id":"public/2017/05/09/Spring初探（一）/index.html","hash":"ae1ae54127acc4a3ad8ff453b7840804dfa31870","modified":1531410254498},{"_id":"public/2017/04/18/userId分库，怎么通过其他字段查询/index.html","hash":"8c27ab5a469c25b1b77f180d7669d3c4cf53cccf","modified":1531410254498},{"_id":"public/2017/03/23/Java基于zxing生成二维码demo/index.html","hash":"f04ae20e192d16d62ed6bede9114075b60a00139","modified":1531410254498},{"_id":"public/2017/03/23/Java网易短信接入demo/index.html","hash":"6621cc751c78190d003a949e6e4c199ba9d8341f","modified":1531410254498},{"_id":"public/2017/03/11/Java使用websocket和WebRTC实现视频通话/index.html","hash":"f541a15f9057e8edd562c464e30ced6048f0fbbb","modified":1531410254498},{"_id":"public/2017/03/10/spring-ioc原理/index.html","hash":"08a527f4c40c49fa077fec9fa945ba166d9e930f","modified":1531410254498},{"_id":"public/2017/03/03/Volatile小结/index.html","hash":"5de70aa9cf1cdea39a285a8478a7c6492c9119ef","modified":1531410254498},{"_id":"public/2017/02/24/数据库系统分层优化/index.html","hash":"2a10db8c49f395b714e9ecb996f377b4fee4fdd3","modified":1531410254498},{"_id":"public/2017/03/02/为什么volatile不能保证原子性而Atomic可以？/index.html","hash":"87246e4e094688196363e1c2435852b599d42b99","modified":1531410254498},{"_id":"public/2017/02/18/58到家数据库30条军规解读/index.html","hash":"e8405b2925468f020067c36803ec678ea3a7a18d","modified":1531410254499},{"_id":"public/2017/02/20/希尔排序/index.html","hash":"4fabfdb439c9d50dab980f8685989ed414a4d3d2","modified":1531410254499},{"_id":"public/2017/02/18/apache-poi操作-适用于word-2007/index.html","hash":"9cd133ab0ef14519df79976d5785a4295b43eff4","modified":1531410254499},{"_id":"public/2017/02/18/时间复杂度和空间复杂度详解/index.html","hash":"18c4c9a5c8a07c4e09ce8bd0abcc653d38d5895f","modified":1531410254499},{"_id":"public/2017/02/18/2016年总结/index.html","hash":"8619fe5a04e45dc054ecca6a6e0c70b41d56de5b","modified":1531410254499},{"_id":"public/2017/02/18/jdk1-8的HashMap和ConcurrentHashMap/index.html","hash":"e4d8856e725161f3aee631e4a9984687d75ce8b4","modified":1531410254499},{"_id":"public/2017/02/18/Browser的通讯”/index.html","hash":"5d47c04e0fbbad45f2c56fde07af692db58d6a16","modified":1531410254499},{"_id":"public/2017/02/18/高级for循环使用remove-add-问题/index.html","hash":"9bbcc4a3f10761f75475b62843b97280a55defa7","modified":1531410254499},{"_id":"public/2017/02/18/HashMap面试题总结！/index.html","hash":"793ae6e457aaea5b7abe7d9a5ca4248baf1dc814","modified":1531410254499},{"_id":"public/2017/02/18/浅谈HashMap/index.html","hash":"6cb154689c2c16dbd2658062e136ba172deaa202","modified":1531410254499},{"_id":"public/2017/02/18/nginx-基本入门-至今为止见过最好的-nginx-入门文章，没有之一。/index.html","hash":"cff2fcd9eb403b4c41a832d19bdd4e59a40296e0","modified":1531410254499},{"_id":"public/2017/02/18/Java泛型总结/index.html","hash":"59fe91b6ee9ae08f78fff3cc596d5b9b86baa286","modified":1531410254499},{"_id":"public/2017/02/18/Java-8-最佳技巧/index.html","hash":"0cf48b4b3402369cb6d4b936855a79859d217a14","modified":1531410254499},{"_id":"public/2017/02/18/Logger级别/index.html","hash":"b085829b6210bf6ef3812011fc757089954deef6","modified":1531410254499},{"_id":"public/2017/02/18/Java接口是常量存放的最佳地点吗？/index.html","hash":"edc35b187c14f8afea6cdb4e57fc5e214b438381","modified":1531410254499},{"_id":"public/2017/02/18/Java反射学习总结（五）/index.html","hash":"a7f598ceadcc176183178753b4b8be2bf7cd9d79","modified":1531410254500},{"_id":"public/2017/02/18/Java反射学习总结（四）/index.html","hash":"af4e380e0a15731d80ec850af14d0d4c61fd2290","modified":1531410254500},{"_id":"public/2017/02/18/Java反射学习总结（三）/index.html","hash":"1dcf9b36a02ad54229ce12608c7bce69590485fc","modified":1531410254500},{"_id":"public/2017/02/18/Java反射学习总结（二）/index.html","hash":"2c11dc570c01af203bde222dd4ae33f29df26b23","modified":1531410254500},{"_id":"public/2017/02/18/Java反射学习总结（一/index.html","hash":"24e9fa5badca98d06fdad3f7192aa5d48c63f711","modified":1531410254500},{"_id":"public/2017/02/18/我们为什么要用Spring，SpringMVC/index.html","hash":"d5f337da4e73ffee5280d4c1301e9eb250d6e5c1","modified":1531410254500},{"_id":"public/2017/02/18/Java的静态-动态绑定/index.html","hash":"f8d5e93adf4408e0148f0b6902e1e80c1e3237f9","modified":1531410254500},{"_id":"public/2017/02/18/mysql-如何插入一列自增序号/index.html","hash":"84092456b83fd4a95160e76a2da7123bf3c860b7","modified":1531410254500},{"_id":"public/2017/02/18/关于Ajax的cache参数的测试/index.html","hash":"562416d464a408c910085e331b7897ec1430f1cf","modified":1531410254500},{"_id":"public/2017/02/18/JVM常量池及字符串-比较分析/index.html","hash":"25f1be98c8fe1db0dcc948ed284e2ae084d1c7d4","modified":1531410254500},{"_id":"public/2017/02/18/关于多线程的饥饿和公平/index.html","hash":"0df67f1261078323a161dd51b0db37d91ab77bab","modified":1531410254500},{"_id":"public/2017/02/18/实验插入b站h5播放器/index.html","hash":"0a0c12d2b74fe148f769a1acd5e5b85da82d0b4e","modified":1531410254500},{"_id":"public/2017/02/18/JVM虚拟机关于“不使用的对象手动赋值为null”的理解/index.html","hash":"5f5bf751581dda804ba67cbab4aff5d72110d8e2","modified":1531410254500},{"_id":"public/2017/02/18/黑车司机发车器Java版/index.html","hash":"529665a1546f7c4fcd2e6c11fd70dcec20e0afff","modified":1531410254500},{"_id":"public/2017/02/17/Hello-Hexo/index.html","hash":"17250dd4b269fcafa27e87db825c1794acf37846","modified":1531410254501},{"_id":"public/archives/index.html","hash":"bd16b92acde2d10500f06dfebfd5d7e43a106706","modified":1531410254501},{"_id":"public/archives/page/2/index.html","hash":"8c65c6e2c7807692f2a826b962567e2a48bec031","modified":1531410254501},{"_id":"public/archives/page/3/index.html","hash":"18f64c1420f73608569f8db573845965ce5cf42f","modified":1531410254501},{"_id":"public/archives/page/4/index.html","hash":"ca9ce147dff87ab2a565f6b776752bda74cf7aec","modified":1531410254501},{"_id":"public/archives/page/5/index.html","hash":"96212e866f52918301ed3eb531daaf6d7d17a769","modified":1531410254501},{"_id":"public/archives/2017/index.html","hash":"747fbebf812675cac037b118415c6c1156d114e5","modified":1531410254501},{"_id":"public/archives/2017/page/2/index.html","hash":"0e16a77449de317ed949cde01df8a0933f185252","modified":1531410254501},{"_id":"public/archives/2017/page/3/index.html","hash":"ab0814b1750bc24bd7c7101725c1ce1bd61fef0a","modified":1531410254501},{"_id":"public/archives/2017/page/4/index.html","hash":"690142cdb17df37d93b059ce7e827697686ed920","modified":1531410254501},{"_id":"public/archives/2017/page/5/index.html","hash":"522fcc77949cf55c36146735e73e7b348f657225","modified":1531410254502},{"_id":"public/archives/2017/02/index.html","hash":"b3063ac82523771030f03133a4732bf1eda70dae","modified":1531410254502},{"_id":"public/archives/2017/02/page/2/index.html","hash":"74bd1346e43ef73219032792d20aa6ecffa8c7a1","modified":1531410254502},{"_id":"public/archives/2017/02/page/3/index.html","hash":"d482cfed3aadf7d188bcd4a93c7f750947b33ff2","modified":1531410254502},{"_id":"public/archives/2017/02/page/4/index.html","hash":"80d392654e1926f4ff6323e68ac5287dcd00351d","modified":1531410254502},{"_id":"public/archives/2017/03/index.html","hash":"d71030f17f4c04355a919287c835cca9c81cfdbc","modified":1531410254502},{"_id":"public/archives/2017/04/index.html","hash":"2f326d54aec11773d5abba8d91569c1f4e3d99b3","modified":1531410254502},{"_id":"public/archives/2017/05/index.html","hash":"50f0f7ba864997e93f5e1796b2e55ec0ff012faa","modified":1531410254502},{"_id":"public/archives/2018/index.html","hash":"493cdef8dd397cc7a4e5a9cdbdd6c03c13320b63","modified":1531410254502},{"_id":"public/archives/2018/07/index.html","hash":"e22552e801e48e1ec6722a84dc01ea0711447f4a","modified":1531410254502},{"_id":"public/categories/程序人生/index.html","hash":"1dd5b0fe282b1fc93d4809277f8cc621084ef291","modified":1531410254502},{"_id":"public/categories/数据库那点事/index.html","hash":"256a36c47c0c629751e777c9e12ca48ffebd884c","modified":1531410254502},{"_id":"public/categories/Java二三事/index.html","hash":"1fc9bdfd164c37130b994278648420f98974812b","modified":1531410254502},{"_id":"public/categories/Java二三事/page/2/index.html","hash":"29c050c412065aacdbd17afbd4df79d0c43558f6","modified":1531410254502},{"_id":"public/categories/Java二三事/page/3/index.html","hash":"774ae1fc3ba2ae5aee90a0b83843709d7fe15def","modified":1531410254502},{"_id":"public/categories/Java二三事/page/4/index.html","hash":"a81e032f82f9c980532985dffc600bf391f23239","modified":1531410254503},{"_id":"public/categories/蜜汁开始/index.html","hash":"679a22ca20b758a64e7c8264223bc4ab4ab7bca5","modified":1531410254503},{"_id":"public/categories/移动开发/index.html","hash":"f3ca8ab947a4a81ffceeb059be98c7a0dcde83ec","modified":1531410254503},{"_id":"public/categories/大数据/index.html","hash":"14f8fc245ef944fa9d6a22be148087fa9090eb32","modified":1531410254503},{"_id":"public/categories/WebWebWeb/index.html","hash":"cea8ad3e7317716d91630bbe1e78d833f171b5d0","modified":1531410254503},{"_id":"public/categories/博客/index.html","hash":"56615a6f43d21c35d5eb4cbfde51805a30618bca","modified":1531410254503},{"_id":"public/categories/算法/index.html","hash":"4adb26c6cfc05e02a3298beb9cb684eb129e70d1","modified":1531410254503},{"_id":"public/index.html","hash":"f6c3b7d4abebe354b69d35b78c8806afdb0465a7","modified":1531410254503},{"_id":"public/page/2/index.html","hash":"540781af7f90a7d68a6f2577963d6133eda58b20","modified":1531410254503},{"_id":"public/page/3/index.html","hash":"7bdadfacaf8b047e07eaa63ea58fcd9bb0e85216","modified":1531410254503},{"_id":"public/page/4/index.html","hash":"737b56ddb2ca39a4e0f02285731d2406d67c96f1","modified":1531410254503},{"_id":"public/page/5/index.html","hash":"123fb74b57b381f3d2e875db4fef3a2d04adeb36","modified":1531410254503},{"_id":"public/tags/总结/index.html","hash":"d574d58be5cc16e70887208059de4b008d00f77b","modified":1531410254503},{"_id":"public/tags/军规/index.html","hash":"8d507010af1cf564f7fe5e8066a14891a4f81945","modified":1531410254503},{"_id":"public/tags/Java/index.html","hash":"3821ab0124470ba4d6231f187de2bf78840570d7","modified":1531410254503},{"_id":"public/tags/Java/page/2/index.html","hash":"ec9a0df9a200bd7ef6b4c0793bd8192e09f349d4","modified":1531410254503},{"_id":"public/tags/字符串/index.html","hash":"953f9928fe50fbb481998ba23c52bd14083afdbb","modified":1531410254503},{"_id":"public/tags/常量池/index.html","hash":"1d2982591355e404ca670e27a6cefe0ef5902175","modified":1531410254504},{"_id":"public/tags/迁移/index.html","hash":"c660d779d122d22a3cf8b3efff75d573aaa1a580","modified":1531410254504},{"_id":"public/tags/Cordova/index.html","hash":"cc457d0f7f5d4649d21b221e3e0d9fdd45679376","modified":1531410254504},{"_id":"public/tags/Jvm/index.html","hash":"90266f6d9213feaf960d26948ce229e97dd1a891","modified":1531410254504},{"_id":"public/tags/对象/index.html","hash":"ecd1d1489cac6d0c295e15bf8cbd0fb89f55b5a6","modified":1531410254504},{"_id":"public/tags/集合/index.html","hash":"288466fef3476447163490bcebdbcf7394bae957","modified":1531410254504},{"_id":"public/tags/WebSocket/index.html","hash":"e16edd4f37bffeddb46cc1010e7058f01e0d8c6b","modified":1531410254504},{"_id":"public/tags/WebRTC/index.html","hash":"d91ee8b4665bb2913a61d99e81db118e500c222c","modified":1531410254504},{"_id":"public/tags/反射/index.html","hash":"810ac04e3938c1e23be1064fba9707277f8aa0d3","modified":1531410254504},{"_id":"public/tags/二维码/index.html","hash":"46e95f8ab6a5a3e609bd67756639d445faeb2942","modified":1531410254504},{"_id":"public/tags/接口/index.html","hash":"f016b099fe74cc176777c08fe22ef82e28848c87","modified":1531410254504},{"_id":"public/tags/常量/index.html","hash":"258d9104b80abd8782e5b61d8a07e1a81484a46f","modified":1531410254504},{"_id":"public/tags/泛型/index.html","hash":"da6dc914d544cf2346bec2165f801dd747f2f5c0","modified":1531410254504},{"_id":"public/tags/静态动态绑定/index.html","hash":"d7b52a06a0e22faadbf8f33f16489d3679ff31e1","modified":1531410254504},{"_id":"public/tags/Logger/index.html","hash":"d47cb7822eb013dbca500a49562ee86c605a8eb9","modified":1531410254504},{"_id":"public/tags/Docker/index.html","hash":"77164034d2db82b6dd38d6e2c44dbf90c0968e9d","modified":1531410254504},{"_id":"public/tags/Hadoop/index.html","hash":"ec8b2326b6b6b73cef27621ab0411659e2832728","modified":1531410254504},{"_id":"public/tags/集群搭建/index.html","hash":"a8f7dcc6114ea06ad66bd9f021418e7f461125e3","modified":1531410254504},{"_id":"public/tags/Spring/index.html","hash":"15ef2e216478a40fb4d7ad577069ce86e7c5025f","modified":1531410254504},{"_id":"public/tags/框架/index.html","hash":"77dba7e98e2ba25d3201bb48257ad4df263754b7","modified":1531410254505},{"_id":"public/tags/mysql/index.html","hash":"6ceaee51b4a330dac3fd0136d44f30919dc0b389","modified":1531410254505},{"_id":"public/tags/自增序号/index.html","hash":"3b8440e22808fb39fb510c394ba3546734650a33","modified":1531410254505},{"_id":"public/tags/nginx/index.html","hash":"c93834a3359b211d7d5e74957ad10d4aa8d1fb18","modified":1531410254505},{"_id":"public/tags/分库/index.html","hash":"85a87c13c25f426c54eb5f7269d88daf4a979002","modified":1531410254505},{"_id":"public/tags/JavaScript/index.html","hash":"255a9db7c4c017c58e47ec49d4082562f9727ad2","modified":1531410254505},{"_id":"public/tags/Ajax/index.html","hash":"42ace385a51afe22f34599f0ef4e2339d9e52780","modified":1531410254505},{"_id":"public/tags/cache/index.html","hash":"f5b83ce65f96350d1556c77c2334a8ad3e9ff66e","modified":1531410254505},{"_id":"public/tags/小插件/index.html","hash":"c15d608d9b879bb090af923b3ea0ad15c1a639c5","modified":1531410254505},{"_id":"public/tags/排序/index.html","hash":"588881fdaf4fecccc35a19ca0b151153f1b7c612","modified":1531410254505},{"_id":"public/tags/多线程/index.html","hash":"ffc74abad153de45bee4e50e589dfd85fa33c825","modified":1531410254505},{"_id":"public/tags/饥饿/index.html","hash":"0c71875231b99256a4973579a6f8cd1a571472b1","modified":1531410254505},{"_id":"public/tags/公平/index.html","hash":"4c7d4c8ac15702a3fa17119c26da70ea9eeeebde","modified":1531410254505},{"_id":"public/tags/优化/index.html","hash":"0f001a1a2bd55d2e15599fcca1f444bf07d3bd8c","modified":1531410254505},{"_id":"public/tags/时间复杂度/index.html","hash":"638a2e21c5d5b08f9df258315c55e5820aad04c0","modified":1531410254505},{"_id":"public/tags/空间复杂度/index.html","hash":"d50fe10c835826d412d800264ba8687e930a2d03","modified":1531410254505},{"_id":"public/tags/黑车/index.html","hash":"1cf0587542a775e4cd2e73ed1d9963655c47f7bd","modified":1531410254505},{"_id":"public/tags/种子/index.html","hash":"7deec8f4abb8ecb648ce990bf7604bfd1f2a38b1","modified":1531410254505},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531410254505},{"_id":"public/rice/index.html","hash":"0b42b8857a06086de3c88c1a3a6463b2564bce53","modified":1531410254528},{"_id":"public/rice/map.html","hash":"f44d45f2592801292ca952a63ceff800f3ec5938","modified":1531410254528},{"_id":"public/xiaomo/index.html","hash":"c7790d84aace97beac9aba74793b89c65f83b575","modified":1531410254528},{"_id":"public/xiaomo/timg.jpeg","hash":"b1deb75beca05bde46ef94762c5aa27a01f7c72a","modified":1531410254529},{"_id":"public/xiaomo/index3.html","hash":"3b4636fd86b9193c33e5846f04ae4ed810e25649","modified":1531410254529},{"_id":"public/rice/images/heilongjiang.jpg","hash":"648cab27fca38922572a8203a171d3d92fce45d3","modified":1531410254529},{"_id":"public/rice/images/jilin.jpg","hash":"d0ac1430e53ea7a852429373192365b893cf54e7","modified":1531410254530},{"_id":"public/rice/images/pic01.jpg","hash":"dfa04cf8c333f7d14cd9154f2aade06071c6114d","modified":1531410254530},{"_id":"public/rice/images/liaoning.jpg","hash":"3da64b6f787ff4d6fa8bbdadf7e7538acd07992e","modified":1531410254530},{"_id":"public/rice/images/pic05.jpg","hash":"20482e66b90a9a987c041b9176d686d513ae8b36","modified":1531410254530},{"_id":"public/rice/images/pic04.jpg","hash":"cf891c5b11579f8c56bce9746f30b120e28088a4","modified":1531410254530},{"_id":"public/rice/images/pic02.jpg","hash":"fd62f8dc5b54ca0f7612bcbf2a17435539e972cb","modified":1531410254530},{"_id":"public/rice/images/pic03.jpg","hash":"e6941ff7655039a354add64ceec76131a95951a4","modified":1531410254530},{"_id":"public/rice/js/map-min.js","hash":"37a8bfe180bd8cd5f47da927a77163f804a537eb","modified":1531410254530},{"_id":"public/rice/images/pic06.jpg","hash":"2e258ce5f625e0d002ac224e8200a7df9023fe6d","modified":1531410254530},{"_id":"public/xiaomo/css/default.css","hash":"2c66040bc38ae8758a6a4bdb148da3e81c179c7c","modified":1531410254530},{"_id":"public/xiaomo/js/functions.js","hash":"a447ebcb001bd7c7f528528975c599800a409fe7","modified":1531410254530},{"_id":"public/xiaomo/js/jscex-async-powerpack.min.js","hash":"7d0a95300dd38e1d3c2e68103404da3303fd3c64","modified":1531410254530},{"_id":"public/xiaomo/js/jscex-builderbase.min.js","hash":"9858a96b5ce4020ea0c53f9c60c239ea5610f78d","modified":1531410254530},{"_id":"public/xiaomo/js/jscex-async.min.js","hash":"2ac1dd67892e4cccb81c8b95e472c16776ab47d2","modified":1531410254530},{"_id":"public/xiaomo/js/jscex-jit.js","hash":"767c3f3671cbfa25654c7d1545076acae51c2e38","modified":1531410254530},{"_id":"public/xiaomo/js/jscex.min.js","hash":"1354a4edbab1e2d20d930357b9cf97886de3107c","modified":1531410254530},{"_id":"public/xiaomo/js/jscex-parser.js","hash":"8b02e6a02a0a2b4a08b92c687f7ad6a5adb39441","modified":1531410254530},{"_id":"public/xiaomo/qixi/index.html","hash":"94320b24a5327f3c544ea66390dda79feae59b5e","modified":1531410254530},{"_id":"public/xiaomo/js/love.js","hash":"9c0a447e8f7ad25503016ec4e22af393d5e09bda","modified":1531410254530},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1531410254530},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1531410254530},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1531410254530},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1531410254530},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1531410254530},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1531410254531},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1531410254531},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1531410254531},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1531410254531},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1531410254531},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1531410254531},{"_id":"public/images/favicon.ico","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1531410254531},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531410254531},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531410254531},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1531410254531},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1531410254531},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1531410254531},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1531410254531},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1531410254531},{"_id":"public/rice/assets/css/ie9.css","hash":"dcca6c7acdb20a19b6c7d7b48afae4c1a5813609","modified":1531410254531},{"_id":"public/rice/assets/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1531410254531},{"_id":"public/rice/assets/css/ie8.css","hash":"c91b4a99b2bc0e2b8ce7e929394dfe80bdf58c8b","modified":1531410254531},{"_id":"public/rice/assets/js/jquery.scrolly.min.js","hash":"91ee4deda8189fde4432a8f58cfe3b5f2aed9dcf","modified":1531410254531},{"_id":"public/rice/assets/js/main.js","hash":"1e7d376488f18758f3e9e565a2ea6dbe6db05452","modified":1531410254531},{"_id":"public/rice/assets/css/main.css","hash":"71a32dbb0af10c30af15cc0b4e006b0e5af41e7c","modified":1531410254531},{"_id":"public/rice/assets/sass/ie8.scss","hash":"6391ecc25e69a3bbc5e4821e6e688cc4cebe7aa1","modified":1531410254531},{"_id":"public/rice/assets/js/skel.min.js","hash":"763a8fc7504139cee50c453f87b5aa204965463a","modified":1531410254532},{"_id":"public/rice/assets/js/util.js","hash":"e32e958f74bd5edc4e1fbdd9fa6c30425d3c7954","modified":1531410254532},{"_id":"public/rice/assets/sass/ie9.scss","hash":"aa01048ef04a95b61730e46100a582e809e080cd","modified":1531410254532},{"_id":"public/rice/assets/sass/main.scss","hash":"68f75013d5b1b5f7820bd0190300eaa49f1de1e2","modified":1531410254532},{"_id":"public/rice/js/res/chinaMapConfig.js","hash":"661da892921ba246e365eb36f2a3d645c09339dd","modified":1531410254532},{"_id":"public/xiaomo/qixi/css/iconfont.eot","hash":"88e779e37baedeebc198cacf078d9ee67c8147d1","modified":1531410254532},{"_id":"public/xiaomo/qixi/css/iconfont.svg","hash":"5a208cd7c76ea52724c429fd182dcc54828a70c9","modified":1531410254532},{"_id":"public/xiaomo/qixi/css/mobile-reset.css","hash":"e58d9e0cfa7a083e68207961cba4158ad7947011","modified":1531410254532},{"_id":"public/xiaomo/qixi/css/iconfont.woff","hash":"c67db8c74f16aa080ec004c9842158805a7328ec","modified":1531410254532},{"_id":"public/xiaomo/qixi/css/iconfont.ttf","hash":"23d1dc4641b55a9d0ec79d6eb53aca870dd4959c","modified":1531410254532},{"_id":"public/xiaomo/qixi/css/animate.min.css","hash":"8411c1c0418521c96d07bcca0d9dbce7e832ccc9","modified":1531410254532},{"_id":"public/xiaomo/qixi/css/style.css","hash":"f7a12f3bab9beee0be2fa869336640c482d7b092","modified":1531410254532},{"_id":"public/xiaomo/qixi/images/rw1.png","hash":"8ed4ac818f7ea720a3f03275170f380c39eff9a0","modified":1531410254532},{"_id":"public/xiaomo/qixi/css/swiper-3.3.1.min.css","hash":"1d802f842351c7c2b53585641e4b288050845352","modified":1531410254532},{"_id":"public/xiaomo/qixi/images/rw2.png","hash":"9c4a865bae8cf98b078e2c84c1856291ba9c61f3","modified":1531410254532},{"_id":"public/xiaomo/qixi/images/xn1.png","hash":"122e8f6746491379f376df61d8b4b391745d74d0","modified":1531410254532},{"_id":"public/xiaomo/qixi/images/xn3.png","hash":"500e5b39af53086c96f770125a3a432a09921b0f","modified":1531410254532},{"_id":"public/xiaomo/qixi/images/xn2.png","hash":"91cca83d0f95705054fe5c693d05b0bdc4a5dc64","modified":1531410254532},{"_id":"public/xiaomo/qixi/images/xn5.png","hash":"7b99cdf9b0f7bb7af14809745778802f49b17a92","modified":1531410254532},{"_id":"public/xiaomo/qixi/images/xn4.png","hash":"bb8aecfe3c50ef00309a8d8f846d1a46dfff8ada","modified":1531410254532},{"_id":"public/xiaomo/qixi/images/xx1.png","hash":"6b9e701d576b7ea7c5a481dec7608c4497b35740","modified":1531410254532},{"_id":"public/xiaomo/qixi/images/xn6.png","hash":"b250eb4a1ede6f23bd46ae0d3cb14f7154b4b3ed","modified":1531410254532},{"_id":"public/xiaomo/qixi/images/yue.png","hash":"a1cc67de6af72a70d5653064c20c2d8619f8d8eb","modified":1531410254532},{"_id":"public/xiaomo/qixi/images/xx2.png","hash":"18c6b751194413b105afd6ce33a83b6da47fa166","modified":1531410254532},{"_id":"public/xiaomo/qixi/js/base.js","hash":"506b837dc26132d21458605c81b4aac7b7f182f4","modified":1531410254532},{"_id":"public/xiaomo/qixi/js/swiper.animate1.0.2.min.js","hash":"c4d0a285b35233a6a68702f5e0f281ee4464f363","modified":1531410254533},{"_id":"public/xiaomo/qixi/js/zepto.min.js","hash":"49a1d0559ea2ef3d392d67250c7d815a45081d1c","modified":1531410254533},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1531410254533},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1531410254533},{"_id":"public/rice/assets/css/images/overlay1.png","hash":"5cd80878bc91091e24afa27fc04d3e6eff16a1d9","modified":1531410254533},{"_id":"public/rice/assets/css/images/overlay3.svg","hash":"63896db41549b1d7532baa054ca306c0c56907b3","modified":1531410254533},{"_id":"public/rice/assets/css/images/overlay2.png","hash":"dafdf5c98330544648560caa3f0a8be6e12f20f8","modified":1531410254533},{"_id":"public/rice/assets/css/images/overlay4.svg","hash":"8a21d332a9ffba83926a4a34780057526fe748f4","modified":1531410254533},{"_id":"public/rice/assets/js/ie/PIE.htc","hash":"01f6ae411f6564921ce26dff192abb89335354b3","modified":1531410254533},{"_id":"public/rice/assets/js/ie/backgroundsize.min.htc","hash":"4c8ea4f264fcfb4fa2edb2cbdd9a088e5b9d034c","modified":1531410254533},{"_id":"public/rice/assets/js/ie/html5shiv.js","hash":"6ee35415750b51dd65a6521d1dd91aba3e2ae828","modified":1531410254533},{"_id":"public/rice/assets/js/ie/respond.min.js","hash":"8e786bcf921518f0c8c46d14a51235af2fb99926","modified":1531410254533},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1531410254533},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1531410254533},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1531410254533},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1531410254533},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1531410254533},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1531410254533},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1531410254533},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1531410254533},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1531410254533},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1531410254533},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1531410254533},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1531410254533},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1531410254533},{"_id":"public/2018/07/12/Mac下docker搭建hadoop集群/1.png","hash":"ef7cf662fac0e4e349eb0b666b57a849e2f62347","modified":1531410254534},{"_id":"public/assets/js/APlayer.min.js","hash":"b35bcf96b0e9c4045320f26d2c4af2946554cd54","modified":1531410254534},{"_id":"public/rice/images/header.jpg","hash":"71f5b603cd177cec190f077c097ec4b610dd28ee","modified":1531410255274},{"_id":"public/xiaomo/js/jquery.min.js","hash":"1327f754ff87d26bced46568543207e9df190aaa","modified":1531410255278},{"_id":"public/rice/assets/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1531410255289},{"_id":"public/rice/assets/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1531410255289},{"_id":"public/rice/assets/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1531410255290},{"_id":"public/rice/assets/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1531410255290},{"_id":"public/rice/assets/js/jquery.min.js","hash":"276c87ff3e1e3155679c318938e74e5c1b76d809","modified":1531410255290},{"_id":"public/rice/js/lib/raphael-min.js","hash":"4eca4ab2292480e335bd1b6b5c9ad82da9b1c287","modified":1531410255290},{"_id":"public/rice/js/lib/jquery-1.11.1.min.js","hash":"7ed710bf2b3a08cee23950790208683b0346fb1c","modified":1531410255290},{"_id":"public/xiaomo/qixi/js/swiper-3.3.1.min.js","hash":"c19b19988eef3d767d2dd59a12e58603c56b0312","modified":1531410255290},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1531410255291},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1531410255291},{"_id":"public/assets/js/DPlayer.min.js","hash":"820d1c896f4a6e37a712cb9645b3d792aa96a92f","modified":1531410255291},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1531410255302},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1531410255302},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1531410255302},{"_id":"public/js/src/fireworks.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":1531410255302},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1531410255302},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1531410255302},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1531410255313},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1531410255313},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1531410255313},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1531410255313},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1531410255313},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1531410255313},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1531410255313},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1531410255313},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1531410255314},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1531410255314},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1531410255314},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1531410255314},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1531410255314},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1531410255314},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1531410255314},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1531410255314},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1531410255314},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1531410255314},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1531410255314},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1531410255314},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1531410255315},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1531410255315},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1531410255315},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1531410255315},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1531410255315},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1531410255315},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1531410255315},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1531410255315},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1531410255315},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1531410255315},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1531410255315},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1531410255315},{"_id":"public/css/main.css","hash":"40747259d227ea1193e4d43de70fdfb41083a8a9","modified":1531410255315},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1531410255315},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1531410255315},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1531410255315},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1531410255315},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1531410255315},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1531410255316},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1531410255316},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1531410255316},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1531410255316},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1531410255316},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1531410255316},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1531410255316},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1531410255316},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1531410255316},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1531410255316},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1531410255316},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1531410255316},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1531410255316},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1531410255316},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1531410255316},{"_id":"public/images/avatar.png","hash":"2770709cdc4c68d2300af9f82082693816067a4c","modified":1531410255317},{"_id":"public/images/wechatpay.jpg","hash":"421bf176504fa509589bd8a48823f04d1d29c996","modified":1531410255317},{"_id":"public/rice/assets/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1531410255317},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1531410255317},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1531410255317},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1531410255317},{"_id":"public/rice/assets/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1531410255337},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1531410255346},{"_id":"public/xiaomo/aini.mp3","hash":"e05bbfb9b4535599ccd566d8ad162942f2fe6a15","modified":1531410255487}],"Category":[{"name":"程序人生","_id":"cjjiq3ke10004rhsova8t9kw4"},{"name":"数据库那点事","_id":"cjjiq3ked000brhsotkl0haog"},{"name":"Java二三事","_id":"cjjiq3kej000hrhsokvguzxai"},{"name":"蜜汁开始","_id":"cjjiq3kel000nrhsoastu2ddf"},{"name":"移动开发","_id":"cjjiq3keo000vrhsoi1o5lk8g"},{"name":"大数据","_id":"cjjiq3kfd0020rhsoou3p7oc3"},{"name":"WebWebWeb","_id":"cjjiq3kft002prhsokjuhu0uf"},{"name":"博客","_id":"cjjiq3kg50037rhsovi3o62mb"},{"name":"算法","_id":"cjjiq3kg8003hrhsoobxbc5rm"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n<style type=\"text/css\">\n\t.article-header {\n\t\tpadding: 0;\n\t\tpadding-top: 26px;\n\t\tborder-left: none;\n\t\ttext-align: center;\n\t}\n\t.article-header:hover {\n\t\tborder-left: none;\n\t}\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.article-meta {\n\t\tdisplay: none;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.ds-meta {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n\t#container .article-info-post.article-info {\n  \tdisplay: none;\n  \t}\n\t#container .article .article-title {\n\tpadding: 0;\n\t}\n</style>\n---\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n<style type=\"text/css\">\n\t.article-header {\n\t\tpadding: 0;\n\t\tpadding-top: 26px;\n\t\tborder-left: none;\n\t\ttext-align: center;\n\t}\n\t.article-header:hover {\n\t\tborder-left: none;\n\t}\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.article-meta {\n\t\tdisplay: none;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.ds-meta {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n\t#container .article-info-post.article-info {\n  \tdisplay: none;\n  \t}\n\t#container .article .article-title {\n\tpadding: 0;\n\t}\n</style>\n---\n","date":"2018-07-05T16:50:07.000Z","updated":"2017-02-17T10:18:25.000Z","path":"/404.html","layout":"page","_id":"cjjiq3kdx0001rhsoedx8qykg","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p><script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script></p>\n<p><style type=\"text/css\"><br>    .article-header {<br>        padding: 0;<br>        padding-top: 26px;<br>        border-left: none;<br>        text-align: center;<br>    }<br>    .article-header:hover {<br>        border-left: none;<br>    }<br>    .article-title {<br>        font-size: 2.1em;<br>    }<br>    strong a {<br>        color: #747474;<br>    }<br>    .article-meta {<br>        display: none;<br>    }<br>    .share {<br>        display: none;<br>    }<br>    .ds-meta {<br>        display: none;<br>    }<br>    .player {<br>        margin-left: -10px;<br>    }<br>    .sign {<br>        text-align: right;<br>        font-style: italic;<br>    }</p>\n<pre><code>  #page-visit {\n    display: none;\n}\n.center {\n    text-align: center;\n    height: 2.5em;\n    font-weight: bold;\n}\n.article-entry hr {\n    margin: 0;\n}\n.pic {\n    text-align: center;\n    margin: 0;\n}\n.pic br {\n      display: none;\n  }\n#container .article-info-post.article-info {\n  display: none;\n  }\n#container .article .article-title {\npadding: 0;\n}\n</code></pre><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></style></p>","excerpt":"","more":"<p><script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script></p>\n<p><style type=\"text/css\"><br>    .article-header {<br>        padding: 0;<br>        padding-top: 26px;<br>        border-left: none;<br>        text-align: center;<br>    }<br>    .article-header:hover {<br>        border-left: none;<br>    }<br>    .article-title {<br>        font-size: 2.1em;<br>    }<br>    strong a {<br>        color: #747474;<br>    }<br>    .article-meta {<br>        display: none;<br>    }<br>    .share {<br>        display: none;<br>    }<br>    .ds-meta {<br>        display: none;<br>    }<br>    .player {<br>        margin-left: -10px;<br>    }<br>    .sign {<br>        text-align: right;<br>        font-style: italic;<br>    }</p>\n<pre><code>  #page-visit {\n    display: none;\n}\n.center {\n    text-align: center;\n    height: 2.5em;\n    font-weight: bold;\n}\n.article-entry hr {\n    margin: 0;\n}\n.pic {\n    text-align: center;\n    margin: 0;\n}\n.pic br {\n      display: none;\n  }\n#container .article-info-post.article-info {\n  display: none;\n  }\n#container .article .article-title {\npadding: 0;\n}\n</code></pre><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></style></p>"},{"title":"分类","date":"2017-02-17T09:16:25.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-02-17 17:16:25\n---\n","updated":"2018-06-30T13:32:54.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjjiq3kdz0003rhsob89xcfjj","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script>","excerpt":"","more":""},{"title":"tags","date":"2017-02-17T09:16:25.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-17 17:16:25\n---\n","updated":"2017-02-17T09:16:25.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjjiq3ke60007rhsowtvwq8yx","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script>","excerpt":"","more":""},{"title":"不以物喜，不以己悲","date":"2017-02-17T09:17:47.000Z","comments":0,"_content":"李智，90后\n<br>\nJava工程师一枚，目前在厦门\n<br>\n**专业技能** <br>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟悉Java , 了解C、Python、JavaScript、HTML、CSS\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟悉Java编程，有良好的算法和编码能力，熟悉面向对象编程         \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟悉Mysql数据库以及Memcache缓存数据库开发技术               \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;熟练掌握JSP,Servlet,等Web开发技术 \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;熟悉Tomcat、JavaWeb, JDBC, 熟悉Http协议,并了解Webservice，Websocket服务器端技术\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 掌握Solr集群搭建及SolrJ集群版的Java接口应用           \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟练掌握Javascript,jQuery，Ajax并了解Angularjs等前台开发技术。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  能熟练运用Html、Css等技术设计网页、了解Bootstrap等前端框架技术。 \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 能熟练地在微信公众平台上开发微信各种接口，有过第三方支付的经验    \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  熟练运用Mybatis、Spring、Springmvc、Struts2 、Hibernate，Quartz等开源框架，能熟练运用MVC设计模式。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟练操作Linux操作系统  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟练使用IEDA、Eclipse、Svn、Git、Maven、Ant项目管理和项目构建工具。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 了解集群下的并发解决方案，支持(HA)高可用(采用Nginx，Zookeeper)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 了解Freemark等静态化页面的技术\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 会采用分布式缓存解决数据库压力    \n<br>\n**业余兴趣** <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•厨师八级（自认）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;精通煎炒烹炸闷溜熬炖\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  •业余篮球爱好者\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无兄弟，不篮球\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•夜跑爱好者\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跑步中思考，跑步告诉我什么是努力的极限<br><br>\n**项目经验**<br>\n项目名称： ABB门禁系统\n开发环境： IDEA、MacOs、Tomcat、JDK、Mysql\n主要技术： qoodxoo+webrtc+websocket+xmpp等   \n责任描述： 基于webrtc框架负责websocket通信模块，与移动端沟通协作，完成功能开发后期的功能迭代，以及性能的提升（安全性，延迟性）\n\n项目名称：易源网\n开发环境： IDEA、MacOs、Tomcat、JDK、Mysql\n主要技术： Springmvc+Spring+Mybatis+Quartz+Ant +Solr + memchache + Nginx等   \n责任描述：该项目的活动专题,资讯专题;项目招标部分的招标消息，招标澄清;后期测试,处理Bug并执行回归测试等\n\n项目名称：海晟网\n开发环境： IDEA、MacOs、Tomcat、JDK、Mysql\n主要技术： Springmvc+Spring+Mybatis+Quartz+Ant +Solr + memchache + Nginx等   \n责任描述：网站整体的bug修改,支付宝支付，微信支付，中国银联支付，微信端分销系统,独立完成基于cordova开发完成的app，包括首页,搜索,商品,订单,评价,购买及第三方支付等功能\n\n项目名称： 华艺秋水商城\n开发环境： IDEA、MacOs、Tomcat、JDK、Mysql\n主要技术： Springmvc+Spring+Mybatis+Quartz+Ant +Solr + memchache + Nginx等   \n责任描述：网站的风格变化,商品货源的添加，定价规则优化, 商品的上架，商品列表页面、商品详情页面的展示和商品购买整改,支付汇率问题，以及网站整体的bug整改。\n\n项目名称：企业级API接口开发\n开发环境： IDEA、Centos、Tomcat、JDK、Mysql\n主要技术： Springmvc+Spring+Mybatis+Maven+Redis+ memchache 等   \n责任描述：负责项目中公司业务的接口开发。搭建redis服务器集群、编写redis集群版Java接口以及使用java的MD5、3DES等加密,负责编写接口开发文档 、以及客户使用接口的问题解答   \n\n微信订阅号(微信号:girlstosky)\n主要技术： Springmvc+Spring+Mybatis+Maven等  \n涉及模块:独立开发,目前简单封装了所有与微信服务器交互的消息,并且接入了第三方图灵机器人,支持消息推送（主动/被动）,部分功能由于接口权限不足并未展示<br><br>\n<hr><br>\n\n\n\n\n\n{% aplayer \"恋\" \"新垣结衣\" \"http://sc1.111ttt.com/2016/5/11/05/204051028075.mp3\" \"autoplay\" %}\n{% dplayer \"url=http://devtest.qiniudn.com/若能绽放光芒.mp4\" \"api=http://dplayer.daoapp.io\" \"pic=http://devtest.qiniudn.com/若能绽放光芒.png\" \"id=9E2E3368B56CDBB4\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %}\n    ","source":"about/index.md","raw":"---\ntitle: 不以物喜，不以己悲\ndate: 2017-02-17 17:17:47\ncomments: false\n---\n李智，90后\n<br>\nJava工程师一枚，目前在厦门\n<br>\n**专业技能** <br>\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟悉Java , 了解C、Python、JavaScript、HTML、CSS\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟悉Java编程，有良好的算法和编码能力，熟悉面向对象编程         \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟悉Mysql数据库以及Memcache缓存数据库开发技术               \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;熟练掌握JSP,Servlet,等Web开发技术 \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;熟悉Tomcat、JavaWeb, JDBC, 熟悉Http协议,并了解Webservice，Websocket服务器端技术\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 掌握Solr集群搭建及SolrJ集群版的Java接口应用           \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟练掌握Javascript,jQuery，Ajax并了解Angularjs等前台开发技术。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  能熟练运用Html、Css等技术设计网页、了解Bootstrap等前端框架技术。 \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 能熟练地在微信公众平台上开发微信各种接口，有过第三方支付的经验    \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  熟练运用Mybatis、Spring、Springmvc、Struts2 、Hibernate，Quartz等开源框架，能熟练运用MVC设计模式。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟练操作Linux操作系统  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟练使用IEDA、Eclipse、Svn、Git、Maven、Ant项目管理和项目构建工具。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 了解集群下的并发解决方案，支持(HA)高可用(采用Nginx，Zookeeper)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 了解Freemark等静态化页面的技术\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 会采用分布式缓存解决数据库压力    \n<br>\n**业余兴趣** <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•厨师八级（自认）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;精通煎炒烹炸闷溜熬炖\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  •业余篮球爱好者\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无兄弟，不篮球\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•夜跑爱好者\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跑步中思考，跑步告诉我什么是努力的极限<br><br>\n**项目经验**<br>\n项目名称： ABB门禁系统\n开发环境： IDEA、MacOs、Tomcat、JDK、Mysql\n主要技术： qoodxoo+webrtc+websocket+xmpp等   \n责任描述： 基于webrtc框架负责websocket通信模块，与移动端沟通协作，完成功能开发后期的功能迭代，以及性能的提升（安全性，延迟性）\n\n项目名称：易源网\n开发环境： IDEA、MacOs、Tomcat、JDK、Mysql\n主要技术： Springmvc+Spring+Mybatis+Quartz+Ant +Solr + memchache + Nginx等   \n责任描述：该项目的活动专题,资讯专题;项目招标部分的招标消息，招标澄清;后期测试,处理Bug并执行回归测试等\n\n项目名称：海晟网\n开发环境： IDEA、MacOs、Tomcat、JDK、Mysql\n主要技术： Springmvc+Spring+Mybatis+Quartz+Ant +Solr + memchache + Nginx等   \n责任描述：网站整体的bug修改,支付宝支付，微信支付，中国银联支付，微信端分销系统,独立完成基于cordova开发完成的app，包括首页,搜索,商品,订单,评价,购买及第三方支付等功能\n\n项目名称： 华艺秋水商城\n开发环境： IDEA、MacOs、Tomcat、JDK、Mysql\n主要技术： Springmvc+Spring+Mybatis+Quartz+Ant +Solr + memchache + Nginx等   \n责任描述：网站的风格变化,商品货源的添加，定价规则优化, 商品的上架，商品列表页面、商品详情页面的展示和商品购买整改,支付汇率问题，以及网站整体的bug整改。\n\n项目名称：企业级API接口开发\n开发环境： IDEA、Centos、Tomcat、JDK、Mysql\n主要技术： Springmvc+Spring+Mybatis+Maven+Redis+ memchache 等   \n责任描述：负责项目中公司业务的接口开发。搭建redis服务器集群、编写redis集群版Java接口以及使用java的MD5、3DES等加密,负责编写接口开发文档 、以及客户使用接口的问题解答   \n\n微信订阅号(微信号:girlstosky)\n主要技术： Springmvc+Spring+Mybatis+Maven等  \n涉及模块:独立开发,目前简单封装了所有与微信服务器交互的消息,并且接入了第三方图灵机器人,支持消息推送（主动/被动）,部分功能由于接口权限不足并未展示<br><br>\n<hr><br>\n\n\n\n\n\n{% aplayer \"恋\" \"新垣结衣\" \"http://sc1.111ttt.com/2016/5/11/05/204051028075.mp3\" \"autoplay\" %}\n{% dplayer \"url=http://devtest.qiniudn.com/若能绽放光芒.mp4\" \"api=http://dplayer.daoapp.io\" \"pic=http://devtest.qiniudn.com/若能绽放光芒.png\" \"id=9E2E3368B56CDBB4\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %}\n    ","updated":"2017-03-29T03:00:26.000Z","path":"about/index.html","layout":"page","_id":"cjjiq3keb0009rhsohlm2sfzm","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>李智，90后<br><br><br>Java工程师一枚，目前在厦门<br><br><br><strong>专业技能</strong> <br><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟悉Java , 了解C、Python、JavaScript、HTML、CSS<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟悉Java编程，有良好的算法和编码能力，熟悉面向对象编程<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟悉Mysql数据库以及Memcache缓存数据库开发技术<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;熟练掌握JSP,Servlet,等Web开发技术<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;熟悉Tomcat、JavaWeb, JDBC, 熟悉Http协议,并了解Webservice，Websocket服务器端技术<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 掌握Solr集群搭建及SolrJ集群版的Java接口应用<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟练掌握Javascript,jQuery，Ajax并了解Angularjs等前台开发技术。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  能熟练运用Html、Css等技术设计网页、了解Bootstrap等前端框架技术。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 能熟练地在微信公众平台上开发微信各种接口，有过第三方支付的经验<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  熟练运用Mybatis、Spring、Springmvc、Struts2 、Hibernate，Quartz等开源框架，能熟练运用MVC设计模式。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟练操作Linux操作系统<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟练使用IEDA、Eclipse、Svn、Git、Maven、Ant项目管理和项目构建工具。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 了解集群下的并发解决方案，支持(HA)高可用(采用Nginx，Zookeeper)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 了解Freemark等静态化页面的技术<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 会采用分布式缓存解决数据库压力<br><br><br><strong>业余兴趣</strong> <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•厨师八级（自认）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;精通煎炒烹炸闷溜熬炖<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  •业余篮球爱好者<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无兄弟，不篮球<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•夜跑爱好者<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跑步中思考，跑步告诉我什么是努力的极限<br><br><br><strong>项目经验</strong><br><br>项目名称： ABB门禁系统<br>开发环境： IDEA、MacOs、Tomcat、JDK、Mysql<br>主要技术： qoodxoo+webrtc+websocket+xmpp等<br>责任描述： 基于webrtc框架负责websocket通信模块，与移动端沟通协作，完成功能开发后期的功能迭代，以及性能的提升（安全性，延迟性）</p>\n<p>项目名称：易源网<br>开发环境： IDEA、MacOs、Tomcat、JDK、Mysql<br>主要技术： Springmvc+Spring+Mybatis+Quartz+Ant +Solr + memchache + Nginx等<br>责任描述：该项目的活动专题,资讯专题;项目招标部分的招标消息，招标澄清;后期测试,处理Bug并执行回归测试等</p>\n<p>项目名称：海晟网<br>开发环境： IDEA、MacOs、Tomcat、JDK、Mysql<br>主要技术： Springmvc+Spring+Mybatis+Quartz+Ant +Solr + memchache + Nginx等<br>责任描述：网站整体的bug修改,支付宝支付，微信支付，中国银联支付，微信端分销系统,独立完成基于cordova开发完成的app，包括首页,搜索,商品,订单,评价,购买及第三方支付等功能</p>\n<p>项目名称： 华艺秋水商城<br>开发环境： IDEA、MacOs、Tomcat、JDK、Mysql<br>主要技术： Springmvc+Spring+Mybatis+Quartz+Ant +Solr + memchache + Nginx等<br>责任描述：网站的风格变化,商品货源的添加，定价规则优化, 商品的上架，商品列表页面、商品详情页面的展示和商品购买整改,支付汇率问题，以及网站整体的bug整改。</p>\n<p>项目名称：企业级API接口开发<br>开发环境： IDEA、Centos、Tomcat、JDK、Mysql<br>主要技术： Springmvc+Spring+Mybatis+Maven+Redis+ memchache 等<br>责任描述：负责项目中公司业务的接口开发。搭建redis服务器集群、编写redis集群版Java接口以及使用java的MD5、3DES等加密,负责编写接口开发文档 、以及客户使用接口的问题解答   </p>\n<p>微信订阅号(微信号:girlstosky)<br>主要技术： Springmvc+Spring+Mybatis+Maven等<br>涉及模块:独立开发,目前简单封装了所有与微信服务器交互的消息,并且接入了第三方图灵机器人,支持消息推送（主动/被动）,部分功能由于接口权限不足并未展示<br><br></p>\n<p><hr><br></p>\n<div id=\"aplayer0\" class=\"aplayer\" style=\"margin-bottom: 20px;\"></div>\n\t\t<script>\n\t\t\tnew APlayer({\n\t\t\t\telement: document.getElementById(\"aplayer0\"),\n\t\t\t\tnarrow: false,\n\t\t\t\tautoplay: true,\n\t\t\t\tshowlrc: 0,\n\t\t\t\tmusic: {\n\t\t\t\t\ttitle: \"恋\",\n\t\t\t\t\tauthor: \"新垣结衣\",\n\t\t\t\t\turl: \"http://sc1.111ttt.com/2016/5/11/05/204051028075.mp3\",\n\t\t\t\t\tpic: \"\",\n\t\t\t\t}\n\t\t\t});\n\t\t</script>\n<div id=\"dplayer0\" class=\"dplayer\" style=\"margin-bottom: 20px;\"></div><script>var dplayer0 = new DPlayer({\"element\":document.getElementById(\"dplayer0\"),\"autoplay\":false,\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://devtest.qiniudn.com/若能绽放光芒.mp4\",\"pic\":\"http://devtest.qiniudn.com/若能绽放光芒.png\"},\"danmaku\":{\"api\":\"http://dplayer.daoapp.io\",\"id\":\"9E2E3368B56CDBB4\",\"token\":\"tokendemo\"}});</script>\n","excerpt":"","more":"<p>李智，90后<br><br><br>Java工程师一枚，目前在厦门<br><br><br><strong>专业技能</strong> <br><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟悉Java , 了解C、Python、JavaScript、HTML、CSS<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟悉Java编程，有良好的算法和编码能力，熟悉面向对象编程<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟悉Mysql数据库以及Memcache缓存数据库开发技术<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;熟练掌握JSP,Servlet,等Web开发技术<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;熟悉Tomcat、JavaWeb, JDBC, 熟悉Http协议,并了解Webservice，Websocket服务器端技术<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 掌握Solr集群搭建及SolrJ集群版的Java接口应用<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟练掌握Javascript,jQuery，Ajax并了解Angularjs等前台开发技术。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  能熟练运用Html、Css等技术设计网页、了解Bootstrap等前端框架技术。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 能熟练地在微信公众平台上开发微信各种接口，有过第三方支付的经验<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  熟练运用Mybatis、Spring、Springmvc、Struts2 、Hibernate，Quartz等开源框架，能熟练运用MVC设计模式。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟练操作Linux操作系统<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 熟练使用IEDA、Eclipse、Svn、Git、Maven、Ant项目管理和项目构建工具。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 了解集群下的并发解决方案，支持(HA)高可用(采用Nginx，Zookeeper)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 了解Freemark等静态化页面的技术<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 会采用分布式缓存解决数据库压力<br><br><br><strong>业余兴趣</strong> <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•厨师八级（自认）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;精通煎炒烹炸闷溜熬炖<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  •业余篮球爱好者<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无兄弟，不篮球<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;•夜跑爱好者<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跑步中思考，跑步告诉我什么是努力的极限<br><br><br><strong>项目经验</strong><br><br>项目名称： ABB门禁系统<br>开发环境： IDEA、MacOs、Tomcat、JDK、Mysql<br>主要技术： qoodxoo+webrtc+websocket+xmpp等<br>责任描述： 基于webrtc框架负责websocket通信模块，与移动端沟通协作，完成功能开发后期的功能迭代，以及性能的提升（安全性，延迟性）</p>\n<p>项目名称：易源网<br>开发环境： IDEA、MacOs、Tomcat、JDK、Mysql<br>主要技术： Springmvc+Spring+Mybatis+Quartz+Ant +Solr + memchache + Nginx等<br>责任描述：该项目的活动专题,资讯专题;项目招标部分的招标消息，招标澄清;后期测试,处理Bug并执行回归测试等</p>\n<p>项目名称：海晟网<br>开发环境： IDEA、MacOs、Tomcat、JDK、Mysql<br>主要技术： Springmvc+Spring+Mybatis+Quartz+Ant +Solr + memchache + Nginx等<br>责任描述：网站整体的bug修改,支付宝支付，微信支付，中国银联支付，微信端分销系统,独立完成基于cordova开发完成的app，包括首页,搜索,商品,订单,评价,购买及第三方支付等功能</p>\n<p>项目名称： 华艺秋水商城<br>开发环境： IDEA、MacOs、Tomcat、JDK、Mysql<br>主要技术： Springmvc+Spring+Mybatis+Quartz+Ant +Solr + memchache + Nginx等<br>责任描述：网站的风格变化,商品货源的添加，定价规则优化, 商品的上架，商品列表页面、商品详情页面的展示和商品购买整改,支付汇率问题，以及网站整体的bug整改。</p>\n<p>项目名称：企业级API接口开发<br>开发环境： IDEA、Centos、Tomcat、JDK、Mysql<br>主要技术： Springmvc+Spring+Mybatis+Maven+Redis+ memchache 等<br>责任描述：负责项目中公司业务的接口开发。搭建redis服务器集群、编写redis集群版Java接口以及使用java的MD5、3DES等加密,负责编写接口开发文档 、以及客户使用接口的问题解答   </p>\n<p>微信订阅号(微信号:girlstosky)<br>主要技术： Springmvc+Spring+Mybatis+Maven等<br>涉及模块:独立开发,目前简单封装了所有与微信服务器交互的消息,并且接入了第三方图灵机器人,支持消息推送（主动/被动）,部分功能由于接口权限不足并未展示<br><br></p>\n<p><hr><br></p>\n<div id=\"aplayer0\" class=\"aplayer\" style=\"margin-bottom: 20px;\"></div>\n\t\t<script>\n\t\t\tnew APlayer({\n\t\t\t\telement: document.getElementById(\"aplayer0\"),\n\t\t\t\tnarrow: false,\n\t\t\t\tautoplay: true,\n\t\t\t\tshowlrc: 0,\n\t\t\t\tmusic: {\n\t\t\t\t\ttitle: \"恋\",\n\t\t\t\t\tauthor: \"新垣结衣\",\n\t\t\t\t\turl: \"http://sc1.111ttt.com/2016/5/11/05/204051028075.mp3\",\n\t\t\t\t\tpic: \"\",\n\t\t\t\t}\n\t\t\t});\n\t\t</script>\n<div id=\"dplayer0\" class=\"dplayer\" style=\"margin-bottom: 20px;\"></div><script>var dplayer0 = new DPlayer({\"element\":document.getElementById(\"dplayer0\"),\"autoplay\":false,\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://devtest.qiniudn.com/若能绽放光芒.mp4\",\"pic\":\"http://devtest.qiniudn.com/若能绽放光芒.png\"},\"danmaku\":{\"api\":\"http://dplayer.daoapp.io\",\"id\":\"9E2E3368B56CDBB4\",\"token\":\"tokendemo\"}});</script>\n"}],"Post":[{"title":"2016年总结","date":"2017-02-18T14:00:07.000Z","_content":"<h2>在2016这一年</h2>\n\n技术长进了。\n\nJava:从SSH框架转到SSM，并且见识了基于Spring boot的威力，补了一下Java基础，正在接触算法。\n\nLinux:记住了越来的越多的Linux命令，能独立维护并处理部分服务问题了。\n\nPython:终于算是入门了，入门了却没看到出门在哪里。\n<!--more-->\n\nJS&HTML&CSS3:这似乎不是我该关注的问题，能独立解决UI上的问题已经够了。\n\n完成了至少三个项目，从pc端到web端到微信端到hybridApp。\n\n项目是最好的导师，边学边做，边学边用，虽然不能用到最好，但这确实是很有效的学习途径，先实现再优化。\n\n有毅力和活力，天生乐观派。认定了的事情一定要去完成，本职工作必须要做到尽职尽责。\n\n**不足：**\n\n发现的自己实力还是离自己的期望的差了很多。\n\n纠结综合症。\n\n强迫症。\n\n<h2>展望2017！</h2>\n\n有想法\n\n想法一：继续补课\n\n实习大半年后，发现在大学期间没有好好学习Java基础，也没有学的特别扎实！很多东西自己还不知道，需要补课！现在也算是个半吊子的Java程序员，虽然看了一遍的Java核心技术，但是还是要继续巩固，不同阶段相信有不同的理解，以后还会买更多的书回来，继续学习。\n\n\n想法二：学习框架和算法\n\n完成了基本的基础学习，开始着手框架，从Spring开始学起，了解框架底层原理，并且模仿造几个轮子。\n\n大学只掌握了一些基础的数据结构知识，想要进大企业，算法也不能落下，不过这种东西不是可以快速见到成效的，所以静下心，慢慢来！\n\n\n想法三：改\n\n现在的写的代码用一个字形容——乱。\n\nSVN没有发挥它该有的作用，SVN上的代码都不是最新的。\n\n缺少一个完整的项目管理软件，BUG没有任何追踪记录，解决了？！没解决？！进度走到哪里了？！后续是关注还是下放到下一个版本解决？！项目的开发进度完成了吗？！\n\n\n有计划\n\n计划一:读书计划。\n\n读完至少6本技术书籍，以下为计划书单：\n\n1.《Java核心技术 卷一》 再读\n\n2.《Java核心技术 卷二》 也可选择《java编程思想》\n\n3.《Effective Java》\n\n4.《深入理解Java虚拟机：JVM高级特性与最佳实践》\n\n5.《大型网站技术架构 核心原理与案例分析》\n\n6.《Java并发编程的艺术》\n\n7.《算法第四版》\n \n\n计划二：工作计划\n\n \n1.2017年，继续坚持现有的工作状态。\n\n2.加强自己的业务代码能力。\n\n3.接触新项目（不同领域）。\n\n4.自己做点外包。\n\n（完）\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2016年总结.md","raw":"---\ntitle: 2016年总结\ndate: 2017-02-18 22:00:07\ncategories: 程序人生\ntags:\n\t- 总结\n---\n<h2>在2016这一年</h2>\n\n技术长进了。\n\nJava:从SSH框架转到SSM，并且见识了基于Spring boot的威力，补了一下Java基础，正在接触算法。\n\nLinux:记住了越来的越多的Linux命令，能独立维护并处理部分服务问题了。\n\nPython:终于算是入门了，入门了却没看到出门在哪里。\n<!--more-->\n\nJS&HTML&CSS3:这似乎不是我该关注的问题，能独立解决UI上的问题已经够了。\n\n完成了至少三个项目，从pc端到web端到微信端到hybridApp。\n\n项目是最好的导师，边学边做，边学边用，虽然不能用到最好，但这确实是很有效的学习途径，先实现再优化。\n\n有毅力和活力，天生乐观派。认定了的事情一定要去完成，本职工作必须要做到尽职尽责。\n\n**不足：**\n\n发现的自己实力还是离自己的期望的差了很多。\n\n纠结综合症。\n\n强迫症。\n\n<h2>展望2017！</h2>\n\n有想法\n\n想法一：继续补课\n\n实习大半年后，发现在大学期间没有好好学习Java基础，也没有学的特别扎实！很多东西自己还不知道，需要补课！现在也算是个半吊子的Java程序员，虽然看了一遍的Java核心技术，但是还是要继续巩固，不同阶段相信有不同的理解，以后还会买更多的书回来，继续学习。\n\n\n想法二：学习框架和算法\n\n完成了基本的基础学习，开始着手框架，从Spring开始学起，了解框架底层原理，并且模仿造几个轮子。\n\n大学只掌握了一些基础的数据结构知识，想要进大企业，算法也不能落下，不过这种东西不是可以快速见到成效的，所以静下心，慢慢来！\n\n\n想法三：改\n\n现在的写的代码用一个字形容——乱。\n\nSVN没有发挥它该有的作用，SVN上的代码都不是最新的。\n\n缺少一个完整的项目管理软件，BUG没有任何追踪记录，解决了？！没解决？！进度走到哪里了？！后续是关注还是下放到下一个版本解决？！项目的开发进度完成了吗？！\n\n\n有计划\n\n计划一:读书计划。\n\n读完至少6本技术书籍，以下为计划书单：\n\n1.《Java核心技术 卷一》 再读\n\n2.《Java核心技术 卷二》 也可选择《java编程思想》\n\n3.《Effective Java》\n\n4.《深入理解Java虚拟机：JVM高级特性与最佳实践》\n\n5.《大型网站技术架构 核心原理与案例分析》\n\n6.《Java并发编程的艺术》\n\n7.《算法第四版》\n \n\n计划二：工作计划\n\n \n1.2017年，继续坚持现有的工作状态。\n\n2.加强自己的业务代码能力。\n\n3.接触新项目（不同领域）。\n\n4.自己做点外包。\n\n（完）\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2016年总结","published":1,"updated":"2017-02-18T14:01:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kdq0000rhsoz7fg22s9","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><h2>在2016这一年</h2>\n\n<p>技术长进了。</p>\n<p>Java:从SSH框架转到SSM，并且见识了基于Spring boot的威力，补了一下Java基础，正在接触算法。</p>\n<p>Linux:记住了越来的越多的Linux命令，能独立维护并处理部分服务问题了。</p>\n<p>Python:终于算是入门了，入门了却没看到出门在哪里。<br><a id=\"more\"></a></p>\n<p>JS&amp;HTML&amp;CSS3:这似乎不是我该关注的问题，能独立解决UI上的问题已经够了。</p>\n<p>完成了至少三个项目，从pc端到web端到微信端到hybridApp。</p>\n<p>项目是最好的导师，边学边做，边学边用，虽然不能用到最好，但这确实是很有效的学习途径，先实现再优化。</p>\n<p>有毅力和活力，天生乐观派。认定了的事情一定要去完成，本职工作必须要做到尽职尽责。</p>\n<p><strong>不足：</strong></p>\n<p>发现的自己实力还是离自己的期望的差了很多。</p>\n<p>纠结综合症。</p>\n<p>强迫症。</p>\n<h2>展望2017！</h2>\n\n<p>有想法</p>\n<p>想法一：继续补课</p>\n<p>实习大半年后，发现在大学期间没有好好学习Java基础，也没有学的特别扎实！很多东西自己还不知道，需要补课！现在也算是个半吊子的Java程序员，虽然看了一遍的Java核心技术，但是还是要继续巩固，不同阶段相信有不同的理解，以后还会买更多的书回来，继续学习。</p>\n<p>想法二：学习框架和算法</p>\n<p>完成了基本的基础学习，开始着手框架，从Spring开始学起，了解框架底层原理，并且模仿造几个轮子。</p>\n<p>大学只掌握了一些基础的数据结构知识，想要进大企业，算法也不能落下，不过这种东西不是可以快速见到成效的，所以静下心，慢慢来！</p>\n<p>想法三：改</p>\n<p>现在的写的代码用一个字形容——乱。</p>\n<p>SVN没有发挥它该有的作用，SVN上的代码都不是最新的。</p>\n<p>缺少一个完整的项目管理软件，BUG没有任何追踪记录，解决了？！没解决？！进度走到哪里了？！后续是关注还是下放到下一个版本解决？！项目的开发进度完成了吗？！</p>\n<p>有计划</p>\n<p>计划一:读书计划。</p>\n<p>读完至少6本技术书籍，以下为计划书单：</p>\n<p>1.《Java核心技术 卷一》 再读</p>\n<p>2.《Java核心技术 卷二》 也可选择《java编程思想》</p>\n<p>3.《Effective Java》</p>\n<p>4.《深入理解Java虚拟机：JVM高级特性与最佳实践》</p>\n<p>5.《大型网站技术架构 核心原理与案例分析》</p>\n<p>6.《Java并发编程的艺术》</p>\n<p>7.《算法第四版》</p>\n<p>计划二：工作计划</p>\n<p>1.2017年，继续坚持现有的工作状态。</p>\n<p>2.加强自己的业务代码能力。</p>\n<p>3.接触新项目（不同领域）。</p>\n<p>4.自己做点外包。</p>\n<p>（完）</p>\n","excerpt":"<h2>在2016这一年</h2>\n\n<p>技术长进了。</p>\n<p>Java:从SSH框架转到SSM，并且见识了基于Spring boot的威力，补了一下Java基础，正在接触算法。</p>\n<p>Linux:记住了越来的越多的Linux命令，能独立维护并处理部分服务问题了。</p>\n<p>Python:终于算是入门了，入门了却没看到出门在哪里。<br></p>","more":"<p></p>\n<p>JS&amp;HTML&amp;CSS3:这似乎不是我该关注的问题，能独立解决UI上的问题已经够了。</p>\n<p>完成了至少三个项目，从pc端到web端到微信端到hybridApp。</p>\n<p>项目是最好的导师，边学边做，边学边用，虽然不能用到最好，但这确实是很有效的学习途径，先实现再优化。</p>\n<p>有毅力和活力，天生乐观派。认定了的事情一定要去完成，本职工作必须要做到尽职尽责。</p>\n<p><strong>不足：</strong></p>\n<p>发现的自己实力还是离自己的期望的差了很多。</p>\n<p>纠结综合症。</p>\n<p>强迫症。</p>\n<h2>展望2017！</h2>\n\n<p>有想法</p>\n<p>想法一：继续补课</p>\n<p>实习大半年后，发现在大学期间没有好好学习Java基础，也没有学的特别扎实！很多东西自己还不知道，需要补课！现在也算是个半吊子的Java程序员，虽然看了一遍的Java核心技术，但是还是要继续巩固，不同阶段相信有不同的理解，以后还会买更多的书回来，继续学习。</p>\n<p>想法二：学习框架和算法</p>\n<p>完成了基本的基础学习，开始着手框架，从Spring开始学起，了解框架底层原理，并且模仿造几个轮子。</p>\n<p>大学只掌握了一些基础的数据结构知识，想要进大企业，算法也不能落下，不过这种东西不是可以快速见到成效的，所以静下心，慢慢来！</p>\n<p>想法三：改</p>\n<p>现在的写的代码用一个字形容——乱。</p>\n<p>SVN没有发挥它该有的作用，SVN上的代码都不是最新的。</p>\n<p>缺少一个完整的项目管理软件，BUG没有任何追踪记录，解决了？！没解决？！进度走到哪里了？！后续是关注还是下放到下一个版本解决？！项目的开发进度完成了吗？！</p>\n<p>有计划</p>\n<p>计划一:读书计划。</p>\n<p>读完至少6本技术书籍，以下为计划书单：</p>\n<p>1.《Java核心技术 卷一》 再读</p>\n<p>2.《Java核心技术 卷二》 也可选择《java编程思想》</p>\n<p>3.《Effective Java》</p>\n<p>4.《深入理解Java虚拟机：JVM高级特性与最佳实践》</p>\n<p>5.《大型网站技术架构 核心原理与案例分析》</p>\n<p>6.《Java并发编程的艺术》</p>\n<p>7.《算法第四版》</p>\n<p>计划二：工作计划</p>\n<p>1.2017年，继续坚持现有的工作状态。</p>\n<p>2.加强自己的业务代码能力。</p>\n<p>3.接触新项目（不同领域）。</p>\n<p>4.自己做点外包。</p>\n<p>（完）</p>"},{"title":"数据库30条军规解读","date":"2017-02-18T14:09:57.000Z","_content":"军规适用场景：并发量大、数据量大的互联网业务<br>\n军规：介绍内容<br>\n解读：讲解原因，解读比军规更重要\n <!--more-->\n一、基础规范\n\n（1）必须使用InnoDB存储引擎\n>解读：支持事务、行级锁、并发性能更好、CPU及内存缓存页优化使得资源利用率更高\n \n<br>（2）必须使用UTF8字符集\n>解读：万国码，无需转码，无乱码风险，节省空间\n \n<br>（3）数据表、数据字段必须加入中文注释\n>解读：N年后谁tm知道这个r1,r2,r3字段是干嘛的\n \n<br>（4）禁止使用存储过程、视图、触发器、Event\n>解读：高并发大数据的互联网业务，架构设计思路是“解放数据库CPU，将计算转移到服务层”，并发量大的情况下，这些功能很可能将数据库拖死，业务逻辑放到服务层具备更好的扩展性，能够轻易实现“增机器就加性能”。数据库擅长存储与索引，CPU计算还是上移吧\n \n<br>（5）禁止存储大文件或者大照片\n>解读：为何要让数据库做它不擅长的事情？大文件和照片存储在文件系统，数据库里存URI多好\n \n<br>二、命名规范\n\n（6）只允许使用内网域名，而不是ip连接数据库\n \n（7）线上环境、开发环境、测试环境数据库内网域名遵循命名规范\n>业务名称：xxx\n线上环境：dj.xxx.db\n开发环境：dj.xxx.rdb\n测试环境：dj.xxx.tdb\n从库在名称后加-s标识，备库在名称后加-ss标识\n线上从库：dj.xxx-s.db\n线上备库：dj.xxx-sss.db\n \n<br>（8）库名、表名、字段名：小写，下划线风格，不超过32个字符，必须见名知意，禁止拼音英文混用\n \n（9）表名t_xxx，非唯一索引名idx_xxx，唯一索引名uniq_xxx\n \n三、表设计规范\n\n（10）单实例表数目必须小于500\n \n（11）单表列数目必须小于30\n \n（12）表必须有主键，例如自增主键\n>解读：\na）主键递增，数据行写入可以提高插入性能，可以避免page分裂，减少表碎片提升空间和内存的使用\nb）主键要选择较短的数据类型， Innodb引擎普通索引都会保存主键的值，较短的数据类型可以有效的减少索引的磁盘空间，提高索引的缓存效率\nc） 无主键的表删除，在row模式的主从架构，会导致备库夯住\n \n<br>（13）禁止使用外键，如果有外键完整性约束，需要应用程序控制\n>解读：外键会导致表与表之间耦合，update与delete操作都会涉及相关联的表，十分影响sql 的性能，甚至会造成死锁。高并发情况下容易造成数据库性能，大数据高并发业务场景数据库使用以性能优先\n \n<br>四、字段设计规范\n\n<br>（14）必须把字段定义为NOT NULL并且提供默认值\n>解读：\na）null的列使索引/索引统计/值比较都更加复杂，对MySQL来说更难优化\nb）null 这种类型MySQL内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多\nc）null值需要更多的存储空，无论是表还是索引中每行中的null的列都需要额外的空间来标识\nd）对null 的处理时候，只能采用is null或is not null，而不能采用=、in、<、<>、!=、not in这些操作符号。如：where name!=’shenjian’，如果存在name为null值的记录，查询结果就不会包含name为null值的记录\n \n<br>（15）禁止使用TEXT、BLOB类型\n>解读：会浪费更多的磁盘和内存空间，非必要的大量的大字段查询会淘汰掉热数据，导致内存命中率急剧降低，影响数据库性能\n \n<br>（16）禁止使用小数存储货币\n>解读：使用整数吧，小数容易导致钱对不上\n \n<br>（17）必须使用varchar(20)存储手机号\n>解读：\na）涉及到区号或者国家代号，可能出现+-()\nb）手机号会去做数学运算么？\nc）varchar可以支持模糊查询，例如：like“138%”\n \n<br>（18）禁止使用ENUM，可使用TINYINT代替\n>解读：\na）增加新的ENUM值要做DDL操作\nb）ENUM的内部实际存储就是整数，你以为自己定义的是字符串？\n \n<br>五、索引设计规范\n\n（19）单表索引建议控制在5个以内\n \n（20）单索引字段数不允许超过5个\n>解读：字段超过5个时，实际已经起不到有效过滤数据的作用了\n \n<br>（21）禁止在更新十分频繁、区分度不高的属性上建立索引\n>解读：\na）更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能\nb）“性别”这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似\n \n<br>（22）建立组合索引，必须把区分度高的字段放在前面\n>解读：能够更加有效的过滤数据\n \n<br>六、SQL使用规范\n\n（23）禁止使用SELECT *，只获取必要的字段，需要显示说明列属性\n>解读：\na）读取不需要的列会增加CPU、IO、NET消耗\nb）不能有效的利用覆盖索引\nc）使用SELECT *容易在增加或者删除字段后出现程序BUG\n \n<br>（24）禁止使用INSERT INTO t_xxx VALUES(xxx)，必须显示指定插入的列属性\n>解读：容易在增加或者删除字段后出现程序BUG\n \n<br>（25）禁止使用属性隐式转换\n>解读：SELECT uid FROM t_user WHERE phone=13812345678 会导致全表扫描，而不能命中phone索引，猜猜为什么？（这个线上问题不止出现过一次）\n \n<br>（26）禁止在WHERE条件的属性上使用函数或者表达式\n>解读：SELECT uid FROM t_user WHERE from_unixtime(day)>='2017-02-15' 会导致全表扫描\n正确的写法是：SELECT uid FROM t_user WHERE day>= unix_timestamp('2017-02-15 00:00:00')\n \n<br>（27）禁止负向查询，以及%开头的模糊查询\n>解读：\na）负向查询条件：NOT、!=、<>、!<、!>、NOT IN、NOT LIKE等，会导致全表扫描\nb）%开头的模糊查询，会导致全表扫描\n \n<br>（28）禁止大表使用JOIN查询，禁止大表使用子查询\n>解读：会产生临时表，消耗较多内存与CPU，极大影响数据库性能\n \n<br>（29）禁止使用OR条件，必须改为IN查询\n>解读：旧版本Mysql的OR查询是不能命中索引的，即使能命中索引，为何要让数据库耗费更多的CPU帮助实施查询优化呢？\n \n<br>（30）应用程序必须捕获SQL异常，并有相应处理\n\n总结：大数据量高并发的互联网业务，极大影响数据库性能的都不让用，不让用哟。\n==【完】==\n","source":"_posts/58到家数据库30条军规解读.md","raw":"---\ntitle: 数据库30条军规解读\ndate: 2017-02-18 22:09:57\ncategories: 数据库那点事\ntags:\n\t- 军规\n---\n军规适用场景：并发量大、数据量大的互联网业务<br>\n军规：介绍内容<br>\n解读：讲解原因，解读比军规更重要\n <!--more-->\n一、基础规范\n\n（1）必须使用InnoDB存储引擎\n>解读：支持事务、行级锁、并发性能更好、CPU及内存缓存页优化使得资源利用率更高\n \n<br>（2）必须使用UTF8字符集\n>解读：万国码，无需转码，无乱码风险，节省空间\n \n<br>（3）数据表、数据字段必须加入中文注释\n>解读：N年后谁tm知道这个r1,r2,r3字段是干嘛的\n \n<br>（4）禁止使用存储过程、视图、触发器、Event\n>解读：高并发大数据的互联网业务，架构设计思路是“解放数据库CPU，将计算转移到服务层”，并发量大的情况下，这些功能很可能将数据库拖死，业务逻辑放到服务层具备更好的扩展性，能够轻易实现“增机器就加性能”。数据库擅长存储与索引，CPU计算还是上移吧\n \n<br>（5）禁止存储大文件或者大照片\n>解读：为何要让数据库做它不擅长的事情？大文件和照片存储在文件系统，数据库里存URI多好\n \n<br>二、命名规范\n\n（6）只允许使用内网域名，而不是ip连接数据库\n \n（7）线上环境、开发环境、测试环境数据库内网域名遵循命名规范\n>业务名称：xxx\n线上环境：dj.xxx.db\n开发环境：dj.xxx.rdb\n测试环境：dj.xxx.tdb\n从库在名称后加-s标识，备库在名称后加-ss标识\n线上从库：dj.xxx-s.db\n线上备库：dj.xxx-sss.db\n \n<br>（8）库名、表名、字段名：小写，下划线风格，不超过32个字符，必须见名知意，禁止拼音英文混用\n \n（9）表名t_xxx，非唯一索引名idx_xxx，唯一索引名uniq_xxx\n \n三、表设计规范\n\n（10）单实例表数目必须小于500\n \n（11）单表列数目必须小于30\n \n（12）表必须有主键，例如自增主键\n>解读：\na）主键递增，数据行写入可以提高插入性能，可以避免page分裂，减少表碎片提升空间和内存的使用\nb）主键要选择较短的数据类型， Innodb引擎普通索引都会保存主键的值，较短的数据类型可以有效的减少索引的磁盘空间，提高索引的缓存效率\nc） 无主键的表删除，在row模式的主从架构，会导致备库夯住\n \n<br>（13）禁止使用外键，如果有外键完整性约束，需要应用程序控制\n>解读：外键会导致表与表之间耦合，update与delete操作都会涉及相关联的表，十分影响sql 的性能，甚至会造成死锁。高并发情况下容易造成数据库性能，大数据高并发业务场景数据库使用以性能优先\n \n<br>四、字段设计规范\n\n<br>（14）必须把字段定义为NOT NULL并且提供默认值\n>解读：\na）null的列使索引/索引统计/值比较都更加复杂，对MySQL来说更难优化\nb）null 这种类型MySQL内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多\nc）null值需要更多的存储空，无论是表还是索引中每行中的null的列都需要额外的空间来标识\nd）对null 的处理时候，只能采用is null或is not null，而不能采用=、in、<、<>、!=、not in这些操作符号。如：where name!=’shenjian’，如果存在name为null值的记录，查询结果就不会包含name为null值的记录\n \n<br>（15）禁止使用TEXT、BLOB类型\n>解读：会浪费更多的磁盘和内存空间，非必要的大量的大字段查询会淘汰掉热数据，导致内存命中率急剧降低，影响数据库性能\n \n<br>（16）禁止使用小数存储货币\n>解读：使用整数吧，小数容易导致钱对不上\n \n<br>（17）必须使用varchar(20)存储手机号\n>解读：\na）涉及到区号或者国家代号，可能出现+-()\nb）手机号会去做数学运算么？\nc）varchar可以支持模糊查询，例如：like“138%”\n \n<br>（18）禁止使用ENUM，可使用TINYINT代替\n>解读：\na）增加新的ENUM值要做DDL操作\nb）ENUM的内部实际存储就是整数，你以为自己定义的是字符串？\n \n<br>五、索引设计规范\n\n（19）单表索引建议控制在5个以内\n \n（20）单索引字段数不允许超过5个\n>解读：字段超过5个时，实际已经起不到有效过滤数据的作用了\n \n<br>（21）禁止在更新十分频繁、区分度不高的属性上建立索引\n>解读：\na）更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能\nb）“性别”这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似\n \n<br>（22）建立组合索引，必须把区分度高的字段放在前面\n>解读：能够更加有效的过滤数据\n \n<br>六、SQL使用规范\n\n（23）禁止使用SELECT *，只获取必要的字段，需要显示说明列属性\n>解读：\na）读取不需要的列会增加CPU、IO、NET消耗\nb）不能有效的利用覆盖索引\nc）使用SELECT *容易在增加或者删除字段后出现程序BUG\n \n<br>（24）禁止使用INSERT INTO t_xxx VALUES(xxx)，必须显示指定插入的列属性\n>解读：容易在增加或者删除字段后出现程序BUG\n \n<br>（25）禁止使用属性隐式转换\n>解读：SELECT uid FROM t_user WHERE phone=13812345678 会导致全表扫描，而不能命中phone索引，猜猜为什么？（这个线上问题不止出现过一次）\n \n<br>（26）禁止在WHERE条件的属性上使用函数或者表达式\n>解读：SELECT uid FROM t_user WHERE from_unixtime(day)>='2017-02-15' 会导致全表扫描\n正确的写法是：SELECT uid FROM t_user WHERE day>= unix_timestamp('2017-02-15 00:00:00')\n \n<br>（27）禁止负向查询，以及%开头的模糊查询\n>解读：\na）负向查询条件：NOT、!=、<>、!<、!>、NOT IN、NOT LIKE等，会导致全表扫描\nb）%开头的模糊查询，会导致全表扫描\n \n<br>（28）禁止大表使用JOIN查询，禁止大表使用子查询\n>解读：会产生临时表，消耗较多内存与CPU，极大影响数据库性能\n \n<br>（29）禁止使用OR条件，必须改为IN查询\n>解读：旧版本Mysql的OR查询是不能命中索引的，即使能命中索引，为何要让数据库耗费更多的CPU帮助实施查询优化呢？\n \n<br>（30）应用程序必须捕获SQL异常，并有相应处理\n\n总结：大数据量高并发的互联网业务，极大影响数据库性能的都不让用，不让用哟。\n==【完】==\n","slug":"58到家数据库30条军规解读","published":1,"updated":"2017-02-18T15:23:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kdy0002rhsouud2ne8t","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>军规适用场景：并发量大、数据量大的互联网业务<br><br>军规：介绍内容<br><br>解读：讲解原因，解读比军规更重要<br> <a id=\"more\"></a><br>一、基础规范</p>\n<p>（1）必须使用InnoDB存储引擎</p>\n<blockquote>\n<p>解读：支持事务、行级锁、并发性能更好、CPU及内存缓存页优化使得资源利用率更高</p>\n</blockquote>\n<p><br>（2）必须使用UTF8字符集</p>\n<blockquote>\n<p>解读：万国码，无需转码，无乱码风险，节省空间</p>\n</blockquote>\n<p><br>（3）数据表、数据字段必须加入中文注释</p>\n<blockquote>\n<p>解读：N年后谁tm知道这个r1,r2,r3字段是干嘛的</p>\n</blockquote>\n<p><br>（4）禁止使用存储过程、视图、触发器、Event</p>\n<blockquote>\n<p>解读：高并发大数据的互联网业务，架构设计思路是“解放数据库CPU，将计算转移到服务层”，并发量大的情况下，这些功能很可能将数据库拖死，业务逻辑放到服务层具备更好的扩展性，能够轻易实现“增机器就加性能”。数据库擅长存储与索引，CPU计算还是上移吧</p>\n</blockquote>\n<p><br>（5）禁止存储大文件或者大照片</p>\n<blockquote>\n<p>解读：为何要让数据库做它不擅长的事情？大文件和照片存储在文件系统，数据库里存URI多好</p>\n</blockquote>\n<p><br>二、命名规范</p>\n<p>（6）只允许使用内网域名，而不是ip连接数据库</p>\n<p>（7）线上环境、开发环境、测试环境数据库内网域名遵循命名规范</p>\n<blockquote>\n<p>业务名称：xxx<br>线上环境：dj.xxx.db<br>开发环境：dj.xxx.rdb<br>测试环境：dj.xxx.tdb<br>从库在名称后加-s标识，备库在名称后加-ss标识<br>线上从库：dj.xxx-s.db<br>线上备库：dj.xxx-sss.db</p>\n</blockquote>\n<p><br>（8）库名、表名、字段名：小写，下划线风格，不超过32个字符，必须见名知意，禁止拼音英文混用</p>\n<p>（9）表名t_xxx，非唯一索引名idx_xxx，唯一索引名uniq_xxx</p>\n<p>三、表设计规范</p>\n<p>（10）单实例表数目必须小于500</p>\n<p>（11）单表列数目必须小于30</p>\n<p>（12）表必须有主键，例如自增主键</p>\n<blockquote>\n<p>解读：<br>a）主键递增，数据行写入可以提高插入性能，可以避免page分裂，减少表碎片提升空间和内存的使用<br>b）主键要选择较短的数据类型， Innodb引擎普通索引都会保存主键的值，较短的数据类型可以有效的减少索引的磁盘空间，提高索引的缓存效率<br>c） 无主键的表删除，在row模式的主从架构，会导致备库夯住</p>\n</blockquote>\n<p><br>（13）禁止使用外键，如果有外键完整性约束，需要应用程序控制</p>\n<blockquote>\n<p>解读：外键会导致表与表之间耦合，update与delete操作都会涉及相关联的表，十分影响sql 的性能，甚至会造成死锁。高并发情况下容易造成数据库性能，大数据高并发业务场景数据库使用以性能优先</p>\n</blockquote>\n<p><br>四、字段设计规范</p>\n<p><br>（14）必须把字段定义为NOT NULL并且提供默认值</p>\n<blockquote>\n<p>解读：<br>a）null的列使索引/索引统计/值比较都更加复杂，对MySQL来说更难优化<br>b）null 这种类型MySQL内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多<br>c）null值需要更多的存储空，无论是表还是索引中每行中的null的列都需要额外的空间来标识<br>d）对null 的处理时候，只能采用is null或is not null，而不能采用=、in、&lt;、&lt;&gt;、!=、not in这些操作符号。如：where name!=’shenjian’，如果存在name为null值的记录，查询结果就不会包含name为null值的记录</p>\n</blockquote>\n<p><br>（15）禁止使用TEXT、BLOB类型</p>\n<blockquote>\n<p>解读：会浪费更多的磁盘和内存空间，非必要的大量的大字段查询会淘汰掉热数据，导致内存命中率急剧降低，影响数据库性能</p>\n</blockquote>\n<p><br>（16）禁止使用小数存储货币</p>\n<blockquote>\n<p>解读：使用整数吧，小数容易导致钱对不上</p>\n</blockquote>\n<p><br>（17）必须使用varchar(20)存储手机号</p>\n<blockquote>\n<p>解读：<br>a）涉及到区号或者国家代号，可能出现+-()<br>b）手机号会去做数学运算么？<br>c）varchar可以支持模糊查询，例如：like“138%”</p>\n</blockquote>\n<p><br>（18）禁止使用ENUM，可使用TINYINT代替</p>\n<blockquote>\n<p>解读：<br>a）增加新的ENUM值要做DDL操作<br>b）ENUM的内部实际存储就是整数，你以为自己定义的是字符串？</p>\n</blockquote>\n<p><br>五、索引设计规范</p>\n<p>（19）单表索引建议控制在5个以内</p>\n<p>（20）单索引字段数不允许超过5个</p>\n<blockquote>\n<p>解读：字段超过5个时，实际已经起不到有效过滤数据的作用了</p>\n</blockquote>\n<p><br>（21）禁止在更新十分频繁、区分度不高的属性上建立索引</p>\n<blockquote>\n<p>解读：<br>a）更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能<br>b）“性别”这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似</p>\n</blockquote>\n<p><br>（22）建立组合索引，必须把区分度高的字段放在前面</p>\n<blockquote>\n<p>解读：能够更加有效的过滤数据</p>\n</blockquote>\n<p><br>六、SQL使用规范</p>\n<p>（23）禁止使用SELECT *，只获取必要的字段，需要显示说明列属性</p>\n<blockquote>\n<p>解读：<br>a）读取不需要的列会增加CPU、IO、NET消耗<br>b）不能有效的利用覆盖索引<br>c）使用SELECT *容易在增加或者删除字段后出现程序BUG</p>\n</blockquote>\n<p><br>（24）禁止使用INSERT INTO t_xxx VALUES(xxx)，必须显示指定插入的列属性</p>\n<blockquote>\n<p>解读：容易在增加或者删除字段后出现程序BUG</p>\n</blockquote>\n<p><br>（25）禁止使用属性隐式转换</p>\n<blockquote>\n<p>解读：SELECT uid FROM t_user WHERE phone=13812345678 会导致全表扫描，而不能命中phone索引，猜猜为什么？（这个线上问题不止出现过一次）</p>\n</blockquote>\n<p><br>（26）禁止在WHERE条件的属性上使用函数或者表达式</p>\n<blockquote>\n<p>解读：SELECT uid FROM t_user WHERE from_unixtime(day)&gt;=’2017-02-15’ 会导致全表扫描<br>正确的写法是：SELECT uid FROM t_user WHERE day&gt;= unix_timestamp(‘2017-02-15 00:00:00’)</p>\n</blockquote>\n<p><br>（27）禁止负向查询，以及%开头的模糊查询</p>\n<blockquote>\n<p>解读：<br>a）负向查询条件：NOT、!=、&lt;&gt;、!&lt;、!&gt;、NOT IN、NOT LIKE等，会导致全表扫描<br>b）%开头的模糊查询，会导致全表扫描</p>\n</blockquote>\n<p><br>（28）禁止大表使用JOIN查询，禁止大表使用子查询</p>\n<blockquote>\n<p>解读：会产生临时表，消耗较多内存与CPU，极大影响数据库性能</p>\n</blockquote>\n<p><br>（29）禁止使用OR条件，必须改为IN查询</p>\n<blockquote>\n<p>解读：旧版本Mysql的OR查询是不能命中索引的，即使能命中索引，为何要让数据库耗费更多的CPU帮助实施查询优化呢？</p>\n</blockquote>\n<p><br>（30）应用程序必须捕获SQL异常，并有相应处理</p>\n<p>总结：大数据量高并发的互联网业务，极大影响数据库性能的都不让用，不让用哟。<br>==【完】==</p>\n","excerpt":"<p>军规适用场景：并发量大、数据量大的互联网业务<br><br>军规：介绍内容<br><br>解读：讲解原因，解读比军规更重要<br></p>","more":"<br>一、基础规范<p></p>\n<p>（1）必须使用InnoDB存储引擎</p>\n<blockquote>\n<p>解读：支持事务、行级锁、并发性能更好、CPU及内存缓存页优化使得资源利用率更高</p>\n</blockquote>\n<p><br>（2）必须使用UTF8字符集</p>\n<blockquote>\n<p>解读：万国码，无需转码，无乱码风险，节省空间</p>\n</blockquote>\n<p><br>（3）数据表、数据字段必须加入中文注释</p>\n<blockquote>\n<p>解读：N年后谁tm知道这个r1,r2,r3字段是干嘛的</p>\n</blockquote>\n<p><br>（4）禁止使用存储过程、视图、触发器、Event</p>\n<blockquote>\n<p>解读：高并发大数据的互联网业务，架构设计思路是“解放数据库CPU，将计算转移到服务层”，并发量大的情况下，这些功能很可能将数据库拖死，业务逻辑放到服务层具备更好的扩展性，能够轻易实现“增机器就加性能”。数据库擅长存储与索引，CPU计算还是上移吧</p>\n</blockquote>\n<p><br>（5）禁止存储大文件或者大照片</p>\n<blockquote>\n<p>解读：为何要让数据库做它不擅长的事情？大文件和照片存储在文件系统，数据库里存URI多好</p>\n</blockquote>\n<p><br>二、命名规范</p>\n<p>（6）只允许使用内网域名，而不是ip连接数据库</p>\n<p>（7）线上环境、开发环境、测试环境数据库内网域名遵循命名规范</p>\n<blockquote>\n<p>业务名称：xxx<br>线上环境：dj.xxx.db<br>开发环境：dj.xxx.rdb<br>测试环境：dj.xxx.tdb<br>从库在名称后加-s标识，备库在名称后加-ss标识<br>线上从库：dj.xxx-s.db<br>线上备库：dj.xxx-sss.db</p>\n</blockquote>\n<p><br>（8）库名、表名、字段名：小写，下划线风格，不超过32个字符，必须见名知意，禁止拼音英文混用</p>\n<p>（9）表名t_xxx，非唯一索引名idx_xxx，唯一索引名uniq_xxx</p>\n<p>三、表设计规范</p>\n<p>（10）单实例表数目必须小于500</p>\n<p>（11）单表列数目必须小于30</p>\n<p>（12）表必须有主键，例如自增主键</p>\n<blockquote>\n<p>解读：<br>a）主键递增，数据行写入可以提高插入性能，可以避免page分裂，减少表碎片提升空间和内存的使用<br>b）主键要选择较短的数据类型， Innodb引擎普通索引都会保存主键的值，较短的数据类型可以有效的减少索引的磁盘空间，提高索引的缓存效率<br>c） 无主键的表删除，在row模式的主从架构，会导致备库夯住</p>\n</blockquote>\n<p><br>（13）禁止使用外键，如果有外键完整性约束，需要应用程序控制</p>\n<blockquote>\n<p>解读：外键会导致表与表之间耦合，update与delete操作都会涉及相关联的表，十分影响sql 的性能，甚至会造成死锁。高并发情况下容易造成数据库性能，大数据高并发业务场景数据库使用以性能优先</p>\n</blockquote>\n<p><br>四、字段设计规范</p>\n<p><br>（14）必须把字段定义为NOT NULL并且提供默认值</p>\n<blockquote>\n<p>解读：<br>a）null的列使索引/索引统计/值比较都更加复杂，对MySQL来说更难优化<br>b）null 这种类型MySQL内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多<br>c）null值需要更多的存储空，无论是表还是索引中每行中的null的列都需要额外的空间来标识<br>d）对null 的处理时候，只能采用is null或is not null，而不能采用=、in、&lt;、&lt;&gt;、!=、not in这些操作符号。如：where name!=’shenjian’，如果存在name为null值的记录，查询结果就不会包含name为null值的记录</p>\n</blockquote>\n<p><br>（15）禁止使用TEXT、BLOB类型</p>\n<blockquote>\n<p>解读：会浪费更多的磁盘和内存空间，非必要的大量的大字段查询会淘汰掉热数据，导致内存命中率急剧降低，影响数据库性能</p>\n</blockquote>\n<p><br>（16）禁止使用小数存储货币</p>\n<blockquote>\n<p>解读：使用整数吧，小数容易导致钱对不上</p>\n</blockquote>\n<p><br>（17）必须使用varchar(20)存储手机号</p>\n<blockquote>\n<p>解读：<br>a）涉及到区号或者国家代号，可能出现+-()<br>b）手机号会去做数学运算么？<br>c）varchar可以支持模糊查询，例如：like“138%”</p>\n</blockquote>\n<p><br>（18）禁止使用ENUM，可使用TINYINT代替</p>\n<blockquote>\n<p>解读：<br>a）增加新的ENUM值要做DDL操作<br>b）ENUM的内部实际存储就是整数，你以为自己定义的是字符串？</p>\n</blockquote>\n<p><br>五、索引设计规范</p>\n<p>（19）单表索引建议控制在5个以内</p>\n<p>（20）单索引字段数不允许超过5个</p>\n<blockquote>\n<p>解读：字段超过5个时，实际已经起不到有效过滤数据的作用了</p>\n</blockquote>\n<p><br>（21）禁止在更新十分频繁、区分度不高的属性上建立索引</p>\n<blockquote>\n<p>解读：<br>a）更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能<br>b）“性别”这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似</p>\n</blockquote>\n<p><br>（22）建立组合索引，必须把区分度高的字段放在前面</p>\n<blockquote>\n<p>解读：能够更加有效的过滤数据</p>\n</blockquote>\n<p><br>六、SQL使用规范</p>\n<p>（23）禁止使用SELECT *，只获取必要的字段，需要显示说明列属性</p>\n<blockquote>\n<p>解读：<br>a）读取不需要的列会增加CPU、IO、NET消耗<br>b）不能有效的利用覆盖索引<br>c）使用SELECT *容易在增加或者删除字段后出现程序BUG</p>\n</blockquote>\n<p><br>（24）禁止使用INSERT INTO t_xxx VALUES(xxx)，必须显示指定插入的列属性</p>\n<blockquote>\n<p>解读：容易在增加或者删除字段后出现程序BUG</p>\n</blockquote>\n<p><br>（25）禁止使用属性隐式转换</p>\n<blockquote>\n<p>解读：SELECT uid FROM t_user WHERE phone=13812345678 会导致全表扫描，而不能命中phone索引，猜猜为什么？（这个线上问题不止出现过一次）</p>\n</blockquote>\n<p><br>（26）禁止在WHERE条件的属性上使用函数或者表达式</p>\n<blockquote>\n<p>解读：SELECT uid FROM t_user WHERE from_unixtime(day)&gt;=’2017-02-15’ 会导致全表扫描<br>正确的写法是：SELECT uid FROM t_user WHERE day&gt;= unix_timestamp(‘2017-02-15 00:00:00’)</p>\n</blockquote>\n<p><br>（27）禁止负向查询，以及%开头的模糊查询</p>\n<blockquote>\n<p>解读：<br>a）负向查询条件：NOT、!=、&lt;&gt;、!&lt;、!&gt;、NOT IN、NOT LIKE等，会导致全表扫描<br>b）%开头的模糊查询，会导致全表扫描</p>\n</blockquote>\n<p><br>（28）禁止大表使用JOIN查询，禁止大表使用子查询</p>\n<blockquote>\n<p>解读：会产生临时表，消耗较多内存与CPU，极大影响数据库性能</p>\n</blockquote>\n<p><br>（29）禁止使用OR条件，必须改为IN查询</p>\n<blockquote>\n<p>解读：旧版本Mysql的OR查询是不能命中索引的，即使能命中索引，为何要让数据库耗费更多的CPU帮助实施查询优化呢？</p>\n</blockquote>\n<p><br>（30）应用程序必须捕获SQL异常，并有相应处理</p>\n<p>总结：大数据量高并发的互联网业务，极大影响数据库性能的都不让用，不让用哟。<br>==【完】==</p>"},{"title":"JVM常量池及字符串==比较分析","date":"2017-02-18T12:06:42.000Z","_content":"java中的常量池技术，是为了方便快捷地创建某些对象而出现的，当需要一个对象时，就可以从池中取一个出来（如果池中没有的话就创建一个），这样在我们需要重复创建相等变量节省了很多时间。<br>\n&nbsp;&nbsp;常量池其实也就是一个内存空间，不同于使用new关键字创建的对象所在的堆空间。String类是java中用的比较多的类，同样为了创建String对象的方便，该类也实现了常量池的技术。<br>\n<!--more-->\n在讲述常量池之前，我们有必要先说说<font color=red>JVM运行时数据区的内存模型</font>。<br>\nJVM运行时数据区的内存模型由五部分组成:<br>\n1.方法区 \n2.堆\n3.JAVA栈\n4.PC寄存器\n5.本地方法栈\n\n例如对于```String s = \"haha\"``` ,它的虚拟机指令：\n```\n0:   ldc     #16; //String haha    \n2:   astore_1 \n3:   return\n```\n\n从上面的ldc指令的执行过程可以得出：s的值是来自被拘留String对象（由解析该入口的进程产生）的引用，即可以理解为是从被拘留String对象的引用复制而来的，故我个人的理解是s的值是存在栈当中。上面是对于s值得分析，接着是对于\"haha\"值的分析,我们知道，对于String s = \"haha\" 其中\"haha\"值在JAVA程序编译期就确定下来了的。简单一点说，就是haha的值在程序编译成class文件后，就在class文件中生成了。执行JAVA程序的过程中，第一步是class文件生 成，然后被JVM装载到内存执行。那么JVM装载这个class到内存中，其中的haha这个值，在内存中是怎么为其开辟空间并存储在哪个区域中呢？\n\n&nbsp;&nbsp;首先我们不妨先来了解一下JVM常量池这个结构,这里我查询了一些资料,在资料中这样描述**常量池**:<br>\n虚拟机必须为每个被装载的类型维护一个常量池。常量池就是该类型所用到常量的一个有序集和，包括直接常量（string,integer和 floating point常量）和对其他类型，字段和方法的符号引用。对于String常量，它的值是在常量池中的。而JVM中的常量池在内存当中是以表的形式存在的，对于String类型，有一张固定长度的CONSTANT_String_info表用来存储文字字符串值，注意：该表只存储文字字符串值，不存储符号引用。说到这里，对常量池中的字符串值的存储位置应该有一个比较明了的理解了。\n\n下面讲讲**八种基本类型的包装类和对象池**\n\nJava中基本类型的包装类的大部分都实现了常量池技术，这些类是 Byte,Short,Integer,Long,Character,Boolean,另外两种浮点数类型的包装类则没有实现。另外 Byte,Short,Integer,Long,Character这5种整型的包装类也只是在对应值小于等于127时才可使用对象池，也即对象不负责创建和管理大于127的这些类的对象。一些对应的测试代码：\n```\npublic class Test {\n    public static void main(String[] args) {\n//5种整形的包装类Byte,Short,Integer,Long,Character的对象，\n//在值小于127时可以使用常量池\n        Integer i1 = 127;\n        Integer i2 = 127;\n        Sstem.out.println(i1 == i2); //输出true  \n//值大于127时，不会从常量池中取对象\n        Integer i3 = 128;\n        Integer i4 = 128;\n        System.out.println(i3 == i4); //输出false  \n//Boolean类也实现了常量池技术\n        Boolean bool1 = true;\n        Boolean bool2 = true;\n        System.out.println(bool1 == bool2); //输出true  \n//浮点类型的包装类没有实现常量池技术\n        Double d1 = 1.0;\n        Double d2 = 1.0;\n        System.out.println(d1 == d2); //输出false  \n    }\n}\n```\n**对Integer对象的代码补充**\n```\n public static Integer valueOf(int i) {\n        final int offset = 128;\n        if (i >= -128 && i <= 127) {\n            return IntegerCache.cache[i + offset];\n        }\n        return new Integer(i);\n    }\n```\n当你直接给一个Integer对象一个int值的时候，其实它调用了valueOf方法，然后你赋的这个值很特别，是128，那么没有进行cache方法，相当于new了两个新对象。所以问题中定义a、b的两句代码就类似于：\n\n```\nInteger a = new Integer(128);\n\nInteger b = new Integer(128);\n```\n这个时候再问你，输出结果是什么？你就知道是false了。如果把这个数换成127，再执行：\n\n```\nInteger a = 127;\n\nInteger b = 127;\n\nSystem.out.println(a == b);\n\n结果就是：true\n```\n进行对象比较时最好还是使用equals，便于按照自己的目的进行控制。这里引出equals()和= =,equals比较的是字符串字面值即比较内容,==比较引用。\n\n**看一下IntegerCache这个类里面的内容：**\n```\nprivate static class IntegerCache {\n        private IntegerCache() {\n        }\n\n        static final Integer cache[] = new Integer[-(-128) + 127 + 1];\n\n        static {\n            for (int i = 0; i < cache.length; i++)\n                cache[i] = new Integer(i - 128);\n        }\n    }\n```\n由于cache[]在IntegerCache类中是静态数组，也就是只需要初始化一次，即static{......}部分，所以，如果Integer 对象初始化时是-128~127的范围，就不需要再重新定义申请空间，都是同一个对象---在IntegerCache.cache中，这样可以在一定程度上提高效率。\n\n**针对String方面的补充**\n\n在同包同类下,引用自同一String对象.<br>\n在同包不同类下,引用自同一String对象.<br>\n在不同包不同类下,依然引用自同一String对象.<br>\n在编译成.class时能够识别为同一字符串的,自动优化成常量,所以也引用自同一String对象.<br>\n在运行时创建的字符串具有独立的内存地址,所以不引用自同一String对象.<br>\nString的intern()方法会查找在常量池中是否存在一份equal相等的字符串,<br>\n如果有则返回一个引用,没有则添加自己的字符串进入常量池，注意：只是字符串部分。 所以这时会存在2份拷贝，常量池的部分被String类私有并管理，自己的那份按对象生命周期继续使用。\n\n在介绍完JVM常量池的相关概念后，接着谈开始提到的\"haha\"的值的内存分布的位置。对于haha的值，实际上是在class文件被JVM装载到内存 当中并被引擎在解析ldc指令并执行ldc指令之前，JVM就已经为haha这个字符串在常量池的CONSTANT_String_info表中分配了空 间来存储haha这个值。既然haha这个字符串常量存储在常量池中，根据《深入JAVA虚拟机》书中描述：常量池是属于类型信息的一部分，类型信息也就 是每一个被转载的类型，这个类型反映到JVM内存模型中是对应存在于JVM内存模型的方法区中，也就是这个类型信息中的常量池概念是存在于在方法区中，而 方法区是在JVM内存模型中的堆中由JVM来分配的。所以，haha的值是应该是存在堆空间中的。\n\n而对于```String s = new String(\"haha\")``` ,它的JVM指令：<br>\n\n```\n0:   new     #16; //class String \n3:   dup \n4:   ldc     #18; //String haha \n6:   invokespecial   #20; //Methodjava/lang/String.\"\":(Ljava/lang/String;)V \n9:   astore_1 \n10:  return\n```\n<br>\n通过上面6个指令，可以看出，String s = new String(\"haha\");中的haha存储在堆空间中，而s则是在操作数栈中。 \n上面是对s和haha值的内存情况的分析和理解；那对于String s = new String(\"haha\");语句,到底创建了几个对象呢? \n我的理解：这里\"haha\"本身就是常量池中的一个对象，而在运行时执行new String()时，将常量池中的对象复制一份放到堆中，并且把堆中的这个对象的引用交给s持有。所以这条语句就创建了2个String对象。如下图所示：<br>\n<img src=\"http://static.open-open.com/lib/uploadImg/20121021/20121021191840_830.jpg\">\n\n\n**String 常量池问题的几个例子：**<br>\n【1】\n```\nString a = \"a1\"; \nString b = \"a\" + 1; \nSystem.out.println((a == b)); //result = true \nString a = \"atrue\"; \nString b = \"a\" + \"true\"; \nSystem.out.println((a == b)); //result = true \nString a = \"a3.4\"; \nString b = \"a\" + 3.4; \nSystem.out.println((a == b)); //result = true\n```\n分析：JVM对于字符串常量的\"+\"号连接，将程序编译期，JVM就将常量字符串的\"+\"连接优化为连接后的值，拿\"a\" + 1来说，经编译器优化后在class中就已经是a1。在编译期其字符串常量的值就确定下来，故上面程序最终的结果都为true。<br>\n\n【2】\n```\nString a = \"ab\"; \nString bb = \"b\"; \nString b = \"a\" + bb; \nSystem.out.println((a == b)); //result = false\n```\n分析：JVM对于字符串引用，由于在字符串的\"+\"连接中，有字符串引用存在，而引用的值在程序编译期是无法确定的，即\"a\" + bb无法被编译器优化，只有在程序运行期来动态分配并将连接后的新地址赋给b。所以上面程序的结果也就为false。\n\n【3】\n```\n\nString a = \"ab\"; \nfinal String bb = \"b\"; \nString b = \"a\" + bb; \nSystem.out.println((a == b)); //result = true\n```\n分析：和[3]中唯一不同的是bb字符串加了final修饰，对于final修饰的变量，它在编译时被解析为常量值的一个本地拷贝存储到自己的常量池中或 嵌入到它的字节码流中。所以此时的\"a\" + bb和\"a\" + \"b\"效果是一样的。故上面程序的结果为true。\n\n【4】\n```\nString a = \"ab\"; \nfinal String bb = getBB(); \nString b = \"a\" + bb; \nSystem.out.println((a == b)); //result = false \nprivate static String getBB() { \nreturn \"b\"; \n}\n```\n分析：JVM对于字符串引用bb，它的值在编译期无法确定，只有在程序运行期调用方法后，将方法的返回值和\"a\"来动态连接并分配地址为b，故上面程序的结果为false。\n\n\n通过上面4个例子可以得出得知：<br>\n```\nString  s  =  \"a\" + \"b\" + \"c\";等价于String s = \"abc\"\n\n这个就不一样了，最终结果等于:\nStringBuffer temp = new StringBuffer();\ntemp.append(a).append(b).append(c);\nString s = temp.toString();\n```\n由上面的分析结果，可就不难推断出String 采用连接运算符（+）效率低下原因分析，形如这样的代码：\n```\n public static void main(String args[]) {\n        String s = null;\n        for (int i = 0; i < 100; i++) {\n            s += \"a\";\n        }\n    }\n```\n\n每做一次 + 就产生个StringBuilder对象，然后append后就扔掉。下次循环再到达时重新产生个StringBuilder对象，然后 append 字符串，如此循环直至结束。 如果我们直接采用 StringBuilder 对象进行 append 的话，我们可以节省 N - 1 次创建和销毁对象的时间。所以对于在循环中要进行字符串连接的应用，一般都是用StringBuffer或StringBulider对象来进行 append操作。\n\n最后贴一个String对象的intern方法理解和分析，这是今天在群里看到的一个题目，也可以说是这篇博客的印子吧：\n```\npublic class Test {\n    private static String a = \"ab\";\n    public static void main(String[] args) {\n        String s1 = \"a\";\n        String s2 = \"b\";\n        String s = s1 + s2;\n        System.out.println(s == a);//false  \n        System.out.println(s.intern() == a);//true  \n    }\n}\n```\n\n\n\n","source":"_posts/JVM常量池及字符串-比较分析.md","raw":"---\ntitle: JVM常量池及字符串==比较分析\ndate: 2017-02-18 20:06:42\ncategories: Java二三事\ntags: \n\t- Java\n\t- 字符串\n\t- 常量池\n---\njava中的常量池技术，是为了方便快捷地创建某些对象而出现的，当需要一个对象时，就可以从池中取一个出来（如果池中没有的话就创建一个），这样在我们需要重复创建相等变量节省了很多时间。<br>\n&nbsp;&nbsp;常量池其实也就是一个内存空间，不同于使用new关键字创建的对象所在的堆空间。String类是java中用的比较多的类，同样为了创建String对象的方便，该类也实现了常量池的技术。<br>\n<!--more-->\n在讲述常量池之前，我们有必要先说说<font color=red>JVM运行时数据区的内存模型</font>。<br>\nJVM运行时数据区的内存模型由五部分组成:<br>\n1.方法区 \n2.堆\n3.JAVA栈\n4.PC寄存器\n5.本地方法栈\n\n例如对于```String s = \"haha\"``` ,它的虚拟机指令：\n```\n0:   ldc     #16; //String haha    \n2:   astore_1 \n3:   return\n```\n\n从上面的ldc指令的执行过程可以得出：s的值是来自被拘留String对象（由解析该入口的进程产生）的引用，即可以理解为是从被拘留String对象的引用复制而来的，故我个人的理解是s的值是存在栈当中。上面是对于s值得分析，接着是对于\"haha\"值的分析,我们知道，对于String s = \"haha\" 其中\"haha\"值在JAVA程序编译期就确定下来了的。简单一点说，就是haha的值在程序编译成class文件后，就在class文件中生成了。执行JAVA程序的过程中，第一步是class文件生 成，然后被JVM装载到内存执行。那么JVM装载这个class到内存中，其中的haha这个值，在内存中是怎么为其开辟空间并存储在哪个区域中呢？\n\n&nbsp;&nbsp;首先我们不妨先来了解一下JVM常量池这个结构,这里我查询了一些资料,在资料中这样描述**常量池**:<br>\n虚拟机必须为每个被装载的类型维护一个常量池。常量池就是该类型所用到常量的一个有序集和，包括直接常量（string,integer和 floating point常量）和对其他类型，字段和方法的符号引用。对于String常量，它的值是在常量池中的。而JVM中的常量池在内存当中是以表的形式存在的，对于String类型，有一张固定长度的CONSTANT_String_info表用来存储文字字符串值，注意：该表只存储文字字符串值，不存储符号引用。说到这里，对常量池中的字符串值的存储位置应该有一个比较明了的理解了。\n\n下面讲讲**八种基本类型的包装类和对象池**\n\nJava中基本类型的包装类的大部分都实现了常量池技术，这些类是 Byte,Short,Integer,Long,Character,Boolean,另外两种浮点数类型的包装类则没有实现。另外 Byte,Short,Integer,Long,Character这5种整型的包装类也只是在对应值小于等于127时才可使用对象池，也即对象不负责创建和管理大于127的这些类的对象。一些对应的测试代码：\n```\npublic class Test {\n    public static void main(String[] args) {\n//5种整形的包装类Byte,Short,Integer,Long,Character的对象，\n//在值小于127时可以使用常量池\n        Integer i1 = 127;\n        Integer i2 = 127;\n        Sstem.out.println(i1 == i2); //输出true  \n//值大于127时，不会从常量池中取对象\n        Integer i3 = 128;\n        Integer i4 = 128;\n        System.out.println(i3 == i4); //输出false  \n//Boolean类也实现了常量池技术\n        Boolean bool1 = true;\n        Boolean bool2 = true;\n        System.out.println(bool1 == bool2); //输出true  \n//浮点类型的包装类没有实现常量池技术\n        Double d1 = 1.0;\n        Double d2 = 1.0;\n        System.out.println(d1 == d2); //输出false  \n    }\n}\n```\n**对Integer对象的代码补充**\n```\n public static Integer valueOf(int i) {\n        final int offset = 128;\n        if (i >= -128 && i <= 127) {\n            return IntegerCache.cache[i + offset];\n        }\n        return new Integer(i);\n    }\n```\n当你直接给一个Integer对象一个int值的时候，其实它调用了valueOf方法，然后你赋的这个值很特别，是128，那么没有进行cache方法，相当于new了两个新对象。所以问题中定义a、b的两句代码就类似于：\n\n```\nInteger a = new Integer(128);\n\nInteger b = new Integer(128);\n```\n这个时候再问你，输出结果是什么？你就知道是false了。如果把这个数换成127，再执行：\n\n```\nInteger a = 127;\n\nInteger b = 127;\n\nSystem.out.println(a == b);\n\n结果就是：true\n```\n进行对象比较时最好还是使用equals，便于按照自己的目的进行控制。这里引出equals()和= =,equals比较的是字符串字面值即比较内容,==比较引用。\n\n**看一下IntegerCache这个类里面的内容：**\n```\nprivate static class IntegerCache {\n        private IntegerCache() {\n        }\n\n        static final Integer cache[] = new Integer[-(-128) + 127 + 1];\n\n        static {\n            for (int i = 0; i < cache.length; i++)\n                cache[i] = new Integer(i - 128);\n        }\n    }\n```\n由于cache[]在IntegerCache类中是静态数组，也就是只需要初始化一次，即static{......}部分，所以，如果Integer 对象初始化时是-128~127的范围，就不需要再重新定义申请空间，都是同一个对象---在IntegerCache.cache中，这样可以在一定程度上提高效率。\n\n**针对String方面的补充**\n\n在同包同类下,引用自同一String对象.<br>\n在同包不同类下,引用自同一String对象.<br>\n在不同包不同类下,依然引用自同一String对象.<br>\n在编译成.class时能够识别为同一字符串的,自动优化成常量,所以也引用自同一String对象.<br>\n在运行时创建的字符串具有独立的内存地址,所以不引用自同一String对象.<br>\nString的intern()方法会查找在常量池中是否存在一份equal相等的字符串,<br>\n如果有则返回一个引用,没有则添加自己的字符串进入常量池，注意：只是字符串部分。 所以这时会存在2份拷贝，常量池的部分被String类私有并管理，自己的那份按对象生命周期继续使用。\n\n在介绍完JVM常量池的相关概念后，接着谈开始提到的\"haha\"的值的内存分布的位置。对于haha的值，实际上是在class文件被JVM装载到内存 当中并被引擎在解析ldc指令并执行ldc指令之前，JVM就已经为haha这个字符串在常量池的CONSTANT_String_info表中分配了空 间来存储haha这个值。既然haha这个字符串常量存储在常量池中，根据《深入JAVA虚拟机》书中描述：常量池是属于类型信息的一部分，类型信息也就 是每一个被转载的类型，这个类型反映到JVM内存模型中是对应存在于JVM内存模型的方法区中，也就是这个类型信息中的常量池概念是存在于在方法区中，而 方法区是在JVM内存模型中的堆中由JVM来分配的。所以，haha的值是应该是存在堆空间中的。\n\n而对于```String s = new String(\"haha\")``` ,它的JVM指令：<br>\n\n```\n0:   new     #16; //class String \n3:   dup \n4:   ldc     #18; //String haha \n6:   invokespecial   #20; //Methodjava/lang/String.\"\":(Ljava/lang/String;)V \n9:   astore_1 \n10:  return\n```\n<br>\n通过上面6个指令，可以看出，String s = new String(\"haha\");中的haha存储在堆空间中，而s则是在操作数栈中。 \n上面是对s和haha值的内存情况的分析和理解；那对于String s = new String(\"haha\");语句,到底创建了几个对象呢? \n我的理解：这里\"haha\"本身就是常量池中的一个对象，而在运行时执行new String()时，将常量池中的对象复制一份放到堆中，并且把堆中的这个对象的引用交给s持有。所以这条语句就创建了2个String对象。如下图所示：<br>\n<img src=\"http://static.open-open.com/lib/uploadImg/20121021/20121021191840_830.jpg\">\n\n\n**String 常量池问题的几个例子：**<br>\n【1】\n```\nString a = \"a1\"; \nString b = \"a\" + 1; \nSystem.out.println((a == b)); //result = true \nString a = \"atrue\"; \nString b = \"a\" + \"true\"; \nSystem.out.println((a == b)); //result = true \nString a = \"a3.4\"; \nString b = \"a\" + 3.4; \nSystem.out.println((a == b)); //result = true\n```\n分析：JVM对于字符串常量的\"+\"号连接，将程序编译期，JVM就将常量字符串的\"+\"连接优化为连接后的值，拿\"a\" + 1来说，经编译器优化后在class中就已经是a1。在编译期其字符串常量的值就确定下来，故上面程序最终的结果都为true。<br>\n\n【2】\n```\nString a = \"ab\"; \nString bb = \"b\"; \nString b = \"a\" + bb; \nSystem.out.println((a == b)); //result = false\n```\n分析：JVM对于字符串引用，由于在字符串的\"+\"连接中，有字符串引用存在，而引用的值在程序编译期是无法确定的，即\"a\" + bb无法被编译器优化，只有在程序运行期来动态分配并将连接后的新地址赋给b。所以上面程序的结果也就为false。\n\n【3】\n```\n\nString a = \"ab\"; \nfinal String bb = \"b\"; \nString b = \"a\" + bb; \nSystem.out.println((a == b)); //result = true\n```\n分析：和[3]中唯一不同的是bb字符串加了final修饰，对于final修饰的变量，它在编译时被解析为常量值的一个本地拷贝存储到自己的常量池中或 嵌入到它的字节码流中。所以此时的\"a\" + bb和\"a\" + \"b\"效果是一样的。故上面程序的结果为true。\n\n【4】\n```\nString a = \"ab\"; \nfinal String bb = getBB(); \nString b = \"a\" + bb; \nSystem.out.println((a == b)); //result = false \nprivate static String getBB() { \nreturn \"b\"; \n}\n```\n分析：JVM对于字符串引用bb，它的值在编译期无法确定，只有在程序运行期调用方法后，将方法的返回值和\"a\"来动态连接并分配地址为b，故上面程序的结果为false。\n\n\n通过上面4个例子可以得出得知：<br>\n```\nString  s  =  \"a\" + \"b\" + \"c\";等价于String s = \"abc\"\n\n这个就不一样了，最终结果等于:\nStringBuffer temp = new StringBuffer();\ntemp.append(a).append(b).append(c);\nString s = temp.toString();\n```\n由上面的分析结果，可就不难推断出String 采用连接运算符（+）效率低下原因分析，形如这样的代码：\n```\n public static void main(String args[]) {\n        String s = null;\n        for (int i = 0; i < 100; i++) {\n            s += \"a\";\n        }\n    }\n```\n\n每做一次 + 就产生个StringBuilder对象，然后append后就扔掉。下次循环再到达时重新产生个StringBuilder对象，然后 append 字符串，如此循环直至结束。 如果我们直接采用 StringBuilder 对象进行 append 的话，我们可以节省 N - 1 次创建和销毁对象的时间。所以对于在循环中要进行字符串连接的应用，一般都是用StringBuffer或StringBulider对象来进行 append操作。\n\n最后贴一个String对象的intern方法理解和分析，这是今天在群里看到的一个题目，也可以说是这篇博客的印子吧：\n```\npublic class Test {\n    private static String a = \"ab\";\n    public static void main(String[] args) {\n        String s1 = \"a\";\n        String s2 = \"b\";\n        String s = s1 + s2;\n        System.out.println(s == a);//false  \n        System.out.println(s.intern() == a);//true  \n    }\n}\n```\n\n\n\n","slug":"JVM常量池及字符串-比较分析","published":1,"updated":"2017-02-18T12:45:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3ke40006rhsoq9ftx4j8","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>java中的常量池技术，是为了方便快捷地创建某些对象而出现的，当需要一个对象时，就可以从池中取一个出来（如果池中没有的话就创建一个），这样在我们需要重复创建相等变量节省了很多时间。<br><br>&nbsp;&nbsp;常量池其实也就是一个内存空间，不同于使用new关键字创建的对象所在的堆空间。String类是java中用的比较多的类，同样为了创建String对象的方便，该类也实现了常量池的技术。<br><br><a id=\"more\"></a><br>在讲述常量池之前，我们有必要先说说<font color=\"red\">JVM运行时数据区的内存模型</font>。<br><br>JVM运行时数据区的内存模型由五部分组成:<br><br>1.方法区<br>2.堆<br>3.JAVA栈<br>4.PC寄存器<br>5.本地方法栈</p>\n<p>例如对于<figure class=\"highlight plain\"><figcaption><span>s = \"haha\"``` ,它的虚拟机指令：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">0:   ldc     #16; //String haha    </div><div class=\"line\">2:   astore_1 </div><div class=\"line\">3:   return</div></pre></td></tr></table></figure></p>\n<p>从上面的ldc指令的执行过程可以得出：s的值是来自被拘留String对象（由解析该入口的进程产生）的引用，即可以理解为是从被拘留String对象的引用复制而来的，故我个人的理解是s的值是存在栈当中。上面是对于s值得分析，接着是对于”haha”值的分析,我们知道，对于String s = “haha” 其中”haha”值在JAVA程序编译期就确定下来了的。简单一点说，就是haha的值在程序编译成class文件后，就在class文件中生成了。执行JAVA程序的过程中，第一步是class文件生 成，然后被JVM装载到内存执行。那么JVM装载这个class到内存中，其中的haha这个值，在内存中是怎么为其开辟空间并存储在哪个区域中呢？</p>\n<p>&nbsp;&nbsp;首先我们不妨先来了解一下JVM常量池这个结构,这里我查询了一些资料,在资料中这样描述<strong>常量池</strong>:<br><br>虚拟机必须为每个被装载的类型维护一个常量池。常量池就是该类型所用到常量的一个有序集和，包括直接常量（string,integer和 floating point常量）和对其他类型，字段和方法的符号引用。对于String常量，它的值是在常量池中的。而JVM中的常量池在内存当中是以表的形式存在的，对于String类型，有一张固定长度的CONSTANT_String_info表用来存储文字字符串值，注意：该表只存储文字字符串值，不存储符号引用。说到这里，对常量池中的字符串值的存储位置应该有一个比较明了的理解了。</p>\n<p>下面讲讲<strong>八种基本类型的包装类和对象池</strong></p>\n<p>Java中基本类型的包装类的大部分都实现了常量池技术，这些类是 Byte,Short,Integer,Long,Character,Boolean,另外两种浮点数类型的包装类则没有实现。另外 Byte,Short,Integer,Long,Character这5种整型的包装类也只是在对应值小于等于127时才可使用对象池，也即对象不负责创建和管理大于127的这些类的对象。一些对应的测试代码：<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Test &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\"><span class=\"comment\">//5种整形的包装类Byte,Short,Integer,Long,Character的对象，</span></div><div class=\"line\"><span class=\"comment\">//在值小于127时可以使用常量池</span></div><div class=\"line\">        Integer i1 = <span class=\"number\">127</span>;</div><div class=\"line\">        Integer i2 = <span class=\"number\">127</span>;</div><div class=\"line\">        Sstem.out.<span class=\"keyword\">println</span>(i1 == i2); <span class=\"comment\">//输出true  </span></div><div class=\"line\"><span class=\"comment\">//值大于127时，不会从常量池中取对象</span></div><div class=\"line\">        Integer i3 = <span class=\"number\">128</span>;</div><div class=\"line\">        Integer i4 = <span class=\"number\">128</span>;</div><div class=\"line\">        System.out.<span class=\"keyword\">println</span>(i3 == i4); <span class=\"comment\">//输出false  </span></div><div class=\"line\"><span class=\"comment\">//Boolean类也实现了常量池技术</span></div><div class=\"line\">        <span class=\"keyword\">Boolean</span> bool1 = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">Boolean</span> bool2 = <span class=\"keyword\">true</span>;</div><div class=\"line\">        System.out.<span class=\"keyword\">println</span>(bool1 == bool2); <span class=\"comment\">//输出true  </span></div><div class=\"line\"><span class=\"comment\">//浮点类型的包装类没有实现常量池技术</span></div><div class=\"line\">        <span class=\"keyword\">Double</span> d1 = <span class=\"number\">1.0</span>;</div><div class=\"line\">        <span class=\"keyword\">Double</span> d2 = <span class=\"number\">1.0</span>;</div><div class=\"line\">        System.out.<span class=\"keyword\">println</span>(d1 == d2); <span class=\"comment\">//输出false  </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>对Integer对象的代码补充</strong><br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offset = <span class=\"number\">128</span>;</div><div class=\"line\">       <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">-128</span> &amp;&amp; i &lt;= <span class=\"number\">127</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> IntegerCache.cache[i + offset];</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>当你直接给一个Integer对象一个int值的时候，其实它调用了valueOf方法，然后你赋的这个值很特别，是128，那么没有进行cache方法，相当于new了两个新对象。所以问题中定义a、b的两句代码就类似于：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Integer</span> a = <span class=\"literal\">new</span> <span class=\"built_in\">Integer</span>(<span class=\"number\">128</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Integer</span> b = <span class=\"literal\">new</span> <span class=\"built_in\">Integer</span>(<span class=\"number\">128</span>);</div></pre></td></tr></table></figure>\n<p>这个时候再问你，输出结果是什么？你就知道是false了。如果把这个数换成127，再执行：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Integer a = <span class=\"number\">127</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">Integer <span class=\"keyword\">b </span>= <span class=\"number\">127</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">System.out.println(a == <span class=\"keyword\">b);</span></div><div class=\"line\"></div><div class=\"line\">结果就是：true</div></pre></td></tr></table></figure>\n<p>进行对象比较时最好还是使用equals，便于按照自己的目的进行控制。这里引出equals()和= =,equals比较的是字符串字面值即比较内容,==比较引用。</p>\n<p><strong>看一下IntegerCache这个类里面的内容：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerCache</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">IntegerCache</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer cache[] = <span class=\"keyword\">new</span> Integer[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cache.length; i++)</div><div class=\"line\">                cache[i] = <span class=\"keyword\">new</span> Integer(i - <span class=\"number\">128</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>由于cache[]在IntegerCache类中是静态数组，也就是只需要初始化一次，即static{……}部分，所以，如果Integer 对象初始化时是-128~127的范围，就不需要再重新定义申请空间，都是同一个对象—在IntegerCache.cache中，这样可以在一定程度上提高效率。</p>\n<p><strong>针对String方面的补充</strong></p>\n<p>在同包同类下,引用自同一String对象.<br><br>在同包不同类下,引用自同一String对象.<br><br>在不同包不同类下,依然引用自同一String对象.<br><br>在编译成.class时能够识别为同一字符串的,自动优化成常量,所以也引用自同一String对象.<br><br>在运行时创建的字符串具有独立的内存地址,所以不引用自同一String对象.<br><br>String的intern()方法会查找在常量池中是否存在一份equal相等的字符串,<br><br>如果有则返回一个引用,没有则添加自己的字符串进入常量池，注意：只是字符串部分。 所以这时会存在2份拷贝，常量池的部分被String类私有并管理，自己的那份按对象生命周期继续使用。</p>\n<p>在介绍完JVM常量池的相关概念后，接着谈开始提到的”haha”的值的内存分布的位置。对于haha的值，实际上是在class文件被JVM装载到内存 当中并被引擎在解析ldc指令并执行ldc指令之前，JVM就已经为haha这个字符串在常量池的CONSTANT_String_info表中分配了空 间来存储haha这个值。既然haha这个字符串常量存储在常量池中，根据《深入JAVA虚拟机》书中描述：常量池是属于类型信息的一部分，类型信息也就 是每一个被转载的类型，这个类型反映到JVM内存模型中是对应存在于JVM内存模型的方法区中，也就是这个类型信息中的常量池概念是存在于在方法区中，而 方法区是在JVM内存模型中的堆中由JVM来分配的。所以，haha的值是应该是存在堆空间中的。</p>\n<p>而对于<figure class=\"highlight plain\"><figcaption><span>s = new String(\"haha\")``` ,它的JVM指令：<br></span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>0:   new     #16; //class String<br>3:   dup<br>4:   ldc     #18; //String haha<br>6:   invokespecial   #20; //Methodjava/lang/String.””:(Ljava/lang/String;)V<br>9:   astore_1<br>10:  return<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;br&gt;</div><div class=\"line\">通过上面<span class=\"number\">6</span>个指令，可以看出，<span class=\"keyword\">String</span> s = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>(<span class=\"string\">\"haha\"</span>);中的haha存储在堆空间中，而s则是在操作数栈中。 </div><div class=\"line\">上面是对s和haha值的内存情况的分析和理解；那对于<span class=\"keyword\">String</span> s = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>(<span class=\"string\">\"haha\"</span>);语句,到底创建了几个对象呢? </div><div class=\"line\">我的理解：这里<span class=\"string\">\"haha\"</span>本身就是常量池中的一个对象，而在运行时执行<span class=\"keyword\">new</span> <span class=\"keyword\">String</span>()时，将常量池中的对象复制一份放到堆中，并且把堆中的这个对象的引用交给s持有。所以这条语句就创建了<span class=\"number\">2</span>个<span class=\"keyword\">String</span>对象。如下图所示：&lt;br&gt;</div><div class=\"line\">&lt;img src=<span class=\"string\">\"http://static.open-open.com/lib/uploadImg/20121021/20121021191840_830.jpg\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">**<span class=\"keyword\">String</span> 常量池问题的几个例子：**&lt;br&gt;</div><div class=\"line\">【<span class=\"number\">1</span>】</div></pre></td></tr></table></figure></p>\n<p>String a = “a1”;<br>String b = “a” + 1;<br>System.out.println((a == b)); //result = true<br>String a = “atrue”;<br>String b = “a” + “true”;<br>System.out.println((a == b)); //result = true<br>String a = “a3.4”;<br>String b = “a” + 3.4;<br>System.out.println((a == b)); //result = true<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">分析：JVM对于字符串常量的<span class=\"string\">\"+\"</span>号连接，将程序编译期，JVM就将常量字符串的<span class=\"string\">\"+\"</span>连接优化为连接后的值，拿<span class=\"string\">\"a\"</span> + <span class=\"number\">1</span>来说，经编译器优化后在<span class=\"class\"><span class=\"keyword\">class</span>中就已经是<span class=\"title\">a1</span>。在编译期其字符串常量的值就确定下来，故上面程序最终的结果都为<span class=\"title\">true</span>。&lt;br&gt;</span></div><div class=\"line\"></div><div class=\"line\">【<span class=\"number\">2</span>】</div></pre></td></tr></table></figure></p>\n<p>String a = “ab”;<br>String bb = “b”;<br>String b = “a” + bb;<br>System.out.println((a == b)); //result = false<br><figure class=\"highlight smalltalk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">分析：<span class=\"type\">JVM</span>对于字符串引用，由于在字符串的<span class=\"comment\">\"+\"</span>连接中，有字符串引用存在，而引用的值在程序编译期是无法确定的，即<span class=\"comment\">\"a\"</span> + bb无法被编译器优化，只有在程序运行期来动态分配并将连接后的新地址赋给b。所以上面程序的结果也就为<span class=\"keyword\">false</span>。</div><div class=\"line\"></div><div class=\"line\">【<span class=\"number\">3</span>】</div></pre></td></tr></table></figure></p>\n<p>String a = “ab”;<br>final String bb = “b”;<br>String b = “a” + bb;<br>System.out.println((a == b)); //result = true<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">分析：和[<span class=\"number\">3</span>]中唯一不同的是bb字符串加了<span class=\"keyword\">final</span>修饰，对于<span class=\"keyword\">final</span>修饰的变量，它在编译时被解析为常量值的一个本地拷贝存储到自己的常量池中或 嵌入到它的字节码流中。所以此时的<span class=\"string\">\"a\"</span> + bb和<span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span>效果是一样的。故上面程序的结果为<span class=\"literal\">true</span>。</div><div class=\"line\"></div><div class=\"line\">【<span class=\"number\">4</span>】</div></pre></td></tr></table></figure></p>\n<p>String a = “ab”;<br>final String bb = getBB();<br>String b = “a” + bb;<br>System.out.println((a == b)); //result = false<br>private static String getBB() {<br>return “b”;<br>}<br><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">分析：JVM对于字符串引用bb，它的值在编译期无法确定，只有在程序运行期调用方法后，将方法的返回值和<span class=\"string\">\"a\"</span>来动态连接并分配地址为b，故上面程序的结果为<span class=\"keyword\">false</span>。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">通过上面<span class=\"number\">4</span>个例子可以得出得知：&lt;<span class=\"keyword\">br</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>String  s  =  “a” + “b” + “c”;等价于String s = “abc”</p>\n<p>这个就不一样了，最终结果等于:<br>StringBuffer temp = new StringBuffer();<br>temp.append(a).append(b).append(c);<br>String s = temp.toString();<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">由上面的分析结果，可就不难推断出<span class=\"keyword\">String</span> 采用连接运算符（+）效率低下原因分析，形如这样的代码：</div></pre></td></tr></table></figure></p>\n<p> public static void main(String args[]) {<br>        String s = null;<br>        for (int i = 0; i &lt; 100; i++) {<br>            s += “a”;<br>        }<br>    }<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">每做一次 + 就产生个StringBuilder对象，然后<span class=\"built_in\">append</span>后就扔掉。下次循环再到达时重新产生个StringBuilder对象，然后 <span class=\"built_in\">append</span> 字符串，如此循环直至结束。 如果我们直接采用 StringBuilder 对象进行 <span class=\"built_in\">append</span> 的话，我们可以节省 N - <span class=\"number\">1</span> 次创建和销毁对象的时间。所以对于在循环中要进行字符串连接的应用，一般都是用StringBuffer或StringBulider对象来进行 <span class=\"built_in\">append</span>操作。</div><div class=\"line\"></div><div class=\"line\">最后贴一个<span class=\"keyword\">String</span>对象的intern方法理解和分析，这是今天在群里看到的一个题目，也可以说是这篇博客的印子吧：</div></pre></td></tr></table></figure></p>\n<p>public class Test {<br>    private static String a = “ab”;<br>    public static void main(String[] args) {<br>        String s1 = “a”;<br>        String s2 = “b”;<br>        String s = s1 + s2;<br>        System.out.println(s == a);//false<br>        System.out.println(s.intern() == a);//true<br>    }<br>}<br>```</p>\n","excerpt":"<p>java中的常量池技术，是为了方便快捷地创建某些对象而出现的，当需要一个对象时，就可以从池中取一个出来（如果池中没有的话就创建一个），这样在我们需要重复创建相等变量节省了很多时间。<br><br>&nbsp;&nbsp;常量池其实也就是一个内存空间，不同于使用new关键字创建的对象所在的堆空间。String类是java中用的比较多的类，同样为了创建String对象的方便，该类也实现了常量池的技术。<br><br></p>","more":"<br>在讲述常量池之前，我们有必要先说说<font color=\"red\">JVM运行时数据区的内存模型</font>。<br><br>JVM运行时数据区的内存模型由五部分组成:<br><br>1.方法区<br>2.堆<br>3.JAVA栈<br>4.PC寄存器<br>5.本地方法栈<p></p>\n<p>例如对于<figure class=\"highlight plain\"><figcaption><span>s = \"haha\"``` ,它的虚拟机指令：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">0:   ldc     #16; //String haha    </div><div class=\"line\">2:   astore_1 </div><div class=\"line\">3:   return</div></pre></td></tr></table></figure></p>\n<p>从上面的ldc指令的执行过程可以得出：s的值是来自被拘留String对象（由解析该入口的进程产生）的引用，即可以理解为是从被拘留String对象的引用复制而来的，故我个人的理解是s的值是存在栈当中。上面是对于s值得分析，接着是对于”haha”值的分析,我们知道，对于String s = “haha” 其中”haha”值在JAVA程序编译期就确定下来了的。简单一点说，就是haha的值在程序编译成class文件后，就在class文件中生成了。执行JAVA程序的过程中，第一步是class文件生 成，然后被JVM装载到内存执行。那么JVM装载这个class到内存中，其中的haha这个值，在内存中是怎么为其开辟空间并存储在哪个区域中呢？</p>\n<p>&nbsp;&nbsp;首先我们不妨先来了解一下JVM常量池这个结构,这里我查询了一些资料,在资料中这样描述<strong>常量池</strong>:<br><br>虚拟机必须为每个被装载的类型维护一个常量池。常量池就是该类型所用到常量的一个有序集和，包括直接常量（string,integer和 floating point常量）和对其他类型，字段和方法的符号引用。对于String常量，它的值是在常量池中的。而JVM中的常量池在内存当中是以表的形式存在的，对于String类型，有一张固定长度的CONSTANT_String_info表用来存储文字字符串值，注意：该表只存储文字字符串值，不存储符号引用。说到这里，对常量池中的字符串值的存储位置应该有一个比较明了的理解了。</p>\n<p>下面讲讲<strong>八种基本类型的包装类和对象池</strong></p>\n<p>Java中基本类型的包装类的大部分都实现了常量池技术，这些类是 Byte,Short,Integer,Long,Character,Boolean,另外两种浮点数类型的包装类则没有实现。另外 Byte,Short,Integer,Long,Character这5种整型的包装类也只是在对应值小于等于127时才可使用对象池，也即对象不负责创建和管理大于127的这些类的对象。一些对应的测试代码：<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Test &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\"><span class=\"comment\">//5种整形的包装类Byte,Short,Integer,Long,Character的对象，</span></div><div class=\"line\"><span class=\"comment\">//在值小于127时可以使用常量池</span></div><div class=\"line\">        Integer i1 = <span class=\"number\">127</span>;</div><div class=\"line\">        Integer i2 = <span class=\"number\">127</span>;</div><div class=\"line\">        Sstem.out.<span class=\"keyword\">println</span>(i1 == i2); <span class=\"comment\">//输出true  </span></div><div class=\"line\"><span class=\"comment\">//值大于127时，不会从常量池中取对象</span></div><div class=\"line\">        Integer i3 = <span class=\"number\">128</span>;</div><div class=\"line\">        Integer i4 = <span class=\"number\">128</span>;</div><div class=\"line\">        System.out.<span class=\"keyword\">println</span>(i3 == i4); <span class=\"comment\">//输出false  </span></div><div class=\"line\"><span class=\"comment\">//Boolean类也实现了常量池技术</span></div><div class=\"line\">        <span class=\"keyword\">Boolean</span> bool1 = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">Boolean</span> bool2 = <span class=\"keyword\">true</span>;</div><div class=\"line\">        System.out.<span class=\"keyword\">println</span>(bool1 == bool2); <span class=\"comment\">//输出true  </span></div><div class=\"line\"><span class=\"comment\">//浮点类型的包装类没有实现常量池技术</span></div><div class=\"line\">        <span class=\"keyword\">Double</span> d1 = <span class=\"number\">1.0</span>;</div><div class=\"line\">        <span class=\"keyword\">Double</span> d2 = <span class=\"number\">1.0</span>;</div><div class=\"line\">        System.out.<span class=\"keyword\">println</span>(d1 == d2); <span class=\"comment\">//输出false  </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>对Integer对象的代码补充</strong><br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offset = <span class=\"number\">128</span>;</div><div class=\"line\">       <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">-128</span> &amp;&amp; i &lt;= <span class=\"number\">127</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> IntegerCache.cache[i + offset];</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>当你直接给一个Integer对象一个int值的时候，其实它调用了valueOf方法，然后你赋的这个值很特别，是128，那么没有进行cache方法，相当于new了两个新对象。所以问题中定义a、b的两句代码就类似于：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Integer</span> a = <span class=\"literal\">new</span> <span class=\"built_in\">Integer</span>(<span class=\"number\">128</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Integer</span> b = <span class=\"literal\">new</span> <span class=\"built_in\">Integer</span>(<span class=\"number\">128</span>);</div></pre></td></tr></table></figure>\n<p>这个时候再问你，输出结果是什么？你就知道是false了。如果把这个数换成127，再执行：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Integer a = <span class=\"number\">127</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">Integer <span class=\"keyword\">b </span>= <span class=\"number\">127</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">System.out.println(a == <span class=\"keyword\">b);</span></div><div class=\"line\"></div><div class=\"line\">结果就是：true</div></pre></td></tr></table></figure>\n<p>进行对象比较时最好还是使用equals，便于按照自己的目的进行控制。这里引出equals()和= =,equals比较的是字符串字面值即比较内容,==比较引用。</p>\n<p><strong>看一下IntegerCache这个类里面的内容：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerCache</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">IntegerCache</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer cache[] = <span class=\"keyword\">new</span> Integer[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cache.length; i++)</div><div class=\"line\">                cache[i] = <span class=\"keyword\">new</span> Integer(i - <span class=\"number\">128</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>由于cache[]在IntegerCache类中是静态数组，也就是只需要初始化一次，即static{……}部分，所以，如果Integer 对象初始化时是-128~127的范围，就不需要再重新定义申请空间，都是同一个对象—在IntegerCache.cache中，这样可以在一定程度上提高效率。</p>\n<p><strong>针对String方面的补充</strong></p>\n<p>在同包同类下,引用自同一String对象.<br><br>在同包不同类下,引用自同一String对象.<br><br>在不同包不同类下,依然引用自同一String对象.<br><br>在编译成.class时能够识别为同一字符串的,自动优化成常量,所以也引用自同一String对象.<br><br>在运行时创建的字符串具有独立的内存地址,所以不引用自同一String对象.<br><br>String的intern()方法会查找在常量池中是否存在一份equal相等的字符串,<br><br>如果有则返回一个引用,没有则添加自己的字符串进入常量池，注意：只是字符串部分。 所以这时会存在2份拷贝，常量池的部分被String类私有并管理，自己的那份按对象生命周期继续使用。</p>\n<p>在介绍完JVM常量池的相关概念后，接着谈开始提到的”haha”的值的内存分布的位置。对于haha的值，实际上是在class文件被JVM装载到内存 当中并被引擎在解析ldc指令并执行ldc指令之前，JVM就已经为haha这个字符串在常量池的CONSTANT_String_info表中分配了空 间来存储haha这个值。既然haha这个字符串常量存储在常量池中，根据《深入JAVA虚拟机》书中描述：常量池是属于类型信息的一部分，类型信息也就 是每一个被转载的类型，这个类型反映到JVM内存模型中是对应存在于JVM内存模型的方法区中，也就是这个类型信息中的常量池概念是存在于在方法区中，而 方法区是在JVM内存模型中的堆中由JVM来分配的。所以，haha的值是应该是存在堆空间中的。</p>\n<p>而对于<figure class=\"highlight plain\"><figcaption><span>s = new String(\"haha\")``` ,它的JVM指令：<br></span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<p>0:   new     #16; //class String<br>3:   dup<br>4:   ldc     #18; //String haha<br>6:   invokespecial   #20; //Methodjava/lang/String.””:(Ljava/lang/String;)V<br>9:   astore_1<br>10:  return<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;br&gt;</div><div class=\"line\">通过上面<span class=\"number\">6</span>个指令，可以看出，<span class=\"keyword\">String</span> s = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>(<span class=\"string\">\"haha\"</span>);中的haha存储在堆空间中，而s则是在操作数栈中。 </div><div class=\"line\">上面是对s和haha值的内存情况的分析和理解；那对于<span class=\"keyword\">String</span> s = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>(<span class=\"string\">\"haha\"</span>);语句,到底创建了几个对象呢? </div><div class=\"line\">我的理解：这里<span class=\"string\">\"haha\"</span>本身就是常量池中的一个对象，而在运行时执行<span class=\"keyword\">new</span> <span class=\"keyword\">String</span>()时，将常量池中的对象复制一份放到堆中，并且把堆中的这个对象的引用交给s持有。所以这条语句就创建了<span class=\"number\">2</span>个<span class=\"keyword\">String</span>对象。如下图所示：&lt;br&gt;</div><div class=\"line\">&lt;img src=<span class=\"string\">\"http://static.open-open.com/lib/uploadImg/20121021/20121021191840_830.jpg\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">**<span class=\"keyword\">String</span> 常量池问题的几个例子：**&lt;br&gt;</div><div class=\"line\">【<span class=\"number\">1</span>】</div></pre></td></tr></table></figure></p>\n<p>String a = “a1”;<br>String b = “a” + 1;<br>System.out.println((a == b)); //result = true<br>String a = “atrue”;<br>String b = “a” + “true”;<br>System.out.println((a == b)); //result = true<br>String a = “a3.4”;<br>String b = “a” + 3.4;<br>System.out.println((a == b)); //result = true<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">分析：JVM对于字符串常量的<span class=\"string\">\"+\"</span>号连接，将程序编译期，JVM就将常量字符串的<span class=\"string\">\"+\"</span>连接优化为连接后的值，拿<span class=\"string\">\"a\"</span> + <span class=\"number\">1</span>来说，经编译器优化后在<span class=\"class\"><span class=\"keyword\">class</span>中就已经是<span class=\"title\">a1</span>。在编译期其字符串常量的值就确定下来，故上面程序最终的结果都为<span class=\"title\">true</span>。&lt;br&gt;</span></div><div class=\"line\"></div><div class=\"line\">【<span class=\"number\">2</span>】</div></pre></td></tr></table></figure></p>\n<p>String a = “ab”;<br>String bb = “b”;<br>String b = “a” + bb;<br>System.out.println((a == b)); //result = false<br><figure class=\"highlight smalltalk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">分析：<span class=\"type\">JVM</span>对于字符串引用，由于在字符串的<span class=\"comment\">\"+\"</span>连接中，有字符串引用存在，而引用的值在程序编译期是无法确定的，即<span class=\"comment\">\"a\"</span> + bb无法被编译器优化，只有在程序运行期来动态分配并将连接后的新地址赋给b。所以上面程序的结果也就为<span class=\"keyword\">false</span>。</div><div class=\"line\"></div><div class=\"line\">【<span class=\"number\">3</span>】</div></pre></td></tr></table></figure></p>\n<p>String a = “ab”;<br>final String bb = “b”;<br>String b = “a” + bb;<br>System.out.println((a == b)); //result = true<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">分析：和[<span class=\"number\">3</span>]中唯一不同的是bb字符串加了<span class=\"keyword\">final</span>修饰，对于<span class=\"keyword\">final</span>修饰的变量，它在编译时被解析为常量值的一个本地拷贝存储到自己的常量池中或 嵌入到它的字节码流中。所以此时的<span class=\"string\">\"a\"</span> + bb和<span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span>效果是一样的。故上面程序的结果为<span class=\"literal\">true</span>。</div><div class=\"line\"></div><div class=\"line\">【<span class=\"number\">4</span>】</div></pre></td></tr></table></figure></p>\n<p>String a = “ab”;<br>final String bb = getBB();<br>String b = “a” + bb;<br>System.out.println((a == b)); //result = false<br>private static String getBB() {<br>return “b”;<br>}<br><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">分析：JVM对于字符串引用bb，它的值在编译期无法确定，只有在程序运行期调用方法后，将方法的返回值和<span class=\"string\">\"a\"</span>来动态连接并分配地址为b，故上面程序的结果为<span class=\"keyword\">false</span>。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">通过上面<span class=\"number\">4</span>个例子可以得出得知：&lt;<span class=\"keyword\">br</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>String  s  =  “a” + “b” + “c”;等价于String s = “abc”</p>\n<p>这个就不一样了，最终结果等于:<br>StringBuffer temp = new StringBuffer();<br>temp.append(a).append(b).append(c);<br>String s = temp.toString();<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">由上面的分析结果，可就不难推断出<span class=\"keyword\">String</span> 采用连接运算符（+）效率低下原因分析，形如这样的代码：</div></pre></td></tr></table></figure></p>\n<p> public static void main(String args[]) {<br>        String s = null;<br>        for (int i = 0; i &lt; 100; i++) {<br>            s += “a”;<br>        }<br>    }<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">每做一次 + 就产生个StringBuilder对象，然后<span class=\"built_in\">append</span>后就扔掉。下次循环再到达时重新产生个StringBuilder对象，然后 <span class=\"built_in\">append</span> 字符串，如此循环直至结束。 如果我们直接采用 StringBuilder 对象进行 <span class=\"built_in\">append</span> 的话，我们可以节省 N - <span class=\"number\">1</span> 次创建和销毁对象的时间。所以对于在循环中要进行字符串连接的应用，一般都是用StringBuffer或StringBulider对象来进行 <span class=\"built_in\">append</span>操作。</div><div class=\"line\"></div><div class=\"line\">最后贴一个<span class=\"keyword\">String</span>对象的intern方法理解和分析，这是今天在群里看到的一个题目，也可以说是这篇博客的印子吧：</div></pre></td></tr></table></figure></p>\n<p>public class Test {<br>    private static String a = “ab”;<br>    public static void main(String[] args) {<br>        String s1 = “a”;<br>        String s2 = “b”;<br>        String s = s1 + s2;<br>        System.out.println(s == a);//false<br>        System.out.println(s.intern() == a);//true<br>    }<br>}<br>```</p>"},{"title":"Hello Hexo","date":"2017-02-17T08:10:24.000Z","_content":"\n本博客由 Hexo 强力驱动，托管于 Github ，支持 https 。\n\n<!--more-->\n\n早就有自己建博客的念头了，先前在把csdn和简书作为博客，写了有大半年吧，后来学生计划买了个云服务器，用ghost搭建了一个博客，但是太简洁了！！ 于是昨天天花了大半天的时间终于搞好了这个博客。\n\n之后会将简书上的文章搬运过来，Markdown 语法的文章复制一下就行，富文本写的，还得转成 Markdown 语法。（csdn的Markdown复制十分好用！）\n\n博客与csdn将同步更新，两边的留言都会认真回复，反正有(mei)的(you)是(nv)时(peng)间(you)\n\n <img src=\"http://oa0thinbz.bkt.clouddn.com/0.jpeg \" width = \"350\" height = \"320\" alt=\"图片名称\" align=center />\n","source":"_posts/Hello-Hexo.md","raw":"---\ntitle: Hello Hexo\ndate: 2017-02-17 16:10:24\ncategories: 蜜汁开始\ntags: \n\t- 迁移\n---\n\n本博客由 Hexo 强力驱动，托管于 Github ，支持 https 。\n\n<!--more-->\n\n早就有自己建博客的念头了，先前在把csdn和简书作为博客，写了有大半年吧，后来学生计划买了个云服务器，用ghost搭建了一个博客，但是太简洁了！！ 于是昨天天花了大半天的时间终于搞好了这个博客。\n\n之后会将简书上的文章搬运过来，Markdown 语法的文章复制一下就行，富文本写的，还得转成 Markdown 语法。（csdn的Markdown复制十分好用！）\n\n博客与csdn将同步更新，两边的留言都会认真回复，反正有(mei)的(you)是(nv)时(peng)间(you)\n\n <img src=\"http://oa0thinbz.bkt.clouddn.com/0.jpeg \" width = \"350\" height = \"320\" alt=\"图片名称\" align=center />\n","slug":"Hello-Hexo","published":1,"updated":"2017-02-18T08:19:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3ke80008rhsog1yulz46","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>本博客由 Hexo 强力驱动，托管于 Github ，支持 https 。</p>\n<a id=\"more\"></a>\n<p>早就有自己建博客的念头了，先前在把csdn和简书作为博客，写了有大半年吧，后来学生计划买了个云服务器，用ghost搭建了一个博客，但是太简洁了！！ 于是昨天天花了大半天的时间终于搞好了这个博客。</p>\n<p>之后会将简书上的文章搬运过来，Markdown 语法的文章复制一下就行，富文本写的，还得转成 Markdown 语法。（csdn的Markdown复制十分好用！）</p>\n<p>博客与csdn将同步更新，两边的留言都会认真回复，反正有(mei)的(you)是(nv)时(peng)间(you)</p>\n<p> <img src=\"http://oa0thinbz.bkt.clouddn.com/0.jpeg \" width=\"350\" height=\"320\" alt=\"图片名称\" align=\"center\"></p>\n","excerpt":"<p>本博客由 Hexo 强力驱动，托管于 Github ，支持 https 。</p>","more":"<p>早就有自己建博客的念头了，先前在把csdn和简书作为博客，写了有大半年吧，后来学生计划买了个云服务器，用ghost搭建了一个博客，但是太简洁了！！ 于是昨天天花了大半天的时间终于搞好了这个博客。</p>\n<p>之后会将简书上的文章搬运过来，Markdown 语法的文章复制一下就行，富文本写的，还得转成 Markdown 语法。（csdn的Markdown复制十分好用！）</p>\n<p>博客与csdn将同步更新，两边的留言都会认真回复，反正有(mei)的(you)是(nv)时(peng)间(you)</p>\n<p> <img src=\"http://oa0thinbz.bkt.clouddn.com/0.jpeg \" width=\"350\" height=\"320\" alt=\"图片名称\" align=\"center\"></p>"},{"title":"cordova中与inBrowser的通讯","date":"2017-02-18T13:48:10.000Z","_content":"为了把我的练琴记录仪改成多用户App，我需要做一个Weibo OAuth功能，因为练琴记录仪是Single Page App，我不愿意直接跳转到OAuth页面，那样会打断我的应用状态，于是我打算打开一个新窗口来完成OAuth。\n\n这样一来，问题自然就转换为跨窗口通讯问题了。\n<!--more-->\n窗口间通讯毫无疑问首选是 window.postMessage ，在cordova当中，原生 window.open 是不能用的，官方给的方案是使用 cordova-plugin-inappbrowser 插件所提供的 cordova.InAppBrowser.open(url, target, options) 来取代 window.open ，这两者基本上API差不多一致。\n\n但是IAB插件所返回的对象并不是真正的 window ，它没有 postMessage 功能，并且在IAB所打开的页面中，也没有 window.opener ，于是只能另辟蹊径，找点不靠谱的挫方法来试试了。\n\nOAuth基本流程\n\nOAuth的基本流程这里就不赘述了，简单描述一下\n\nClient需要授权，把自己（由服务商分配的） client_id ——也称 app key 以及在服务商注册的 redirect_url 拼在一起，让用户去访问服务商的 authorize 地址。\n服务商会询问用户是否对这个 client_id 授权自己的账号，如果是，会跳转到 redirect_url?code=xxxxxx 。\n应用的服务端接收到 redirect_url 的访问，用URL参数中的 code 和自己的 client_id 以及 app secret （相当于密码）去请求服务商的 access_token 接口，得到 access_token ，这个就是此应用对于这个用户账号的访问凭条。\nredirect_url 页面根据应用自身需要把获得的 access_token 传回应用，完成授权过程。\n使用 window.open 时的流程\n\n客户端 var win = window.open(oauth_url) 。\n完成OAuth授权，跳转到 redirect_url 。\n在 redirect_url 上，把 access_token 用 window.opener.postMessage 的方式发给应用。\n应用监听 win 的 onmessage 事件，一旦收到了 access_token 就完成授权，可以 win.close() 了。\n然后我先把它写成了一个函数\n\n```\nfunction crossWindowViaBrowser(url, target, opts, key, timeout) {\n  let defer = Promise.defer()\n  let resolve = defer.resolve.bind(defer)\n  let reject = defer.reject.bind(defer)\n  let promise = defer.promise\n  let timing\n\n  let win = window.open(url, target, utils.buildOpenWindowOptions(opts))\n\n  let onMessage = e => {\n    let data = e.data || {}\n    if (data.type === 'cross-window' && data.key === key) {\n      parseResult(data.result, resolve, reject)\n    }\n  }\n\n  // close（貌似）没有可用的事件，`win.addEventListener('close')`没用的样子\n  // `win.addEventListener`不好用的问题也可能是因为跨域，真是蛋疼啊\n  // 于是轮询`closed`属性吧\n  let pollingClosed = setInterval(() => {\n    if (win.closed) {\n      reject(new Error(ErrorType.CANCELED))\n    }\n  }, POLLING_INTERVAL)\n\n  window.addEventListener('message', onMessage, false)\n\n  // 超时`reject`\n  if (timeout > 0) {\n    timing = setTimeout(() => {\n      reject(new Error(ErrorType.TIMEOUT))\n    }, timeout)\n  }\n\n  promise.finally(() => {\n    // clean up\n    clearInterval(pollingClosed)\n    clearTimeout(timing)\n    window.removeEventListener('message', onMessage)\n    win.close()\n  })\n\n  return promise\n}\n```\n\n使用 cordova.InAppBrowser.open 时的流程\n\n客户端 var win = cordova.InAppBrowser.open(oauth_url) 。\n客户端开始对 win.executeScript 并进行轮询，其内容是尝试读取 localStorage.getItem(key) 。\nredirect_url 页面把获取到的 access_token 写到 localStorage.setItem(key, access_token) 。\n客户端一旦轮询到 localStorage.getItem(key) 有值，就可以得到 access_token ，然后就可以 localStorage.removeItem(key) ，完成授权， win.close() 。\n然后我也单独写了一个函数\n\n```\nfunction crossWindowViaCordovaIAB(url, target, opts, key, timeout) {\n  let defer = Promise.defer()\n  let resolve = defer.resolve.bind(defer)\n  let reject = defer.reject.bind(defer)\n  let promise = defer.promise\n  let timing\n\n  let win = cordova.InAppBrowser.open(url, target, utils.buildOpenWindowOptions(opts))\n  // cordova的InAppBrowser没有window.opener对象，只能使用轮询罢。。\n  const code = `(function() {\n    var key = '${key}'\n    var data = localStorage.getItem(key)\n    if (data !== null) {\n      localStorage.removeItem(key)\n      return data\n    }\n    return false\n  })()`\n\n  let poll = () => {\n    win.executeScript({ code: code }, ret => {\n      if (ret[0] === false) {\n        // 等待\n      } else {\n        clearInterval(pollingData)\n        parseResult(ret[0], resolve, reject)\n      }\n    })\n  }\n  let pollingData = setInterval(poll, POLLING_INTERVAL)\n\n  // 窗口关闭时`reject`\n  // 正常流程上面`resolve`后才会`win.close()`，所以这里再`reject`也不会有影响\n  win.addEventListener('exit', e => {\n    reject(new Error(ErrorType.CANCELED))\n  })\n\n  // 超时`reject`\n  if (timeout > 0) {\n    timing = setTimeout(() => {\n      reject(new Error(ErrorType.TIMEOUT))\n    }, timeout)\n  }\n\n  promise.finally(() => {\n    // clean up\n    clearInterval(pollingData)\n    clearTimeout(timing)\n    win.close()\n  })\n\n  return promise\n}\n```\n\n整合\n\n```\nfunction crossWindow(...args) {\n  if (window.cordova !== undefined && cordova.InAppBrowser !== undefined) {\n    return crossWindowViaCordovaIAB(...args)\n  } else {\n    return crossWindowViaBrowser(...args)\n  }\n}\n```\n\n服务端\n\n服务端的Redirect Page我是用PHP写的，涉及到上面的 cross-browser 的部分大概是：\n\n\n```\n<script>\nwindow.onload = function() {\n  var key = <?= json_encode($key) ?>\n\n  var result = <?= json_encode($output) ?>\n\n  localStorage.setItem(key, result)\n  if (window.opener) {\n    window.opener.postMessage({\n      type: 'cross-window',\n      key: key,\n      result: result\n    }, '*')\n  }\n}\n</script>\n```\n\n其中 $output 是对 access_token 接口 curl 得到的返回值，虽然微博给的返回值理论上说都是合法的JSON，但出于通用考虑我还是直接把它当字符串传递，让客户端自己在 parse 的时候进行 try/catch ，而且这样对 localStorage 也比较直接。","source":"_posts/Browser的通讯”.md","raw":"title: cordova中与inBrowser的通讯\ndate: 2017-02-18 21:48:10\ncategories: 移动开发\ntags: \n\t- Cordova\n---\n为了把我的练琴记录仪改成多用户App，我需要做一个Weibo OAuth功能，因为练琴记录仪是Single Page App，我不愿意直接跳转到OAuth页面，那样会打断我的应用状态，于是我打算打开一个新窗口来完成OAuth。\n\n这样一来，问题自然就转换为跨窗口通讯问题了。\n<!--more-->\n窗口间通讯毫无疑问首选是 window.postMessage ，在cordova当中，原生 window.open 是不能用的，官方给的方案是使用 cordova-plugin-inappbrowser 插件所提供的 cordova.InAppBrowser.open(url, target, options) 来取代 window.open ，这两者基本上API差不多一致。\n\n但是IAB插件所返回的对象并不是真正的 window ，它没有 postMessage 功能，并且在IAB所打开的页面中，也没有 window.opener ，于是只能另辟蹊径，找点不靠谱的挫方法来试试了。\n\nOAuth基本流程\n\nOAuth的基本流程这里就不赘述了，简单描述一下\n\nClient需要授权，把自己（由服务商分配的） client_id ——也称 app key 以及在服务商注册的 redirect_url 拼在一起，让用户去访问服务商的 authorize 地址。\n服务商会询问用户是否对这个 client_id 授权自己的账号，如果是，会跳转到 redirect_url?code=xxxxxx 。\n应用的服务端接收到 redirect_url 的访问，用URL参数中的 code 和自己的 client_id 以及 app secret （相当于密码）去请求服务商的 access_token 接口，得到 access_token ，这个就是此应用对于这个用户账号的访问凭条。\nredirect_url 页面根据应用自身需要把获得的 access_token 传回应用，完成授权过程。\n使用 window.open 时的流程\n\n客户端 var win = window.open(oauth_url) 。\n完成OAuth授权，跳转到 redirect_url 。\n在 redirect_url 上，把 access_token 用 window.opener.postMessage 的方式发给应用。\n应用监听 win 的 onmessage 事件，一旦收到了 access_token 就完成授权，可以 win.close() 了。\n然后我先把它写成了一个函数\n\n```\nfunction crossWindowViaBrowser(url, target, opts, key, timeout) {\n  let defer = Promise.defer()\n  let resolve = defer.resolve.bind(defer)\n  let reject = defer.reject.bind(defer)\n  let promise = defer.promise\n  let timing\n\n  let win = window.open(url, target, utils.buildOpenWindowOptions(opts))\n\n  let onMessage = e => {\n    let data = e.data || {}\n    if (data.type === 'cross-window' && data.key === key) {\n      parseResult(data.result, resolve, reject)\n    }\n  }\n\n  // close（貌似）没有可用的事件，`win.addEventListener('close')`没用的样子\n  // `win.addEventListener`不好用的问题也可能是因为跨域，真是蛋疼啊\n  // 于是轮询`closed`属性吧\n  let pollingClosed = setInterval(() => {\n    if (win.closed) {\n      reject(new Error(ErrorType.CANCELED))\n    }\n  }, POLLING_INTERVAL)\n\n  window.addEventListener('message', onMessage, false)\n\n  // 超时`reject`\n  if (timeout > 0) {\n    timing = setTimeout(() => {\n      reject(new Error(ErrorType.TIMEOUT))\n    }, timeout)\n  }\n\n  promise.finally(() => {\n    // clean up\n    clearInterval(pollingClosed)\n    clearTimeout(timing)\n    window.removeEventListener('message', onMessage)\n    win.close()\n  })\n\n  return promise\n}\n```\n\n使用 cordova.InAppBrowser.open 时的流程\n\n客户端 var win = cordova.InAppBrowser.open(oauth_url) 。\n客户端开始对 win.executeScript 并进行轮询，其内容是尝试读取 localStorage.getItem(key) 。\nredirect_url 页面把获取到的 access_token 写到 localStorage.setItem(key, access_token) 。\n客户端一旦轮询到 localStorage.getItem(key) 有值，就可以得到 access_token ，然后就可以 localStorage.removeItem(key) ，完成授权， win.close() 。\n然后我也单独写了一个函数\n\n```\nfunction crossWindowViaCordovaIAB(url, target, opts, key, timeout) {\n  let defer = Promise.defer()\n  let resolve = defer.resolve.bind(defer)\n  let reject = defer.reject.bind(defer)\n  let promise = defer.promise\n  let timing\n\n  let win = cordova.InAppBrowser.open(url, target, utils.buildOpenWindowOptions(opts))\n  // cordova的InAppBrowser没有window.opener对象，只能使用轮询罢。。\n  const code = `(function() {\n    var key = '${key}'\n    var data = localStorage.getItem(key)\n    if (data !== null) {\n      localStorage.removeItem(key)\n      return data\n    }\n    return false\n  })()`\n\n  let poll = () => {\n    win.executeScript({ code: code }, ret => {\n      if (ret[0] === false) {\n        // 等待\n      } else {\n        clearInterval(pollingData)\n        parseResult(ret[0], resolve, reject)\n      }\n    })\n  }\n  let pollingData = setInterval(poll, POLLING_INTERVAL)\n\n  // 窗口关闭时`reject`\n  // 正常流程上面`resolve`后才会`win.close()`，所以这里再`reject`也不会有影响\n  win.addEventListener('exit', e => {\n    reject(new Error(ErrorType.CANCELED))\n  })\n\n  // 超时`reject`\n  if (timeout > 0) {\n    timing = setTimeout(() => {\n      reject(new Error(ErrorType.TIMEOUT))\n    }, timeout)\n  }\n\n  promise.finally(() => {\n    // clean up\n    clearInterval(pollingData)\n    clearTimeout(timing)\n    win.close()\n  })\n\n  return promise\n}\n```\n\n整合\n\n```\nfunction crossWindow(...args) {\n  if (window.cordova !== undefined && cordova.InAppBrowser !== undefined) {\n    return crossWindowViaCordovaIAB(...args)\n  } else {\n    return crossWindowViaBrowser(...args)\n  }\n}\n```\n\n服务端\n\n服务端的Redirect Page我是用PHP写的，涉及到上面的 cross-browser 的部分大概是：\n\n\n```\n<script>\nwindow.onload = function() {\n  var key = <?= json_encode($key) ?>\n\n  var result = <?= json_encode($output) ?>\n\n  localStorage.setItem(key, result)\n  if (window.opener) {\n    window.opener.postMessage({\n      type: 'cross-window',\n      key: key,\n      result: result\n    }, '*')\n  }\n}\n</script>\n```\n\n其中 $output 是对 access_token 接口 curl 得到的返回值，虽然微博给的返回值理论上说都是合法的JSON，但出于通用考虑我还是直接把它当字符串传递，让客户端自己在 parse 的时候进行 try/catch ，而且这样对 localStorage 也比较直接。","slug":"Browser的通讯”","published":1,"updated":"2017-02-18T13:56:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kec000arhsohzfiv9eg","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>为了把我的练琴记录仪改成多用户App，我需要做一个Weibo OAuth功能，因为练琴记录仪是Single Page App，我不愿意直接跳转到OAuth页面，那样会打断我的应用状态，于是我打算打开一个新窗口来完成OAuth。</p>\n<p>这样一来，问题自然就转换为跨窗口通讯问题了。<br><a id=\"more\"></a><br>窗口间通讯毫无疑问首选是 window.postMessage ，在cordova当中，原生 window.open 是不能用的，官方给的方案是使用 cordova-plugin-inappbrowser 插件所提供的 cordova.InAppBrowser.open(url, target, options) 来取代 window.open ，这两者基本上API差不多一致。</p>\n<p>但是IAB插件所返回的对象并不是真正的 window ，它没有 postMessage 功能，并且在IAB所打开的页面中，也没有 window.opener ，于是只能另辟蹊径，找点不靠谱的挫方法来试试了。</p>\n<p>OAuth基本流程</p>\n<p>OAuth的基本流程这里就不赘述了，简单描述一下</p>\n<p>Client需要授权，把自己（由服务商分配的） client_id ——也称 app key 以及在服务商注册的 redirect_url 拼在一起，让用户去访问服务商的 authorize 地址。<br>服务商会询问用户是否对这个 client_id 授权自己的账号，如果是，会跳转到 redirect_url?code=xxxxxx 。<br>应用的服务端接收到 redirect_url 的访问，用URL参数中的 code 和自己的 client_id 以及 app secret （相当于密码）去请求服务商的 access_token 接口，得到 access_token ，这个就是此应用对于这个用户账号的访问凭条。<br>redirect_url 页面根据应用自身需要把获得的 access_token 传回应用，完成授权过程。<br>使用 window.open 时的流程</p>\n<p>客户端 var win = window.open(oauth_url) 。<br>完成OAuth授权，跳转到 redirect_url 。<br>在 redirect_url 上，把 access_token 用 window.opener.postMessage 的方式发给应用。<br>应用监听 win 的 onmessage 事件，一旦收到了 access_token 就完成授权，可以 win.close() 了。<br>然后我先把它写成了一个函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">crossWindowViaBrowser</span>(<span class=\"params\">url, target, opts, key, timeout</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> defer = <span class=\"built_in\">Promise</span>.defer()</div><div class=\"line\">  <span class=\"keyword\">let</span> resolve = defer.resolve.bind(defer)</div><div class=\"line\">  <span class=\"keyword\">let</span> reject = defer.reject.bind(defer)</div><div class=\"line\">  <span class=\"keyword\">let</span> promise = defer.promise</div><div class=\"line\">  <span class=\"keyword\">let</span> timing</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> win = <span class=\"built_in\">window</span>.open(url, target, utils.buildOpenWindowOptions(opts))</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> onMessage = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> data = e.data || &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (data.type === <span class=\"string\">'cross-window'</span> &amp;&amp; data.key === key) &#123;</div><div class=\"line\">      parseResult(data.result, resolve, reject)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// close（貌似）没有可用的事件，`win.addEventListener('close')`没用的样子</span></div><div class=\"line\">  <span class=\"comment\">// `win.addEventListener`不好用的问题也可能是因为跨域，真是蛋疼啊</span></div><div class=\"line\">  <span class=\"comment\">// 于是轮询`closed`属性吧</span></div><div class=\"line\">  <span class=\"keyword\">let</span> pollingClosed = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (win.closed) &#123;</div><div class=\"line\">      reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(ErrorType.CANCELED))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;, POLLING_INTERVAL)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'message'</span>, onMessage, <span class=\"literal\">false</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 超时`reject`</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (timeout &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    timing = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(ErrorType.TIMEOUT))</div><div class=\"line\">    &#125;, timeout)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  promise.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// clean up</span></div><div class=\"line\">    clearInterval(pollingClosed)</div><div class=\"line\">    clearTimeout(timing)</div><div class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'message'</span>, onMessage)</div><div class=\"line\">    win.close()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> promise</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用 cordova.InAppBrowser.open 时的流程</p>\n<p>客户端 var win = cordova.InAppBrowser.open(oauth_url) 。<br>客户端开始对 win.executeScript 并进行轮询，其内容是尝试读取 localStorage.getItem(key) 。<br>redirect_url 页面把获取到的 access_token 写到 localStorage.setItem(key, access_token) 。<br>客户端一旦轮询到 localStorage.getItem(key) 有值，就可以得到 access_token ，然后就可以 localStorage.removeItem(key) ，完成授权， win.close() 。<br>然后我也单独写了一个函数</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">crossWindowViaCordovaIAB</span><span class=\"params\">(url, target, opts, key, timeout)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> defer = Promise.defer()</div><div class=\"line\">  <span class=\"keyword\">let</span> resolve = defer.resolve.bind(defer)</div><div class=\"line\">  <span class=\"keyword\">let</span> reject = defer.reject.bind(defer)</div><div class=\"line\">  <span class=\"keyword\">let</span> promise = defer.promise</div><div class=\"line\">  <span class=\"keyword\">let</span> timing</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> win = cordova.InAppBrowser.open(url, target, utils.buildOpenWindowOptions(opts))</div><div class=\"line\">  <span class=\"comment\">// cordova的InAppBrowser没有window.opener对象，只能使用轮询罢。。</span></div><div class=\"line\">  <span class=\"keyword\">const</span> code = `(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"string\">'$&#123;key&#125;'</span></div><div class=\"line\">    <span class=\"keyword\">var</span> data = localStorage.getItem(key)</div><div class=\"line\">    <span class=\"keyword\">if</span> (data !== <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      localStorage.removeItem(key)</div><div class=\"line\">      <span class=\"keyword\">return</span> data</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span></div><div class=\"line\">  &#125;)()`</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> poll = () =&gt; &#123;</div><div class=\"line\">    win.executeScript(&#123; code: code &#125;, ret =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (ret[<span class=\"number\">0</span>] === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 等待</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        clearInterval(pollingData)</div><div class=\"line\">        parseResult(ret[<span class=\"number\">0</span>], resolve, reject)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">let</span> pollingData = setInterval(poll, POLLING_INTERVAL)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 窗口关闭时`reject`</span></div><div class=\"line\">  <span class=\"comment\">// 正常流程上面`resolve`后才会`win.close()`，所以这里再`reject`也不会有影响</span></div><div class=\"line\">  win.addEventListener(<span class=\"string\">'exit'</span>, e =&gt; &#123;</div><div class=\"line\">    reject(<span class=\"keyword\">new</span> Error(ErrorType.CANCELED))</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 超时`reject`</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (timeout &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    timing = setTimeout(() =&gt; &#123;</div><div class=\"line\">      reject(<span class=\"keyword\">new</span> Error(ErrorType.TIMEOUT))</div><div class=\"line\">    &#125;, timeout)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  promise.<span class=\"keyword\">finally</span>(() =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// clean up</span></div><div class=\"line\">    clearInterval(pollingData)</div><div class=\"line\">    clearTimeout(timing)</div><div class=\"line\">    win.close()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> promise</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>整合</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">crossWindow</span><span class=\"params\">(<span class=\"rest_arg\">...args</span>)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (window.cordova !== <span class=\"literal\">undefined</span> &amp;&amp; cordova.InAppBrowser !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> crossWindowViaCordovaIAB(...args)</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> crossWindowViaBrowser(...args)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务端</p>\n<p>服务端的Redirect Page我是用PHP写的，涉及到上面的 cross-browser 的部分大概是：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> key = <span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>= json_encode($key) <span class=\"meta\">?&gt;</span></span></span></div><div class=\"line\"></div><div class=\"line\">  var result = <span class=\"php\"><span class=\"meta\">&lt;?</span>= json_encode($output) <span class=\"meta\">?&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">  localStorage.setItem(key, result)</div><div class=\"line\">  if (window.opener) &#123;</div><div class=\"line\">    window.opener.postMessage(&#123;</div><div class=\"line\">      type: 'cross-window',</div><div class=\"line\">      key: key,</div><div class=\"line\">      result: result</div><div class=\"line\">    &#125;, '*')</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>其中 $output 是对 access_token 接口 curl 得到的返回值，虽然微博给的返回值理论上说都是合法的JSON，但出于通用考虑我还是直接把它当字符串传递，让客户端自己在 parse 的时候进行 try/catch ，而且这样对 localStorage 也比较直接。</p>\n","excerpt":"<p>为了把我的练琴记录仪改成多用户App，我需要做一个Weibo OAuth功能，因为练琴记录仪是Single Page App，我不愿意直接跳转到OAuth页面，那样会打断我的应用状态，于是我打算打开一个新窗口来完成OAuth。</p>\n<p>这样一来，问题自然就转换为跨窗口通讯问题了。<br></p>","more":"<br>窗口间通讯毫无疑问首选是 window.postMessage ，在cordova当中，原生 window.open 是不能用的，官方给的方案是使用 cordova-plugin-inappbrowser 插件所提供的 cordova.InAppBrowser.open(url, target, options) 来取代 window.open ，这两者基本上API差不多一致。<p></p>\n<p>但是IAB插件所返回的对象并不是真正的 window ，它没有 postMessage 功能，并且在IAB所打开的页面中，也没有 window.opener ，于是只能另辟蹊径，找点不靠谱的挫方法来试试了。</p>\n<p>OAuth基本流程</p>\n<p>OAuth的基本流程这里就不赘述了，简单描述一下</p>\n<p>Client需要授权，把自己（由服务商分配的） client_id ——也称 app key 以及在服务商注册的 redirect_url 拼在一起，让用户去访问服务商的 authorize 地址。<br>服务商会询问用户是否对这个 client_id 授权自己的账号，如果是，会跳转到 redirect_url?code=xxxxxx 。<br>应用的服务端接收到 redirect_url 的访问，用URL参数中的 code 和自己的 client_id 以及 app secret （相当于密码）去请求服务商的 access_token 接口，得到 access_token ，这个就是此应用对于这个用户账号的访问凭条。<br>redirect_url 页面根据应用自身需要把获得的 access_token 传回应用，完成授权过程。<br>使用 window.open 时的流程</p>\n<p>客户端 var win = window.open(oauth_url) 。<br>完成OAuth授权，跳转到 redirect_url 。<br>在 redirect_url 上，把 access_token 用 window.opener.postMessage 的方式发给应用。<br>应用监听 win 的 onmessage 事件，一旦收到了 access_token 就完成授权，可以 win.close() 了。<br>然后我先把它写成了一个函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">crossWindowViaBrowser</span>(<span class=\"params\">url, target, opts, key, timeout</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> defer = <span class=\"built_in\">Promise</span>.defer()</div><div class=\"line\">  <span class=\"keyword\">let</span> resolve = defer.resolve.bind(defer)</div><div class=\"line\">  <span class=\"keyword\">let</span> reject = defer.reject.bind(defer)</div><div class=\"line\">  <span class=\"keyword\">let</span> promise = defer.promise</div><div class=\"line\">  <span class=\"keyword\">let</span> timing</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> win = <span class=\"built_in\">window</span>.open(url, target, utils.buildOpenWindowOptions(opts))</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> onMessage = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> data = e.data || &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (data.type === <span class=\"string\">'cross-window'</span> &amp;&amp; data.key === key) &#123;</div><div class=\"line\">      parseResult(data.result, resolve, reject)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// close（貌似）没有可用的事件，`win.addEventListener('close')`没用的样子</span></div><div class=\"line\">  <span class=\"comment\">// `win.addEventListener`不好用的问题也可能是因为跨域，真是蛋疼啊</span></div><div class=\"line\">  <span class=\"comment\">// 于是轮询`closed`属性吧</span></div><div class=\"line\">  <span class=\"keyword\">let</span> pollingClosed = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (win.closed) &#123;</div><div class=\"line\">      reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(ErrorType.CANCELED))</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;, POLLING_INTERVAL)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'message'</span>, onMessage, <span class=\"literal\">false</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 超时`reject`</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (timeout &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    timing = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(ErrorType.TIMEOUT))</div><div class=\"line\">    &#125;, timeout)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  promise.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// clean up</span></div><div class=\"line\">    clearInterval(pollingClosed)</div><div class=\"line\">    clearTimeout(timing)</div><div class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'message'</span>, onMessage)</div><div class=\"line\">    win.close()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> promise</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用 cordova.InAppBrowser.open 时的流程</p>\n<p>客户端 var win = cordova.InAppBrowser.open(oauth_url) 。<br>客户端开始对 win.executeScript 并进行轮询，其内容是尝试读取 localStorage.getItem(key) 。<br>redirect_url 页面把获取到的 access_token 写到 localStorage.setItem(key, access_token) 。<br>客户端一旦轮询到 localStorage.getItem(key) 有值，就可以得到 access_token ，然后就可以 localStorage.removeItem(key) ，完成授权， win.close() 。<br>然后我也单独写了一个函数</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">crossWindowViaCordovaIAB</span><span class=\"params\">(url, target, opts, key, timeout)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> defer = Promise.defer()</div><div class=\"line\">  <span class=\"keyword\">let</span> resolve = defer.resolve.bind(defer)</div><div class=\"line\">  <span class=\"keyword\">let</span> reject = defer.reject.bind(defer)</div><div class=\"line\">  <span class=\"keyword\">let</span> promise = defer.promise</div><div class=\"line\">  <span class=\"keyword\">let</span> timing</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> win = cordova.InAppBrowser.open(url, target, utils.buildOpenWindowOptions(opts))</div><div class=\"line\">  <span class=\"comment\">// cordova的InAppBrowser没有window.opener对象，只能使用轮询罢。。</span></div><div class=\"line\">  <span class=\"keyword\">const</span> code = `(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"string\">'$&#123;key&#125;'</span></div><div class=\"line\">    <span class=\"keyword\">var</span> data = localStorage.getItem(key)</div><div class=\"line\">    <span class=\"keyword\">if</span> (data !== <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      localStorage.removeItem(key)</div><div class=\"line\">      <span class=\"keyword\">return</span> data</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span></div><div class=\"line\">  &#125;)()`</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> poll = () =&gt; &#123;</div><div class=\"line\">    win.executeScript(&#123; code: code &#125;, ret =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (ret[<span class=\"number\">0</span>] === <span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 等待</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        clearInterval(pollingData)</div><div class=\"line\">        parseResult(ret[<span class=\"number\">0</span>], resolve, reject)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">let</span> pollingData = setInterval(poll, POLLING_INTERVAL)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 窗口关闭时`reject`</span></div><div class=\"line\">  <span class=\"comment\">// 正常流程上面`resolve`后才会`win.close()`，所以这里再`reject`也不会有影响</span></div><div class=\"line\">  win.addEventListener(<span class=\"string\">'exit'</span>, e =&gt; &#123;</div><div class=\"line\">    reject(<span class=\"keyword\">new</span> Error(ErrorType.CANCELED))</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 超时`reject`</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (timeout &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    timing = setTimeout(() =&gt; &#123;</div><div class=\"line\">      reject(<span class=\"keyword\">new</span> Error(ErrorType.TIMEOUT))</div><div class=\"line\">    &#125;, timeout)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  promise.<span class=\"keyword\">finally</span>(() =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// clean up</span></div><div class=\"line\">    clearInterval(pollingData)</div><div class=\"line\">    clearTimeout(timing)</div><div class=\"line\">    win.close()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> promise</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>整合</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">crossWindow</span><span class=\"params\">(<span class=\"rest_arg\">...args</span>)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (window.cordova !== <span class=\"literal\">undefined</span> &amp;&amp; cordova.InAppBrowser !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> crossWindowViaCordovaIAB(...args)</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> crossWindowViaBrowser(...args)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务端</p>\n<p>服务端的Redirect Page我是用PHP写的，涉及到上面的 cross-browser 的部分大概是：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> key = <span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>= json_encode($key) <span class=\"meta\">?&gt;</span></span></span></div><div class=\"line\"></div><div class=\"line\">  var result = <span class=\"php\"><span class=\"meta\">&lt;?</span>= json_encode($output) <span class=\"meta\">?&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">  localStorage.setItem(key, result)</div><div class=\"line\">  if (window.opener) &#123;</div><div class=\"line\">    window.opener.postMessage(&#123;</div><div class=\"line\">      type: 'cross-window',</div><div class=\"line\">      key: key,</div><div class=\"line\">      result: result</div><div class=\"line\">    &#125;, '*')</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>其中 $output 是对 access_token 接口 curl 得到的返回值，虽然微博给的返回值理论上说都是合法的JSON，但出于通用考虑我还是直接把它当字符串传递，让客户端自己在 parse 的时候进行 try/catch ，而且这样对 localStorage 也比较直接。</p>"},{"title":"JVM虚拟机关于“不使用的对象手动赋值为null”的理解","date":"2017-02-18T08:03:12.000Z","_content":"今天逛博客,看到了一个关于<code>一个对象有没有必要手动赋值为null</code>的问题，捋了捋思路，决定写个测试代码来实践一下。\n<!--more--><br><br>\n百说不如一用，直接上代码:<br>\n```\npublic class Test1 {\n\n\tpublic static void main(String[] args) {\n\t\tbyte[] bytes = new byte[64 * 1024 * 1024];//作用就是向内存中填充一个10MB的对象\n\t\tSystem.gc();//手动执行GC操作\n\t}\n\n}\n```\n运行程序前，可以将JVM参数设置为如下:<br>\n-verbose:gc<br>\n-XX:+PrintGCDetails<br>\n控制台部分输出结果如下:<br>\n```\n[GC (System.gc()) [PSYoungGen: 3932K->744K(76288K)] 69468K->66288K(251392K), 0.0016500 secs] [Times: user=0.00 sys=0.03, real=0.00 secs] \n[Full GC (System.gc()) [PSYoungGen: 744K->0K(76288K)] [ParOldGen: 65544K->66145K(175104K)] 66288K->66145K(251392K), [Metaspace: 3169K->3169K(1056768K)], 0.0101306 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \n```\n\n根据ParOldGen: 65544K->66145K(175104K)可以看出，bytes对象并没有因为没有使用而被gc回收。\n<br>\n```\npublic class Test2 {\n\t/**\n\t * -verbose:GC\n\t * -XX:+PrintGCDetails\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t{\n\t           byte[] bytes = new byte[64 * 1024 * 1024];\n\t\t}\n\t\tSystem.gc();\n\t}\n\n}\n```\n控制台输出结果如下:\n```\n[GC (System.gc()) [PSYoungGen: 3932K->776K(76288K)] 69468K->66320K(251392K), 0.0013737 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (System.gc()) [PSYoungGen: 776K->0K(76288K)] [ParOldGen: 65544K->66145K(175104K)] 66320K->66145K(251392K), [Metaspace: 3169K->3169K(1056768K)], 0.0063873 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \nHeap\n PSYoungGen      total 76288K, used 655K [0x000000076b500000, 0x0000000770a00000, 0x00000007c0000000)\n  eden space 65536K, 1% used [0x000000076b500000,0x000000076b5a3ee8,0x000000076f500000)\n  from space 10752K, 0% used [0x000000076f500000,0x000000076f500000,0x000000076ff80000)\n  to   space 10752K, 0% used [0x000000076ff80000,0x000000076ff80000,0x0000000770a00000)\n ParOldGen       total 175104K, used 66145K [0x00000006c1e00000, 0x00000006cc900000, 0x000000076b500000)\n  object space 175104K, 37% used [0x00000006c1e00000,0x00000006c5e987b8,0x00000006cc900000)\n Metaspace       used 3176K, capacity 4494K, committed 4864K, reserved 1056768K\n  class space    used 346K, capacity 386K, committed 512K, reserved 1048576K\n```\n可以看出，根据gc日志[ParOldGen: 65544K->66145K(175104K)] ，gc依然没有回收bytes对象，哪怕已经不在方法区了，我们再次修改代码。\n```\npublic class Test3 {\n\t/**\n\t * -verbose:GC\n\t * -XX:+PrintGCDetails\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t{\n\t\t\tbyte[] bytes = new byte[64 * 1024 * 1024];\n\t\t}\n\t\tint i = 1;\n\t\tSystem.gc();\n\t}\n\n}\n```\ngc日志输出如下:\n```\n[GC (System.gc()) [PSYoungGen: 3932K->776K(76288K)] 69468K->66320K(251392K), 0.0014193 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (System.gc()) [PSYoungGen: 776K->0K(76288K)] [ParOldGen: 65544K->609K(175104K)] 66320K->609K(251392K), [Metaspace: 3169K->3169K(1056768K)], 0.0076485 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] \nHeap\n PSYoungGen      total 76288K, used 655K [0x000000076b500000, 0x0000000770a00000, 0x00000007c0000000)\n  eden space 65536K, 1% used [0x000000076b500000,0x000000076b5a3ee8,0x000000076f500000)\n  from space 10752K, 0% used [0x000000076f500000,0x000000076f500000,0x000000076ff80000)\n  to   space 10752K, 0% used [0x000000076ff80000,0x000000076ff80000,0x0000000770a00000)\n ParOldGen       total 175104K, used 609K [0x00000006c1e00000, 0x00000006cc900000, 0x000000076b500000)\n  object space 175104K, 0% used [0x00000006c1e00000,0x00000006c1e987a8,0x00000006cc900000)\n Metaspace       used 3176K, capacity 4494K, committed 4864K, reserved 1056768K\n  class space    used 346K, capacity 386K, committed 512K, reserved 1048576K\n```\n见证奇迹的时候到，[ParOldGen: 65544K->609K(175104K)]，竟然被回收了！这是为什么？当创建bytes对象的时候，那是因为当我们创建bytes对象的时候，局部变量表中当然有bytes的引用，哪怕我们没有使用，但GC roots依然存在着和bytes对象的关联。根据test2和代码test3，我们大概可以猜到如果不操作局部变量表，那么GC roots依然会保留，所以test2依然没有回收，但是到了test3，就回收了。好吧，再来一个无用的测试，我们手动赋值为null看看结果。\n<br>\n```\npublic class TestMain {\n\t/**\n\t * -verbose:GC\n\t * -XX:+PrintGCDetails\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tbyte[] bytes = new byte[64 * 1024 * 1024];\n\t\t//do something\n\t\tbytes = null;\n\t\tSystem.gc();\n\t}\n\n}\n```\n其实都能想到，果然被gc干掉了……当然这只是一个实验，总结性的话就不说了，反正我也说不来，不过实践出真理！\n\n","source":"_posts/JVM虚拟机关于“不使用的对象手动赋值为null”的理解.md","raw":"---\ntitle: JVM虚拟机关于“不使用的对象手动赋值为null”的理解\ndate: 2017-02-18 16:03:12\ncategories: Java二三事\ntags: \n\t- Java\n\t- Jvm\n\t- 对象\n---\n今天逛博客,看到了一个关于<code>一个对象有没有必要手动赋值为null</code>的问题，捋了捋思路，决定写个测试代码来实践一下。\n<!--more--><br><br>\n百说不如一用，直接上代码:<br>\n```\npublic class Test1 {\n\n\tpublic static void main(String[] args) {\n\t\tbyte[] bytes = new byte[64 * 1024 * 1024];//作用就是向内存中填充一个10MB的对象\n\t\tSystem.gc();//手动执行GC操作\n\t}\n\n}\n```\n运行程序前，可以将JVM参数设置为如下:<br>\n-verbose:gc<br>\n-XX:+PrintGCDetails<br>\n控制台部分输出结果如下:<br>\n```\n[GC (System.gc()) [PSYoungGen: 3932K->744K(76288K)] 69468K->66288K(251392K), 0.0016500 secs] [Times: user=0.00 sys=0.03, real=0.00 secs] \n[Full GC (System.gc()) [PSYoungGen: 744K->0K(76288K)] [ParOldGen: 65544K->66145K(175104K)] 66288K->66145K(251392K), [Metaspace: 3169K->3169K(1056768K)], 0.0101306 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \n```\n\n根据ParOldGen: 65544K->66145K(175104K)可以看出，bytes对象并没有因为没有使用而被gc回收。\n<br>\n```\npublic class Test2 {\n\t/**\n\t * -verbose:GC\n\t * -XX:+PrintGCDetails\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t{\n\t           byte[] bytes = new byte[64 * 1024 * 1024];\n\t\t}\n\t\tSystem.gc();\n\t}\n\n}\n```\n控制台输出结果如下:\n```\n[GC (System.gc()) [PSYoungGen: 3932K->776K(76288K)] 69468K->66320K(251392K), 0.0013737 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (System.gc()) [PSYoungGen: 776K->0K(76288K)] [ParOldGen: 65544K->66145K(175104K)] 66320K->66145K(251392K), [Metaspace: 3169K->3169K(1056768K)], 0.0063873 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \nHeap\n PSYoungGen      total 76288K, used 655K [0x000000076b500000, 0x0000000770a00000, 0x00000007c0000000)\n  eden space 65536K, 1% used [0x000000076b500000,0x000000076b5a3ee8,0x000000076f500000)\n  from space 10752K, 0% used [0x000000076f500000,0x000000076f500000,0x000000076ff80000)\n  to   space 10752K, 0% used [0x000000076ff80000,0x000000076ff80000,0x0000000770a00000)\n ParOldGen       total 175104K, used 66145K [0x00000006c1e00000, 0x00000006cc900000, 0x000000076b500000)\n  object space 175104K, 37% used [0x00000006c1e00000,0x00000006c5e987b8,0x00000006cc900000)\n Metaspace       used 3176K, capacity 4494K, committed 4864K, reserved 1056768K\n  class space    used 346K, capacity 386K, committed 512K, reserved 1048576K\n```\n可以看出，根据gc日志[ParOldGen: 65544K->66145K(175104K)] ，gc依然没有回收bytes对象，哪怕已经不在方法区了，我们再次修改代码。\n```\npublic class Test3 {\n\t/**\n\t * -verbose:GC\n\t * -XX:+PrintGCDetails\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t{\n\t\t\tbyte[] bytes = new byte[64 * 1024 * 1024];\n\t\t}\n\t\tint i = 1;\n\t\tSystem.gc();\n\t}\n\n}\n```\ngc日志输出如下:\n```\n[GC (System.gc()) [PSYoungGen: 3932K->776K(76288K)] 69468K->66320K(251392K), 0.0014193 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (System.gc()) [PSYoungGen: 776K->0K(76288K)] [ParOldGen: 65544K->609K(175104K)] 66320K->609K(251392K), [Metaspace: 3169K->3169K(1056768K)], 0.0076485 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] \nHeap\n PSYoungGen      total 76288K, used 655K [0x000000076b500000, 0x0000000770a00000, 0x00000007c0000000)\n  eden space 65536K, 1% used [0x000000076b500000,0x000000076b5a3ee8,0x000000076f500000)\n  from space 10752K, 0% used [0x000000076f500000,0x000000076f500000,0x000000076ff80000)\n  to   space 10752K, 0% used [0x000000076ff80000,0x000000076ff80000,0x0000000770a00000)\n ParOldGen       total 175104K, used 609K [0x00000006c1e00000, 0x00000006cc900000, 0x000000076b500000)\n  object space 175104K, 0% used [0x00000006c1e00000,0x00000006c1e987a8,0x00000006cc900000)\n Metaspace       used 3176K, capacity 4494K, committed 4864K, reserved 1056768K\n  class space    used 346K, capacity 386K, committed 512K, reserved 1048576K\n```\n见证奇迹的时候到，[ParOldGen: 65544K->609K(175104K)]，竟然被回收了！这是为什么？当创建bytes对象的时候，那是因为当我们创建bytes对象的时候，局部变量表中当然有bytes的引用，哪怕我们没有使用，但GC roots依然存在着和bytes对象的关联。根据test2和代码test3，我们大概可以猜到如果不操作局部变量表，那么GC roots依然会保留，所以test2依然没有回收，但是到了test3，就回收了。好吧，再来一个无用的测试，我们手动赋值为null看看结果。\n<br>\n```\npublic class TestMain {\n\t/**\n\t * -verbose:GC\n\t * -XX:+PrintGCDetails\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tbyte[] bytes = new byte[64 * 1024 * 1024];\n\t\t//do something\n\t\tbytes = null;\n\t\tSystem.gc();\n\t}\n\n}\n```\n其实都能想到，果然被gc干掉了……当然这只是一个实验，总结性的话就不说了，反正我也说不来，不过实践出真理！\n\n","slug":"JVM虚拟机关于“不使用的对象手动赋值为null”的理解","published":1,"updated":"2017-02-18T08:49:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kee000erhsomy6nvsjv","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>今天逛博客,看到了一个关于<code>一个对象有没有必要手动赋值为null</code>的问题，捋了捋思路，决定写个测试代码来实践一下。<br><a id=\"more\"></a><br><br><br>百说不如一用，直接上代码:<br><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test1</span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">64</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>];<span class=\"comment\">//作用就是向内存中填充一个10MB的对象</span></div><div class=\"line\">\t\tSystem.gc();<span class=\"comment\">//手动执行GC操作</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行程序前，可以将JVM参数设置为如下:<br><br>-verbose:gc<br><br>-XX:+PrintGCDetails<br><br>控制台部分输出结果如下:<br><br><figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"name\">GC</span> (<span class=\"name\">System.gc</span>()) [<span class=\"name\">PSYoungGen:</span> <span class=\"number\">3932</span>K-&gt;744K(<span class=\"name\">76288K</span>)] <span class=\"number\">69468</span>K-&gt;66288K(<span class=\"name\">251392K</span>), <span class=\"number\">0.0016500</span> secs] [<span class=\"name\">Times:</span> user=0.00 sys=0.03, real=0.00 secs] </div><div class=\"line\">[<span class=\"name\">Full</span> GC (<span class=\"name\">System.gc</span>()) [<span class=\"name\">PSYoungGen:</span> <span class=\"number\">744</span>K-&gt;0K(<span class=\"name\">76288K</span>)] [<span class=\"name\">ParOldGen:</span> <span class=\"number\">65544</span>K-&gt;66145K(<span class=\"name\">175104K</span>)] <span class=\"number\">66288</span>K-&gt;66145K(<span class=\"name\">251392K</span>), [<span class=\"name\">Metaspace:</span> <span class=\"number\">3169</span>K-&gt;3169K(<span class=\"name\">1056768K</span>)], <span class=\"number\">0.0101306</span> secs] [<span class=\"name\">Times:</span> user=0.00 sys=0.00, real=0.01 secs]</div></pre></td></tr></table></figure></p>\n<p>根据ParOldGen: 65544K-&gt;66145K(175104K)可以看出，bytes对象并没有因为没有使用而被gc回收。<br><br><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test2</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * -verbose:GC</div><div class=\"line\">\t * -XX:+PrintGCDetails</div><div class=\"line\">\t * @param args</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t           <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">64</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.gc();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制台输出结果如下:<br><figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[GC (System.gc()) [PSYoungGen: <span class=\"number\">3932</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">776</span><span class=\"keyword\">K</span>(<span class=\"number\">76288</span><span class=\"keyword\">K</span>)] <span class=\"number\">69468</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">66320</span><span class=\"keyword\">K</span>(<span class=\"number\">251392</span><span class=\"keyword\">K</span>), <span class=\"number\">0.0013737</span> secs] [<span class=\"keyword\">Times</span>: user=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.00</span> secs] </div><div class=\"line\">[<span class=\"keyword\">Full</span> GC (System.gc()) [PSYoungGen: <span class=\"number\">776</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">0</span><span class=\"keyword\">K</span>(<span class=\"number\">76288</span><span class=\"keyword\">K</span>)] [ParOldGen: <span class=\"number\">65544</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">66145</span><span class=\"keyword\">K</span>(<span class=\"number\">175104</span><span class=\"keyword\">K</span>)] <span class=\"number\">66320</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">66145</span><span class=\"keyword\">K</span>(<span class=\"number\">251392</span><span class=\"keyword\">K</span>), [Metaspace: <span class=\"number\">3169</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">3169</span><span class=\"keyword\">K</span>(<span class=\"number\">1056768</span><span class=\"keyword\">K</span>)], <span class=\"number\">0.0063873</span> secs] [<span class=\"keyword\">Times</span>: user=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.01</span> secs] </div><div class=\"line\">Heap</div><div class=\"line\"> PSYoungGen      total <span class=\"number\">76288</span><span class=\"keyword\">K</span>, used <span class=\"number\">655</span><span class=\"keyword\">K</span> [<span class=\"number\">0x000000076b500000</span>, <span class=\"number\">0x0000000770a00000</span>, <span class=\"number\">0x00000007c0000000</span>)</div><div class=\"line\">  eden space <span class=\"number\">65536</span><span class=\"keyword\">K</span>, <span class=\"number\">1</span>% used [<span class=\"number\">0x000000076b500000</span>,<span class=\"number\">0x000000076b5a3ee8</span>,<span class=\"number\">0x000000076f500000</span>)</div><div class=\"line\">  from space <span class=\"number\">10752</span><span class=\"keyword\">K</span>, <span class=\"number\">0</span>% used [<span class=\"number\">0x000000076f500000</span>,<span class=\"number\">0x000000076f500000</span>,<span class=\"number\">0x000000076ff80000</span>)</div><div class=\"line\">  to   space <span class=\"number\">10752</span><span class=\"keyword\">K</span>, <span class=\"number\">0</span>% used [<span class=\"number\">0x000000076ff80000</span>,<span class=\"number\">0x000000076ff80000</span>,<span class=\"number\">0x0000000770a00000</span>)</div><div class=\"line\"> ParOldGen       total <span class=\"number\">175104</span><span class=\"keyword\">K</span>, used <span class=\"number\">66145</span><span class=\"keyword\">K</span> [<span class=\"number\">0x00000006c1e00000</span>, <span class=\"number\">0x00000006cc900000</span>, <span class=\"number\">0x000000076b500000</span>)</div><div class=\"line\">  object space <span class=\"number\">175104</span><span class=\"keyword\">K</span>, <span class=\"number\">37</span>% used [<span class=\"number\">0x00000006c1e00000</span>,<span class=\"number\">0x00000006c5e987b8</span>,<span class=\"number\">0x00000006cc900000</span>)</div><div class=\"line\"> Metaspace       used <span class=\"number\">3176</span><span class=\"keyword\">K</span>, capacity <span class=\"number\">4494</span><span class=\"keyword\">K</span>, committed <span class=\"number\">4864</span><span class=\"keyword\">K</span>, reserved <span class=\"number\">1056768</span><span class=\"keyword\">K</span></div><div class=\"line\">  class space    used <span class=\"number\">346</span><span class=\"keyword\">K</span>, capacity <span class=\"number\">386</span><span class=\"keyword\">K</span>, committed <span class=\"number\">512</span><span class=\"keyword\">K</span>, reserved <span class=\"number\">1048576</span><span class=\"keyword\">K</span></div></pre></td></tr></table></figure></p>\n<p>可以看出，根据gc日志[ParOldGen: 65544K-&gt;66145K(175104K)] ，gc依然没有回收bytes对象，哪怕已经不在方法区了，我们再次修改代码。<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test3</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * -verbose:GC</div><div class=\"line\">\t * -XX:+PrintGCDetails</div><div class=\"line\">\t * @param args</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">64</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tSystem.gc();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>gc日志输出如下:<br><figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[GC (System.gc()) [PSYoungGen: <span class=\"number\">3932</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">776</span><span class=\"keyword\">K</span>(<span class=\"number\">76288</span><span class=\"keyword\">K</span>)] <span class=\"number\">69468</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">66320</span><span class=\"keyword\">K</span>(<span class=\"number\">251392</span><span class=\"keyword\">K</span>), <span class=\"number\">0.0014193</span> secs] [<span class=\"keyword\">Times</span>: user=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.00</span> secs] </div><div class=\"line\">[<span class=\"keyword\">Full</span> GC (System.gc()) [PSYoungGen: <span class=\"number\">776</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">0</span><span class=\"keyword\">K</span>(<span class=\"number\">76288</span><span class=\"keyword\">K</span>)] [ParOldGen: <span class=\"number\">65544</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">609</span><span class=\"keyword\">K</span>(<span class=\"number\">175104</span><span class=\"keyword\">K</span>)] <span class=\"number\">66320</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">609</span><span class=\"keyword\">K</span>(<span class=\"number\">251392</span><span class=\"keyword\">K</span>), [Metaspace: <span class=\"number\">3169</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">3169</span><span class=\"keyword\">K</span>(<span class=\"number\">1056768</span><span class=\"keyword\">K</span>)], <span class=\"number\">0.0076485</span> secs] [<span class=\"keyword\">Times</span>: user=<span class=\"number\">0.02</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.01</span> secs] </div><div class=\"line\">Heap</div><div class=\"line\"> PSYoungGen      total <span class=\"number\">76288</span><span class=\"keyword\">K</span>, used <span class=\"number\">655</span><span class=\"keyword\">K</span> [<span class=\"number\">0x000000076b500000</span>, <span class=\"number\">0x0000000770a00000</span>, <span class=\"number\">0x00000007c0000000</span>)</div><div class=\"line\">  eden space <span class=\"number\">65536</span><span class=\"keyword\">K</span>, <span class=\"number\">1</span>% used [<span class=\"number\">0x000000076b500000</span>,<span class=\"number\">0x000000076b5a3ee8</span>,<span class=\"number\">0x000000076f500000</span>)</div><div class=\"line\">  from space <span class=\"number\">10752</span><span class=\"keyword\">K</span>, <span class=\"number\">0</span>% used [<span class=\"number\">0x000000076f500000</span>,<span class=\"number\">0x000000076f500000</span>,<span class=\"number\">0x000000076ff80000</span>)</div><div class=\"line\">  to   space <span class=\"number\">10752</span><span class=\"keyword\">K</span>, <span class=\"number\">0</span>% used [<span class=\"number\">0x000000076ff80000</span>,<span class=\"number\">0x000000076ff80000</span>,<span class=\"number\">0x0000000770a00000</span>)</div><div class=\"line\"> ParOldGen       total <span class=\"number\">175104</span><span class=\"keyword\">K</span>, used <span class=\"number\">609</span><span class=\"keyword\">K</span> [<span class=\"number\">0x00000006c1e00000</span>, <span class=\"number\">0x00000006cc900000</span>, <span class=\"number\">0x000000076b500000</span>)</div><div class=\"line\">  object space <span class=\"number\">175104</span><span class=\"keyword\">K</span>, <span class=\"number\">0</span>% used [<span class=\"number\">0x00000006c1e00000</span>,<span class=\"number\">0x00000006c1e987a8</span>,<span class=\"number\">0x00000006cc900000</span>)</div><div class=\"line\"> Metaspace       used <span class=\"number\">3176</span><span class=\"keyword\">K</span>, capacity <span class=\"number\">4494</span><span class=\"keyword\">K</span>, committed <span class=\"number\">4864</span><span class=\"keyword\">K</span>, reserved <span class=\"number\">1056768</span><span class=\"keyword\">K</span></div><div class=\"line\">  class space    used <span class=\"number\">346</span><span class=\"keyword\">K</span>, capacity <span class=\"number\">386</span><span class=\"keyword\">K</span>, committed <span class=\"number\">512</span><span class=\"keyword\">K</span>, reserved <span class=\"number\">1048576</span><span class=\"keyword\">K</span></div></pre></td></tr></table></figure></p>\n<p>见证奇迹的时候到，[ParOldGen: 65544K-&gt;609K(175104K)]，竟然被回收了！这是为什么？当创建bytes对象的时候，那是因为当我们创建bytes对象的时候，局部变量表中当然有bytes的引用，哪怕我们没有使用，但GC roots依然存在着和bytes对象的关联。根据test2和代码test3，我们大概可以猜到如果不操作局部变量表，那么GC roots依然会保留，所以test2依然没有回收，但是到了test3，就回收了。好吧，再来一个无用的测试，我们手动赋值为null看看结果。<br><br><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestMain</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * -verbose:GC</div><div class=\"line\">\t * -XX:+PrintGCDetails</div><div class=\"line\">\t * @param args</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">64</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>];</div><div class=\"line\">\t\t<span class=\"comment\">//do something</span></div><div class=\"line\">\t\tbytes = <span class=\"literal\">null</span>;</div><div class=\"line\">\t\tSystem.gc();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实都能想到，果然被gc干掉了……当然这只是一个实验，总结性的话就不说了，反正我也说不来，不过实践出真理！</p>\n","excerpt":"<p>今天逛博客,看到了一个关于<code>一个对象有没有必要手动赋值为null</code>的问题，捋了捋思路，决定写个测试代码来实践一下。<br></p>","more":"<br><br><br>百说不如一用，直接上代码:<br><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test1</span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">64</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>];<span class=\"comment\">//作用就是向内存中填充一个10MB的对象</span></div><div class=\"line\">\t\tSystem.gc();<span class=\"comment\">//手动执行GC操作</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p>\n<p>运行程序前，可以将JVM参数设置为如下:<br><br>-verbose:gc<br><br>-XX:+PrintGCDetails<br><br>控制台部分输出结果如下:<br><br><figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"name\">GC</span> (<span class=\"name\">System.gc</span>()) [<span class=\"name\">PSYoungGen:</span> <span class=\"number\">3932</span>K-&gt;744K(<span class=\"name\">76288K</span>)] <span class=\"number\">69468</span>K-&gt;66288K(<span class=\"name\">251392K</span>), <span class=\"number\">0.0016500</span> secs] [<span class=\"name\">Times:</span> user=0.00 sys=0.03, real=0.00 secs] </div><div class=\"line\">[<span class=\"name\">Full</span> GC (<span class=\"name\">System.gc</span>()) [<span class=\"name\">PSYoungGen:</span> <span class=\"number\">744</span>K-&gt;0K(<span class=\"name\">76288K</span>)] [<span class=\"name\">ParOldGen:</span> <span class=\"number\">65544</span>K-&gt;66145K(<span class=\"name\">175104K</span>)] <span class=\"number\">66288</span>K-&gt;66145K(<span class=\"name\">251392K</span>), [<span class=\"name\">Metaspace:</span> <span class=\"number\">3169</span>K-&gt;3169K(<span class=\"name\">1056768K</span>)], <span class=\"number\">0.0101306</span> secs] [<span class=\"name\">Times:</span> user=0.00 sys=0.00, real=0.01 secs]</div></pre></td></tr></table></figure></p>\n<p>根据ParOldGen: 65544K-&gt;66145K(175104K)可以看出，bytes对象并没有因为没有使用而被gc回收。<br><br><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test2</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * -verbose:GC</div><div class=\"line\">\t * -XX:+PrintGCDetails</div><div class=\"line\">\t * @param args</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t           <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">64</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.gc();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制台输出结果如下:<br><figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[GC (System.gc()) [PSYoungGen: <span class=\"number\">3932</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">776</span><span class=\"keyword\">K</span>(<span class=\"number\">76288</span><span class=\"keyword\">K</span>)] <span class=\"number\">69468</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">66320</span><span class=\"keyword\">K</span>(<span class=\"number\">251392</span><span class=\"keyword\">K</span>), <span class=\"number\">0.0013737</span> secs] [<span class=\"keyword\">Times</span>: user=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.00</span> secs] </div><div class=\"line\">[<span class=\"keyword\">Full</span> GC (System.gc()) [PSYoungGen: <span class=\"number\">776</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">0</span><span class=\"keyword\">K</span>(<span class=\"number\">76288</span><span class=\"keyword\">K</span>)] [ParOldGen: <span class=\"number\">65544</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">66145</span><span class=\"keyword\">K</span>(<span class=\"number\">175104</span><span class=\"keyword\">K</span>)] <span class=\"number\">66320</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">66145</span><span class=\"keyword\">K</span>(<span class=\"number\">251392</span><span class=\"keyword\">K</span>), [Metaspace: <span class=\"number\">3169</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">3169</span><span class=\"keyword\">K</span>(<span class=\"number\">1056768</span><span class=\"keyword\">K</span>)], <span class=\"number\">0.0063873</span> secs] [<span class=\"keyword\">Times</span>: user=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.01</span> secs] </div><div class=\"line\">Heap</div><div class=\"line\"> PSYoungGen      total <span class=\"number\">76288</span><span class=\"keyword\">K</span>, used <span class=\"number\">655</span><span class=\"keyword\">K</span> [<span class=\"number\">0x000000076b500000</span>, <span class=\"number\">0x0000000770a00000</span>, <span class=\"number\">0x00000007c0000000</span>)</div><div class=\"line\">  eden space <span class=\"number\">65536</span><span class=\"keyword\">K</span>, <span class=\"number\">1</span>% used [<span class=\"number\">0x000000076b500000</span>,<span class=\"number\">0x000000076b5a3ee8</span>,<span class=\"number\">0x000000076f500000</span>)</div><div class=\"line\">  from space <span class=\"number\">10752</span><span class=\"keyword\">K</span>, <span class=\"number\">0</span>% used [<span class=\"number\">0x000000076f500000</span>,<span class=\"number\">0x000000076f500000</span>,<span class=\"number\">0x000000076ff80000</span>)</div><div class=\"line\">  to   space <span class=\"number\">10752</span><span class=\"keyword\">K</span>, <span class=\"number\">0</span>% used [<span class=\"number\">0x000000076ff80000</span>,<span class=\"number\">0x000000076ff80000</span>,<span class=\"number\">0x0000000770a00000</span>)</div><div class=\"line\"> ParOldGen       total <span class=\"number\">175104</span><span class=\"keyword\">K</span>, used <span class=\"number\">66145</span><span class=\"keyword\">K</span> [<span class=\"number\">0x00000006c1e00000</span>, <span class=\"number\">0x00000006cc900000</span>, <span class=\"number\">0x000000076b500000</span>)</div><div class=\"line\">  object space <span class=\"number\">175104</span><span class=\"keyword\">K</span>, <span class=\"number\">37</span>% used [<span class=\"number\">0x00000006c1e00000</span>,<span class=\"number\">0x00000006c5e987b8</span>,<span class=\"number\">0x00000006cc900000</span>)</div><div class=\"line\"> Metaspace       used <span class=\"number\">3176</span><span class=\"keyword\">K</span>, capacity <span class=\"number\">4494</span><span class=\"keyword\">K</span>, committed <span class=\"number\">4864</span><span class=\"keyword\">K</span>, reserved <span class=\"number\">1056768</span><span class=\"keyword\">K</span></div><div class=\"line\">  class space    used <span class=\"number\">346</span><span class=\"keyword\">K</span>, capacity <span class=\"number\">386</span><span class=\"keyword\">K</span>, committed <span class=\"number\">512</span><span class=\"keyword\">K</span>, reserved <span class=\"number\">1048576</span><span class=\"keyword\">K</span></div></pre></td></tr></table></figure></p>\n<p>可以看出，根据gc日志[ParOldGen: 65544K-&gt;66145K(175104K)] ，gc依然没有回收bytes对象，哪怕已经不在方法区了，我们再次修改代码。<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test3</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * -verbose:GC</div><div class=\"line\">\t * -XX:+PrintGCDetails</div><div class=\"line\">\t * @param args</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">64</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tSystem.gc();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>gc日志输出如下:<br><figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[GC (System.gc()) [PSYoungGen: <span class=\"number\">3932</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">776</span><span class=\"keyword\">K</span>(<span class=\"number\">76288</span><span class=\"keyword\">K</span>)] <span class=\"number\">69468</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">66320</span><span class=\"keyword\">K</span>(<span class=\"number\">251392</span><span class=\"keyword\">K</span>), <span class=\"number\">0.0014193</span> secs] [<span class=\"keyword\">Times</span>: user=<span class=\"number\">0.00</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.00</span> secs] </div><div class=\"line\">[<span class=\"keyword\">Full</span> GC (System.gc()) [PSYoungGen: <span class=\"number\">776</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">0</span><span class=\"keyword\">K</span>(<span class=\"number\">76288</span><span class=\"keyword\">K</span>)] [ParOldGen: <span class=\"number\">65544</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">609</span><span class=\"keyword\">K</span>(<span class=\"number\">175104</span><span class=\"keyword\">K</span>)] <span class=\"number\">66320</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">609</span><span class=\"keyword\">K</span>(<span class=\"number\">251392</span><span class=\"keyword\">K</span>), [Metaspace: <span class=\"number\">3169</span><span class=\"keyword\">K</span>-&gt;<span class=\"number\">3169</span><span class=\"keyword\">K</span>(<span class=\"number\">1056768</span><span class=\"keyword\">K</span>)], <span class=\"number\">0.0076485</span> secs] [<span class=\"keyword\">Times</span>: user=<span class=\"number\">0.02</span> sys=<span class=\"number\">0.00</span>, real=<span class=\"number\">0.01</span> secs] </div><div class=\"line\">Heap</div><div class=\"line\"> PSYoungGen      total <span class=\"number\">76288</span><span class=\"keyword\">K</span>, used <span class=\"number\">655</span><span class=\"keyword\">K</span> [<span class=\"number\">0x000000076b500000</span>, <span class=\"number\">0x0000000770a00000</span>, <span class=\"number\">0x00000007c0000000</span>)</div><div class=\"line\">  eden space <span class=\"number\">65536</span><span class=\"keyword\">K</span>, <span class=\"number\">1</span>% used [<span class=\"number\">0x000000076b500000</span>,<span class=\"number\">0x000000076b5a3ee8</span>,<span class=\"number\">0x000000076f500000</span>)</div><div class=\"line\">  from space <span class=\"number\">10752</span><span class=\"keyword\">K</span>, <span class=\"number\">0</span>% used [<span class=\"number\">0x000000076f500000</span>,<span class=\"number\">0x000000076f500000</span>,<span class=\"number\">0x000000076ff80000</span>)</div><div class=\"line\">  to   space <span class=\"number\">10752</span><span class=\"keyword\">K</span>, <span class=\"number\">0</span>% used [<span class=\"number\">0x000000076ff80000</span>,<span class=\"number\">0x000000076ff80000</span>,<span class=\"number\">0x0000000770a00000</span>)</div><div class=\"line\"> ParOldGen       total <span class=\"number\">175104</span><span class=\"keyword\">K</span>, used <span class=\"number\">609</span><span class=\"keyword\">K</span> [<span class=\"number\">0x00000006c1e00000</span>, <span class=\"number\">0x00000006cc900000</span>, <span class=\"number\">0x000000076b500000</span>)</div><div class=\"line\">  object space <span class=\"number\">175104</span><span class=\"keyword\">K</span>, <span class=\"number\">0</span>% used [<span class=\"number\">0x00000006c1e00000</span>,<span class=\"number\">0x00000006c1e987a8</span>,<span class=\"number\">0x00000006cc900000</span>)</div><div class=\"line\"> Metaspace       used <span class=\"number\">3176</span><span class=\"keyword\">K</span>, capacity <span class=\"number\">4494</span><span class=\"keyword\">K</span>, committed <span class=\"number\">4864</span><span class=\"keyword\">K</span>, reserved <span class=\"number\">1056768</span><span class=\"keyword\">K</span></div><div class=\"line\">  class space    used <span class=\"number\">346</span><span class=\"keyword\">K</span>, capacity <span class=\"number\">386</span><span class=\"keyword\">K</span>, committed <span class=\"number\">512</span><span class=\"keyword\">K</span>, reserved <span class=\"number\">1048576</span><span class=\"keyword\">K</span></div></pre></td></tr></table></figure></p>\n<p>见证奇迹的时候到，[ParOldGen: 65544K-&gt;609K(175104K)]，竟然被回收了！这是为什么？当创建bytes对象的时候，那是因为当我们创建bytes对象的时候，局部变量表中当然有bytes的引用，哪怕我们没有使用，但GC roots依然存在着和bytes对象的关联。根据test2和代码test3，我们大概可以猜到如果不操作局部变量表，那么GC roots依然会保留，所以test2依然没有回收，但是到了test3，就回收了。好吧，再来一个无用的测试，我们手动赋值为null看看结果。<br><br><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestMain</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * -verbose:GC</div><div class=\"line\">\t * -XX:+PrintGCDetails</div><div class=\"line\">\t * @param args</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">64</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>];</div><div class=\"line\">\t\t<span class=\"comment\">//do something</span></div><div class=\"line\">\t\tbytes = <span class=\"literal\">null</span>;</div><div class=\"line\">\t\tSystem.gc();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实都能想到，果然被gc干掉了……当然这只是一个实验，总结性的话就不说了，反正我也说不来，不过实践出真理！</p>"},{"title":"HashMap面试题总结！","date":"2017-02-18T13:39:13.000Z","_content":"**HashTable和HashMap的区别有哪些？**\n\nHashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。\n\n理解HashMap是Hashtable的轻量级实现（非线程安全的实现，hashtable是非轻量级，线程安全的），都实现Map接口，主要区别在于：\n<!--more-->\n1、由于HashMap非线程安全，在只有一个线程访问的情况下，效率要高于HashTable\n\n2、HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。\n\n3、HashMap把Hashtable的contains方法去掉了，改成containsValue和containsKey。因为contains方法容易让人引起误解。\n\n4、Hashtable继承自陈旧的Dictionary类，而HashMap是Java1.2引进的Map 的一个实现。\n\n5、Hashtable和HashMap扩容的方法不一样，HashTable中hash数组默认大小11，扩容方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数，增加为原来的2倍，没有加1。\n\n6、两者通过hash值散列到hash表的算法不一样，HashTbale是古老的除留余数法，直接使用hashcode，而后者是强制容量为2的幂，重新根据hashcode计算hash值，在使用hash 位与 （hash表长度 – 1），也等价取膜，但更加高效，取得的位置更加分散，偶数，奇数保证了都会分散到。前者就不能保证。\n\n7、另一个区别是HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。所以当有其它线程改变了HashMap的结构（增加或者移除元素），将会抛出ConcurrentModificationException，但迭代器本身的remove()方法移除元素则不会抛出ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看JVM。这条同样也是Enumeration和Iterator的区别。\n<li>fail-fast和iterator迭代器相关。如果某个集合对象创建了Iterator或者ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。</li>\n\n<li>结构上的更改指的是删除或者插入一个元素，这样会影响到map的结构。</li>\n\n<li>该条说白了就是在使用迭代器的过程中有其他线程在结构上修改了map，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。</li>\n<br>\n**为什么HashMap是线程不安全的，实际会如何体现？**\n\n第一，如果多个线程同时使用put方法添加元素\n\n假设正好存在两个put的key发生了碰撞(hash值一样)，那么根据HashMap的实现，这两个key会添加到数组的同一个位置，这样最终就会发生其中一个线程的put的数据被覆盖。\n\n第二，如果多个线程同时检测到元素个数超过数组大小*loadFactor\n\n这样会发生多个线程同时对hash数组进行扩容，都在重新计算元素位置以及复制数据，但是最终只有一个线程扩容后的数组会赋给table，也就是说其他线程的都会丢失，并且各自线程put的数据也丢失。且会引起死循环的错误。\n\n具体细节上的原因，可以参考：[不正当使用HashMap导致cpu 100%的问题追究](http://ifeve.com/hashmap-infinite-loop/)\n\n<br>\n**能否让HashMap实现线程安全，如何做？**\n\n1、直接使用Hashtable，但是当一个线程访问HashTable的同步方法时，其他线程如果也要访问同步方法，会被阻塞住。举个例子，当一个线程使用put方法时，另一个线程不但不可以使用put方法，连get方法都不可以，效率很低，现在基本不会选择它了。\n\n2、HashMap可以通过下面的语句进行同步：\n\n```\nCollections.synchronizeMap(hashMap);\n```\n\n3、直接使用JDK 5 之后的 ConcurrentHashMap，如果使用Java 5或以上的话，请使用ConcurrentHashMap。\n\n<br>\n**Collections.synchronizeMap(hashMap);又是如何保证了HashMap线程安全？**\n\n直接分析源码吧\n\n```\n// synchronizedMap方法\npublic static <K,V> Map<K,V> synchronizedMap(Map<K,V> m) {\n       return new SynchronizedMap<>(m);\n   }\n// SynchronizedMap类\nprivate static class SynchronizedMap<K,V>\n       implements Map<K,V>, Serializable {\n       private static final long serialVersionUID = 1978198479659022715L;\n \n       private final Map<K,V> m;     // Backing Map\n       final Object      mutex;        // Object on which to synchronize\n \n       SynchronizedMap(Map<K,V> m) {\n           this.m = Objects.requireNonNull(m);\n           mutex = this;\n       }\n \n       SynchronizedMap(Map<K,V> m, Object mutex) {\n           this.m = m;\n           this.mutex = mutex;\n       }\n \n       public int size() {\n           synchronized (mutex) {return m.size();}\n       }\n       public boolean isEmpty() {\n           synchronized (mutex) {return m.isEmpty();}\n       }\n       public boolean containsKey(Object key) {\n           synchronized (mutex) {return m.containsKey(key);}\n       }\n       public boolean containsValue(Object value) {\n           synchronized (mutex) {return m.containsValue(value);}\n       }\n       public V get(Object key) {\n           synchronized (mutex) {return m.get(key);}\n       }\n \n       public V put(K key, V value) {\n           synchronized (mutex) {return m.put(key, value);}\n       }\n       public V remove(Object key) {\n           synchronized (mutex) {return m.remove(key);}\n       }\n       // 省略其他方法\n   }\n```\n\n从源码中看出 synchronizedMap()方法返回一个SynchronizedMap类的对象，而在SynchronizedMap类中使用了synchronized来保证对Map的操作是线程安全的，故效率其实也不高。\n\n<br>\n**为什么HashTable的默认大小和HashMap不一样？**\n\n前面分析了，Hashtable 的扩容方法是乘2再+1，不是简单的乘2，故hashtable保证了容量永远是奇数，结合之前分析hashmap的重算hash值的逻辑，就明白了，因为在数据分布在等差数据集合(如偶数)上时，如果公差与桶容量有公约数 n，则至少有(n-1)/n 数量的桶是利用不到的，故之前的hashmap 会在取模（使用位与运算代替）哈希前先做一次哈希运算，调整hash值。这里hashtable比较古老，直接使用了除留余数法，那么就需要设置容量起码不是偶数（除（近似）质数求余的分散效果好）。而JDK开发者选了11。\n\n<font color=\"red\">感觉针对Java的hashmap和hashtable面试，或者理解，到这里就可以了，具体就是多写代码实践。</font>","source":"_posts/HashMap面试题总结！.md","raw":"---\ntitle: HashMap面试题总结！\ndate: 2017-02-18 21:39:13\ncategories: Java二三事\ntags:\n\t- Java\n\t- 集合\n---\n**HashTable和HashMap的区别有哪些？**\n\nHashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。\n\n理解HashMap是Hashtable的轻量级实现（非线程安全的实现，hashtable是非轻量级，线程安全的），都实现Map接口，主要区别在于：\n<!--more-->\n1、由于HashMap非线程安全，在只有一个线程访问的情况下，效率要高于HashTable\n\n2、HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。\n\n3、HashMap把Hashtable的contains方法去掉了，改成containsValue和containsKey。因为contains方法容易让人引起误解。\n\n4、Hashtable继承自陈旧的Dictionary类，而HashMap是Java1.2引进的Map 的一个实现。\n\n5、Hashtable和HashMap扩容的方法不一样，HashTable中hash数组默认大小11，扩容方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数，增加为原来的2倍，没有加1。\n\n6、两者通过hash值散列到hash表的算法不一样，HashTbale是古老的除留余数法，直接使用hashcode，而后者是强制容量为2的幂，重新根据hashcode计算hash值，在使用hash 位与 （hash表长度 – 1），也等价取膜，但更加高效，取得的位置更加分散，偶数，奇数保证了都会分散到。前者就不能保证。\n\n7、另一个区别是HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。所以当有其它线程改变了HashMap的结构（增加或者移除元素），将会抛出ConcurrentModificationException，但迭代器本身的remove()方法移除元素则不会抛出ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看JVM。这条同样也是Enumeration和Iterator的区别。\n<li>fail-fast和iterator迭代器相关。如果某个集合对象创建了Iterator或者ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。</li>\n\n<li>结构上的更改指的是删除或者插入一个元素，这样会影响到map的结构。</li>\n\n<li>该条说白了就是在使用迭代器的过程中有其他线程在结构上修改了map，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。</li>\n<br>\n**为什么HashMap是线程不安全的，实际会如何体现？**\n\n第一，如果多个线程同时使用put方法添加元素\n\n假设正好存在两个put的key发生了碰撞(hash值一样)，那么根据HashMap的实现，这两个key会添加到数组的同一个位置，这样最终就会发生其中一个线程的put的数据被覆盖。\n\n第二，如果多个线程同时检测到元素个数超过数组大小*loadFactor\n\n这样会发生多个线程同时对hash数组进行扩容，都在重新计算元素位置以及复制数据，但是最终只有一个线程扩容后的数组会赋给table，也就是说其他线程的都会丢失，并且各自线程put的数据也丢失。且会引起死循环的错误。\n\n具体细节上的原因，可以参考：[不正当使用HashMap导致cpu 100%的问题追究](http://ifeve.com/hashmap-infinite-loop/)\n\n<br>\n**能否让HashMap实现线程安全，如何做？**\n\n1、直接使用Hashtable，但是当一个线程访问HashTable的同步方法时，其他线程如果也要访问同步方法，会被阻塞住。举个例子，当一个线程使用put方法时，另一个线程不但不可以使用put方法，连get方法都不可以，效率很低，现在基本不会选择它了。\n\n2、HashMap可以通过下面的语句进行同步：\n\n```\nCollections.synchronizeMap(hashMap);\n```\n\n3、直接使用JDK 5 之后的 ConcurrentHashMap，如果使用Java 5或以上的话，请使用ConcurrentHashMap。\n\n<br>\n**Collections.synchronizeMap(hashMap);又是如何保证了HashMap线程安全？**\n\n直接分析源码吧\n\n```\n// synchronizedMap方法\npublic static <K,V> Map<K,V> synchronizedMap(Map<K,V> m) {\n       return new SynchronizedMap<>(m);\n   }\n// SynchronizedMap类\nprivate static class SynchronizedMap<K,V>\n       implements Map<K,V>, Serializable {\n       private static final long serialVersionUID = 1978198479659022715L;\n \n       private final Map<K,V> m;     // Backing Map\n       final Object      mutex;        // Object on which to synchronize\n \n       SynchronizedMap(Map<K,V> m) {\n           this.m = Objects.requireNonNull(m);\n           mutex = this;\n       }\n \n       SynchronizedMap(Map<K,V> m, Object mutex) {\n           this.m = m;\n           this.mutex = mutex;\n       }\n \n       public int size() {\n           synchronized (mutex) {return m.size();}\n       }\n       public boolean isEmpty() {\n           synchronized (mutex) {return m.isEmpty();}\n       }\n       public boolean containsKey(Object key) {\n           synchronized (mutex) {return m.containsKey(key);}\n       }\n       public boolean containsValue(Object value) {\n           synchronized (mutex) {return m.containsValue(value);}\n       }\n       public V get(Object key) {\n           synchronized (mutex) {return m.get(key);}\n       }\n \n       public V put(K key, V value) {\n           synchronized (mutex) {return m.put(key, value);}\n       }\n       public V remove(Object key) {\n           synchronized (mutex) {return m.remove(key);}\n       }\n       // 省略其他方法\n   }\n```\n\n从源码中看出 synchronizedMap()方法返回一个SynchronizedMap类的对象，而在SynchronizedMap类中使用了synchronized来保证对Map的操作是线程安全的，故效率其实也不高。\n\n<br>\n**为什么HashTable的默认大小和HashMap不一样？**\n\n前面分析了，Hashtable 的扩容方法是乘2再+1，不是简单的乘2，故hashtable保证了容量永远是奇数，结合之前分析hashmap的重算hash值的逻辑，就明白了，因为在数据分布在等差数据集合(如偶数)上时，如果公差与桶容量有公约数 n，则至少有(n-1)/n 数量的桶是利用不到的，故之前的hashmap 会在取模（使用位与运算代替）哈希前先做一次哈希运算，调整hash值。这里hashtable比较古老，直接使用了除留余数法，那么就需要设置容量起码不是偶数（除（近似）质数求余的分散效果好）。而JDK开发者选了11。\n\n<font color=\"red\">感觉针对Java的hashmap和hashtable面试，或者理解，到这里就可以了，具体就是多写代码实践。</font>","slug":"HashMap面试题总结！","published":1,"updated":"2017-02-18T13:44:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kei000grhsozl4to0ny","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p><strong>HashTable和HashMap的区别有哪些？</strong></p>\n<p>HashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。</p>\n<p>理解HashMap是Hashtable的轻量级实现（非线程安全的实现，hashtable是非轻量级，线程安全的），都实现Map接口，主要区别在于：<br><a id=\"more\"></a><br>1、由于HashMap非线程安全，在只有一个线程访问的情况下，效率要高于HashTable</p>\n<p>2、HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。</p>\n<p>3、HashMap把Hashtable的contains方法去掉了，改成containsValue和containsKey。因为contains方法容易让人引起误解。</p>\n<p>4、Hashtable继承自陈旧的Dictionary类，而HashMap是Java1.2引进的Map 的一个实现。</p>\n<p>5、Hashtable和HashMap扩容的方法不一样，HashTable中hash数组默认大小11，扩容方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数，增加为原来的2倍，没有加1。</p>\n<p>6、两者通过hash值散列到hash表的算法不一样，HashTbale是古老的除留余数法，直接使用hashcode，而后者是强制容量为2的幂，重新根据hashcode计算hash值，在使用hash 位与 （hash表长度 – 1），也等价取膜，但更加高效，取得的位置更加分散，偶数，奇数保证了都会分散到。前者就不能保证。</p>\n<p>7、另一个区别是HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。所以当有其它线程改变了HashMap的结构（增加或者移除元素），将会抛出ConcurrentModificationException，但迭代器本身的remove()方法移除元素则不会抛出ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看JVM。这条同样也是Enumeration和Iterator的区别。</p>\n<li>fail-fast和iterator迭代器相关。如果某个集合对象创建了Iterator或者ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。</li>\n\n<li>结构上的更改指的是删除或者插入一个元素，这样会影响到map的结构。</li>\n\n<p><li>该条说白了就是在使用迭代器的过程中有其他线程在结构上修改了map，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。</li><br><br><br><strong>为什么HashMap是线程不安全的，实际会如何体现？</strong></p>\n<p>第一，如果多个线程同时使用put方法添加元素</p>\n<p>假设正好存在两个put的key发生了碰撞(hash值一样)，那么根据HashMap的实现，这两个key会添加到数组的同一个位置，这样最终就会发生其中一个线程的put的数据被覆盖。</p>\n<p>第二，如果多个线程同时检测到元素个数超过数组大小*loadFactor</p>\n<p>这样会发生多个线程同时对hash数组进行扩容，都在重新计算元素位置以及复制数据，但是最终只有一个线程扩容后的数组会赋给table，也就是说其他线程的都会丢失，并且各自线程put的数据也丢失。且会引起死循环的错误。</p>\n<p>具体细节上的原因，可以参考：<a href=\"http://ifeve.com/hashmap-infinite-loop/\" target=\"_blank\" rel=\"external\">不正当使用HashMap导致cpu 100%的问题追究</a></p>\n<p><br><br><strong>能否让HashMap实现线程安全，如何做？</strong></p>\n<p>1、直接使用Hashtable，但是当一个线程访问HashTable的同步方法时，其他线程如果也要访问同步方法，会被阻塞住。举个例子，当一个线程使用put方法时，另一个线程不但不可以使用put方法，连get方法都不可以，效率很低，现在基本不会选择它了。</p>\n<p>2、HashMap可以通过下面的语句进行同步：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections.synchronizeMap(hashMap)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>3、直接使用JDK 5 之后的 ConcurrentHashMap，如果使用Java 5或以上的话，请使用ConcurrentHashMap。</p>\n<p><br><br><strong>Collections.synchronizeMap(hashMap);又是如何保证了HashMap线程安全？</strong></p>\n<p>直接分析源码吧</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// synchronizedMap方法</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;K,V&gt; Map&lt;K,V&gt; synchronizedMap(Map&lt;K,V&gt; m) &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SynchronizedMap&lt;&gt;(m);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"comment\">// SynchronizedMap类</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> class SynchronizedMap&lt;K,V&gt;</div><div class=\"line\">       implements Map&lt;K,V&gt;, Serializable &#123;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1978198479659022715</span>L;</div><div class=\"line\"> </div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;K,V&gt; m;     <span class=\"comment\">// Backing Map</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">Object</span>      mutex;        <span class=\"comment\">// Object on which to synchronize</span></div><div class=\"line\"> </div><div class=\"line\">       SynchronizedMap(Map&lt;K,V&gt; m) &#123;</div><div class=\"line\">           <span class=\"keyword\">this</span>.m = Objects.requireNonNull(m);</div><div class=\"line\">           mutex = <span class=\"keyword\">this</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"> </div><div class=\"line\">       SynchronizedMap(Map&lt;K,V&gt; m, <span class=\"keyword\">Object</span> mutex) &#123;</div><div class=\"line\">           <span class=\"keyword\">this</span>.m = m;</div><div class=\"line\">           <span class=\"keyword\">this</span>.mutex = mutex;</div><div class=\"line\">       &#125;</div><div class=\"line\"> </div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"built_in\">size</span>() &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.<span class=\"built_in\">size</span>();&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> isEmpty() &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.isEmpty();&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> containsKey(<span class=\"keyword\">Object</span> <span class=\"built_in\">key</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.containsKey(<span class=\"built_in\">key</span>);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> containsValue(<span class=\"keyword\">Object</span> value) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.containsValue(value);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">public</span> V <span class=\"built_in\">get</span>(<span class=\"keyword\">Object</span> <span class=\"built_in\">key</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.<span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"> </div><div class=\"line\">       <span class=\"keyword\">public</span> V put(K <span class=\"built_in\">key</span>, V value) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.put(<span class=\"built_in\">key</span>, value);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">public</span> V remove(<span class=\"keyword\">Object</span> <span class=\"built_in\">key</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.remove(<span class=\"built_in\">key</span>);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">// 省略其他方法</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>从源码中看出 synchronizedMap()方法返回一个SynchronizedMap类的对象，而在SynchronizedMap类中使用了synchronized来保证对Map的操作是线程安全的，故效率其实也不高。</p>\n<p><br><br><strong>为什么HashTable的默认大小和HashMap不一样？</strong></p>\n<p>前面分析了，Hashtable 的扩容方法是乘2再+1，不是简单的乘2，故hashtable保证了容量永远是奇数，结合之前分析hashmap的重算hash值的逻辑，就明白了，因为在数据分布在等差数据集合(如偶数)上时，如果公差与桶容量有公约数 n，则至少有(n-1)/n 数量的桶是利用不到的，故之前的hashmap 会在取模（使用位与运算代替）哈希前先做一次哈希运算，调整hash值。这里hashtable比较古老，直接使用了除留余数法，那么就需要设置容量起码不是偶数（除（近似）质数求余的分散效果好）。而JDK开发者选了11。</p>\n<font color=\"red\">感觉针对Java的hashmap和hashtable面试，或者理解，到这里就可以了，具体就是多写代码实践。</font>","excerpt":"<p><strong>HashTable和HashMap的区别有哪些？</strong></p>\n<p>HashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。</p>\n<p>理解HashMap是Hashtable的轻量级实现（非线程安全的实现，hashtable是非轻量级，线程安全的），都实现Map接口，主要区别在于：<br></p>","more":"<br>1、由于HashMap非线程安全，在只有一个线程访问的情况下，效率要高于HashTable<p></p>\n<p>2、HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。</p>\n<p>3、HashMap把Hashtable的contains方法去掉了，改成containsValue和containsKey。因为contains方法容易让人引起误解。</p>\n<p>4、Hashtable继承自陈旧的Dictionary类，而HashMap是Java1.2引进的Map 的一个实现。</p>\n<p>5、Hashtable和HashMap扩容的方法不一样，HashTable中hash数组默认大小11，扩容方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数，增加为原来的2倍，没有加1。</p>\n<p>6、两者通过hash值散列到hash表的算法不一样，HashTbale是古老的除留余数法，直接使用hashcode，而后者是强制容量为2的幂，重新根据hashcode计算hash值，在使用hash 位与 （hash表长度 – 1），也等价取膜，但更加高效，取得的位置更加分散，偶数，奇数保证了都会分散到。前者就不能保证。</p>\n<p>7、另一个区别是HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。所以当有其它线程改变了HashMap的结构（增加或者移除元素），将会抛出ConcurrentModificationException，但迭代器本身的remove()方法移除元素则不会抛出ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看JVM。这条同样也是Enumeration和Iterator的区别。</p>\n<li>fail-fast和iterator迭代器相关。如果某个集合对象创建了Iterator或者ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。</li>\n\n<li>结构上的更改指的是删除或者插入一个元素，这样会影响到map的结构。</li>\n\n<p><li>该条说白了就是在使用迭代器的过程中有其他线程在结构上修改了map，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。</li><br><br><br><strong>为什么HashMap是线程不安全的，实际会如何体现？</strong></p>\n<p>第一，如果多个线程同时使用put方法添加元素</p>\n<p>假设正好存在两个put的key发生了碰撞(hash值一样)，那么根据HashMap的实现，这两个key会添加到数组的同一个位置，这样最终就会发生其中一个线程的put的数据被覆盖。</p>\n<p>第二，如果多个线程同时检测到元素个数超过数组大小*loadFactor</p>\n<p>这样会发生多个线程同时对hash数组进行扩容，都在重新计算元素位置以及复制数据，但是最终只有一个线程扩容后的数组会赋给table，也就是说其他线程的都会丢失，并且各自线程put的数据也丢失。且会引起死循环的错误。</p>\n<p>具体细节上的原因，可以参考：<a href=\"http://ifeve.com/hashmap-infinite-loop/\">不正当使用HashMap导致cpu 100%的问题追究</a></p>\n<p><br><br><strong>能否让HashMap实现线程安全，如何做？</strong></p>\n<p>1、直接使用Hashtable，但是当一个线程访问HashTable的同步方法时，其他线程如果也要访问同步方法，会被阻塞住。举个例子，当一个线程使用put方法时，另一个线程不但不可以使用put方法，连get方法都不可以，效率很低，现在基本不会选择它了。</p>\n<p>2、HashMap可以通过下面的语句进行同步：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections.synchronizeMap(hashMap)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>3、直接使用JDK 5 之后的 ConcurrentHashMap，如果使用Java 5或以上的话，请使用ConcurrentHashMap。</p>\n<p><br><br><strong>Collections.synchronizeMap(hashMap);又是如何保证了HashMap线程安全？</strong></p>\n<p>直接分析源码吧</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// synchronizedMap方法</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;K,V&gt; Map&lt;K,V&gt; synchronizedMap(Map&lt;K,V&gt; m) &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SynchronizedMap&lt;&gt;(m);</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"comment\">// SynchronizedMap类</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> class SynchronizedMap&lt;K,V&gt;</div><div class=\"line\">       implements Map&lt;K,V&gt;, Serializable &#123;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1978198479659022715</span>L;</div><div class=\"line\"> </div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;K,V&gt; m;     <span class=\"comment\">// Backing Map</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">Object</span>      mutex;        <span class=\"comment\">// Object on which to synchronize</span></div><div class=\"line\"> </div><div class=\"line\">       SynchronizedMap(Map&lt;K,V&gt; m) &#123;</div><div class=\"line\">           <span class=\"keyword\">this</span>.m = Objects.requireNonNull(m);</div><div class=\"line\">           mutex = <span class=\"keyword\">this</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"> </div><div class=\"line\">       SynchronizedMap(Map&lt;K,V&gt; m, <span class=\"keyword\">Object</span> mutex) &#123;</div><div class=\"line\">           <span class=\"keyword\">this</span>.m = m;</div><div class=\"line\">           <span class=\"keyword\">this</span>.mutex = mutex;</div><div class=\"line\">       &#125;</div><div class=\"line\"> </div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"built_in\">size</span>() &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.<span class=\"built_in\">size</span>();&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> isEmpty() &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.isEmpty();&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> containsKey(<span class=\"keyword\">Object</span> <span class=\"built_in\">key</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.containsKey(<span class=\"built_in\">key</span>);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> containsValue(<span class=\"keyword\">Object</span> value) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.containsValue(value);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">public</span> V <span class=\"built_in\">get</span>(<span class=\"keyword\">Object</span> <span class=\"built_in\">key</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.<span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"> </div><div class=\"line\">       <span class=\"keyword\">public</span> V put(K <span class=\"built_in\">key</span>, V value) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.put(<span class=\"built_in\">key</span>, value);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">public</span> V remove(<span class=\"keyword\">Object</span> <span class=\"built_in\">key</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (mutex) &#123;<span class=\"keyword\">return</span> m.remove(<span class=\"built_in\">key</span>);&#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">// 省略其他方法</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>从源码中看出 synchronizedMap()方法返回一个SynchronizedMap类的对象，而在SynchronizedMap类中使用了synchronized来保证对Map的操作是线程安全的，故效率其实也不高。</p>\n<p><br><br><strong>为什么HashTable的默认大小和HashMap不一样？</strong></p>\n<p>前面分析了，Hashtable 的扩容方法是乘2再+1，不是简单的乘2，故hashtable保证了容量永远是奇数，结合之前分析hashmap的重算hash值的逻辑，就明白了，因为在数据分布在等差数据集合(如偶数)上时，如果公差与桶容量有公约数 n，则至少有(n-1)/n 数量的桶是利用不到的，故之前的hashmap 会在取模（使用位与运算代替）哈希前先做一次哈希运算，调整hash值。这里hashtable比较古老，直接使用了除留余数法，那么就需要设置容量起码不是偶数（除（近似）质数求余的分散效果好）。而JDK开发者选了11。</p>\n<font color=\"red\">感觉针对Java的hashmap和hashtable面试，或者理解，到这里就可以了，具体就是多写代码实践。</font>"},{"title":"Java8 Lambda表达式笔记","date":"2018-07-07T01:26:39.000Z","_content":"\n项目的jdk版本从1.7升到了1.8之后，学习了一下java8的新特性，其中Lambda表达式可以使得java类的构造方法看起来紧凑而简洁，没有很多复杂的模板代码，所以写一篇博客记录一下。\n\n先从一个简单的例子来看一下Java8之前的写法：\n\n```java\nList<String> params = Arrays.asList(\"id\", \"name\", \"age\", \"salary\");\n\nCollections.sort(params, new Comparator<String>() {\n    @Override\n    public int compare(String a, String b) {\n        return b.compareTo(a);\n    }\n});\n```\n\n这是一个排序的对String列表进行排序的方法，静态工具方法Collections.sort接受一个list，和一个Comparator接口作为输入参数，Comparator的实现类可以对输入的list中的元素进行比较。通常情况下，你可以直接用创建匿名Comparator对象，并把它作为参数传递给sort方法。\n\n除了创建匿名对象以外，Java 8 还提供了一种更简洁的方式，Lambda表达式。\n\n```java\nCollections.sort(params, (String a, String b) -> {\n    return b.compareTo(a);\n});\n```\n\n你可以看到，这段代码就比之前的更加简短和易读。但是，它还可以更加简短：\n\n ```java\nCollections.sort(params, (String a, String b) -> b.compareTo(a));\n ```\n\n只要一行代码，包含了方法体。你甚至可以连大括号对{}和return关键字都省略不要。不过这还不是最短的写法：\n\n```java\nCollections.sort(params, (a, b) -> b.compareTo(a));\n```\n\n Java编译器能够自动识别参数的类型，所以你就可以省略掉类型不写。<!--more-->\n\n下面可以再深入地研究一下lambda表达式的威力:\n\nLambda表达式如何匹配Java的类型系统？每一个lambda都能够通过一个特定的接口，与一个给定的类型进行匹配。一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。\n\n任意只包含一个抽象方法的接口，我们都可以用来做成lambda表达式。为了让你定义的接口满足要求，你应当在接口前加上@FunctionalInterface 标注。编译器会注意到这个标注，如果你的接口中定义了第二个抽象方法的话，编译器会抛出异常\n\n例如：\n\n```java\n@FunctionalInterface\ninterface Converter<F, T> {\n    T convert(F from);\n}\n\nConverter<String, Integer> converter = (from) -> Integer.valueOf(from);\nInteger converted = converter.convert(\"123\");\nSystem.out.println(converted);    // 123\n```\n\n\n\nps：如果不写@FunctionalInterface 标注，程序也是正确的\n\n上面的代码通过静态方法引用的话，会更加简洁：\n\n```java\nConverter<String, Integer> converter = Integer::valueOf;\nInteger converted = converter.convert(\"123\");\nSystem.out.println(converted);   // 123\n```\n\nJava 8 允许通过::关键字获取方法或者构造函数的的引用。上面的例子就演示了如何引用一个静态方法。而且，我们还可以对一个对象的方法进行引用：\n\n```java\nclass Something {\n    String startsWith(String s) {\n        return String.valueOf(s.charAt(0));\n    }\n}\n\nSomething something = new Something();\nConverter<String, String> converter = something::startsWith;\nString converted = converter.convert(\"Java\");\nSystem.out.println(converted);    // \"J\"\n\n```\n\n让我们看看如何使用::关键字引用构造函数。首先我们定义一个示例bean，包含不同的构造方法：\n\n```java\nclass Person {\n    String firstName;\n    String lastName;\n\n    Person() {}\n\n    Person(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}\n```\n\n接下来，我们定义一个person工厂接口，用来创建新的person对象：\n\n```java\ninterface PersonFactory<P extends Person> {\n    P create(String firstName, String lastName);\n}\n```\n\n然后我们通过构造函数引用来把所有东西拼到一起，而不是像以前一样，通过手动实现一个工厂来这么做。\n\n```java\nPersonFactory<Person> personFactory = Person::new;\nPerson person = personFactory.create(\"Peter\", \"Parker\");\n```\n\n我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。\n\n-----------------------------------------------------------------------------------------------------------------------------------------\n\n接下来讨论一下lambda的访问范围，对于lambda表达式外部的变量，其访问权限的粒度与匿名对象的方式非常类似。你能够访问局部对应的外部区域的局部final变量，以及成员变量和静态变量。\n\n我们可以访问lambda表达式外部的final局部变量：\n\n```java\nfinal int num = 1;\nConverter<Integer, String> stringConverter =\n        (from) -> String.valueOf(from + num);\n\nstringConverter.convert(2);     // 3\n```\n\n但是与匿名对象不同的是，变量num并不需要一定是final。下面的代码依然是合法的：\n\n```java\nint num = 1;\nConverter<Integer, String> stringConverter =\n        (from) -> String.valueOf(from + num);\n\nstringConverter.convert(2);     // 3\n```\n\n然而，num在编译的时候被隐式地当做final变量来处理。下面的代码就不合法：\n\n```java\nint num = 1;\nConverter<Integer, String> stringConverter =\n        (from) -> String.valueOf(from + num);\nnum = 3;\n```\n\n在lambda表达式内部企图改变num的值也是不允许的。\n\n与局部变量不同，我们在lambda表达式的内部能获取到对成员变量或静态变量的读写权。这种访问行为在匿名对象里是非常典型的。\n\n```java\nclass Lambda4 {\n    static int outerStaticNum;\n    int outerNum;\n\n    void testScopes() {\n        Converter<Integer, String> stringConverter1 = (from) -> {\n            outerNum = 23;\n            return String.valueOf(from);\n        };\n\n        Converter<Integer, String> stringConverter2 = (from) -> {\n            outerStaticNum = 72;\n            return String.valueOf(from);\n        };\n    }\n}\n```\n\n\n\n 默认方法无法在lambda表达式内部被访问。\n\n\n\n\n\n\n\n","source":"_posts/Java8-Lambda表达式笔记.md","raw":"---\ntitle: Java8 Lambda表达式笔记\ndate: 2018-07-07 09:26:39\ncategories: Java二三事\ntags:\n\t- Java\n---\n\n项目的jdk版本从1.7升到了1.8之后，学习了一下java8的新特性，其中Lambda表达式可以使得java类的构造方法看起来紧凑而简洁，没有很多复杂的模板代码，所以写一篇博客记录一下。\n\n先从一个简单的例子来看一下Java8之前的写法：\n\n```java\nList<String> params = Arrays.asList(\"id\", \"name\", \"age\", \"salary\");\n\nCollections.sort(params, new Comparator<String>() {\n    @Override\n    public int compare(String a, String b) {\n        return b.compareTo(a);\n    }\n});\n```\n\n这是一个排序的对String列表进行排序的方法，静态工具方法Collections.sort接受一个list，和一个Comparator接口作为输入参数，Comparator的实现类可以对输入的list中的元素进行比较。通常情况下，你可以直接用创建匿名Comparator对象，并把它作为参数传递给sort方法。\n\n除了创建匿名对象以外，Java 8 还提供了一种更简洁的方式，Lambda表达式。\n\n```java\nCollections.sort(params, (String a, String b) -> {\n    return b.compareTo(a);\n});\n```\n\n你可以看到，这段代码就比之前的更加简短和易读。但是，它还可以更加简短：\n\n ```java\nCollections.sort(params, (String a, String b) -> b.compareTo(a));\n ```\n\n只要一行代码，包含了方法体。你甚至可以连大括号对{}和return关键字都省略不要。不过这还不是最短的写法：\n\n```java\nCollections.sort(params, (a, b) -> b.compareTo(a));\n```\n\n Java编译器能够自动识别参数的类型，所以你就可以省略掉类型不写。<!--more-->\n\n下面可以再深入地研究一下lambda表达式的威力:\n\nLambda表达式如何匹配Java的类型系统？每一个lambda都能够通过一个特定的接口，与一个给定的类型进行匹配。一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。\n\n任意只包含一个抽象方法的接口，我们都可以用来做成lambda表达式。为了让你定义的接口满足要求，你应当在接口前加上@FunctionalInterface 标注。编译器会注意到这个标注，如果你的接口中定义了第二个抽象方法的话，编译器会抛出异常\n\n例如：\n\n```java\n@FunctionalInterface\ninterface Converter<F, T> {\n    T convert(F from);\n}\n\nConverter<String, Integer> converter = (from) -> Integer.valueOf(from);\nInteger converted = converter.convert(\"123\");\nSystem.out.println(converted);    // 123\n```\n\n\n\nps：如果不写@FunctionalInterface 标注，程序也是正确的\n\n上面的代码通过静态方法引用的话，会更加简洁：\n\n```java\nConverter<String, Integer> converter = Integer::valueOf;\nInteger converted = converter.convert(\"123\");\nSystem.out.println(converted);   // 123\n```\n\nJava 8 允许通过::关键字获取方法或者构造函数的的引用。上面的例子就演示了如何引用一个静态方法。而且，我们还可以对一个对象的方法进行引用：\n\n```java\nclass Something {\n    String startsWith(String s) {\n        return String.valueOf(s.charAt(0));\n    }\n}\n\nSomething something = new Something();\nConverter<String, String> converter = something::startsWith;\nString converted = converter.convert(\"Java\");\nSystem.out.println(converted);    // \"J\"\n\n```\n\n让我们看看如何使用::关键字引用构造函数。首先我们定义一个示例bean，包含不同的构造方法：\n\n```java\nclass Person {\n    String firstName;\n    String lastName;\n\n    Person() {}\n\n    Person(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}\n```\n\n接下来，我们定义一个person工厂接口，用来创建新的person对象：\n\n```java\ninterface PersonFactory<P extends Person> {\n    P create(String firstName, String lastName);\n}\n```\n\n然后我们通过构造函数引用来把所有东西拼到一起，而不是像以前一样，通过手动实现一个工厂来这么做。\n\n```java\nPersonFactory<Person> personFactory = Person::new;\nPerson person = personFactory.create(\"Peter\", \"Parker\");\n```\n\n我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。\n\n-----------------------------------------------------------------------------------------------------------------------------------------\n\n接下来讨论一下lambda的访问范围，对于lambda表达式外部的变量，其访问权限的粒度与匿名对象的方式非常类似。你能够访问局部对应的外部区域的局部final变量，以及成员变量和静态变量。\n\n我们可以访问lambda表达式外部的final局部变量：\n\n```java\nfinal int num = 1;\nConverter<Integer, String> stringConverter =\n        (from) -> String.valueOf(from + num);\n\nstringConverter.convert(2);     // 3\n```\n\n但是与匿名对象不同的是，变量num并不需要一定是final。下面的代码依然是合法的：\n\n```java\nint num = 1;\nConverter<Integer, String> stringConverter =\n        (from) -> String.valueOf(from + num);\n\nstringConverter.convert(2);     // 3\n```\n\n然而，num在编译的时候被隐式地当做final变量来处理。下面的代码就不合法：\n\n```java\nint num = 1;\nConverter<Integer, String> stringConverter =\n        (from) -> String.valueOf(from + num);\nnum = 3;\n```\n\n在lambda表达式内部企图改变num的值也是不允许的。\n\n与局部变量不同，我们在lambda表达式的内部能获取到对成员变量或静态变量的读写权。这种访问行为在匿名对象里是非常典型的。\n\n```java\nclass Lambda4 {\n    static int outerStaticNum;\n    int outerNum;\n\n    void testScopes() {\n        Converter<Integer, String> stringConverter1 = (from) -> {\n            outerNum = 23;\n            return String.valueOf(from);\n        };\n\n        Converter<Integer, String> stringConverter2 = (from) -> {\n            outerStaticNum = 72;\n            return String.valueOf(from);\n        };\n    }\n}\n```\n\n\n\n 默认方法无法在lambda表达式内部被访问。\n\n\n\n\n\n\n\n","slug":"Java8-Lambda表达式笔记","published":1,"updated":"2018-07-07T07:29:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kek000jrhsodx71n2bk","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>项目的jdk版本从1.7升到了1.8之后，学习了一下java8的新特性，其中Lambda表达式可以使得java类的构造方法看起来紧凑而简洁，没有很多复杂的模板代码，所以写一篇博客记录一下。</p>\n<p>先从一个简单的例子来看一下Java8之前的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; params = Arrays.asList(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"salary\"</span>);</div><div class=\"line\"></div><div class=\"line\">Collections.sort(params, <span class=\"keyword\">new</span> Comparator&lt;String&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String a, String b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> b.compareTo(a);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这是一个排序的对String列表进行排序的方法，静态工具方法Collections.sort接受一个list，和一个Comparator接口作为输入参数，Comparator的实现类可以对输入的list中的元素进行比较。通常情况下，你可以直接用创建匿名Comparator对象，并把它作为参数传递给sort方法。</p>\n<p>除了创建匿名对象以外，Java 8 还提供了一种更简洁的方式，Lambda表达式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections.sort(params, (String a, String b) -&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> b.compareTo(a);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>你可以看到，这段代码就比之前的更加简短和易读。但是，它还可以更加简短：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections.sort(params, (String a, String b) -&gt; b.compareTo(a));</div></pre></td></tr></table></figure>\n<p>只要一行代码，包含了方法体。你甚至可以连大括号对{}和return关键字都省略不要。不过这还不是最短的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections.sort(params, (a, b) -&gt; b.compareTo(a));</div></pre></td></tr></table></figure>\n<p> Java编译器能够自动识别参数的类型，所以你就可以省略掉类型不写。<a id=\"more\"></a></p>\n<p>下面可以再深入地研究一下lambda表达式的威力:</p>\n<p>Lambda表达式如何匹配Java的类型系统？每一个lambda都能够通过一个特定的接口，与一个给定的类型进行匹配。一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。</p>\n<p>任意只包含一个抽象方法的接口，我们都可以用来做成lambda表达式。为了让你定义的接口满足要求，你应当在接口前加上@FunctionalInterface 标注。编译器会注意到这个标注，如果你的接口中定义了第二个抽象方法的话，编译器会抛出异常</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FunctionalInterface</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Converter</span>&lt;<span class=\"title\">F</span>, <span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\">T <span class=\"title\">convert</span><span class=\"params\">(F from)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);</div><div class=\"line\">Integer converted = converter.convert(<span class=\"string\">\"123\"</span>);</div><div class=\"line\">System.out.println(converted);    <span class=\"comment\">// 123</span></div></pre></td></tr></table></figure>\n<p>ps：如果不写@FunctionalInterface 标注，程序也是正确的</p>\n<p>上面的代码通过静态方法引用的话，会更加简洁：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Converter&lt;String, Integer&gt; converter = Integer::valueOf;</div><div class=\"line\">Integer converted = converter.convert(<span class=\"string\">\"123\"</span>);</div><div class=\"line\">System.out.println(converted);   <span class=\"comment\">// 123</span></div></pre></td></tr></table></figure>\n<p>Java 8 允许通过::关键字获取方法或者构造函数的的引用。上面的例子就演示了如何引用一个静态方法。而且，我们还可以对一个对象的方法进行引用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Something</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">startsWith</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(s.charAt(<span class=\"number\">0</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Something something = <span class=\"keyword\">new</span> Something();</div><div class=\"line\">Converter&lt;String, String&gt; converter = something::startsWith;</div><div class=\"line\">String converted = converter.convert(<span class=\"string\">\"Java\"</span>);</div><div class=\"line\">System.out.println(converted);    <span class=\"comment\">// \"J\"</span></div></pre></td></tr></table></figure>\n<p>让我们看看如何使用::关键字引用构造函数。首先我们定义一个示例bean，包含不同的构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    String firstName;</div><div class=\"line\">    String lastName;</div><div class=\"line\"></div><div class=\"line\">    Person() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    Person(String firstName, String lastName) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接下来，我们定义一个person工厂接口，用来创建新的person对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PersonFactory</span>&lt;<span class=\"title\">P</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\">P <span class=\"title\">create</span><span class=\"params\">(String firstName, String lastName)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后我们通过构造函数引用来把所有东西拼到一起，而不是像以前一样，通过手动实现一个工厂来这么做。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">PersonFactory&lt;Person&gt; personFactory = Person::<span class=\"keyword\">new</span>;</div><div class=\"line\">Person person = personFactory.create(<span class=\"string\">\"Peter\"</span>, <span class=\"string\">\"Parker\"</span>);</div></pre></td></tr></table></figure>\n<p>我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。</p>\n<hr>\n<p>接下来讨论一下lambda的访问范围，对于lambda表达式外部的变量，其访问权限的粒度与匿名对象的方式非常类似。你能够访问局部对应的外部区域的局部final变量，以及成员变量和静态变量。</p>\n<p>我们可以访问lambda表达式外部的final局部变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;</div><div class=\"line\">Converter&lt;Integer, String&gt; stringConverter =</div><div class=\"line\">        (from) -&gt; String.valueOf(from + num);</div><div class=\"line\"></div><div class=\"line\">stringConverter.convert(<span class=\"number\">2</span>);     <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<p>但是与匿名对象不同的是，变量num并不需要一定是final。下面的代码依然是合法的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;</div><div class=\"line\">Converter&lt;Integer, String&gt; stringConverter =</div><div class=\"line\">        (from) -&gt; String.valueOf(from + num);</div><div class=\"line\"></div><div class=\"line\">stringConverter.convert(<span class=\"number\">2</span>);     <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<p>然而，num在编译的时候被隐式地当做final变量来处理。下面的代码就不合法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;</div><div class=\"line\">Converter&lt;Integer, String&gt; stringConverter =</div><div class=\"line\">        (from) -&gt; String.valueOf(from + num);</div><div class=\"line\">num = <span class=\"number\">3</span>;</div></pre></td></tr></table></figure>\n<p>在lambda表达式内部企图改变num的值也是不允许的。</p>\n<p>与局部变量不同，我们在lambda表达式的内部能获取到对成员变量或静态变量的读写权。这种访问行为在匿名对象里是非常典型的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lambda4</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> outerStaticNum;</div><div class=\"line\">    <span class=\"keyword\">int</span> outerNum;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testScopes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Converter&lt;Integer, String&gt; stringConverter1 = (from) -&gt; &#123;</div><div class=\"line\">            outerNum = <span class=\"number\">23</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> String.valueOf(from);</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        Converter&lt;Integer, String&gt; stringConverter2 = (from) -&gt; &#123;</div><div class=\"line\">            outerStaticNum = <span class=\"number\">72</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> String.valueOf(from);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 默认方法无法在lambda表达式内部被访问。</p>\n","excerpt":"<p>项目的jdk版本从1.7升到了1.8之后，学习了一下java8的新特性，其中Lambda表达式可以使得java类的构造方法看起来紧凑而简洁，没有很多复杂的模板代码，所以写一篇博客记录一下。</p>\n<p>先从一个简单的例子来看一下Java8之前的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; params = Arrays.asList(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"salary\"</span>);</div><div class=\"line\"></div><div class=\"line\">Collections.sort(params, <span class=\"keyword\">new</span> Comparator&lt;String&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String a, String b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> b.compareTo(a);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这是一个排序的对String列表进行排序的方法，静态工具方法Collections.sort接受一个list，和一个Comparator接口作为输入参数，Comparator的实现类可以对输入的list中的元素进行比较。通常情况下，你可以直接用创建匿名Comparator对象，并把它作为参数传递给sort方法。</p>\n<p>除了创建匿名对象以外，Java 8 还提供了一种更简洁的方式，Lambda表达式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections.sort(params, (String a, String b) -&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> b.compareTo(a);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>你可以看到，这段代码就比之前的更加简短和易读。但是，它还可以更加简短：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections.sort(params, (String a, String b) -&gt; b.compareTo(a));</div></pre></td></tr></table></figure>\n<p>只要一行代码，包含了方法体。你甚至可以连大括号对{}和return关键字都省略不要。不过这还不是最短的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections.sort(params, (a, b) -&gt; b.compareTo(a));</div></pre></td></tr></table></figure>\n<p> Java编译器能够自动识别参数的类型，所以你就可以省略掉类型不写。</p>","more":"<p></p>\n<p>下面可以再深入地研究一下lambda表达式的威力:</p>\n<p>Lambda表达式如何匹配Java的类型系统？每一个lambda都能够通过一个特定的接口，与一个给定的类型进行匹配。一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。</p>\n<p>任意只包含一个抽象方法的接口，我们都可以用来做成lambda表达式。为了让你定义的接口满足要求，你应当在接口前加上@FunctionalInterface 标注。编译器会注意到这个标注，如果你的接口中定义了第二个抽象方法的话，编译器会抛出异常</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FunctionalInterface</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Converter</span>&lt;<span class=\"title\">F</span>, <span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\">T <span class=\"title\">convert</span><span class=\"params\">(F from)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);</div><div class=\"line\">Integer converted = converter.convert(<span class=\"string\">\"123\"</span>);</div><div class=\"line\">System.out.println(converted);    <span class=\"comment\">// 123</span></div></pre></td></tr></table></figure>\n<p>ps：如果不写@FunctionalInterface 标注，程序也是正确的</p>\n<p>上面的代码通过静态方法引用的话，会更加简洁：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Converter&lt;String, Integer&gt; converter = Integer::valueOf;</div><div class=\"line\">Integer converted = converter.convert(<span class=\"string\">\"123\"</span>);</div><div class=\"line\">System.out.println(converted);   <span class=\"comment\">// 123</span></div></pre></td></tr></table></figure>\n<p>Java 8 允许通过::关键字获取方法或者构造函数的的引用。上面的例子就演示了如何引用一个静态方法。而且，我们还可以对一个对象的方法进行引用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Something</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">startsWith</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(s.charAt(<span class=\"number\">0</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Something something = <span class=\"keyword\">new</span> Something();</div><div class=\"line\">Converter&lt;String, String&gt; converter = something::startsWith;</div><div class=\"line\">String converted = converter.convert(<span class=\"string\">\"Java\"</span>);</div><div class=\"line\">System.out.println(converted);    <span class=\"comment\">// \"J\"</span></div></pre></td></tr></table></figure>\n<p>让我们看看如何使用::关键字引用构造函数。首先我们定义一个示例bean，包含不同的构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    String firstName;</div><div class=\"line\">    String lastName;</div><div class=\"line\"></div><div class=\"line\">    Person() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    Person(String firstName, String lastName) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接下来，我们定义一个person工厂接口，用来创建新的person对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PersonFactory</span>&lt;<span class=\"title\">P</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\">P <span class=\"title\">create</span><span class=\"params\">(String firstName, String lastName)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后我们通过构造函数引用来把所有东西拼到一起，而不是像以前一样，通过手动实现一个工厂来这么做。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">PersonFactory&lt;Person&gt; personFactory = Person::<span class=\"keyword\">new</span>;</div><div class=\"line\">Person person = personFactory.create(<span class=\"string\">\"Peter\"</span>, <span class=\"string\">\"Parker\"</span>);</div></pre></td></tr></table></figure>\n<p>我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。</p>\n<hr>\n<p>接下来讨论一下lambda的访问范围，对于lambda表达式外部的变量，其访问权限的粒度与匿名对象的方式非常类似。你能够访问局部对应的外部区域的局部final变量，以及成员变量和静态变量。</p>\n<p>我们可以访问lambda表达式外部的final局部变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;</div><div class=\"line\">Converter&lt;Integer, String&gt; stringConverter =</div><div class=\"line\">        (from) -&gt; String.valueOf(from + num);</div><div class=\"line\"></div><div class=\"line\">stringConverter.convert(<span class=\"number\">2</span>);     <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<p>但是与匿名对象不同的是，变量num并不需要一定是final。下面的代码依然是合法的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;</div><div class=\"line\">Converter&lt;Integer, String&gt; stringConverter =</div><div class=\"line\">        (from) -&gt; String.valueOf(from + num);</div><div class=\"line\"></div><div class=\"line\">stringConverter.convert(<span class=\"number\">2</span>);     <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<p>然而，num在编译的时候被隐式地当做final变量来处理。下面的代码就不合法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;</div><div class=\"line\">Converter&lt;Integer, String&gt; stringConverter =</div><div class=\"line\">        (from) -&gt; String.valueOf(from + num);</div><div class=\"line\">num = <span class=\"number\">3</span>;</div></pre></td></tr></table></figure>\n<p>在lambda表达式内部企图改变num的值也是不允许的。</p>\n<p>与局部变量不同，我们在lambda表达式的内部能获取到对成员变量或静态变量的读写权。这种访问行为在匿名对象里是非常典型的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lambda4</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> outerStaticNum;</div><div class=\"line\">    <span class=\"keyword\">int</span> outerNum;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testScopes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Converter&lt;Integer, String&gt; stringConverter1 = (from) -&gt; &#123;</div><div class=\"line\">            outerNum = <span class=\"number\">23</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> String.valueOf(from);</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        Converter&lt;Integer, String&gt; stringConverter2 = (from) -&gt; &#123;</div><div class=\"line\">            outerStaticNum = <span class=\"number\">72</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> String.valueOf(from);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 默认方法无法在lambda表达式内部被访问。</p>"},{"title":"Java 8 最佳技巧","date":"2017-02-18T13:24:53.000Z","_content":"> 翻译文章\n转自[一叶知秋](https://muyinchen.github.io/2016/12/13/Java%208%20%E6%9C%80%E4%BD%B3%E6%8A%80%E5%B7%A7/#more)\n\n\n<br>\n在过去的几年中，我一直使用Java 8 进行了很多的编码工作，用于开发 [新应用](http://trishagee.github.io/presentation/java8_in_anger/) 和 [迁移遗留应用](http://trishagee.github.io/presentation/refactoring_to_java_8/) ，我觉得是时候写一些有用的”最佳实践”。我个人不喜欢”最佳实践”这个术语，因为它意味着“一刀切”的解决方案，当然编码工作是不会这样的–这是因为我们开发人员会想出适合我们的方案。但我发现我对Java8特别的喜欢，它让我的生活更轻松一点，所以我想就此话题展开讨论。\n<!--more-->\nOptional\n\nOptional是一个被严重低估的功能, 它消除了很多困扰着我们的 NullPointerExceptions。它在代码边界（包括你调用和提供 API）处理上特别有用，因为它允许你和你调用的代码说明程序运行的期望结果。\n\n然而，如果没有必要的思考和设计，那么就会导致一个小变化而影响大量的类，也会导致可读性变差。这里有一些关于如何高效使用Optional的提示。\n<br>\nOptional **应该只用于返回类型**\n\n…不能是参数和属性. 阅读 [这个博客](http://blog.joda.org/2015/08/java-se-8-optional-pragmatic-approach.html) 了解怎样使用 Optional。 幸运的是, IntelliJ IDEA 在打开 [inspection](https://www.jetbrains.com/help/idea/2016.2/code-inspection.html) 功能的情况下会检查你是否遵循了这些建议。\n\n\n![](http://img.blog.csdn.net/20161214162906891)\n\n可选值应该在使用的地方进行处理.IntelliJ IDEA 的建议可以防止你不恰当的使用Optional, 所以你应该立即处理你发现的不恰当使用Optional。(根据自己的理解翻译)\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163003908)\n\n<br>\n**你不应该简单的调用** get()\nOptional的目的是为了表示此值有可能为空，且让你有能力来应付这种情况。因此，在使用值之前进行检查是非常重要的。在某些情况下简单的调用get()而没有先使用isPresent()进行检查是一样会导致空指针问题。幸运的是，IntelliJ IDEA 任然会检查出这个问题并警告你。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163211900)\n<br>\n**有可能是一个更优雅的方式**\n\nisPresent() 与  get() 结合 使用的技巧 …\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163327369)\n\n…但还有更优雅的解决方案。你可以使用 orElse方法来使得当它为null时给出一个代替的值。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163422572)\n\n…或者使用 orElseGet方法来处理上述相同情况。这个例子和上面的看起来好像一样，但本例是可以调用 supplier 接口的 实现 ,，因此如果它是一个高开销的方法，可以使用 lambda 表达式来获得更好的性能。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163525758)\n\n**使用Lambda表达式**\n\nLambda 表达式 是 Java 8 的卖点之一.。即使你还没有使用过Java 8， 到目前你也可能有一些基本的了解。但在Java编程中还是一种新的方式，它也不是明显的”最佳实践” 。 这里有一些我遵循的指南。\n\n**保持简短**\n\n函数式程序员更愿意使用较长的lambda 表达式，但我们这些仅仅使用Java很多年的程序员来说更容易保持lambda 表达式的短小。你甚至更喜欢把它们限制在一行，更容易把较长的表达式 重构 到一个方法中。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163709620)\n\n把它们变成一个方法引用， 方法引用看起来有一点陌生，但却值得这样做，因为在某些情况有助于提高可读性，后面我再谈可读性。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163740278)\n\n**明确的**\n(作者应该想要表达的是: 参数命名规范，要有意义；有更好的翻译请修正)\n\nlambda 表达式中类型信息已经丢失了，因此你会发现包含类型信息的参数会更有用。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163826731)\n\n如你所见，这样会比较麻烦。因此我更喜欢给参数一个更有意义的命名。当然，你做与否， IntelliJ IDEA 都会让你看到参数的类型信息。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163910185)\n\n即使是在函数式接口的lambda 表达式中:\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163951076)\n\n**针对 Lambda 表达式进行设计**\n\n我认为lambda表达式有点像 泛型 – 泛型,我们经常使用它们 (例如, 给 List<> 添加类型信息 )，但不常见的是我们把一个方法或类泛型化 (如:  Person<'T> )。同样的, 它就像我们使用通过lambdas包装的 Streams API，但对我们来说更罕见的是创建一个需要 lambda 表达式参数的方法。\n\n**IntelliJ IDEA 可以帮助你引入一个函数化的参数**\n\n这里让你可以使用 Lambda 表达式而非对象来 [创建一个参数](https://www.jetbrains.com/help/idea/2016.1/extract-functional-parameter.html) 。这个功能的好处在于其建议使用一个已有的 [函数接口](https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html) 来匹配这个规范。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214164320297)\n\n这个将引导我们\n\n**使用已有的函数接口**\n\n当开发者越来越熟悉 Java 8 代码时，我们会知道使用例如 Supplier 和 Consumer 这样的接口会发生什么，但是单独再创建一个 ErrorMessageCreator 会让我们很诧异并且很浪费时间。你可以翻阅 function package 来查看系统本身已经给我们准备了什么。\n\n**为函数接口添加 @FunctionalInterface 注解**\n\n如果你真的需要创建自己的函数接口，那么就需要用这个  @FunctionalInterface  注解。这个注解似乎没多大用处，但是  IntelliJ IDEA  会在接口不满足这个注解要求的情况下予以提示。例如你没有指定要继承的方法：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214164518523)\n\n指定太多的方法：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214164547695)\n\n在类中使用注解而不是在接口：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214164619204)\n\nLambda 表达式可用于任意只包含单个抽象方法的接口中，但是不能用于满足该要求的抽象类。看似不符合逻辑，但实际要求必须如此。\n\n<br>\n**Streams**\n\n[Stream](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html) API 是Java 8的另一大卖点, 我认为到现在为止，我们仍然不知道这会对我们的编码方式有多大改变．但我发现这是一个好坏参半的功能。\n\n**流式风格**\n\n就我个人而言，更喜欢使用流式风格．当然你不必也这么做, 但我发现它帮助了我：\n\n  ·一眼就能看出有哪些操作，它的执行顺序是什么\n·更方便调试（虽然IntelliJ IDEA提供了 [在包含lambda表达式的行上设置断点的能力](https://www.youtube.com/watch?v=rimzOolGguo&feature=youtu.be&t=3s) ，为了更方便调试，把它拆分到不同的行上）* 在测试的时候允许取消一个操作\n·在调试或测试是，可以很方便的插入peek()\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165029299)\n\n在我看来这样写很简洁。但是使用这种方法并没有给我们节省多少代码行。你可能需要调整代码格式化设置让代码看起来更加清晰。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165143409)\n\n<br>\n**使用方法引用**\n\n是的，你需要一点时间来适应这个奇怪的语法。但如果使用恰当，真的可以提升代码的可读性，看看下面代码：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165247861)\n\n以及使用 Objects 类的辅助方法：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165331410)\n\n后面一段代码更加的明确可读。IntelliJ IDEA 通常会知道怎么将一个 Lambda 表达式进行折叠。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165408051)\n\n**当对集合进行元素迭代时，尽可能的使用 Streams API**\n\n…或者用新的集合方法，例如 forEach . IntelliJ IDEA 会建议你这么做：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165535504)\n\n一般来说使用 Streams API 比起循环和 if 语句组合来得更加直观，例如：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165613194)\n\nIntelliJ IDEA 会建议这样的写法进行重构：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165649927)\n\n我做过的性能测试显示这种重构带来的结果比较奇怪，难以预测，有时候好，有时候坏，有时候没区别。一如既往的，如果你的应用对性能问题非常在意，请认真的进行衡量。\n\n\n**遍历数组时请用 for 循环**\n\n然后，使用 Java 8 并不意味着你一定要使用流 API 以及集合的新方法。IntelliJ IDEA 会建议一些做法改用流的方式重构，但你不一定非得接受 (记住 [inspections can be suppressed](https://www.jetbrains.com/help/idea/2016.2/suppressing-inspections.html) 或者 [turned off](https://www.jetbrains.com/help/idea/2016.2/disabling-and-enabling-inspections.html) ).\n\n特别是对一个原始类型的小数组时，使用 for 循环的性能是最好的，而且代码更具可读性（至少对 Streams API 的新手来说是这样）：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165851697)\n\n任何的技巧和提示都不是一成不变的，你应该自己决定哪里需要使用 Streams API ，而哪里还用循环操作。\n\n**最后**\n\n我每天都在发现一些新的东西，有时候我的偏好会有所变化。例如我过去会讨厌方法的引用。非常期待倾听你的建议。\n\n\n","source":"_posts/Java-8-最佳技巧.md","raw":"---\ntitle: Java 8 最佳技巧\ndate: 2017-02-18 21:24:53\ncategories: Java二三事\ntags: \n\t- Java\n---\n> 翻译文章\n转自[一叶知秋](https://muyinchen.github.io/2016/12/13/Java%208%20%E6%9C%80%E4%BD%B3%E6%8A%80%E5%B7%A7/#more)\n\n\n<br>\n在过去的几年中，我一直使用Java 8 进行了很多的编码工作，用于开发 [新应用](http://trishagee.github.io/presentation/java8_in_anger/) 和 [迁移遗留应用](http://trishagee.github.io/presentation/refactoring_to_java_8/) ，我觉得是时候写一些有用的”最佳实践”。我个人不喜欢”最佳实践”这个术语，因为它意味着“一刀切”的解决方案，当然编码工作是不会这样的–这是因为我们开发人员会想出适合我们的方案。但我发现我对Java8特别的喜欢，它让我的生活更轻松一点，所以我想就此话题展开讨论。\n<!--more-->\nOptional\n\nOptional是一个被严重低估的功能, 它消除了很多困扰着我们的 NullPointerExceptions。它在代码边界（包括你调用和提供 API）处理上特别有用，因为它允许你和你调用的代码说明程序运行的期望结果。\n\n然而，如果没有必要的思考和设计，那么就会导致一个小变化而影响大量的类，也会导致可读性变差。这里有一些关于如何高效使用Optional的提示。\n<br>\nOptional **应该只用于返回类型**\n\n…不能是参数和属性. 阅读 [这个博客](http://blog.joda.org/2015/08/java-se-8-optional-pragmatic-approach.html) 了解怎样使用 Optional。 幸运的是, IntelliJ IDEA 在打开 [inspection](https://www.jetbrains.com/help/idea/2016.2/code-inspection.html) 功能的情况下会检查你是否遵循了这些建议。\n\n\n![](http://img.blog.csdn.net/20161214162906891)\n\n可选值应该在使用的地方进行处理.IntelliJ IDEA 的建议可以防止你不恰当的使用Optional, 所以你应该立即处理你发现的不恰当使用Optional。(根据自己的理解翻译)\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163003908)\n\n<br>\n**你不应该简单的调用** get()\nOptional的目的是为了表示此值有可能为空，且让你有能力来应付这种情况。因此，在使用值之前进行检查是非常重要的。在某些情况下简单的调用get()而没有先使用isPresent()进行检查是一样会导致空指针问题。幸运的是，IntelliJ IDEA 任然会检查出这个问题并警告你。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163211900)\n<br>\n**有可能是一个更优雅的方式**\n\nisPresent() 与  get() 结合 使用的技巧 …\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163327369)\n\n…但还有更优雅的解决方案。你可以使用 orElse方法来使得当它为null时给出一个代替的值。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163422572)\n\n…或者使用 orElseGet方法来处理上述相同情况。这个例子和上面的看起来好像一样，但本例是可以调用 supplier 接口的 实现 ,，因此如果它是一个高开销的方法，可以使用 lambda 表达式来获得更好的性能。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163525758)\n\n**使用Lambda表达式**\n\nLambda 表达式 是 Java 8 的卖点之一.。即使你还没有使用过Java 8， 到目前你也可能有一些基本的了解。但在Java编程中还是一种新的方式，它也不是明显的”最佳实践” 。 这里有一些我遵循的指南。\n\n**保持简短**\n\n函数式程序员更愿意使用较长的lambda 表达式，但我们这些仅仅使用Java很多年的程序员来说更容易保持lambda 表达式的短小。你甚至更喜欢把它们限制在一行，更容易把较长的表达式 重构 到一个方法中。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163709620)\n\n把它们变成一个方法引用， 方法引用看起来有一点陌生，但却值得这样做，因为在某些情况有助于提高可读性，后面我再谈可读性。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163740278)\n\n**明确的**\n(作者应该想要表达的是: 参数命名规范，要有意义；有更好的翻译请修正)\n\nlambda 表达式中类型信息已经丢失了，因此你会发现包含类型信息的参数会更有用。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163826731)\n\n如你所见，这样会比较麻烦。因此我更喜欢给参数一个更有意义的命名。当然，你做与否， IntelliJ IDEA 都会让你看到参数的类型信息。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163910185)\n\n即使是在函数式接口的lambda 表达式中:\n\n![这里写图片描述](http://img.blog.csdn.net/20161214163951076)\n\n**针对 Lambda 表达式进行设计**\n\n我认为lambda表达式有点像 泛型 – 泛型,我们经常使用它们 (例如, 给 List<> 添加类型信息 )，但不常见的是我们把一个方法或类泛型化 (如:  Person<'T> )。同样的, 它就像我们使用通过lambdas包装的 Streams API，但对我们来说更罕见的是创建一个需要 lambda 表达式参数的方法。\n\n**IntelliJ IDEA 可以帮助你引入一个函数化的参数**\n\n这里让你可以使用 Lambda 表达式而非对象来 [创建一个参数](https://www.jetbrains.com/help/idea/2016.1/extract-functional-parameter.html) 。这个功能的好处在于其建议使用一个已有的 [函数接口](https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html) 来匹配这个规范。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214164320297)\n\n这个将引导我们\n\n**使用已有的函数接口**\n\n当开发者越来越熟悉 Java 8 代码时，我们会知道使用例如 Supplier 和 Consumer 这样的接口会发生什么，但是单独再创建一个 ErrorMessageCreator 会让我们很诧异并且很浪费时间。你可以翻阅 function package 来查看系统本身已经给我们准备了什么。\n\n**为函数接口添加 @FunctionalInterface 注解**\n\n如果你真的需要创建自己的函数接口，那么就需要用这个  @FunctionalInterface  注解。这个注解似乎没多大用处，但是  IntelliJ IDEA  会在接口不满足这个注解要求的情况下予以提示。例如你没有指定要继承的方法：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214164518523)\n\n指定太多的方法：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214164547695)\n\n在类中使用注解而不是在接口：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214164619204)\n\nLambda 表达式可用于任意只包含单个抽象方法的接口中，但是不能用于满足该要求的抽象类。看似不符合逻辑，但实际要求必须如此。\n\n<br>\n**Streams**\n\n[Stream](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html) API 是Java 8的另一大卖点, 我认为到现在为止，我们仍然不知道这会对我们的编码方式有多大改变．但我发现这是一个好坏参半的功能。\n\n**流式风格**\n\n就我个人而言，更喜欢使用流式风格．当然你不必也这么做, 但我发现它帮助了我：\n\n  ·一眼就能看出有哪些操作，它的执行顺序是什么\n·更方便调试（虽然IntelliJ IDEA提供了 [在包含lambda表达式的行上设置断点的能力](https://www.youtube.com/watch?v=rimzOolGguo&feature=youtu.be&t=3s) ，为了更方便调试，把它拆分到不同的行上）* 在测试的时候允许取消一个操作\n·在调试或测试是，可以很方便的插入peek()\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165029299)\n\n在我看来这样写很简洁。但是使用这种方法并没有给我们节省多少代码行。你可能需要调整代码格式化设置让代码看起来更加清晰。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165143409)\n\n<br>\n**使用方法引用**\n\n是的，你需要一点时间来适应这个奇怪的语法。但如果使用恰当，真的可以提升代码的可读性，看看下面代码：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165247861)\n\n以及使用 Objects 类的辅助方法：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165331410)\n\n后面一段代码更加的明确可读。IntelliJ IDEA 通常会知道怎么将一个 Lambda 表达式进行折叠。\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165408051)\n\n**当对集合进行元素迭代时，尽可能的使用 Streams API**\n\n…或者用新的集合方法，例如 forEach . IntelliJ IDEA 会建议你这么做：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165535504)\n\n一般来说使用 Streams API 比起循环和 if 语句组合来得更加直观，例如：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165613194)\n\nIntelliJ IDEA 会建议这样的写法进行重构：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165649927)\n\n我做过的性能测试显示这种重构带来的结果比较奇怪，难以预测，有时候好，有时候坏，有时候没区别。一如既往的，如果你的应用对性能问题非常在意，请认真的进行衡量。\n\n\n**遍历数组时请用 for 循环**\n\n然后，使用 Java 8 并不意味着你一定要使用流 API 以及集合的新方法。IntelliJ IDEA 会建议一些做法改用流的方式重构，但你不一定非得接受 (记住 [inspections can be suppressed](https://www.jetbrains.com/help/idea/2016.2/suppressing-inspections.html) 或者 [turned off](https://www.jetbrains.com/help/idea/2016.2/disabling-and-enabling-inspections.html) ).\n\n特别是对一个原始类型的小数组时，使用 for 循环的性能是最好的，而且代码更具可读性（至少对 Streams API 的新手来说是这样）：\n\n![这里写图片描述](http://img.blog.csdn.net/20161214165851697)\n\n任何的技巧和提示都不是一成不变的，你应该自己决定哪里需要使用 Streams API ，而哪里还用循环操作。\n\n**最后**\n\n我每天都在发现一些新的东西，有时候我的偏好会有所变化。例如我过去会讨厌方法的引用。非常期待倾听你的建议。\n\n\n","slug":"Java-8-最佳技巧","published":1,"updated":"2017-02-18T13:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kel000lrhsoli1obwz2","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><blockquote>\n<p>翻译文章<br>转自<a href=\"https://muyinchen.github.io/2016/12/13/Java%208%20%E6%9C%80%E4%BD%B3%E6%8A%80%E5%B7%A7/#more\" target=\"_blank\" rel=\"external\">一叶知秋</a></p>\n</blockquote>\n<p><br><br>在过去的几年中，我一直使用Java 8 进行了很多的编码工作，用于开发 <a href=\"http://trishagee.github.io/presentation/java8_in_anger/\" target=\"_blank\" rel=\"external\">新应用</a> 和 <a href=\"http://trishagee.github.io/presentation/refactoring_to_java_8/\" target=\"_blank\" rel=\"external\">迁移遗留应用</a> ，我觉得是时候写一些有用的”最佳实践”。我个人不喜欢”最佳实践”这个术语，因为它意味着“一刀切”的解决方案，当然编码工作是不会这样的–这是因为我们开发人员会想出适合我们的方案。但我发现我对Java8特别的喜欢，它让我的生活更轻松一点，所以我想就此话题展开讨论。<br><a id=\"more\"></a><br>Optional</p>\n<p>Optional是一个被严重低估的功能, 它消除了很多困扰着我们的 NullPointerExceptions。它在代码边界（包括你调用和提供 API）处理上特别有用，因为它允许你和你调用的代码说明程序运行的期望结果。</p>\n<p>然而，如果没有必要的思考和设计，那么就会导致一个小变化而影响大量的类，也会导致可读性变差。这里有一些关于如何高效使用Optional的提示。<br><br><br>Optional <strong>应该只用于返回类型</strong></p>\n<p>…不能是参数和属性. 阅读 <a href=\"http://blog.joda.org/2015/08/java-se-8-optional-pragmatic-approach.html\" target=\"_blank\" rel=\"external\">这个博客</a> 了解怎样使用 Optional。 幸运的是, IntelliJ IDEA 在打开 <a href=\"https://www.jetbrains.com/help/idea/2016.2/code-inspection.html\" target=\"_blank\" rel=\"external\">inspection</a> 功能的情况下会检查你是否遵循了这些建议。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214162906891\" alt=\"\"></p>\n<p>可选值应该在使用的地方进行处理.IntelliJ IDEA 的建议可以防止你不恰当的使用Optional, 所以你应该立即处理你发现的不恰当使用Optional。(根据自己的理解翻译)</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163003908\" alt=\"这里写图片描述\"></p>\n<p><br><br><strong>你不应该简单的调用</strong> get()<br>Optional的目的是为了表示此值有可能为空，且让你有能力来应付这种情况。因此，在使用值之前进行检查是非常重要的。在某些情况下简单的调用get()而没有先使用isPresent()进行检查是一样会导致空指针问题。幸运的是，IntelliJ IDEA 任然会检查出这个问题并警告你。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163211900\" alt=\"这里写图片描述\"><br><br><br><strong>有可能是一个更优雅的方式</strong></p>\n<p>isPresent() 与  get() 结合 使用的技巧 …</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163327369\" alt=\"这里写图片描述\"></p>\n<p>…但还有更优雅的解决方案。你可以使用 orElse方法来使得当它为null时给出一个代替的值。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163422572\" alt=\"这里写图片描述\"></p>\n<p>…或者使用 orElseGet方法来处理上述相同情况。这个例子和上面的看起来好像一样，但本例是可以调用 supplier 接口的 实现 ,，因此如果它是一个高开销的方法，可以使用 lambda 表达式来获得更好的性能。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163525758\" alt=\"这里写图片描述\"></p>\n<p><strong>使用Lambda表达式</strong></p>\n<p>Lambda 表达式 是 Java 8 的卖点之一.。即使你还没有使用过Java 8， 到目前你也可能有一些基本的了解。但在Java编程中还是一种新的方式，它也不是明显的”最佳实践” 。 这里有一些我遵循的指南。</p>\n<p><strong>保持简短</strong></p>\n<p>函数式程序员更愿意使用较长的lambda 表达式，但我们这些仅仅使用Java很多年的程序员来说更容易保持lambda 表达式的短小。你甚至更喜欢把它们限制在一行，更容易把较长的表达式 重构 到一个方法中。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163709620\" alt=\"这里写图片描述\"></p>\n<p>把它们变成一个方法引用， 方法引用看起来有一点陌生，但却值得这样做，因为在某些情况有助于提高可读性，后面我再谈可读性。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163740278\" alt=\"这里写图片描述\"></p>\n<p><strong>明确的</strong><br>(作者应该想要表达的是: 参数命名规范，要有意义；有更好的翻译请修正)</p>\n<p>lambda 表达式中类型信息已经丢失了，因此你会发现包含类型信息的参数会更有用。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163826731\" alt=\"这里写图片描述\"></p>\n<p>如你所见，这样会比较麻烦。因此我更喜欢给参数一个更有意义的命名。当然，你做与否， IntelliJ IDEA 都会让你看到参数的类型信息。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163910185\" alt=\"这里写图片描述\"></p>\n<p>即使是在函数式接口的lambda 表达式中:</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163951076\" alt=\"这里写图片描述\"></p>\n<p><strong>针对 Lambda 表达式进行设计</strong></p>\n<p>我认为lambda表达式有点像 泛型 – 泛型,我们经常使用它们 (例如, 给 List&lt;&gt; 添加类型信息 )，但不常见的是我们把一个方法或类泛型化 (如:  Person&lt;’T&gt; )。同样的, 它就像我们使用通过lambdas包装的 Streams API，但对我们来说更罕见的是创建一个需要 lambda 表达式参数的方法。</p>\n<p><strong>IntelliJ IDEA 可以帮助你引入一个函数化的参数</strong></p>\n<p>这里让你可以使用 Lambda 表达式而非对象来 <a href=\"https://www.jetbrains.com/help/idea/2016.1/extract-functional-parameter.html\" target=\"_blank\" rel=\"external\">创建一个参数</a> 。这个功能的好处在于其建议使用一个已有的 <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html\" target=\"_blank\" rel=\"external\">函数接口</a> 来匹配这个规范。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214164320297\" alt=\"这里写图片描述\"></p>\n<p>这个将引导我们</p>\n<p><strong>使用已有的函数接口</strong></p>\n<p>当开发者越来越熟悉 Java 8 代码时，我们会知道使用例如 Supplier 和 Consumer 这样的接口会发生什么，但是单独再创建一个 ErrorMessageCreator 会让我们很诧异并且很浪费时间。你可以翻阅 function package 来查看系统本身已经给我们准备了什么。</p>\n<p><strong>为函数接口添加 @FunctionalInterface 注解</strong></p>\n<p>如果你真的需要创建自己的函数接口，那么就需要用这个  @FunctionalInterface  注解。这个注解似乎没多大用处，但是  IntelliJ IDEA  会在接口不满足这个注解要求的情况下予以提示。例如你没有指定要继承的方法：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214164518523\" alt=\"这里写图片描述\"></p>\n<p>指定太多的方法：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214164547695\" alt=\"这里写图片描述\"></p>\n<p>在类中使用注解而不是在接口：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214164619204\" alt=\"这里写图片描述\"></p>\n<p>Lambda 表达式可用于任意只包含单个抽象方法的接口中，但是不能用于满足该要求的抽象类。看似不符合逻辑，但实际要求必须如此。</p>\n<p><br><br><strong>Streams</strong></p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html\" target=\"_blank\" rel=\"external\">Stream</a> API 是Java 8的另一大卖点, 我认为到现在为止，我们仍然不知道这会对我们的编码方式有多大改变．但我发现这是一个好坏参半的功能。</p>\n<p><strong>流式风格</strong></p>\n<p>就我个人而言，更喜欢使用流式风格．当然你不必也这么做, 但我发现它帮助了我：</p>\n<p>  ·一眼就能看出有哪些操作，它的执行顺序是什么<br>·更方便调试（虽然IntelliJ IDEA提供了 <a href=\"https://www.youtube.com/watch?v=rimzOolGguo&amp;feature=youtu.be&amp;t=3s\" target=\"_blank\" rel=\"external\">在包含lambda表达式的行上设置断点的能力</a> ，为了更方便调试，把它拆分到不同的行上）* 在测试的时候允许取消一个操作<br>·在调试或测试是，可以很方便的插入peek()</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165029299\" alt=\"这里写图片描述\"></p>\n<p>在我看来这样写很简洁。但是使用这种方法并没有给我们节省多少代码行。你可能需要调整代码格式化设置让代码看起来更加清晰。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165143409\" alt=\"这里写图片描述\"></p>\n<p><br><br><strong>使用方法引用</strong></p>\n<p>是的，你需要一点时间来适应这个奇怪的语法。但如果使用恰当，真的可以提升代码的可读性，看看下面代码：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165247861\" alt=\"这里写图片描述\"></p>\n<p>以及使用 Objects 类的辅助方法：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165331410\" alt=\"这里写图片描述\"></p>\n<p>后面一段代码更加的明确可读。IntelliJ IDEA 通常会知道怎么将一个 Lambda 表达式进行折叠。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165408051\" alt=\"这里写图片描述\"></p>\n<p><strong>当对集合进行元素迭代时，尽可能的使用 Streams API</strong></p>\n<p>…或者用新的集合方法，例如 forEach . IntelliJ IDEA 会建议你这么做：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165535504\" alt=\"这里写图片描述\"></p>\n<p>一般来说使用 Streams API 比起循环和 if 语句组合来得更加直观，例如：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165613194\" alt=\"这里写图片描述\"></p>\n<p>IntelliJ IDEA 会建议这样的写法进行重构：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165649927\" alt=\"这里写图片描述\"></p>\n<p>我做过的性能测试显示这种重构带来的结果比较奇怪，难以预测，有时候好，有时候坏，有时候没区别。一如既往的，如果你的应用对性能问题非常在意，请认真的进行衡量。</p>\n<p><strong>遍历数组时请用 for 循环</strong></p>\n<p>然后，使用 Java 8 并不意味着你一定要使用流 API 以及集合的新方法。IntelliJ IDEA 会建议一些做法改用流的方式重构，但你不一定非得接受 (记住 <a href=\"https://www.jetbrains.com/help/idea/2016.2/suppressing-inspections.html\" target=\"_blank\" rel=\"external\">inspections can be suppressed</a> 或者 <a href=\"https://www.jetbrains.com/help/idea/2016.2/disabling-and-enabling-inspections.html\" target=\"_blank\" rel=\"external\">turned off</a> ).</p>\n<p>特别是对一个原始类型的小数组时，使用 for 循环的性能是最好的，而且代码更具可读性（至少对 Streams API 的新手来说是这样）：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165851697\" alt=\"这里写图片描述\"></p>\n<p>任何的技巧和提示都不是一成不变的，你应该自己决定哪里需要使用 Streams API ，而哪里还用循环操作。</p>\n<p><strong>最后</strong></p>\n<p>我每天都在发现一些新的东西，有时候我的偏好会有所变化。例如我过去会讨厌方法的引用。非常期待倾听你的建议。</p>\n","excerpt":"<blockquote>\n<p>翻译文章<br>转自<a href=\"https://muyinchen.github.io/2016/12/13/Java%208%20%E6%9C%80%E4%BD%B3%E6%8A%80%E5%B7%A7/#more\">一叶知秋</a></p>\n</blockquote>\n<p><br><br>在过去的几年中，我一直使用Java 8 进行了很多的编码工作，用于开发 <a href=\"http://trishagee.github.io/presentation/java8_in_anger/\">新应用</a> 和 <a href=\"http://trishagee.github.io/presentation/refactoring_to_java_8/\">迁移遗留应用</a> ，我觉得是时候写一些有用的”最佳实践”。我个人不喜欢”最佳实践”这个术语，因为它意味着“一刀切”的解决方案，当然编码工作是不会这样的–这是因为我们开发人员会想出适合我们的方案。但我发现我对Java8特别的喜欢，它让我的生活更轻松一点，所以我想就此话题展开讨论。<br></p>","more":"<br>Optional<p></p>\n<p>Optional是一个被严重低估的功能, 它消除了很多困扰着我们的 NullPointerExceptions。它在代码边界（包括你调用和提供 API）处理上特别有用，因为它允许你和你调用的代码说明程序运行的期望结果。</p>\n<p>然而，如果没有必要的思考和设计，那么就会导致一个小变化而影响大量的类，也会导致可读性变差。这里有一些关于如何高效使用Optional的提示。<br><br><br>Optional <strong>应该只用于返回类型</strong></p>\n<p>…不能是参数和属性. 阅读 <a href=\"http://blog.joda.org/2015/08/java-se-8-optional-pragmatic-approach.html\">这个博客</a> 了解怎样使用 Optional。 幸运的是, IntelliJ IDEA 在打开 <a href=\"https://www.jetbrains.com/help/idea/2016.2/code-inspection.html\">inspection</a> 功能的情况下会检查你是否遵循了这些建议。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214162906891\" alt=\"\"></p>\n<p>可选值应该在使用的地方进行处理.IntelliJ IDEA 的建议可以防止你不恰当的使用Optional, 所以你应该立即处理你发现的不恰当使用Optional。(根据自己的理解翻译)</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163003908\" alt=\"这里写图片描述\"></p>\n<p><br><br><strong>你不应该简单的调用</strong> get()<br>Optional的目的是为了表示此值有可能为空，且让你有能力来应付这种情况。因此，在使用值之前进行检查是非常重要的。在某些情况下简单的调用get()而没有先使用isPresent()进行检查是一样会导致空指针问题。幸运的是，IntelliJ IDEA 任然会检查出这个问题并警告你。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163211900\" alt=\"这里写图片描述\"><br><br><br><strong>有可能是一个更优雅的方式</strong></p>\n<p>isPresent() 与  get() 结合 使用的技巧 …</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163327369\" alt=\"这里写图片描述\"></p>\n<p>…但还有更优雅的解决方案。你可以使用 orElse方法来使得当它为null时给出一个代替的值。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163422572\" alt=\"这里写图片描述\"></p>\n<p>…或者使用 orElseGet方法来处理上述相同情况。这个例子和上面的看起来好像一样，但本例是可以调用 supplier 接口的 实现 ,，因此如果它是一个高开销的方法，可以使用 lambda 表达式来获得更好的性能。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163525758\" alt=\"这里写图片描述\"></p>\n<p><strong>使用Lambda表达式</strong></p>\n<p>Lambda 表达式 是 Java 8 的卖点之一.。即使你还没有使用过Java 8， 到目前你也可能有一些基本的了解。但在Java编程中还是一种新的方式，它也不是明显的”最佳实践” 。 这里有一些我遵循的指南。</p>\n<p><strong>保持简短</strong></p>\n<p>函数式程序员更愿意使用较长的lambda 表达式，但我们这些仅仅使用Java很多年的程序员来说更容易保持lambda 表达式的短小。你甚至更喜欢把它们限制在一行，更容易把较长的表达式 重构 到一个方法中。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163709620\" alt=\"这里写图片描述\"></p>\n<p>把它们变成一个方法引用， 方法引用看起来有一点陌生，但却值得这样做，因为在某些情况有助于提高可读性，后面我再谈可读性。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163740278\" alt=\"这里写图片描述\"></p>\n<p><strong>明确的</strong><br>(作者应该想要表达的是: 参数命名规范，要有意义；有更好的翻译请修正)</p>\n<p>lambda 表达式中类型信息已经丢失了，因此你会发现包含类型信息的参数会更有用。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163826731\" alt=\"这里写图片描述\"></p>\n<p>如你所见，这样会比较麻烦。因此我更喜欢给参数一个更有意义的命名。当然，你做与否， IntelliJ IDEA 都会让你看到参数的类型信息。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163910185\" alt=\"这里写图片描述\"></p>\n<p>即使是在函数式接口的lambda 表达式中:</p>\n<p><img src=\"http://img.blog.csdn.net/20161214163951076\" alt=\"这里写图片描述\"></p>\n<p><strong>针对 Lambda 表达式进行设计</strong></p>\n<p>我认为lambda表达式有点像 泛型 – 泛型,我们经常使用它们 (例如, 给 List&lt;&gt; 添加类型信息 )，但不常见的是我们把一个方法或类泛型化 (如:  Person&lt;’T&gt; )。同样的, 它就像我们使用通过lambdas包装的 Streams API，但对我们来说更罕见的是创建一个需要 lambda 表达式参数的方法。</p>\n<p><strong>IntelliJ IDEA 可以帮助你引入一个函数化的参数</strong></p>\n<p>这里让你可以使用 Lambda 表达式而非对象来 <a href=\"https://www.jetbrains.com/help/idea/2016.1/extract-functional-parameter.html\">创建一个参数</a> 。这个功能的好处在于其建议使用一个已有的 <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html\">函数接口</a> 来匹配这个规范。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214164320297\" alt=\"这里写图片描述\"></p>\n<p>这个将引导我们</p>\n<p><strong>使用已有的函数接口</strong></p>\n<p>当开发者越来越熟悉 Java 8 代码时，我们会知道使用例如 Supplier 和 Consumer 这样的接口会发生什么，但是单独再创建一个 ErrorMessageCreator 会让我们很诧异并且很浪费时间。你可以翻阅 function package 来查看系统本身已经给我们准备了什么。</p>\n<p><strong>为函数接口添加 @FunctionalInterface 注解</strong></p>\n<p>如果你真的需要创建自己的函数接口，那么就需要用这个  @FunctionalInterface  注解。这个注解似乎没多大用处，但是  IntelliJ IDEA  会在接口不满足这个注解要求的情况下予以提示。例如你没有指定要继承的方法：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214164518523\" alt=\"这里写图片描述\"></p>\n<p>指定太多的方法：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214164547695\" alt=\"这里写图片描述\"></p>\n<p>在类中使用注解而不是在接口：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214164619204\" alt=\"这里写图片描述\"></p>\n<p>Lambda 表达式可用于任意只包含单个抽象方法的接口中，但是不能用于满足该要求的抽象类。看似不符合逻辑，但实际要求必须如此。</p>\n<p><br><br><strong>Streams</strong></p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html\">Stream</a> API 是Java 8的另一大卖点, 我认为到现在为止，我们仍然不知道这会对我们的编码方式有多大改变．但我发现这是一个好坏参半的功能。</p>\n<p><strong>流式风格</strong></p>\n<p>就我个人而言，更喜欢使用流式风格．当然你不必也这么做, 但我发现它帮助了我：</p>\n<p>  ·一眼就能看出有哪些操作，它的执行顺序是什么<br>·更方便调试（虽然IntelliJ IDEA提供了 <a href=\"https://www.youtube.com/watch?v=rimzOolGguo&amp;feature=youtu.be&amp;t=3s\">在包含lambda表达式的行上设置断点的能力</a> ，为了更方便调试，把它拆分到不同的行上）* 在测试的时候允许取消一个操作<br>·在调试或测试是，可以很方便的插入peek()</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165029299\" alt=\"这里写图片描述\"></p>\n<p>在我看来这样写很简洁。但是使用这种方法并没有给我们节省多少代码行。你可能需要调整代码格式化设置让代码看起来更加清晰。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165143409\" alt=\"这里写图片描述\"></p>\n<p><br><br><strong>使用方法引用</strong></p>\n<p>是的，你需要一点时间来适应这个奇怪的语法。但如果使用恰当，真的可以提升代码的可读性，看看下面代码：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165247861\" alt=\"这里写图片描述\"></p>\n<p>以及使用 Objects 类的辅助方法：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165331410\" alt=\"这里写图片描述\"></p>\n<p>后面一段代码更加的明确可读。IntelliJ IDEA 通常会知道怎么将一个 Lambda 表达式进行折叠。</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165408051\" alt=\"这里写图片描述\"></p>\n<p><strong>当对集合进行元素迭代时，尽可能的使用 Streams API</strong></p>\n<p>…或者用新的集合方法，例如 forEach . IntelliJ IDEA 会建议你这么做：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165535504\" alt=\"这里写图片描述\"></p>\n<p>一般来说使用 Streams API 比起循环和 if 语句组合来得更加直观，例如：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165613194\" alt=\"这里写图片描述\"></p>\n<p>IntelliJ IDEA 会建议这样的写法进行重构：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165649927\" alt=\"这里写图片描述\"></p>\n<p>我做过的性能测试显示这种重构带来的结果比较奇怪，难以预测，有时候好，有时候坏，有时候没区别。一如既往的，如果你的应用对性能问题非常在意，请认真的进行衡量。</p>\n<p><strong>遍历数组时请用 for 循环</strong></p>\n<p>然后，使用 Java 8 并不意味着你一定要使用流 API 以及集合的新方法。IntelliJ IDEA 会建议一些做法改用流的方式重构，但你不一定非得接受 (记住 <a href=\"https://www.jetbrains.com/help/idea/2016.2/suppressing-inspections.html\">inspections can be suppressed</a> 或者 <a href=\"https://www.jetbrains.com/help/idea/2016.2/disabling-and-enabling-inspections.html\">turned off</a> ).</p>\n<p>特别是对一个原始类型的小数组时，使用 for 循环的性能是最好的，而且代码更具可读性（至少对 Streams API 的新手来说是这样）：</p>\n<p><img src=\"http://img.blog.csdn.net/20161214165851697\" alt=\"这里写图片描述\"></p>\n<p>任何的技巧和提示都不是一成不变的，你应该自己决定哪里需要使用 Streams API ，而哪里还用循环操作。</p>\n<p><strong>最后</strong></p>\n<p>我每天都在发现一些新的东西，有时候我的偏好会有所变化。例如我过去会讨厌方法的引用。非常期待倾听你的建议。</p>"},{"title":"Java使用websocket和WebRTC实现视频通话","date":"2017-03-11T04:06:23.000Z","_content":"最近这段时间折腾了一下WebRTC，这两天终于是抽了时间把WebRTC搞定了，去年就想弄的，但是确实没时间。看了网上的https://apprtc.appspot.com/的例子（可能需要翻墙访问），这个例子是部署在Google App Engine上的应用程序，依赖与GAE的环境，后台的语言是python，而且还依赖Google App Engine Channel API，所以无法在本地运行，也无法扩展。费了一番功夫研读了例子的python端的源代码，决定用Java实现，Tomcat7之后开始支持WebSocket，打算用WebSocket代替Google App Engine Channel API实现前后台的通讯，在整个例子中Java+WebSocket起到的作用是负责客户端之间的通信，并不负责视频的传输，视频的传输依赖于WebRTC。 \n<!--more-->\n\n首先WebRTC,这个可以百度一下，大概就是一个音频和视频通讯技术，可以跨平台，只要能用浏览器的基本都可以使用，当然要你的浏览器支持。\n  \n这里引用了google的js库：<code>channel.js</code>。不过还是下载下来放到本地服务器吧，因为很多地方访问google.com很吃力啊。最开始就是这个js没有加载完郁闷了很久，还一直以为是代码写错了。\n\n另外在进入页面的时候，注意初始化页面js中的一个参数：<code>initiator</code>：如果是创建人这个参数设为false；如果是加入的时候这个设置为true。为true的时候，才会发起视频通话的请求。\n\n**<h2>实现</h2>**\n\n对于前端JS代码及用到的对象大家可以去查看详细的代码介绍，我就贴一个连接的方法。首先建立一个客户端实时获取状态的连接，在GAE的例子上是通过GAE Channel API实现，我在这里用WebSocket实现，代码：\n\n```\nfunction openChannel() {  \n     console.log(\"打开websocket\");\n     socket = new WebSocket(\"ws://192.168.1.158:8080/WebRTC/acgist.video/${requestScope.uid}\");\t\t\t\t\n\t socket.onopen = onChannelOpened;\n\t socket.onmessage = onChannelMessage;\n\t socket.onclose = onChannelClosed;  \n\t socket.onerror = onChannelError();\n    }  \n```\n\n服务端代码很简单，就是收到用户的请求，发送给另外一个用户就可以了，这里处理的其实是用户WebRTC的一些信息，并不是去传输视频，如下：\n\n```\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n \nimport javax.websocket.OnClose;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\n\n/**\n * @author 李智\n * @date 2017/3/11\n *\n * WebRTC视频通话\n */\n \n@ServerEndpoint(\"/acgist.video/{uid}\")\npublic class AcgistVideo {\n    // 最大通话数量\n    private static final int MAX_COUNT = 10;\n    private static final long MAX_TIME_OUT = 1 * 60 * 1000;\n    // 用户和用户的对话映射\n    private static final Map<String, String> user_user = Collections.synchronizedMap(new HashMap<String, String>()); \n    // 用户和websocket的session映射\n    private static final Map<String, Session> sessions = Collections.synchronizedMap(new HashMap<String, Session>());\n     \n    /**\n     * 打开websocket\n     * @param session websocket的session\n     * @param uid 打开用户的UID\n     */\n    @OnOpen\n    public void onOpen(Session session, @PathParam(\"uid\")String uid) {\n        session.setMaxIdleTimeout(MAX_TIME_OUT);\n        sessions.put(uid, session);\n    }\n \n    /**\n     * websocket关闭\n     * @param session 关闭的session\n     * @param uid 关闭的用户标识\n     */\n    @OnClose\n    public void onClose(Session session, @PathParam(\"uid\")String uid) {\n        remove(session, uid);\n    }\n \n    /**\n     * 收到消息\n     * @param message 消息内容\n     * @param session 发送消息的session\n     * @param uid\n     */\n    @OnMessage\n    public void onMessage(String message, Session session, @PathParam(\"uid\")String uid) {\n        try {\n            if(uid != null && user_user.get(uid) != null && AcgistVideo.sessions.get(user_user.get(uid)) != null) {\n                Session osession = sessions.get(user_user.get(uid)); // 被呼叫的session\n                if(osession.isOpen())\n                    osession.getAsyncRemote().sendText(new String(message.getBytes(\"utf-8\")));\n                else\n                    this.nowaiting(osession);\n            } else {\n                this.nowaiting(session);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n     \n    /**\n     * 没有人在等待\n     * @param session 发送消息的session\n     */\n    private void nowaiting(Session session) {\n        session.getAsyncRemote().sendText(\"{\\\"type\\\" : \\\"nowaiting\\\"}\");\n    }\n     \n    /**\n     * 是否可以继续创建通话房间\n     * @return 可以：true；不可以false；\n     */\n    public static boolean canCreate() {\n        return sessions.size() <= MAX_COUNT;\n    }\n     \n    /**\n     * 判断是否可以加入\n     * @param oid 被申请对话的ID\n     * @return 如果能加入返回：true；否则返回false；\n     */\n    public static boolean canJoin(String oid) {\n        return !(oid != null && user_user.containsKey(oid) && user_user.get(oid) != null);\n    }\n     \n    /**\n     * 添加视频对象\n     * @param uid 申请对话的ID\n     * @param oid 被申请对话的ID\n     * @return 是否是创建者：如果没有申请对话ID为创建者，否则为为加入者。创建者返回：true；加入者返回：false；\n     */\n    public static boolean addUser(String uid, String oid) {\n        if(oid != null && !oid.isEmpty()) {\n            AcgistVideo.user_user.put(uid, oid);\n            AcgistVideo.user_user.put(oid, uid);\n             \n            return false;\n        } else {\n            AcgistVideo.user_user.put(uid, null);\n             \n            return true;\n        }\n    }\n     \n    /**\n     * 移除聊天用户\n     * @param session 移除的session\n     * @param uid 移除的UID\n     */\n    private static void remove(Session session, String uid) {\n        String oid = user_user.get(uid);\n         \n        if(oid != null) user_user.put(oid, null); // 设置对方无人聊天\n         \n        sessions.remove(uid); // 异常session\n        user_user.remove(uid); // 移除自己\n         \n        try {\n            if(session != null && session.isOpen()) session.close(); // 关闭session\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n \n}\n```\n\n自己测试的时候搞个公用的stun服务器弄一弄就好了。不过人多的时候会延迟很就是了，成功截图就不放了，人丑家贫。","source":"_posts/Java使用websocket和WebRTC实现视频通话.md","raw":"---\ntitle: Java使用websocket和WebRTC实现视频通话\ndate: 2017-03-11 12:06:23\ncategories: Java二三事\ntags:\n\t- WebSocket\n\t- WebRTC\n---\n最近这段时间折腾了一下WebRTC，这两天终于是抽了时间把WebRTC搞定了，去年就想弄的，但是确实没时间。看了网上的https://apprtc.appspot.com/的例子（可能需要翻墙访问），这个例子是部署在Google App Engine上的应用程序，依赖与GAE的环境，后台的语言是python，而且还依赖Google App Engine Channel API，所以无法在本地运行，也无法扩展。费了一番功夫研读了例子的python端的源代码，决定用Java实现，Tomcat7之后开始支持WebSocket，打算用WebSocket代替Google App Engine Channel API实现前后台的通讯，在整个例子中Java+WebSocket起到的作用是负责客户端之间的通信，并不负责视频的传输，视频的传输依赖于WebRTC。 \n<!--more-->\n\n首先WebRTC,这个可以百度一下，大概就是一个音频和视频通讯技术，可以跨平台，只要能用浏览器的基本都可以使用，当然要你的浏览器支持。\n  \n这里引用了google的js库：<code>channel.js</code>。不过还是下载下来放到本地服务器吧，因为很多地方访问google.com很吃力啊。最开始就是这个js没有加载完郁闷了很久，还一直以为是代码写错了。\n\n另外在进入页面的时候，注意初始化页面js中的一个参数：<code>initiator</code>：如果是创建人这个参数设为false；如果是加入的时候这个设置为true。为true的时候，才会发起视频通话的请求。\n\n**<h2>实现</h2>**\n\n对于前端JS代码及用到的对象大家可以去查看详细的代码介绍，我就贴一个连接的方法。首先建立一个客户端实时获取状态的连接，在GAE的例子上是通过GAE Channel API实现，我在这里用WebSocket实现，代码：\n\n```\nfunction openChannel() {  \n     console.log(\"打开websocket\");\n     socket = new WebSocket(\"ws://192.168.1.158:8080/WebRTC/acgist.video/${requestScope.uid}\");\t\t\t\t\n\t socket.onopen = onChannelOpened;\n\t socket.onmessage = onChannelMessage;\n\t socket.onclose = onChannelClosed;  \n\t socket.onerror = onChannelError();\n    }  \n```\n\n服务端代码很简单，就是收到用户的请求，发送给另外一个用户就可以了，这里处理的其实是用户WebRTC的一些信息，并不是去传输视频，如下：\n\n```\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n \nimport javax.websocket.OnClose;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\n\n/**\n * @author 李智\n * @date 2017/3/11\n *\n * WebRTC视频通话\n */\n \n@ServerEndpoint(\"/acgist.video/{uid}\")\npublic class AcgistVideo {\n    // 最大通话数量\n    private static final int MAX_COUNT = 10;\n    private static final long MAX_TIME_OUT = 1 * 60 * 1000;\n    // 用户和用户的对话映射\n    private static final Map<String, String> user_user = Collections.synchronizedMap(new HashMap<String, String>()); \n    // 用户和websocket的session映射\n    private static final Map<String, Session> sessions = Collections.synchronizedMap(new HashMap<String, Session>());\n     \n    /**\n     * 打开websocket\n     * @param session websocket的session\n     * @param uid 打开用户的UID\n     */\n    @OnOpen\n    public void onOpen(Session session, @PathParam(\"uid\")String uid) {\n        session.setMaxIdleTimeout(MAX_TIME_OUT);\n        sessions.put(uid, session);\n    }\n \n    /**\n     * websocket关闭\n     * @param session 关闭的session\n     * @param uid 关闭的用户标识\n     */\n    @OnClose\n    public void onClose(Session session, @PathParam(\"uid\")String uid) {\n        remove(session, uid);\n    }\n \n    /**\n     * 收到消息\n     * @param message 消息内容\n     * @param session 发送消息的session\n     * @param uid\n     */\n    @OnMessage\n    public void onMessage(String message, Session session, @PathParam(\"uid\")String uid) {\n        try {\n            if(uid != null && user_user.get(uid) != null && AcgistVideo.sessions.get(user_user.get(uid)) != null) {\n                Session osession = sessions.get(user_user.get(uid)); // 被呼叫的session\n                if(osession.isOpen())\n                    osession.getAsyncRemote().sendText(new String(message.getBytes(\"utf-8\")));\n                else\n                    this.nowaiting(osession);\n            } else {\n                this.nowaiting(session);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n     \n    /**\n     * 没有人在等待\n     * @param session 发送消息的session\n     */\n    private void nowaiting(Session session) {\n        session.getAsyncRemote().sendText(\"{\\\"type\\\" : \\\"nowaiting\\\"}\");\n    }\n     \n    /**\n     * 是否可以继续创建通话房间\n     * @return 可以：true；不可以false；\n     */\n    public static boolean canCreate() {\n        return sessions.size() <= MAX_COUNT;\n    }\n     \n    /**\n     * 判断是否可以加入\n     * @param oid 被申请对话的ID\n     * @return 如果能加入返回：true；否则返回false；\n     */\n    public static boolean canJoin(String oid) {\n        return !(oid != null && user_user.containsKey(oid) && user_user.get(oid) != null);\n    }\n     \n    /**\n     * 添加视频对象\n     * @param uid 申请对话的ID\n     * @param oid 被申请对话的ID\n     * @return 是否是创建者：如果没有申请对话ID为创建者，否则为为加入者。创建者返回：true；加入者返回：false；\n     */\n    public static boolean addUser(String uid, String oid) {\n        if(oid != null && !oid.isEmpty()) {\n            AcgistVideo.user_user.put(uid, oid);\n            AcgistVideo.user_user.put(oid, uid);\n             \n            return false;\n        } else {\n            AcgistVideo.user_user.put(uid, null);\n             \n            return true;\n        }\n    }\n     \n    /**\n     * 移除聊天用户\n     * @param session 移除的session\n     * @param uid 移除的UID\n     */\n    private static void remove(Session session, String uid) {\n        String oid = user_user.get(uid);\n         \n        if(oid != null) user_user.put(oid, null); // 设置对方无人聊天\n         \n        sessions.remove(uid); // 异常session\n        user_user.remove(uid); // 移除自己\n         \n        try {\n            if(session != null && session.isOpen()) session.close(); // 关闭session\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n \n}\n```\n\n自己测试的时候搞个公用的stun服务器弄一弄就好了。不过人多的时候会延迟很就是了，成功截图就不放了，人丑家贫。","slug":"Java使用websocket和WebRTC实现视频通话","published":1,"updated":"2017-03-11T04:12:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kem000qrhsoiu2x9xot","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>最近这段时间折腾了一下WebRTC，这两天终于是抽了时间把WebRTC搞定了，去年就想弄的，但是确实没时间。看了网上的<a href=\"https://apprtc.appspot.com/的例子（可能需要翻墙访问），这个例子是部署在Google\" target=\"_blank\" rel=\"external\">https://apprtc.appspot.com/的例子（可能需要翻墙访问），这个例子是部署在Google</a> App Engine上的应用程序，依赖与GAE的环境，后台的语言是python，而且还依赖Google App Engine Channel API，所以无法在本地运行，也无法扩展。费了一番功夫研读了例子的python端的源代码，决定用Java实现，Tomcat7之后开始支持WebSocket，打算用WebSocket代替Google App Engine Channel API实现前后台的通讯，在整个例子中Java+WebSocket起到的作用是负责客户端之间的通信，并不负责视频的传输，视频的传输依赖于WebRTC。<br><a id=\"more\"></a></p>\n<p>首先WebRTC,这个可以百度一下，大概就是一个音频和视频通讯技术，可以跨平台，只要能用浏览器的基本都可以使用，当然要你的浏览器支持。</p>\n<p>这里引用了google的js库：<code>channel.js</code>。不过还是下载下来放到本地服务器吧，因为很多地方访问google.com很吃力啊。最开始就是这个js没有加载完郁闷了很久，还一直以为是代码写错了。</p>\n<p>另外在进入页面的时候，注意初始化页面js中的一个参数：<code>initiator</code>：如果是创建人这个参数设为false；如果是加入的时候这个设置为true。为true的时候，才会发起视频通话的请求。</p>\n<p><strong><h2>实现</h2></strong></p>\n<p>对于前端JS代码及用到的对象大家可以去查看详细的代码介绍，我就贴一个连接的方法。首先建立一个客户端实时获取状态的连接，在GAE的例子上是通过GAE Channel API实现，我在这里用WebSocket实现，代码：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function openChannel() &#123;  </div><div class=\"line\">     console.log(<span class=\"string\">\"打开websocket\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">     socket = new WebSocket(<span class=\"string\">\"ws://192.168.1.158:8080/WebRTC/acgist.video/$&#123;requestScope.uid&#125;\"</span>)<span class=\"comment\">;\t\t\t\t</span></div><div class=\"line\">\t socket.onopen = onChannelOpened<span class=\"comment\">;</span></div><div class=\"line\">\t socket.onmessage = onChannelMessage<span class=\"comment\">;</span></div><div class=\"line\">\t socket.onclose = onChannelClosed<span class=\"comment\">;  </span></div><div class=\"line\">\t socket.onerror = onChannelError()<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>服务端代码很简单，就是收到用户的请求，发送给另外一个用户就可以了，这里处理的其实是用户WebRTC的一些信息，并不是去传输视频，如下：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"keyword\">HashMap</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnClose;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnMessage;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnOpen;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.websocket.Session;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpoint;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2017/3/11</div><div class=\"line\"> *</div><div class=\"line\"> * WebRTC视频通话</div><div class=\"line\"> */</div><div class=\"line\"> </div><div class=\"line\">@ServerEndpoint(<span class=\"string\">\"/acgist.video/&#123;uid&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> class AcgistVideo &#123;</div><div class=\"line\">    <span class=\"comment\">// 最大通话数量</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> MAX_COUNT = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MAX_TIME_OUT = <span class=\"number\">1</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</div><div class=\"line\">    <span class=\"comment\">// 用户和用户的对话映射</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; user_user = Collections.synchronizedMap(<span class=\"keyword\">new</span> <span class=\"keyword\">HashMap</span>&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt;()); </div><div class=\"line\">    <span class=\"comment\">// 用户和websocket的session映射</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;<span class=\"keyword\">String</span>, Session&gt; sessions = Collections.synchronizedMap(<span class=\"keyword\">new</span> <span class=\"keyword\">HashMap</span>&lt;<span class=\"keyword\">String</span>, Session&gt;());</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 打开websocket</div><div class=\"line\">     * @param session websocket的session</div><div class=\"line\">     * @param uid 打开用户的UID</div><div class=\"line\">     */</div><div class=\"line\">    @OnOpen</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onOpen(Session session, @PathParam(<span class=\"string\">\"uid\"</span>)<span class=\"keyword\">String</span> uid) &#123;</div><div class=\"line\">        session.setMaxIdleTimeout(MAX_TIME_OUT);</div><div class=\"line\">        sessions.put(uid, session);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * websocket关闭</div><div class=\"line\">     * @param session 关闭的session</div><div class=\"line\">     * @param uid 关闭的用户标识</div><div class=\"line\">     */</div><div class=\"line\">    @OnClose</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onClose(Session session, @PathParam(<span class=\"string\">\"uid\"</span>)<span class=\"keyword\">String</span> uid) &#123;</div><div class=\"line\">        remove(session, uid);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 收到消息</div><div class=\"line\">     * @param message 消息内容</div><div class=\"line\">     * @param session 发送消息的session</div><div class=\"line\">     * @param uid</div><div class=\"line\">     */</div><div class=\"line\">    @OnMessage</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onMessage(<span class=\"keyword\">String</span> message, Session session, @PathParam(<span class=\"string\">\"uid\"</span>)<span class=\"keyword\">String</span> uid) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(uid != <span class=\"keyword\">null</span> &amp;&amp; user_user.<span class=\"built_in\">get</span>(uid) != <span class=\"keyword\">null</span> &amp;&amp; AcgistVideo.sessions.<span class=\"built_in\">get</span>(user_user.<span class=\"built_in\">get</span>(uid)) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                Session osession = sessions.<span class=\"built_in\">get</span>(user_user.<span class=\"built_in\">get</span>(uid)); <span class=\"comment\">// 被呼叫的session</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(osession.isOpen())</div><div class=\"line\">                    osession.getAsyncRemote().sendText(<span class=\"keyword\">new</span> <span class=\"keyword\">String</span>(message.getBytes(<span class=\"string\">\"utf-8\"</span>)));</div><div class=\"line\">                <span class=\"keyword\">else</span></div><div class=\"line\">                    <span class=\"keyword\">this</span>.nowaiting(osession);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.nowaiting(session);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 没有人在等待</div><div class=\"line\">     * @param session 发送消息的session</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> nowaiting(Session session) &#123;</div><div class=\"line\">        session.getAsyncRemote().sendText(<span class=\"string\">\"&#123;\\\"type\\\" : \\\"nowaiting\\\"&#125;\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 是否可以继续创建通话房间</div><div class=\"line\">     * @return 可以：true；不可以false；</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> canCreate() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sessions.<span class=\"built_in\">size</span>() &lt;= MAX_COUNT;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 判断是否可以加入</div><div class=\"line\">     * @param oid 被申请对话的ID</div><div class=\"line\">     * @return 如果能加入返回：true；否则返回false；</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> canJoin(<span class=\"keyword\">String</span> oid) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> !(oid != <span class=\"keyword\">null</span> &amp;&amp; user_user.containsKey(oid) &amp;&amp; user_user.<span class=\"built_in\">get</span>(oid) != <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 添加视频对象</div><div class=\"line\">     * @param uid 申请对话的ID</div><div class=\"line\">     * @param oid 被申请对话的ID</div><div class=\"line\">     * @return 是否是创建者：如果没有申请对话ID为创建者，否则为为加入者。创建者返回：true；加入者返回：false；</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> addUser(<span class=\"keyword\">String</span> uid, <span class=\"keyword\">String</span> oid) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(oid != <span class=\"keyword\">null</span> &amp;&amp; !oid.isEmpty()) &#123;</div><div class=\"line\">            AcgistVideo.user_user.put(uid, oid);</div><div class=\"line\">            AcgistVideo.user_user.put(oid, uid);</div><div class=\"line\">             </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            AcgistVideo.user_user.put(uid, <span class=\"keyword\">null</span>);</div><div class=\"line\">             </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 移除聊天用户</div><div class=\"line\">     * @param session 移除的session</div><div class=\"line\">     * @param uid 移除的UID</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> remove(Session session, <span class=\"keyword\">String</span> uid) &#123;</div><div class=\"line\">        <span class=\"keyword\">String</span> oid = user_user.<span class=\"built_in\">get</span>(uid);</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">if</span>(oid != <span class=\"keyword\">null</span>) user_user.put(oid, <span class=\"keyword\">null</span>); <span class=\"comment\">// 设置对方无人聊天</span></div><div class=\"line\">         </div><div class=\"line\">        sessions.remove(uid); <span class=\"comment\">// 异常session</span></div><div class=\"line\">        user_user.remove(uid); <span class=\"comment\">// 移除自己</span></div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(session != <span class=\"keyword\">null</span> &amp;&amp; session.isOpen()) session.close(); <span class=\"comment\">// 关闭session</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>自己测试的时候搞个公用的stun服务器弄一弄就好了。不过人多的时候会延迟很就是了，成功截图就不放了，人丑家贫。</p>\n","excerpt":"<p>最近这段时间折腾了一下WebRTC，这两天终于是抽了时间把WebRTC搞定了，去年就想弄的，但是确实没时间。看了网上的<a href=\"https://apprtc.appspot.com/的例子（可能需要翻墙访问），这个例子是部署在Google\">https://apprtc.appspot.com/的例子（可能需要翻墙访问），这个例子是部署在Google</a> App Engine上的应用程序，依赖与GAE的环境，后台的语言是python，而且还依赖Google App Engine Channel API，所以无法在本地运行，也无法扩展。费了一番功夫研读了例子的python端的源代码，决定用Java实现，Tomcat7之后开始支持WebSocket，打算用WebSocket代替Google App Engine Channel API实现前后台的通讯，在整个例子中Java+WebSocket起到的作用是负责客户端之间的通信，并不负责视频的传输，视频的传输依赖于WebRTC。<br></p>","more":"<p></p>\n<p>首先WebRTC,这个可以百度一下，大概就是一个音频和视频通讯技术，可以跨平台，只要能用浏览器的基本都可以使用，当然要你的浏览器支持。</p>\n<p>这里引用了google的js库：<code>channel.js</code>。不过还是下载下来放到本地服务器吧，因为很多地方访问google.com很吃力啊。最开始就是这个js没有加载完郁闷了很久，还一直以为是代码写错了。</p>\n<p>另外在进入页面的时候，注意初始化页面js中的一个参数：<code>initiator</code>：如果是创建人这个参数设为false；如果是加入的时候这个设置为true。为true的时候，才会发起视频通话的请求。</p>\n<p><strong><h2>实现</h2></strong></p>\n<p>对于前端JS代码及用到的对象大家可以去查看详细的代码介绍，我就贴一个连接的方法。首先建立一个客户端实时获取状态的连接，在GAE的例子上是通过GAE Channel API实现，我在这里用WebSocket实现，代码：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function openChannel() &#123;  </div><div class=\"line\">     console.log(<span class=\"string\">\"打开websocket\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">     socket = new WebSocket(<span class=\"string\">\"ws://192.168.1.158:8080/WebRTC/acgist.video/$&#123;requestScope.uid&#125;\"</span>)<span class=\"comment\">;\t\t\t\t</span></div><div class=\"line\">\t socket.onopen = onChannelOpened<span class=\"comment\">;</span></div><div class=\"line\">\t socket.onmessage = onChannelMessage<span class=\"comment\">;</span></div><div class=\"line\">\t socket.onclose = onChannelClosed<span class=\"comment\">;  </span></div><div class=\"line\">\t socket.onerror = onChannelError()<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>服务端代码很简单，就是收到用户的请求，发送给另外一个用户就可以了，这里处理的其实是用户WebRTC的一些信息，并不是去传输视频，如下：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"keyword\">HashMap</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnClose;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnMessage;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnOpen;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.websocket.Session;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.PathParam;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpoint;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2017/3/11</div><div class=\"line\"> *</div><div class=\"line\"> * WebRTC视频通话</div><div class=\"line\"> */</div><div class=\"line\"> </div><div class=\"line\">@ServerEndpoint(<span class=\"string\">\"/acgist.video/&#123;uid&#125;\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> class AcgistVideo &#123;</div><div class=\"line\">    <span class=\"comment\">// 最大通话数量</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> MAX_COUNT = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MAX_TIME_OUT = <span class=\"number\">1</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</div><div class=\"line\">    <span class=\"comment\">// 用户和用户的对话映射</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; user_user = Collections.synchronizedMap(<span class=\"keyword\">new</span> <span class=\"keyword\">HashMap</span>&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt;()); </div><div class=\"line\">    <span class=\"comment\">// 用户和websocket的session映射</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;<span class=\"keyword\">String</span>, Session&gt; sessions = Collections.synchronizedMap(<span class=\"keyword\">new</span> <span class=\"keyword\">HashMap</span>&lt;<span class=\"keyword\">String</span>, Session&gt;());</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 打开websocket</div><div class=\"line\">     * @param session websocket的session</div><div class=\"line\">     * @param uid 打开用户的UID</div><div class=\"line\">     */</div><div class=\"line\">    @OnOpen</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onOpen(Session session, @PathParam(<span class=\"string\">\"uid\"</span>)<span class=\"keyword\">String</span> uid) &#123;</div><div class=\"line\">        session.setMaxIdleTimeout(MAX_TIME_OUT);</div><div class=\"line\">        sessions.put(uid, session);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * websocket关闭</div><div class=\"line\">     * @param session 关闭的session</div><div class=\"line\">     * @param uid 关闭的用户标识</div><div class=\"line\">     */</div><div class=\"line\">    @OnClose</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onClose(Session session, @PathParam(<span class=\"string\">\"uid\"</span>)<span class=\"keyword\">String</span> uid) &#123;</div><div class=\"line\">        remove(session, uid);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 收到消息</div><div class=\"line\">     * @param message 消息内容</div><div class=\"line\">     * @param session 发送消息的session</div><div class=\"line\">     * @param uid</div><div class=\"line\">     */</div><div class=\"line\">    @OnMessage</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onMessage(<span class=\"keyword\">String</span> message, Session session, @PathParam(<span class=\"string\">\"uid\"</span>)<span class=\"keyword\">String</span> uid) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(uid != <span class=\"keyword\">null</span> &amp;&amp; user_user.<span class=\"built_in\">get</span>(uid) != <span class=\"keyword\">null</span> &amp;&amp; AcgistVideo.sessions.<span class=\"built_in\">get</span>(user_user.<span class=\"built_in\">get</span>(uid)) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                Session osession = sessions.<span class=\"built_in\">get</span>(user_user.<span class=\"built_in\">get</span>(uid)); <span class=\"comment\">// 被呼叫的session</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(osession.isOpen())</div><div class=\"line\">                    osession.getAsyncRemote().sendText(<span class=\"keyword\">new</span> <span class=\"keyword\">String</span>(message.getBytes(<span class=\"string\">\"utf-8\"</span>)));</div><div class=\"line\">                <span class=\"keyword\">else</span></div><div class=\"line\">                    <span class=\"keyword\">this</span>.nowaiting(osession);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.nowaiting(session);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 没有人在等待</div><div class=\"line\">     * @param session 发送消息的session</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> nowaiting(Session session) &#123;</div><div class=\"line\">        session.getAsyncRemote().sendText(<span class=\"string\">\"&#123;\\\"type\\\" : \\\"nowaiting\\\"&#125;\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 是否可以继续创建通话房间</div><div class=\"line\">     * @return 可以：true；不可以false；</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> canCreate() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sessions.<span class=\"built_in\">size</span>() &lt;= MAX_COUNT;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 判断是否可以加入</div><div class=\"line\">     * @param oid 被申请对话的ID</div><div class=\"line\">     * @return 如果能加入返回：true；否则返回false；</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> canJoin(<span class=\"keyword\">String</span> oid) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> !(oid != <span class=\"keyword\">null</span> &amp;&amp; user_user.containsKey(oid) &amp;&amp; user_user.<span class=\"built_in\">get</span>(oid) != <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 添加视频对象</div><div class=\"line\">     * @param uid 申请对话的ID</div><div class=\"line\">     * @param oid 被申请对话的ID</div><div class=\"line\">     * @return 是否是创建者：如果没有申请对话ID为创建者，否则为为加入者。创建者返回：true；加入者返回：false；</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> addUser(<span class=\"keyword\">String</span> uid, <span class=\"keyword\">String</span> oid) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(oid != <span class=\"keyword\">null</span> &amp;&amp; !oid.isEmpty()) &#123;</div><div class=\"line\">            AcgistVideo.user_user.put(uid, oid);</div><div class=\"line\">            AcgistVideo.user_user.put(oid, uid);</div><div class=\"line\">             </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            AcgistVideo.user_user.put(uid, <span class=\"keyword\">null</span>);</div><div class=\"line\">             </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 移除聊天用户</div><div class=\"line\">     * @param session 移除的session</div><div class=\"line\">     * @param uid 移除的UID</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> remove(Session session, <span class=\"keyword\">String</span> uid) &#123;</div><div class=\"line\">        <span class=\"keyword\">String</span> oid = user_user.<span class=\"built_in\">get</span>(uid);</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">if</span>(oid != <span class=\"keyword\">null</span>) user_user.put(oid, <span class=\"keyword\">null</span>); <span class=\"comment\">// 设置对方无人聊天</span></div><div class=\"line\">         </div><div class=\"line\">        sessions.remove(uid); <span class=\"comment\">// 异常session</span></div><div class=\"line\">        user_user.remove(uid); <span class=\"comment\">// 移除自己</span></div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(session != <span class=\"keyword\">null</span> &amp;&amp; session.isOpen()) session.close(); <span class=\"comment\">// 关闭session</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>自己测试的时候搞个公用的stun服务器弄一弄就好了。不过人多的时候会延迟很就是了，成功截图就不放了，人丑家贫。</p>"},{"title":"Java8 常用内置函数接口笔记","date":"2018-07-07T07:29:13.000Z","_content":"\nJDK 1.8 API中包含了很多内置的函数式接口。有些是在以前版本的Java中大家耳熟能详的，例如Comparator接口，或者Runnable接口。对这些现成的接口进行实现，可以通过@FunctionalInterface 标注来启用Lambda功能支持。\n\n此外，Java 8 API 还提供了很多新的函数式接口，来降低程序员的工作负担。有些新的接口已经在[Google Guava](https://code.google.com/p/guava-libraries/)库中很有名了。如果你对这些库很熟的话，你甚至闭上眼睛都能够想到，这些接口在类库的实现过程中起了多么大的作用。\n\n#### Predicates\n\nPredicate是一个布尔类型的函数，该函数只有一个输入参数。Predicate接口包含了多种默认方法，用于处理复杂的逻辑动词（and, or，negate）\n\n```java\nPredicate<String> predicate = (s) -> s.length() > 0;\n\npredicate.test(\"foo\");              // true\npredicate.negate().test(\"foo\");     // false\n\nPredicate<Boolean> nonNull = Objects::nonNull;\nPredicate<Boolean> isNull = Objects::isNull;\n\nPredicate<String> isEmpty = String::isEmpty;\nPredicate<String> isNotEmpty = isEmpty.negate();\n```\n\n<!--more-->\n\n#### Functions\n\nFunction接口接收一个参数，并返回单一的结果。默认方法可以将多个函数串在一起（compse, andThen）\n\n```java\nFunction<String, Integer> toInteger = Integer::valueOf;\nFunction<String, String> backToString = toInteger.andThen(String::valueOf);\n\nbackToString.apply(\"123\");     // \"123\"\n```\n\n#### Suppliers\n\nSupplier接口产生一个给定类型的结果。与Function不同的是，Supplier没有输入参数。\n\n```java\nSupplier<Person> personSupplier = Person::new;\npersonSupplier.get();   // new Person\n```\n\n#### Consumers\n\nConsumer代表了在一个输入参数上需要进行的操作。\n\n```java\nConsumer<Person> greeter = (p) -> System.out.println(\"Hello, \" + p.firstName);\ngreeter.accept(new Person(\"Luke\", \"Skywalker\"));\n```\n\n#### Comparators\n\nComparator接口在早期的Java版本中非常著名。Java 8 为这个接口添加了不同的默认方法。\n\n```java\nComparator<Person> comparator = (p1, p2) -> p1.firstName.compareTo(p2.firstName);\n\nPerson p1 = new Person(\"John\", \"Doe\");\nPerson p2 = new Person(\"Alice\", \"Wonderland\");\n\ncomparator.compare(p1, p2);             // > 0\ncomparator.reversed().compare(p1, p2);  // < 0\n```\n\n#### Optionals\n\nOptional不是一个函数式接口，而是一个精巧的工具接口，用来防止NullPointerException产生。这个概念在下一节会显得很重要，所以我们在这里快速地浏览一下Optional的工作原理。\n\nOptional是一个简单的值容器，这个值可以是null，也可以是non-null。考虑到一个方法可能会返回一个non-null的值，也可能返回一个空值。为了不直接返回null，我们在Java 8中就返回一个Optional.\n\n```java\nOptional<String> optional = Optional.of(\"bam\");\n\noptional.isPresent();           // true\noptional.get();                 // \"bam\"\noptional.orElse(\"fallback\");    // \"bam\"\n\noptional.ifPresent((s) -> System.out.println(s.charAt(0)));     // \"b\"\n```","source":"_posts/Java8-常用内置函数接口笔记.md","raw":"---\ntitle: Java8 常用内置函数接口笔记\ndate: 2018-07-07 15:29:13\ncategories: Java二三事\ntags:\n\t- Java\n---\n\nJDK 1.8 API中包含了很多内置的函数式接口。有些是在以前版本的Java中大家耳熟能详的，例如Comparator接口，或者Runnable接口。对这些现成的接口进行实现，可以通过@FunctionalInterface 标注来启用Lambda功能支持。\n\n此外，Java 8 API 还提供了很多新的函数式接口，来降低程序员的工作负担。有些新的接口已经在[Google Guava](https://code.google.com/p/guava-libraries/)库中很有名了。如果你对这些库很熟的话，你甚至闭上眼睛都能够想到，这些接口在类库的实现过程中起了多么大的作用。\n\n#### Predicates\n\nPredicate是一个布尔类型的函数，该函数只有一个输入参数。Predicate接口包含了多种默认方法，用于处理复杂的逻辑动词（and, or，negate）\n\n```java\nPredicate<String> predicate = (s) -> s.length() > 0;\n\npredicate.test(\"foo\");              // true\npredicate.negate().test(\"foo\");     // false\n\nPredicate<Boolean> nonNull = Objects::nonNull;\nPredicate<Boolean> isNull = Objects::isNull;\n\nPredicate<String> isEmpty = String::isEmpty;\nPredicate<String> isNotEmpty = isEmpty.negate();\n```\n\n<!--more-->\n\n#### Functions\n\nFunction接口接收一个参数，并返回单一的结果。默认方法可以将多个函数串在一起（compse, andThen）\n\n```java\nFunction<String, Integer> toInteger = Integer::valueOf;\nFunction<String, String> backToString = toInteger.andThen(String::valueOf);\n\nbackToString.apply(\"123\");     // \"123\"\n```\n\n#### Suppliers\n\nSupplier接口产生一个给定类型的结果。与Function不同的是，Supplier没有输入参数。\n\n```java\nSupplier<Person> personSupplier = Person::new;\npersonSupplier.get();   // new Person\n```\n\n#### Consumers\n\nConsumer代表了在一个输入参数上需要进行的操作。\n\n```java\nConsumer<Person> greeter = (p) -> System.out.println(\"Hello, \" + p.firstName);\ngreeter.accept(new Person(\"Luke\", \"Skywalker\"));\n```\n\n#### Comparators\n\nComparator接口在早期的Java版本中非常著名。Java 8 为这个接口添加了不同的默认方法。\n\n```java\nComparator<Person> comparator = (p1, p2) -> p1.firstName.compareTo(p2.firstName);\n\nPerson p1 = new Person(\"John\", \"Doe\");\nPerson p2 = new Person(\"Alice\", \"Wonderland\");\n\ncomparator.compare(p1, p2);             // > 0\ncomparator.reversed().compare(p1, p2);  // < 0\n```\n\n#### Optionals\n\nOptional不是一个函数式接口，而是一个精巧的工具接口，用来防止NullPointerException产生。这个概念在下一节会显得很重要，所以我们在这里快速地浏览一下Optional的工作原理。\n\nOptional是一个简单的值容器，这个值可以是null，也可以是non-null。考虑到一个方法可能会返回一个non-null的值，也可能返回一个空值。为了不直接返回null，我们在Java 8中就返回一个Optional.\n\n```java\nOptional<String> optional = Optional.of(\"bam\");\n\noptional.isPresent();           // true\noptional.get();                 // \"bam\"\noptional.orElse(\"fallback\");    // \"bam\"\n\noptional.ifPresent((s) -> System.out.println(s.charAt(0)));     // \"b\"\n```","slug":"Java8-常用内置函数接口笔记","published":1,"updated":"2018-07-07T07:41:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3ken000trhso3m5ks5fz","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>JDK 1.8 API中包含了很多内置的函数式接口。有些是在以前版本的Java中大家耳熟能详的，例如Comparator接口，或者Runnable接口。对这些现成的接口进行实现，可以通过@FunctionalInterface 标注来启用Lambda功能支持。</p>\n<p>此外，Java 8 API 还提供了很多新的函数式接口，来降低程序员的工作负担。有些新的接口已经在<a href=\"https://code.google.com/p/guava-libraries/\" target=\"_blank\" rel=\"external\">Google Guava</a>库中很有名了。如果你对这些库很熟的话，你甚至闭上眼睛都能够想到，这些接口在类库的实现过程中起了多么大的作用。</p>\n<h4 id=\"Predicates\"><a href=\"#Predicates\" class=\"headerlink\" title=\"Predicates\"></a>Predicates</h4><p>Predicate是一个布尔类型的函数，该函数只有一个输入参数。Predicate接口包含了多种默认方法，用于处理复杂的逻辑动词（and, or，negate）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">predicate.test(<span class=\"string\">\"foo\"</span>);              <span class=\"comment\">// true</span></div><div class=\"line\">predicate.negate().test(<span class=\"string\">\"foo\"</span>);     <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\">Predicate&lt;Boolean&gt; nonNull = Objects::nonNull;</div><div class=\"line\">Predicate&lt;Boolean&gt; isNull = Objects::isNull;</div><div class=\"line\"></div><div class=\"line\">Predicate&lt;String&gt; isEmpty = String::isEmpty;</div><div class=\"line\">Predicate&lt;String&gt; isNotEmpty = isEmpty.negate();</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h4><p>Function接口接收一个参数，并返回单一的结果。默认方法可以将多个函数串在一起（compse, andThen）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Function&lt;String, Integer&gt; toInteger = Integer::valueOf;</div><div class=\"line\">Function&lt;String, String&gt; backToString = toInteger.andThen(String::valueOf);</div><div class=\"line\"></div><div class=\"line\">backToString.apply(<span class=\"string\">\"123\"</span>);     <span class=\"comment\">// \"123\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"Suppliers\"><a href=\"#Suppliers\" class=\"headerlink\" title=\"Suppliers\"></a>Suppliers</h4><p>Supplier接口产生一个给定类型的结果。与Function不同的是，Supplier没有输入参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Supplier&lt;Person&gt; personSupplier = Person::<span class=\"keyword\">new</span>;</div><div class=\"line\">personSupplier.get();   <span class=\"comment\">// new Person</span></div></pre></td></tr></table></figure>\n<h4 id=\"Consumers\"><a href=\"#Consumers\" class=\"headerlink\" title=\"Consumers\"></a>Consumers</h4><p>Consumer代表了在一个输入参数上需要进行的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Consumer&lt;Person&gt; greeter = (p) -&gt; System.out.println(<span class=\"string\">\"Hello, \"</span> + p.firstName);</div><div class=\"line\">greeter.accept(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Luke\"</span>, <span class=\"string\">\"Skywalker\"</span>));</div></pre></td></tr></table></figure>\n<h4 id=\"Comparators\"><a href=\"#Comparators\" class=\"headerlink\" title=\"Comparators\"></a>Comparators</h4><p>Comparator接口在早期的Java版本中非常著名。Java 8 为这个接口添加了不同的默认方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);</div><div class=\"line\"></div><div class=\"line\">Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"John\"</span>, <span class=\"string\">\"Doe\"</span>);</div><div class=\"line\">Person p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Alice\"</span>, <span class=\"string\">\"Wonderland\"</span>);</div><div class=\"line\"></div><div class=\"line\">comparator.compare(p1, p2);             <span class=\"comment\">// &gt; 0</span></div><div class=\"line\">comparator.reversed().compare(p1, p2);  <span class=\"comment\">// &lt; 0</span></div></pre></td></tr></table></figure>\n<h4 id=\"Optionals\"><a href=\"#Optionals\" class=\"headerlink\" title=\"Optionals\"></a>Optionals</h4><p>Optional不是一个函数式接口，而是一个精巧的工具接口，用来防止NullPointerException产生。这个概念在下一节会显得很重要，所以我们在这里快速地浏览一下Optional的工作原理。</p>\n<p>Optional是一个简单的值容器，这个值可以是null，也可以是non-null。考虑到一个方法可能会返回一个non-null的值，也可能返回一个空值。为了不直接返回null，我们在Java 8中就返回一个Optional.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Optional&lt;String&gt; optional = Optional.of(<span class=\"string\">\"bam\"</span>);</div><div class=\"line\"></div><div class=\"line\">optional.isPresent();           <span class=\"comment\">// true</span></div><div class=\"line\">optional.get();                 <span class=\"comment\">// \"bam\"</span></div><div class=\"line\">optional.orElse(<span class=\"string\">\"fallback\"</span>);    <span class=\"comment\">// \"bam\"</span></div><div class=\"line\"></div><div class=\"line\">optional.ifPresent((s) -&gt; System.out.println(s.charAt(<span class=\"number\">0</span>)));     <span class=\"comment\">// \"b\"</span></div></pre></td></tr></table></figure>","excerpt":"<p>JDK 1.8 API中包含了很多内置的函数式接口。有些是在以前版本的Java中大家耳熟能详的，例如Comparator接口，或者Runnable接口。对这些现成的接口进行实现，可以通过@FunctionalInterface 标注来启用Lambda功能支持。</p>\n<p>此外，Java 8 API 还提供了很多新的函数式接口，来降低程序员的工作负担。有些新的接口已经在<a href=\"https://code.google.com/p/guava-libraries/\">Google Guava</a>库中很有名了。如果你对这些库很熟的话，你甚至闭上眼睛都能够想到，这些接口在类库的实现过程中起了多么大的作用。</p>\n<h4 id=\"Predicates\"><a href=\"#Predicates\" class=\"headerlink\" title=\"Predicates\"></a>Predicates</h4><p>Predicate是一个布尔类型的函数，该函数只有一个输入参数。Predicate接口包含了多种默认方法，用于处理复杂的逻辑动词（and, or，negate）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">predicate.test(<span class=\"string\">\"foo\"</span>);              <span class=\"comment\">// true</span></div><div class=\"line\">predicate.negate().test(<span class=\"string\">\"foo\"</span>);     <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\">Predicate&lt;Boolean&gt; nonNull = Objects::nonNull;</div><div class=\"line\">Predicate&lt;Boolean&gt; isNull = Objects::isNull;</div><div class=\"line\"></div><div class=\"line\">Predicate&lt;String&gt; isEmpty = String::isEmpty;</div><div class=\"line\">Predicate&lt;String&gt; isNotEmpty = isEmpty.negate();</div></pre></td></tr></table></figure>","more":"<h4 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h4><p>Function接口接收一个参数，并返回单一的结果。默认方法可以将多个函数串在一起（compse, andThen）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Function&lt;String, Integer&gt; toInteger = Integer::valueOf;</div><div class=\"line\">Function&lt;String, String&gt; backToString = toInteger.andThen(String::valueOf);</div><div class=\"line\"></div><div class=\"line\">backToString.apply(<span class=\"string\">\"123\"</span>);     <span class=\"comment\">// \"123\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"Suppliers\"><a href=\"#Suppliers\" class=\"headerlink\" title=\"Suppliers\"></a>Suppliers</h4><p>Supplier接口产生一个给定类型的结果。与Function不同的是，Supplier没有输入参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Supplier&lt;Person&gt; personSupplier = Person::<span class=\"keyword\">new</span>;</div><div class=\"line\">personSupplier.get();   <span class=\"comment\">// new Person</span></div></pre></td></tr></table></figure>\n<h4 id=\"Consumers\"><a href=\"#Consumers\" class=\"headerlink\" title=\"Consumers\"></a>Consumers</h4><p>Consumer代表了在一个输入参数上需要进行的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Consumer&lt;Person&gt; greeter = (p) -&gt; System.out.println(<span class=\"string\">\"Hello, \"</span> + p.firstName);</div><div class=\"line\">greeter.accept(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"Luke\"</span>, <span class=\"string\">\"Skywalker\"</span>));</div></pre></td></tr></table></figure>\n<h4 id=\"Comparators\"><a href=\"#Comparators\" class=\"headerlink\" title=\"Comparators\"></a>Comparators</h4><p>Comparator接口在早期的Java版本中非常著名。Java 8 为这个接口添加了不同的默认方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);</div><div class=\"line\"></div><div class=\"line\">Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"John\"</span>, <span class=\"string\">\"Doe\"</span>);</div><div class=\"line\">Person p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Alice\"</span>, <span class=\"string\">\"Wonderland\"</span>);</div><div class=\"line\"></div><div class=\"line\">comparator.compare(p1, p2);             <span class=\"comment\">// &gt; 0</span></div><div class=\"line\">comparator.reversed().compare(p1, p2);  <span class=\"comment\">// &lt; 0</span></div></pre></td></tr></table></figure>\n<h4 id=\"Optionals\"><a href=\"#Optionals\" class=\"headerlink\" title=\"Optionals\"></a>Optionals</h4><p>Optional不是一个函数式接口，而是一个精巧的工具接口，用来防止NullPointerException产生。这个概念在下一节会显得很重要，所以我们在这里快速地浏览一下Optional的工作原理。</p>\n<p>Optional是一个简单的值容器，这个值可以是null，也可以是non-null。考虑到一个方法可能会返回一个non-null的值，也可能返回一个空值。为了不直接返回null，我们在Java 8中就返回一个Optional.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Optional&lt;String&gt; optional = Optional.of(<span class=\"string\">\"bam\"</span>);</div><div class=\"line\"></div><div class=\"line\">optional.isPresent();           <span class=\"comment\">// true</span></div><div class=\"line\">optional.get();                 <span class=\"comment\">// \"bam\"</span></div><div class=\"line\">optional.orElse(<span class=\"string\">\"fallback\"</span>);    <span class=\"comment\">// \"bam\"</span></div><div class=\"line\"></div><div class=\"line\">optional.ifPresent((s) -&gt; System.out.println(s.charAt(<span class=\"number\">0</span>)));     <span class=\"comment\">// \"b\"</span></div></pre></td></tr></table></figure>"},{"title":"Java反射学习总结（一)","date":"2017-02-18T13:12:54.000Z","_content":"\nJava提供的反射机制允许我们在运行时期动态加载类，检测和修改它本身状态或行为，要举反射机制的一个实例的话，就是在整合开发环境中所提供的方法提示或者类的检查工具，另外像jsp中的javabean自动收集请求也用到了反射，还有我们经常用的框架也可以看到反射机制的使用，这样可以达到动态加载使用者自己定义的类的目的。\n<!--more-->\n在我们拿到一个类时，即使对它一无所知，但是其实他本身就包括了很多信息，Java在需要使用某个类时才会将类加载，并在jvm中以一个**java.lang.Class**的实例存在，从Class实例开始，我们可以获取类的信息。\n\n\n**Class类的加载**\n\nJava在真正需要使用一个类的时候才会进行加载，而不是在程序启动时加载所有的类，因为大多数人都只使用到应用程序的部分资源，在需要某些功能时在加载某些资源，这样可以让系统的资源运用更有效率。\n\n一个java.lang.Class代表了Java程序中运行时加载类或者接口的实例，也可以用来表达enum（枚举），annotation（注解），数组，基本数据类型；Class类没有public构造方法，Class是由jvm自动生成的，每当一个类被加载时，jvm就会自动生成一个Class实例。\n\n我们还可以通过Object的getClass()方法来取得每一个对象对应Class实例，或者通过\"class\"常量，在取得Class实例之后，操作Class实例上的一些方法来取得类的基本信息，例如：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/3\n */\npublic class ClassDemo {\n    public static void main(String[] args) {\n        String name = \"justdoitlee\";\n        Class stringClass = name.getClass();\n        System.out.println(\"类名称：\" +\n                stringClass.getName());\n        System.out.println(\"是否为接口：\" +\n                stringClass.isInterface());\n        System.out.println(\"是否为基本数据类型：\" +\n                stringClass.isPrimitive());\n        System.out.println(\"是否为数组：\" +\n                stringClass.isArray());\n        System.out.println(\"父类名称：\" +\n                stringClass.getSuperclass().getName());\n    }\n}\n\n```\n执行结果：\n\n```\n类名称：java.lang.String\n是否为借口：false\n是否为基本数据类型：false\n是否为数组：false\n父类名称：java.lang.Object\n\nProcess finished with exit code 0\n\n```\n这里简单的的使用 getClass() 方法来取得 String 类的 Class 实例，并从中得到 String 的一些基本信息。\n\n当然，我们也可以直接使用下面的方式来取得String类的Class对象：\n\n```\nClass stringClass = String.class;\n```\n\nJava在真正需要类时才会加载这个类，所谓的**真正需要**通常指的是要使用指定的类生成对象时，或者使用指定要加载的类时，例如使用Class.forName()加载类，或者使用ClassLoader的loadClass()加载类，声明类并不会导致类的加载，可以使用一个小测试来验证。\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/3\n */\npublic class TestClass {\n    static {\n        System.out.println(\"类被加载\");\n    }\n}\n\n```\n\n在上面我们定义了一个静态代码块，假设在类第一次被加载时会执行静态代码块（说假设是因为，可以设置加载类时不执行静态代码块，使Class生成对象时才执行静态代码块），看输出信息可以看出类何时被加载(如下LoadClassTest)。\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/3\n */\npublic class LoadClassTest {\n    public static void main(String[] args) {\n        TestClass test = null;\n        System.out.println(\"声明TestClass\");\n        test = new TestClass();\n        System.out.println(\"生成TestClass实例\");\n    }\n}\n\n\n```\n\n输出：\n\n```\n声明TestClass\n类被加载\n生成TestClass实例\n\nProcess finished with exit code 0\n```\n从执行结果可以看出，声明类并不会导致TestClass被加载，而是在使用new生成对象时才会被加载类。\n\nClass的信息是在编译时期就被加入至.class文件的，这是Java执行时期被辨别（RTTI，Run-Time Type Information或Run-Time Type Identification）的一种方式，在编译时期编译器会先检查对应的.class文件，而执行时期jvm在使用类时，会先检查对应的Class是否已经被加载，如果没有加载，则会寻找对应的,class文件并加载，一个类在jvm中只会有一个Class实例，每个类的实例都会记得自己是由哪个Class实例所生成，我们可以使用getClass()或.class来取得Class实例。\n\n另外，在Java中，数组对象也有对应的Class实例，这个对象是由具有相同元素与维度的数组所共用，而基本类型像是 boolean, byte, char, short, int, long, float, double 以及关键字 void（以前都不知道有这个呢！！），也都具有对应的Class对象，我们还可以用类常量（Class literal）来获取这些对象。\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class ClassDemo2 {\n    public static void main(String[] args) {\n        System.out.println(boolean.class);\n        System.out.println(void.class);\n\n        int[] iarr = new int[10];\n        System.out.println(iarr.getClass().toString());\n\n        double[] darr = new double[10];\n        System.out.println(darr.getClass().toString());\n    }\n}\n```\n输出：\n\n```\nboolean\nvoid\nclass [I\nclass [D\n\nProcess finished with exit code 0\n```\n在Java中 数组确实是以对象的形式存在的，其对应的类都是有jvm自动生成的，当我们是用toString()来显示数组对象的描述时，[表示为数组类型，并且加上一个类型代表字，上面的I表示是一个Int的数组，d是一个double数组。\n\n这里就先讲一下Class类的加载吧，后面的再总结。\n\n\n","source":"_posts/Java反射学习总结（一.md","raw":"---\ntitle: Java反射学习总结（一)\ndate: 2017-02-18 21:12:54\ncategories: Java二三事\ntags: \n\t- 反射\n---\n\nJava提供的反射机制允许我们在运行时期动态加载类，检测和修改它本身状态或行为，要举反射机制的一个实例的话，就是在整合开发环境中所提供的方法提示或者类的检查工具，另外像jsp中的javabean自动收集请求也用到了反射，还有我们经常用的框架也可以看到反射机制的使用，这样可以达到动态加载使用者自己定义的类的目的。\n<!--more-->\n在我们拿到一个类时，即使对它一无所知，但是其实他本身就包括了很多信息，Java在需要使用某个类时才会将类加载，并在jvm中以一个**java.lang.Class**的实例存在，从Class实例开始，我们可以获取类的信息。\n\n\n**Class类的加载**\n\nJava在真正需要使用一个类的时候才会进行加载，而不是在程序启动时加载所有的类，因为大多数人都只使用到应用程序的部分资源，在需要某些功能时在加载某些资源，这样可以让系统的资源运用更有效率。\n\n一个java.lang.Class代表了Java程序中运行时加载类或者接口的实例，也可以用来表达enum（枚举），annotation（注解），数组，基本数据类型；Class类没有public构造方法，Class是由jvm自动生成的，每当一个类被加载时，jvm就会自动生成一个Class实例。\n\n我们还可以通过Object的getClass()方法来取得每一个对象对应Class实例，或者通过\"class\"常量，在取得Class实例之后，操作Class实例上的一些方法来取得类的基本信息，例如：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/3\n */\npublic class ClassDemo {\n    public static void main(String[] args) {\n        String name = \"justdoitlee\";\n        Class stringClass = name.getClass();\n        System.out.println(\"类名称：\" +\n                stringClass.getName());\n        System.out.println(\"是否为接口：\" +\n                stringClass.isInterface());\n        System.out.println(\"是否为基本数据类型：\" +\n                stringClass.isPrimitive());\n        System.out.println(\"是否为数组：\" +\n                stringClass.isArray());\n        System.out.println(\"父类名称：\" +\n                stringClass.getSuperclass().getName());\n    }\n}\n\n```\n执行结果：\n\n```\n类名称：java.lang.String\n是否为借口：false\n是否为基本数据类型：false\n是否为数组：false\n父类名称：java.lang.Object\n\nProcess finished with exit code 0\n\n```\n这里简单的的使用 getClass() 方法来取得 String 类的 Class 实例，并从中得到 String 的一些基本信息。\n\n当然，我们也可以直接使用下面的方式来取得String类的Class对象：\n\n```\nClass stringClass = String.class;\n```\n\nJava在真正需要类时才会加载这个类，所谓的**真正需要**通常指的是要使用指定的类生成对象时，或者使用指定要加载的类时，例如使用Class.forName()加载类，或者使用ClassLoader的loadClass()加载类，声明类并不会导致类的加载，可以使用一个小测试来验证。\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/3\n */\npublic class TestClass {\n    static {\n        System.out.println(\"类被加载\");\n    }\n}\n\n```\n\n在上面我们定义了一个静态代码块，假设在类第一次被加载时会执行静态代码块（说假设是因为，可以设置加载类时不执行静态代码块，使Class生成对象时才执行静态代码块），看输出信息可以看出类何时被加载(如下LoadClassTest)。\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/3\n */\npublic class LoadClassTest {\n    public static void main(String[] args) {\n        TestClass test = null;\n        System.out.println(\"声明TestClass\");\n        test = new TestClass();\n        System.out.println(\"生成TestClass实例\");\n    }\n}\n\n\n```\n\n输出：\n\n```\n声明TestClass\n类被加载\n生成TestClass实例\n\nProcess finished with exit code 0\n```\n从执行结果可以看出，声明类并不会导致TestClass被加载，而是在使用new生成对象时才会被加载类。\n\nClass的信息是在编译时期就被加入至.class文件的，这是Java执行时期被辨别（RTTI，Run-Time Type Information或Run-Time Type Identification）的一种方式，在编译时期编译器会先检查对应的.class文件，而执行时期jvm在使用类时，会先检查对应的Class是否已经被加载，如果没有加载，则会寻找对应的,class文件并加载，一个类在jvm中只会有一个Class实例，每个类的实例都会记得自己是由哪个Class实例所生成，我们可以使用getClass()或.class来取得Class实例。\n\n另外，在Java中，数组对象也有对应的Class实例，这个对象是由具有相同元素与维度的数组所共用，而基本类型像是 boolean, byte, char, short, int, long, float, double 以及关键字 void（以前都不知道有这个呢！！），也都具有对应的Class对象，我们还可以用类常量（Class literal）来获取这些对象。\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class ClassDemo2 {\n    public static void main(String[] args) {\n        System.out.println(boolean.class);\n        System.out.println(void.class);\n\n        int[] iarr = new int[10];\n        System.out.println(iarr.getClass().toString());\n\n        double[] darr = new double[10];\n        System.out.println(darr.getClass().toString());\n    }\n}\n```\n输出：\n\n```\nboolean\nvoid\nclass [I\nclass [D\n\nProcess finished with exit code 0\n```\n在Java中 数组确实是以对象的形式存在的，其对应的类都是有jvm自动生成的，当我们是用toString()来显示数组对象的描述时，[表示为数组类型，并且加上一个类型代表字，上面的I表示是一个Int的数组，d是一个double数组。\n\n这里就先讲一下Class类的加载吧，后面的再总结。\n\n\n","slug":"Java反射学习总结（一","published":1,"updated":"2017-02-18T13:13:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3keo000xrhso3auyp4me","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>Java提供的反射机制允许我们在运行时期动态加载类，检测和修改它本身状态或行为，要举反射机制的一个实例的话，就是在整合开发环境中所提供的方法提示或者类的检查工具，另外像jsp中的javabean自动收集请求也用到了反射，还有我们经常用的框架也可以看到反射机制的使用，这样可以达到动态加载使用者自己定义的类的目的。<br><a id=\"more\"></a><br>在我们拿到一个类时，即使对它一无所知，但是其实他本身就包括了很多信息，Java在需要使用某个类时才会将类加载，并在jvm中以一个<strong>java.lang.Class</strong>的实例存在，从Class实例开始，我们可以获取类的信息。</p>\n<p><strong>Class类的加载</strong></p>\n<p>Java在真正需要使用一个类的时候才会进行加载，而不是在程序启动时加载所有的类，因为大多数人都只使用到应用程序的部分资源，在需要某些功能时在加载某些资源，这样可以让系统的资源运用更有效率。</p>\n<p>一个java.lang.Class代表了Java程序中运行时加载类或者接口的实例，也可以用来表达enum（枚举），annotation（注解），数组，基本数据类型；Class类没有public构造方法，Class是由jvm自动生成的，每当一个类被加载时，jvm就会自动生成一个Class实例。</p>\n<p>我们还可以通过Object的getClass()方法来取得每一个对象对应Class实例，或者通过”class”常量，在取得Class实例之后，操作Class实例上的一些方法来取得类的基本信息，例如：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/3</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ClassDemo &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">String</span> name = <span class=\"string\">\"justdoitlee\"</span>;</div><div class=\"line\">        Class stringClass = name.getClass();</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"类名称：\"</span> +</div><div class=\"line\">                stringClass.getName());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"是否为接口：\"</span> +</div><div class=\"line\">                stringClass.isInterface());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"是否为基本数据类型：\"</span> +</div><div class=\"line\">                stringClass.isPrimitive());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"是否为数组：\"</span> +</div><div class=\"line\">                stringClass.isArray());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"父类名称：\"</span> +</div><div class=\"line\">                stringClass.getSuperclass().getName());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">类名称：java.lang.String</div><div class=\"line\">是否为借口：false</div><div class=\"line\">是否为基本数据类型：false</div><div class=\"line\">是否为数组：false</div><div class=\"line\">父类名称：java.lang.Object</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>这里简单的的使用 getClass() 方法来取得 String 类的 Class 实例，并从中得到 String 的一些基本信息。</p>\n<p>当然，我们也可以直接使用下面的方式来取得String类的Class对象：</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span> stringClass = <span class=\"keyword\">String</span>.<span class=\"keyword\">class</span>;</div></pre></td></tr></table></figure>\n<p>Java在真正需要类时才会加载这个类，所谓的<strong>真正需要</strong>通常指的是要使用指定的类生成对象时，或者使用指定要加载的类时，例如使用Class.forName()加载类，或者使用ClassLoader的loadClass()加载类，声明类并不会导致类的加载，可以使用一个小测试来验证。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/3</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"类被加载\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上面我们定义了一个静态代码块，假设在类第一次被加载时会执行静态代码块（说假设是因为，可以设置加载类时不执行静态代码块，使Class生成对象时才执行静态代码块），看输出信息可以看出类何时被加载(如下LoadClassTest)。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/3</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoadClassTest</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">        TestClass test = <span class=\"literal\">null</span>;</div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"声明TestClass\"</span>);</div><div class=\"line\">        test = <span class=\"keyword\">new</span> TestClass();</div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"生成TestClass实例\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">声明TestClass</div><div class=\"line\">类被加载</div><div class=\"line\">生成TestClass实例</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>从执行结果可以看出，声明类并不会导致TestClass被加载，而是在使用new生成对象时才会被加载类。</p>\n<p>Class的信息是在编译时期就被加入至.class文件的，这是Java执行时期被辨别（RTTI，Run-Time Type Information或Run-Time Type Identification）的一种方式，在编译时期编译器会先检查对应的.class文件，而执行时期jvm在使用类时，会先检查对应的Class是否已经被加载，如果没有加载，则会寻找对应的,class文件并加载，一个类在jvm中只会有一个Class实例，每个类的实例都会记得自己是由哪个Class实例所生成，我们可以使用getClass()或.class来取得Class实例。</p>\n<p>另外，在Java中，数组对象也有对应的Class实例，这个对象是由具有相同元素与维度的数组所共用，而基本类型像是 boolean, byte, char, short, int, long, float, double 以及关键字 void（以前都不知道有这个呢！！），也都具有对应的Class对象，我们还可以用类常量（Class literal）来获取这些对象。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ClassDemo2 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"keyword\">boolean</span>.<span class=\"keyword\">class</span>);</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"keyword\">void</span>.<span class=\"keyword\">class</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span>[] iarr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(iarr.getClass().toString());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">double</span>[] darr = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">10</span>];</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(darr.getClass().toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">boolean</div><div class=\"line\">void</div><div class=\"line\">class [I</div><div class=\"line\">class [D</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>在Java中 数组确实是以对象的形式存在的，其对应的类都是有jvm自动生成的，当我们是用toString()来显示数组对象的描述时，[表示为数组类型，并且加上一个类型代表字，上面的I表示是一个Int的数组，d是一个double数组。</p>\n<p>这里就先讲一下Class类的加载吧，后面的再总结。</p>\n","excerpt":"<p>Java提供的反射机制允许我们在运行时期动态加载类，检测和修改它本身状态或行为，要举反射机制的一个实例的话，就是在整合开发环境中所提供的方法提示或者类的检查工具，另外像jsp中的javabean自动收集请求也用到了反射，还有我们经常用的框架也可以看到反射机制的使用，这样可以达到动态加载使用者自己定义的类的目的。<br></p>","more":"<br>在我们拿到一个类时，即使对它一无所知，但是其实他本身就包括了很多信息，Java在需要使用某个类时才会将类加载，并在jvm中以一个<strong>java.lang.Class</strong>的实例存在，从Class实例开始，我们可以获取类的信息。<p></p>\n<p><strong>Class类的加载</strong></p>\n<p>Java在真正需要使用一个类的时候才会进行加载，而不是在程序启动时加载所有的类，因为大多数人都只使用到应用程序的部分资源，在需要某些功能时在加载某些资源，这样可以让系统的资源运用更有效率。</p>\n<p>一个java.lang.Class代表了Java程序中运行时加载类或者接口的实例，也可以用来表达enum（枚举），annotation（注解），数组，基本数据类型；Class类没有public构造方法，Class是由jvm自动生成的，每当一个类被加载时，jvm就会自动生成一个Class实例。</p>\n<p>我们还可以通过Object的getClass()方法来取得每一个对象对应Class实例，或者通过”class”常量，在取得Class实例之后，操作Class实例上的一些方法来取得类的基本信息，例如：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/3</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ClassDemo &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">String</span> name = <span class=\"string\">\"justdoitlee\"</span>;</div><div class=\"line\">        Class stringClass = name.getClass();</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"类名称：\"</span> +</div><div class=\"line\">                stringClass.getName());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"是否为接口：\"</span> +</div><div class=\"line\">                stringClass.isInterface());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"是否为基本数据类型：\"</span> +</div><div class=\"line\">                stringClass.isPrimitive());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"是否为数组：\"</span> +</div><div class=\"line\">                stringClass.isArray());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"父类名称：\"</span> +</div><div class=\"line\">                stringClass.getSuperclass().getName());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">类名称：java.lang.String</div><div class=\"line\">是否为借口：false</div><div class=\"line\">是否为基本数据类型：false</div><div class=\"line\">是否为数组：false</div><div class=\"line\">父类名称：java.lang.Object</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>这里简单的的使用 getClass() 方法来取得 String 类的 Class 实例，并从中得到 String 的一些基本信息。</p>\n<p>当然，我们也可以直接使用下面的方式来取得String类的Class对象：</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Class</span> stringClass = <span class=\"keyword\">String</span>.<span class=\"keyword\">class</span>;</div></pre></td></tr></table></figure>\n<p>Java在真正需要类时才会加载这个类，所谓的<strong>真正需要</strong>通常指的是要使用指定的类生成对象时，或者使用指定要加载的类时，例如使用Class.forName()加载类，或者使用ClassLoader的loadClass()加载类，声明类并不会导致类的加载，可以使用一个小测试来验证。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/3</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"类被加载\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上面我们定义了一个静态代码块，假设在类第一次被加载时会执行静态代码块（说假设是因为，可以设置加载类时不执行静态代码块，使Class生成对象时才执行静态代码块），看输出信息可以看出类何时被加载(如下LoadClassTest)。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/3</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoadClassTest</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">        TestClass test = <span class=\"literal\">null</span>;</div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"声明TestClass\"</span>);</div><div class=\"line\">        test = <span class=\"keyword\">new</span> TestClass();</div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"生成TestClass实例\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">声明TestClass</div><div class=\"line\">类被加载</div><div class=\"line\">生成TestClass实例</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>从执行结果可以看出，声明类并不会导致TestClass被加载，而是在使用new生成对象时才会被加载类。</p>\n<p>Class的信息是在编译时期就被加入至.class文件的，这是Java执行时期被辨别（RTTI，Run-Time Type Information或Run-Time Type Identification）的一种方式，在编译时期编译器会先检查对应的.class文件，而执行时期jvm在使用类时，会先检查对应的Class是否已经被加载，如果没有加载，则会寻找对应的,class文件并加载，一个类在jvm中只会有一个Class实例，每个类的实例都会记得自己是由哪个Class实例所生成，我们可以使用getClass()或.class来取得Class实例。</p>\n<p>另外，在Java中，数组对象也有对应的Class实例，这个对象是由具有相同元素与维度的数组所共用，而基本类型像是 boolean, byte, char, short, int, long, float, double 以及关键字 void（以前都不知道有这个呢！！），也都具有对应的Class对象，我们还可以用类常量（Class literal）来获取这些对象。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ClassDemo2 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"keyword\">boolean</span>.<span class=\"keyword\">class</span>);</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"keyword\">void</span>.<span class=\"keyword\">class</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span>[] iarr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(iarr.getClass().toString());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">double</span>[] darr = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">10</span>];</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(darr.getClass().toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">boolean</div><div class=\"line\">void</div><div class=\"line\">class [I</div><div class=\"line\">class [D</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>在Java中 数组确实是以对象的形式存在的，其对应的类都是有jvm自动生成的，当我们是用toString()来显示数组对象的描述时，[表示为数组类型，并且加上一个类型代表字，上面的I表示是一个Int的数组，d是一个double数组。</p>\n<p>这里就先讲一下Class类的加载吧，后面的再总结。</p>"},{"title":"Java反射学习总结（三）","date":"2017-02-18T13:14:58.000Z","_content":"Class对象表示所加载的类，取得Class对象后，我们就可以愉快的取得与类相关的信息了，就像包（package,package也是类名的一部分哦~），构造方法，方法，属性等信息，而每一个信息，也会有相应的类别形态，比如包对应的是 java.lang.Package，构造方法对应的是java.lang.reflect.Constructor，成员方法对应的是 java.lang.reflect.Method，属性对应的是 java.lang.reflect.Field等。\n<!--more-->\n先来个简单的例子吧，获取一下包名：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class ClassInfoDemo {\n    public static void main(String[] args) {\n        try {\n            Class c = Class.forName(args[0]);\n            Package p = c.getPackage();\n            System.out.println(p.getName());\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"没有指定类\");\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定类\");\n        }\n    }\n}\n\n```\n输出：\n\n```\njava ClassInfoDemo java.util.ArrayList\njava.util\n```\n用相应的方法，我们可以分别取得 Field、Constructor、Method等对象。\n\n\n下面是一个我之前写的可以获取某些类信息的一个demo：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.Scanner;\n\n/**\n * @author 李智\n * @date 2016/12/1\n */\npublic class ReflectTest {\n    public static void main(String[] args) {\n        String name;\n        if (args.length > 0) {\n            name = args[0];\n        } else {\n            Scanner in = new Scanner(System.in);\n            System.out.println(\"输入类名:(例如:java.util.Date)\");\n            name = in.next();\n        }\n\n        try {\n            Class c1 = Class.forName(name);\n            Class superc1 = c1.getSuperclass();\n            String modifiers = Modifier.toString(c1.getModifiers());\n            if (modifiers.length() > 0) {\n                System.out.print(modifiers + \"\");\n            }\n            System.out.print(\"class \" + name);\n            if (superc1 != null && superc1 != Object.class) {\n                System.out.print(\" extends\" + superc1.getName());\n            }\n            System.out.print(\"\\n{\\n\");\n            printConstructors(c1);\n            System.out.println();\n            printMethods(c1);\n            System.out.println();\n            printFields(c1);\n            System.out.println(\"}\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        System.exit(0);\n    }\n\n    public static void printConstructors(Class c1) {\n        Constructor[] constructors = c1.getDeclaredConstructors();\n        for (Constructor c : constructors) {\n            String name = c.getName();\n            System.out.print(\"\");\n            String modifers = Modifier.toString(c.getModifiers());\n            if (modifers.length() > 0) {\n                System.out.print(modifers + \" \");\n            }\n            System.out.print(name + \"(\");\n            Class[] paramTypes = c.getParameterTypes();\n            for (int j = 0; j < paramTypes.length; j++) {\n                if (j > 0) {\n                    System.out.print(\",\");\n                }\n                System.out.print(paramTypes[j].getName());\n            }\n            System.out.println(\");\");\n        }\n    }\n\n    public static void printMethods(Class c1) {\n        Method[] methods = c1.getDeclaredMethods();\n        for (Method m : methods) {\n            Class retType = m.getReturnType();\n            String name = m.getName();\n\n            System.out.print(\" \");\n            String modifiers = Modifier.toString(m.getModifiers());\n            if (modifiers.length() > 0) {\n                System.out.print(modifiers + \" \");\n            }\n            System.out.print(retType.getName() + \" \" + \"(\");\n            Class[] paramTypes = m.getParameterTypes();\n            for (int j = 0; j < paramTypes.length; j++) {\n                if (j > 0) {\n                    System.out.print(\",\");\n                }\n                System.out.print(paramTypes[j].getName());\n            }\n            System.out.println(\");\");\n        }\n    }\n\n    public static void printFields(Class c1) {\n        Field[] fields = c1.getDeclaredFields();\n        for (Field f : fields) {\n            Class type = f.getType();\n            String name = f.getName();\n            System.out.print(\" \");\n            String modifiers = Modifier.toString(f.getModifiers());\n            if (modifiers.length() > 0) {\n                System.out.print(modifiers + \" \");\n            }\n            System.out.println(type.getName() + \" \" + name + \";\");\n        }\n    }\n}\n```\n输出：\n\n```\n输入类名:(例如:java.util.Date)\njava.util.Date\npublicclass java.util.Date\n{\npublic java.util.Date(java.lang.String);\npublic java.util.Date(int,int,int,int,int,int);\npublic java.util.Date(int,int,int,int,int);\npublic java.util.Date();\npublic java.util.Date(long);\npublic java.util.Date(int,int,int);\n\n public boolean (java.lang.Object);\n public java.lang.String ();\n public int ();\n public java.lang.Object ();\n public int (java.util.Date);\n public volatile int (java.lang.Object);\n private void (java.io.ObjectInputStream);\n private void (java.io.ObjectOutputStream);\n private final sun.util.calendar.BaseCalendar$Date ();\n private final sun.util.calendar.BaseCalendar$Date (sun.util.calendar.BaseCalendar$Date);\n public static long (java.lang.String);\n public boolean (java.util.Date);\n public boolean (java.util.Date);\n public int ();\n public void (int);\n public int ();\n public void (int);\n public void (int);\n public int ();\n public int ();\n public void (int);\n public int ();\n public void (int);\n public int ();\n public void (int);\n private final long ();\n static final long (java.util.Date);\n private static final java.lang.StringBuilder (java.lang.StringBuilder,java.lang.String);\n public java.lang.String ();\n public java.lang.String ();\n public int ();\n private final sun.util.calendar.BaseCalendar$Date ();\n private static final sun.util.calendar.BaseCalendar (sun.util.calendar.BaseCalendar$Date);\n private static final sun.util.calendar.BaseCalendar (long);\n private static final sun.util.calendar.BaseCalendar (int);\n private static final synchronized sun.util.calendar.BaseCalendar ();\n public java.time.Instant ();\n public static long (int,int,int,int,int,int);\n public static java.util.Date (java.time.Instant);\n public int ();\n public void (long);\n public long ();\n\n private static final sun.util.calendar.BaseCalendar gcal;\n private static sun.util.calendar.BaseCalendar jcal;\n private transient long fastTime;\n private transient sun.util.calendar.BaseCalendar$Date cdate;\n private static int defaultCenturyStart;\n private static final long serialVersionUID;\n private static final [Ljava.lang.String; wtb;\n private static final [I ttb;\n}\n\nProcess finished with exit code 0\n```\n\n输入一个类（完整的类名），即可打印该类的略为完整信息。当然还有一些不知道的，可以查看API来完成。\n\n","source":"_posts/Java反射学习总结（三）.md","raw":"---\ntitle: Java反射学习总结（三）\ndate: 2017-02-18 21:14:58\ncategories: Java二三事\ntags: \n\t- 反射\n---\nClass对象表示所加载的类，取得Class对象后，我们就可以愉快的取得与类相关的信息了，就像包（package,package也是类名的一部分哦~），构造方法，方法，属性等信息，而每一个信息，也会有相应的类别形态，比如包对应的是 java.lang.Package，构造方法对应的是java.lang.reflect.Constructor，成员方法对应的是 java.lang.reflect.Method，属性对应的是 java.lang.reflect.Field等。\n<!--more-->\n先来个简单的例子吧，获取一下包名：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class ClassInfoDemo {\n    public static void main(String[] args) {\n        try {\n            Class c = Class.forName(args[0]);\n            Package p = c.getPackage();\n            System.out.println(p.getName());\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"没有指定类\");\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定类\");\n        }\n    }\n}\n\n```\n输出：\n\n```\njava ClassInfoDemo java.util.ArrayList\njava.util\n```\n用相应的方法，我们可以分别取得 Field、Constructor、Method等对象。\n\n\n下面是一个我之前写的可以获取某些类信息的一个demo：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.Scanner;\n\n/**\n * @author 李智\n * @date 2016/12/1\n */\npublic class ReflectTest {\n    public static void main(String[] args) {\n        String name;\n        if (args.length > 0) {\n            name = args[0];\n        } else {\n            Scanner in = new Scanner(System.in);\n            System.out.println(\"输入类名:(例如:java.util.Date)\");\n            name = in.next();\n        }\n\n        try {\n            Class c1 = Class.forName(name);\n            Class superc1 = c1.getSuperclass();\n            String modifiers = Modifier.toString(c1.getModifiers());\n            if (modifiers.length() > 0) {\n                System.out.print(modifiers + \"\");\n            }\n            System.out.print(\"class \" + name);\n            if (superc1 != null && superc1 != Object.class) {\n                System.out.print(\" extends\" + superc1.getName());\n            }\n            System.out.print(\"\\n{\\n\");\n            printConstructors(c1);\n            System.out.println();\n            printMethods(c1);\n            System.out.println();\n            printFields(c1);\n            System.out.println(\"}\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        System.exit(0);\n    }\n\n    public static void printConstructors(Class c1) {\n        Constructor[] constructors = c1.getDeclaredConstructors();\n        for (Constructor c : constructors) {\n            String name = c.getName();\n            System.out.print(\"\");\n            String modifers = Modifier.toString(c.getModifiers());\n            if (modifers.length() > 0) {\n                System.out.print(modifers + \" \");\n            }\n            System.out.print(name + \"(\");\n            Class[] paramTypes = c.getParameterTypes();\n            for (int j = 0; j < paramTypes.length; j++) {\n                if (j > 0) {\n                    System.out.print(\",\");\n                }\n                System.out.print(paramTypes[j].getName());\n            }\n            System.out.println(\");\");\n        }\n    }\n\n    public static void printMethods(Class c1) {\n        Method[] methods = c1.getDeclaredMethods();\n        for (Method m : methods) {\n            Class retType = m.getReturnType();\n            String name = m.getName();\n\n            System.out.print(\" \");\n            String modifiers = Modifier.toString(m.getModifiers());\n            if (modifiers.length() > 0) {\n                System.out.print(modifiers + \" \");\n            }\n            System.out.print(retType.getName() + \" \" + \"(\");\n            Class[] paramTypes = m.getParameterTypes();\n            for (int j = 0; j < paramTypes.length; j++) {\n                if (j > 0) {\n                    System.out.print(\",\");\n                }\n                System.out.print(paramTypes[j].getName());\n            }\n            System.out.println(\");\");\n        }\n    }\n\n    public static void printFields(Class c1) {\n        Field[] fields = c1.getDeclaredFields();\n        for (Field f : fields) {\n            Class type = f.getType();\n            String name = f.getName();\n            System.out.print(\" \");\n            String modifiers = Modifier.toString(f.getModifiers());\n            if (modifiers.length() > 0) {\n                System.out.print(modifiers + \" \");\n            }\n            System.out.println(type.getName() + \" \" + name + \";\");\n        }\n    }\n}\n```\n输出：\n\n```\n输入类名:(例如:java.util.Date)\njava.util.Date\npublicclass java.util.Date\n{\npublic java.util.Date(java.lang.String);\npublic java.util.Date(int,int,int,int,int,int);\npublic java.util.Date(int,int,int,int,int);\npublic java.util.Date();\npublic java.util.Date(long);\npublic java.util.Date(int,int,int);\n\n public boolean (java.lang.Object);\n public java.lang.String ();\n public int ();\n public java.lang.Object ();\n public int (java.util.Date);\n public volatile int (java.lang.Object);\n private void (java.io.ObjectInputStream);\n private void (java.io.ObjectOutputStream);\n private final sun.util.calendar.BaseCalendar$Date ();\n private final sun.util.calendar.BaseCalendar$Date (sun.util.calendar.BaseCalendar$Date);\n public static long (java.lang.String);\n public boolean (java.util.Date);\n public boolean (java.util.Date);\n public int ();\n public void (int);\n public int ();\n public void (int);\n public void (int);\n public int ();\n public int ();\n public void (int);\n public int ();\n public void (int);\n public int ();\n public void (int);\n private final long ();\n static final long (java.util.Date);\n private static final java.lang.StringBuilder (java.lang.StringBuilder,java.lang.String);\n public java.lang.String ();\n public java.lang.String ();\n public int ();\n private final sun.util.calendar.BaseCalendar$Date ();\n private static final sun.util.calendar.BaseCalendar (sun.util.calendar.BaseCalendar$Date);\n private static final sun.util.calendar.BaseCalendar (long);\n private static final sun.util.calendar.BaseCalendar (int);\n private static final synchronized sun.util.calendar.BaseCalendar ();\n public java.time.Instant ();\n public static long (int,int,int,int,int,int);\n public static java.util.Date (java.time.Instant);\n public int ();\n public void (long);\n public long ();\n\n private static final sun.util.calendar.BaseCalendar gcal;\n private static sun.util.calendar.BaseCalendar jcal;\n private transient long fastTime;\n private transient sun.util.calendar.BaseCalendar$Date cdate;\n private static int defaultCenturyStart;\n private static final long serialVersionUID;\n private static final [Ljava.lang.String; wtb;\n private static final [I ttb;\n}\n\nProcess finished with exit code 0\n```\n\n输入一个类（完整的类名），即可打印该类的略为完整信息。当然还有一些不知道的，可以查看API来完成。\n\n","slug":"Java反射学习总结（三）","published":1,"updated":"2017-02-18T13:15:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kep0010rhso4qwt1bdv","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>Class对象表示所加载的类，取得Class对象后，我们就可以愉快的取得与类相关的信息了，就像包（package,package也是类名的一部分哦~），构造方法，方法，属性等信息，而每一个信息，也会有相应的类别形态，比如包对应的是 java.lang.Package，构造方法对应的是java.lang.reflect.Constructor，成员方法对应的是 java.lang.reflect.Method，属性对应的是 java.lang.reflect.Field等。<br><a id=\"more\"></a><br>先来个简单的例子吧，获取一下包名：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ClassInfoDemo &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = <span class=\"keyword\">Class</span>.forName(args[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"keyword\">Package</span> p = c.getPackage();</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(p.getName());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"没有指定类\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到指定类\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">java</span> <span class=\"selector-tag\">ClassInfoDemo</span> <span class=\"selector-tag\">java</span><span class=\"selector-class\">.util</span><span class=\"selector-class\">.ArrayList</span></div><div class=\"line\"><span class=\"selector-tag\">java</span><span class=\"selector-class\">.util</span></div></pre></td></tr></table></figure>\n<p>用相应的方法，我们可以分别取得 Field、Constructor、Method等对象。</p>\n<p>下面是一个我之前写的可以获取某些类信息的一个demo：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\">import java.lang.reflect.Constructor;</div><div class=\"line\">import java.lang.reflect.Field;</div><div class=\"line\">import java.lang.reflect.Method;</div><div class=\"line\">import java.lang.reflect.Modifier;</div><div class=\"line\">import java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/1</div><div class=\"line\"> */</div><div class=\"line\">public <span class=\"keyword\">class</span> ReflectTest &#123;</div><div class=\"line\">    public static void main(String[] <span class=\"keyword\">args</span>) &#123;</div><div class=\"line\">        String name;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">args</span>.length &gt; 0) &#123;</div><div class=\"line\">            name = <span class=\"keyword\">args</span>[0];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Scanner <span class=\"keyword\">in</span> = new Scanner(System.<span class=\"keyword\">in</span>);</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"输入类名:(例如:java.util.Date)\"</span>);</div><div class=\"line\">            name = <span class=\"keyword\">in</span>.next();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> c1 = <span class=\"keyword\">Class</span>.forName(name);</div><div class=\"line\">            <span class=\"keyword\">Class</span> superc1 = c1.getSuperclass();</div><div class=\"line\">            String modifiers = Modifier.<span class=\"keyword\">toString</span>(c1.getModifiers());</div><div class=\"line\">            <span class=\"keyword\">if</span> (modifiers.<span class=\"built_in\">length</span>() &gt; 0) &#123;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(modifiers + <span class=\"string\">\"\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\"class \"</span> + name);</div><div class=\"line\">            <span class=\"keyword\">if</span> (superc1 != null &amp;&amp; superc1 != Object.<span class=\"keyword\">class</span>) &#123;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\" extends\"</span> + superc1.getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\"\\n&#123;\\n\"</span>);</div><div class=\"line\">            printConstructors(c1);</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println();</div><div class=\"line\">            printMethods(c1);</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println();</div><div class=\"line\">            printFields(c1);</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"&#125;\"</span>);</div><div class=\"line\">        &#125; catch (Exception <span class=\"keyword\">e</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">e</span>.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.<span class=\"keyword\">exit</span>(0);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void printConstructors(<span class=\"keyword\">Class</span> c1) &#123;</div><div class=\"line\">        Constructor[] constructors = c1.getDeclaredConstructors();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Constructor c : constructors) &#123;</div><div class=\"line\">            String name = c.getName();</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\"\"</span>);</div><div class=\"line\">            String modifers = Modifier.<span class=\"keyword\">toString</span>(c.getModifiers());</div><div class=\"line\">            <span class=\"keyword\">if</span> (modifers.<span class=\"built_in\">length</span>() &gt; 0) &#123;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(modifers + <span class=\"string\">\" \"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(name + <span class=\"string\">\"(\"</span>);</div><div class=\"line\">            <span class=\"keyword\">Class</span>[] paramTypes = c.getParameterTypes();</div><div class=\"line\">            <span class=\"keyword\">for</span> (int j = 0; j &lt; paramTypes.length; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (j &gt; 0) &#123;</div><div class=\"line\">                    System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\",\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(paramTypes[j].getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\");\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void printMethods(<span class=\"keyword\">Class</span> c1) &#123;</div><div class=\"line\">        Method[] methods = c1.getDeclaredMethods();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Method <span class=\"keyword\">m</span> : methods) &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> retType = <span class=\"keyword\">m</span>.getReturnType();</div><div class=\"line\">            String name = <span class=\"keyword\">m</span>.getName();</div><div class=\"line\"></div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\" \"</span>);</div><div class=\"line\">            String modifiers = Modifier.<span class=\"keyword\">toString</span>(<span class=\"keyword\">m</span>.getModifiers());</div><div class=\"line\">            <span class=\"keyword\">if</span> (modifiers.<span class=\"built_in\">length</span>() &gt; 0) &#123;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(modifiers + <span class=\"string\">\" \"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(retType.getName() + <span class=\"string\">\" \"</span> + <span class=\"string\">\"(\"</span>);</div><div class=\"line\">            <span class=\"keyword\">Class</span>[] paramTypes = <span class=\"keyword\">m</span>.getParameterTypes();</div><div class=\"line\">            <span class=\"keyword\">for</span> (int j = 0; j &lt; paramTypes.length; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (j &gt; 0) &#123;</div><div class=\"line\">                    System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\",\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(paramTypes[j].getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\");\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void printFields(<span class=\"keyword\">Class</span> c1) &#123;</div><div class=\"line\">        Field[] fields = c1.getDeclaredFields();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Field f : fields) &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> <span class=\"keyword\">type</span> = f.getType();</div><div class=\"line\">            String name = f.getName();</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\" \"</span>);</div><div class=\"line\">            String modifiers = Modifier.<span class=\"keyword\">toString</span>(f.getModifiers());</div><div class=\"line\">            <span class=\"keyword\">if</span> (modifiers.<span class=\"built_in\">length</span>() &gt; 0) &#123;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(modifiers + <span class=\"string\">\" \"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println(<span class=\"keyword\">type</span>.getName() + <span class=\"string\">\" \"</span> + name + <span class=\"string\">\";\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入类名:(例如:java.util.Date)</div><div class=\"line\">java.util.Date</div><div class=\"line\">publicclass java.util.Date</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span> java.util.Date(java.lang.<span class=\"keyword\">String</span>);</div><div class=\"line\"><span class=\"keyword\">public</span> java.util.Date(<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>);</div><div class=\"line\"><span class=\"keyword\">public</span> java.util.Date(<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>);</div><div class=\"line\"><span class=\"keyword\">public</span> java.util.Date();</div><div class=\"line\"><span class=\"keyword\">public</span> java.util.Date(<span class=\"keyword\">long</span>);</div><div class=\"line\"><span class=\"keyword\">public</span> java.util.Date(<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> (java.lang.<span class=\"keyword\">Object</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> java.lang.<span class=\"keyword\">String</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> java.lang.<span class=\"keyword\">Object</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> (java.util.Date);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"built_in\">int</span> (java.lang.<span class=\"keyword\">Object</span>);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> (java.io.ObjectInputStream);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> (java.io.ObjectOutputStream);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar$Date ();</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar$Date (sun.util.calendar.BaseCalendar$Date);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> (java.lang.<span class=\"keyword\">String</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> (java.util.Date);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> (java.util.Date);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ();</div><div class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> (java.util.Date);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.StringBuilder (java.lang.StringBuilder,java.lang.<span class=\"keyword\">String</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> java.lang.<span class=\"keyword\">String</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> java.lang.<span class=\"keyword\">String</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar$Date ();</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar (sun.util.calendar.BaseCalendar$Date);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar (<span class=\"keyword\">long</span>);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">synchronized</span> sun.util.calendar.BaseCalendar ();</div><div class=\"line\"> <span class=\"keyword\">public</span> java.time.Instant ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> (<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> java.util.Date (java.time.Instant);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"keyword\">long</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> ();</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar gcal;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> sun.util.calendar.BaseCalendar jcal;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">long</span> fastTime;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> sun.util.calendar.BaseCalendar$Date cdate;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> defaultCenturyStart;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> [Ljava.lang.<span class=\"keyword\">String</span>; wtb;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> [I ttb;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"built_in\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>输入一个类（完整的类名），即可打印该类的略为完整信息。当然还有一些不知道的，可以查看API来完成。</p>\n","excerpt":"<p>Class对象表示所加载的类，取得Class对象后，我们就可以愉快的取得与类相关的信息了，就像包（package,package也是类名的一部分哦~），构造方法，方法，属性等信息，而每一个信息，也会有相应的类别形态，比如包对应的是 java.lang.Package，构造方法对应的是java.lang.reflect.Constructor，成员方法对应的是 java.lang.reflect.Method，属性对应的是 java.lang.reflect.Field等。<br></p>","more":"<br>先来个简单的例子吧，获取一下包名：<p></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ClassInfoDemo &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = <span class=\"keyword\">Class</span>.forName(args[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"keyword\">Package</span> p = c.getPackage();</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(p.getName());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"没有指定类\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到指定类\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">java</span> <span class=\"selector-tag\">ClassInfoDemo</span> <span class=\"selector-tag\">java</span><span class=\"selector-class\">.util</span><span class=\"selector-class\">.ArrayList</span></div><div class=\"line\"><span class=\"selector-tag\">java</span><span class=\"selector-class\">.util</span></div></pre></td></tr></table></figure>\n<p>用相应的方法，我们可以分别取得 Field、Constructor、Method等对象。</p>\n<p>下面是一个我之前写的可以获取某些类信息的一个demo：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\">import java.lang.reflect.Constructor;</div><div class=\"line\">import java.lang.reflect.Field;</div><div class=\"line\">import java.lang.reflect.Method;</div><div class=\"line\">import java.lang.reflect.Modifier;</div><div class=\"line\">import java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/1</div><div class=\"line\"> */</div><div class=\"line\">public <span class=\"keyword\">class</span> ReflectTest &#123;</div><div class=\"line\">    public static void main(String[] <span class=\"keyword\">args</span>) &#123;</div><div class=\"line\">        String name;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">args</span>.length &gt; 0) &#123;</div><div class=\"line\">            name = <span class=\"keyword\">args</span>[0];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Scanner <span class=\"keyword\">in</span> = new Scanner(System.<span class=\"keyword\">in</span>);</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"输入类名:(例如:java.util.Date)\"</span>);</div><div class=\"line\">            name = <span class=\"keyword\">in</span>.next();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> c1 = <span class=\"keyword\">Class</span>.forName(name);</div><div class=\"line\">            <span class=\"keyword\">Class</span> superc1 = c1.getSuperclass();</div><div class=\"line\">            String modifiers = Modifier.<span class=\"keyword\">toString</span>(c1.getModifiers());</div><div class=\"line\">            <span class=\"keyword\">if</span> (modifiers.<span class=\"built_in\">length</span>() &gt; 0) &#123;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(modifiers + <span class=\"string\">\"\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\"class \"</span> + name);</div><div class=\"line\">            <span class=\"keyword\">if</span> (superc1 != null &amp;&amp; superc1 != Object.<span class=\"keyword\">class</span>) &#123;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\" extends\"</span> + superc1.getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\"\\n&#123;\\n\"</span>);</div><div class=\"line\">            printConstructors(c1);</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println();</div><div class=\"line\">            printMethods(c1);</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println();</div><div class=\"line\">            printFields(c1);</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"&#125;\"</span>);</div><div class=\"line\">        &#125; catch (Exception <span class=\"keyword\">e</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">e</span>.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.<span class=\"keyword\">exit</span>(0);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void printConstructors(<span class=\"keyword\">Class</span> c1) &#123;</div><div class=\"line\">        Constructor[] constructors = c1.getDeclaredConstructors();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Constructor c : constructors) &#123;</div><div class=\"line\">            String name = c.getName();</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\"\"</span>);</div><div class=\"line\">            String modifers = Modifier.<span class=\"keyword\">toString</span>(c.getModifiers());</div><div class=\"line\">            <span class=\"keyword\">if</span> (modifers.<span class=\"built_in\">length</span>() &gt; 0) &#123;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(modifers + <span class=\"string\">\" \"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(name + <span class=\"string\">\"(\"</span>);</div><div class=\"line\">            <span class=\"keyword\">Class</span>[] paramTypes = c.getParameterTypes();</div><div class=\"line\">            <span class=\"keyword\">for</span> (int j = 0; j &lt; paramTypes.length; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (j &gt; 0) &#123;</div><div class=\"line\">                    System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\",\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(paramTypes[j].getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\");\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void printMethods(<span class=\"keyword\">Class</span> c1) &#123;</div><div class=\"line\">        Method[] methods = c1.getDeclaredMethods();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Method <span class=\"keyword\">m</span> : methods) &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> retType = <span class=\"keyword\">m</span>.getReturnType();</div><div class=\"line\">            String name = <span class=\"keyword\">m</span>.getName();</div><div class=\"line\"></div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\" \"</span>);</div><div class=\"line\">            String modifiers = Modifier.<span class=\"keyword\">toString</span>(<span class=\"keyword\">m</span>.getModifiers());</div><div class=\"line\">            <span class=\"keyword\">if</span> (modifiers.<span class=\"built_in\">length</span>() &gt; 0) &#123;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(modifiers + <span class=\"string\">\" \"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(retType.getName() + <span class=\"string\">\" \"</span> + <span class=\"string\">\"(\"</span>);</div><div class=\"line\">            <span class=\"keyword\">Class</span>[] paramTypes = <span class=\"keyword\">m</span>.getParameterTypes();</div><div class=\"line\">            <span class=\"keyword\">for</span> (int j = 0; j &lt; paramTypes.length; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (j &gt; 0) &#123;</div><div class=\"line\">                    System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\",\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(paramTypes[j].getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\");\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void printFields(<span class=\"keyword\">Class</span> c1) &#123;</div><div class=\"line\">        Field[] fields = c1.getDeclaredFields();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Field f : fields) &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> <span class=\"keyword\">type</span> = f.getType();</div><div class=\"line\">            String name = f.getName();</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(<span class=\"string\">\" \"</span>);</div><div class=\"line\">            String modifiers = Modifier.<span class=\"keyword\">toString</span>(f.getModifiers());</div><div class=\"line\">            <span class=\"keyword\">if</span> (modifiers.<span class=\"built_in\">length</span>() &gt; 0) &#123;</div><div class=\"line\">                System.<span class=\"keyword\">out</span>.<span class=\"keyword\">print</span>(modifiers + <span class=\"string\">\" \"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.<span class=\"keyword\">out</span>.println(<span class=\"keyword\">type</span>.getName() + <span class=\"string\">\" \"</span> + name + <span class=\"string\">\";\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入类名:(例如:java.util.Date)</div><div class=\"line\">java.util.Date</div><div class=\"line\">publicclass java.util.Date</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span> java.util.Date(java.lang.<span class=\"keyword\">String</span>);</div><div class=\"line\"><span class=\"keyword\">public</span> java.util.Date(<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>);</div><div class=\"line\"><span class=\"keyword\">public</span> java.util.Date(<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>);</div><div class=\"line\"><span class=\"keyword\">public</span> java.util.Date();</div><div class=\"line\"><span class=\"keyword\">public</span> java.util.Date(<span class=\"keyword\">long</span>);</div><div class=\"line\"><span class=\"keyword\">public</span> java.util.Date(<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> (java.lang.<span class=\"keyword\">Object</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> java.lang.<span class=\"keyword\">String</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> java.lang.<span class=\"keyword\">Object</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> (java.util.Date);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"built_in\">int</span> (java.lang.<span class=\"keyword\">Object</span>);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> (java.io.ObjectInputStream);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> (java.io.ObjectOutputStream);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar$Date ();</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar$Date (sun.util.calendar.BaseCalendar$Date);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> (java.lang.<span class=\"keyword\">String</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> (java.util.Date);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> (java.util.Date);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ();</div><div class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> (java.util.Date);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.StringBuilder (java.lang.StringBuilder,java.lang.<span class=\"keyword\">String</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> java.lang.<span class=\"keyword\">String</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> java.lang.<span class=\"keyword\">String</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar$Date ();</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar (sun.util.calendar.BaseCalendar$Date);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar (<span class=\"keyword\">long</span>);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar (<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">synchronized</span> sun.util.calendar.BaseCalendar ();</div><div class=\"line\"> <span class=\"keyword\">public</span> java.time.Instant ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> (<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> java.util.Date (java.time.Instant);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ();</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> (<span class=\"keyword\">long</span>);</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> ();</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.util.calendar.BaseCalendar gcal;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> sun.util.calendar.BaseCalendar jcal;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">long</span> fastTime;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> sun.util.calendar.BaseCalendar$Date cdate;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> defaultCenturyStart;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> [Ljava.lang.<span class=\"keyword\">String</span>; wtb;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> [I ttb;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"built_in\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>输入一个类（完整的类名），即可打印该类的略为完整信息。当然还有一些不知道的，可以查看API来完成。</p>"},{"title":"Java反射学习总结（二）","date":"2017-02-18T13:14:04.000Z","_content":"**使用 Class.forName() 加载类**\n\n在一些应用中，我们无法事先知道使用者将会加载什么类，而必须让使用者指定类名类加载类，我们就可以用Class的静态forName()方法来实现动态加载类，如下：\n<!--more-->\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class ForNameDemo {\n    public static void main(String[] args) {\n        try {\n            Class c = Class.forName(args[0]);\n            System.out.println(\"类名：\" +\n                    c.getName());\n            System.out.println(\"是否为接口：\" +\n                    c.isInterface());\n            System.out.println(\"是否为基本类型：\" +\n                    c.isPrimitive());\n            System.out.println(\"是否为数组：\" + c.isArray());\n            System.out.println(\"父类名：\" +\n                    c.getSuperclass().getName());\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"没有指定的类名\");\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定类\");\n        }\n    }\n}\n\n```\n\n输出:\n\n```\njava ForNameDemo java.util.String\n类名：java.util.Scanner\n是否为接口：false\n是否为基本类型：false\n是否为数组：false\n父类名：java.lang.Object\n```\nClass的静态方法forName()方法有两个版本，上面所示的是指定类名版本，还一个版本可以让我们指定类名，加载时是否执行静态代码块，指定类的加载器（Class loader）:\n\n```\nstatic Class forName(String name, boolean initialize, ClassLoader loader)\n\n```\n<a href=\"http://justdoitlee.com/javafan-she-xue-xi-bi-ji/\" target=\"_blank\">\n上一篇</a>写到过，假设在加载类的时候，如果类中有定义静态代码块则会执行它，我们可以使用forName的第二个版本，将initialize设为false，如果在加载类时并不会马上执行静态代码块的代码，而会在使用类实例对象时才执行静态代码块，我们可以做一下测试：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class TestClass2 {\n        static {\n            System.out.println(\"[执行静态代码块]\");\n        }\n}\n\n```\n在这里我们只定义了静态代码块显示一段信息，来观察静态代码块何时被执行。先用第一个版本来测试：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class ForNameDemoV1 {\n    public static void main(String[] args) {\n        try {\n            System.out.println(\"加载TestClass2\");\n            Class c = Class.forName(\"TestClass2\");\n\n            System.out.println(\"TestClass2声明\");\n            TestClass2 test = null;\n\n            System.out.println(\"TestClass2实例对象\");\n            test = new TestClass2();\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定的类\");\n        }\n    }\n}\n\n```\n输出：\n\n```\n加载TestClass2\n[执行静态代码块]\nTestClass2声明\nTestClass2实例对象\n\nProcess finished with exit code 0\n```\n可以从结果看出，第一个版本的forName()方法在加载类之后，会马上执行静态代码块，再看看第二种结果怎么样：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class ForNameDemoV2 {\n    public static void main(String[] args) {\n        try {\n            System.out.println(\"加载TestClass2\");\n            Class c = Class.forName(\n                    \"CoreJava.day_2.TestClass2\",\n                    false, // 加载类时不执行静态代码块代码\n                    Thread.currentThread().getContextClassLoader());\n\n            System.out.println(\"TestClass2声明\");\n            TestClass2 test = null;\n\n            System.out.println(\"TestClass2实例对象\");\n            test = new TestClass2();\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定的类\");\n        }\n    }\n}\n\n```\n输出：\n```\n加载TestClass2\nTestClass2声明\nTestClass2实例对象\n[执行静态代码块]\n\nProcess finished with exit code 0\n```\n由于在第二个版本的forName()方法中，把initialize设为了false，所以加载类时并不会马上执行静态代码块，而会在类实例对象时才去执行静态代码块代码，第二个版本的forName()方法需要一个类加载器（Class loader）。","source":"_posts/Java反射学习总结（二）.md","raw":"---\ntitle: Java反射学习总结（二）\ndate: 2017-02-18 21:14:04\ncategories: Java二三事\ntags: \n\t- 反射\n---\n**使用 Class.forName() 加载类**\n\n在一些应用中，我们无法事先知道使用者将会加载什么类，而必须让使用者指定类名类加载类，我们就可以用Class的静态forName()方法来实现动态加载类，如下：\n<!--more-->\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class ForNameDemo {\n    public static void main(String[] args) {\n        try {\n            Class c = Class.forName(args[0]);\n            System.out.println(\"类名：\" +\n                    c.getName());\n            System.out.println(\"是否为接口：\" +\n                    c.isInterface());\n            System.out.println(\"是否为基本类型：\" +\n                    c.isPrimitive());\n            System.out.println(\"是否为数组：\" + c.isArray());\n            System.out.println(\"父类名：\" +\n                    c.getSuperclass().getName());\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"没有指定的类名\");\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定类\");\n        }\n    }\n}\n\n```\n\n输出:\n\n```\njava ForNameDemo java.util.String\n类名：java.util.Scanner\n是否为接口：false\n是否为基本类型：false\n是否为数组：false\n父类名：java.lang.Object\n```\nClass的静态方法forName()方法有两个版本，上面所示的是指定类名版本，还一个版本可以让我们指定类名，加载时是否执行静态代码块，指定类的加载器（Class loader）:\n\n```\nstatic Class forName(String name, boolean initialize, ClassLoader loader)\n\n```\n<a href=\"http://justdoitlee.com/javafan-she-xue-xi-bi-ji/\" target=\"_blank\">\n上一篇</a>写到过，假设在加载类的时候，如果类中有定义静态代码块则会执行它，我们可以使用forName的第二个版本，将initialize设为false，如果在加载类时并不会马上执行静态代码块的代码，而会在使用类实例对象时才执行静态代码块，我们可以做一下测试：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class TestClass2 {\n        static {\n            System.out.println(\"[执行静态代码块]\");\n        }\n}\n\n```\n在这里我们只定义了静态代码块显示一段信息，来观察静态代码块何时被执行。先用第一个版本来测试：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class ForNameDemoV1 {\n    public static void main(String[] args) {\n        try {\n            System.out.println(\"加载TestClass2\");\n            Class c = Class.forName(\"TestClass2\");\n\n            System.out.println(\"TestClass2声明\");\n            TestClass2 test = null;\n\n            System.out.println(\"TestClass2实例对象\");\n            test = new TestClass2();\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定的类\");\n        }\n    }\n}\n\n```\n输出：\n\n```\n加载TestClass2\n[执行静态代码块]\nTestClass2声明\nTestClass2实例对象\n\nProcess finished with exit code 0\n```\n可以从结果看出，第一个版本的forName()方法在加载类之后，会马上执行静态代码块，再看看第二种结果怎么样：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class ForNameDemoV2 {\n    public static void main(String[] args) {\n        try {\n            System.out.println(\"加载TestClass2\");\n            Class c = Class.forName(\n                    \"CoreJava.day_2.TestClass2\",\n                    false, // 加载类时不执行静态代码块代码\n                    Thread.currentThread().getContextClassLoader());\n\n            System.out.println(\"TestClass2声明\");\n            TestClass2 test = null;\n\n            System.out.println(\"TestClass2实例对象\");\n            test = new TestClass2();\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定的类\");\n        }\n    }\n}\n\n```\n输出：\n```\n加载TestClass2\nTestClass2声明\nTestClass2实例对象\n[执行静态代码块]\n\nProcess finished with exit code 0\n```\n由于在第二个版本的forName()方法中，把initialize设为了false，所以加载类时并不会马上执行静态代码块，而会在类实例对象时才去执行静态代码块代码，第二个版本的forName()方法需要一个类加载器（Class loader）。","slug":"Java反射学习总结（二）","published":1,"updated":"2017-02-18T13:14:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3keq0012rhsohh3vrvpu","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p><strong>使用 Class.forName() 加载类</strong></p>\n<p>在一些应用中，我们无法事先知道使用者将会加载什么类，而必须让使用者指定类名类加载类，我们就可以用Class的静态forName()方法来实现动态加载类，如下：<br><a id=\"more\"></a><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package <span class=\"type\">CoreJava</span>.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForNameDemo</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"type\">String</span>[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"type\">Class</span> <span class=\"built_in\">c</span> = <span class=\"type\">Class</span>.forName(args[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"类名：\"</span> +</div><div class=\"line\">                    <span class=\"built_in\">c</span>.getName());</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"是否为接口：\"</span> +</div><div class=\"line\">                    <span class=\"built_in\">c</span>.isInterface());</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"是否为基本类型：\"</span> +</div><div class=\"line\">                    <span class=\"built_in\">c</span>.isPrimitive());</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"是否为数组：\"</span> + <span class=\"built_in\">c</span>.isArray());</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"父类名：\"</span> +</div><div class=\"line\">                    <span class=\"built_in\">c</span>.getSuperclass().getName());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">ArrayIndexOutOfBoundsException</span> e) &#123;</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"没有指定的类名\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">ClassNotFoundException</span> e) &#123;</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"找不到指定类\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">java ForNameDemo java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.String</span></div><div class=\"line\">类名：java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.Scanner</span></div><div class=\"line\">是否为接口：false</div><div class=\"line\">是否为基本类型：false</div><div class=\"line\">是否为数组：false</div><div class=\"line\">父类名：java<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.Object</span></div></pre></td></tr></table></figure>\n<p>Class的静态方法forName()方法有两个版本，上面所示的是指定类名版本，还一个版本可以让我们指定类名，加载时是否执行静态代码块，指定类的加载器（Class loader）:</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">Class</span> forName(<span class=\"keyword\">String</span> <span class=\"keyword\">name</span>, boolean initialize, ClassLoader loader)</div></pre></td></tr></table></figure>\n<p><a href=\"http://justdoitlee.com/javafan-she-xue-xi-bi-ji/\" target=\"_blank\"><br>上一篇</a>写到过，假设在加载类的时候，如果类中有定义静态代码块则会执行它，我们可以使用forName的第二个版本，将initialize设为false，如果在加载类时并不会马上执行静态代码块的代码，而会在使用类实例对象时才执行静态代码块，我们可以做一下测试：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass2</span> &#123;</span></div><div class=\"line\">        <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"[执行静态代码块]\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里我们只定义了静态代码块显示一段信息，来观察静态代码块何时被执行。先用第一个版本来测试：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ForNameDemoV1 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"加载TestClass2\"</span>);</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = <span class=\"keyword\">Class</span>.forName(<span class=\"string\">\"TestClass2\"</span>);</div><div class=\"line\"></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"TestClass2声明\"</span>);</div><div class=\"line\">            TestClass2 test = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"TestClass2实例对象\"</span>);</div><div class=\"line\">            test = <span class=\"keyword\">new</span> TestClass2();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到指定的类\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">加载TestClass2</div><div class=\"line\">[执行静态代码块]</div><div class=\"line\">TestClass2声明</div><div class=\"line\">TestClass2实例对象</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>可以从结果看出，第一个版本的forName()方法在加载类之后，会马上执行静态代码块，再看看第二种结果怎么样：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ForNameDemoV2 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"加载TestClass2\"</span>);</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = <span class=\"keyword\">Class</span>.forName(</div><div class=\"line\">                    <span class=\"string\">\"CoreJava.day_2.TestClass2\"</span>,</div><div class=\"line\">                    <span class=\"keyword\">false</span>, <span class=\"comment\">// 加载类时不执行静态代码块代码</span></div><div class=\"line\">                    Thread.currentThread().getContextClassLoader());</div><div class=\"line\"></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"TestClass2声明\"</span>);</div><div class=\"line\">            TestClass2 test = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"TestClass2实例对象\"</span>);</div><div class=\"line\">            test = <span class=\"keyword\">new</span> TestClass2();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到指定的类\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">加载TestClass2</div><div class=\"line\">TestClass2声明</div><div class=\"line\">TestClass2实例对象</div><div class=\"line\">[执行静态代码块]</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p>由于在第二个版本的forName()方法中，把initialize设为了false，所以加载类时并不会马上执行静态代码块，而会在类实例对象时才去执行静态代码块代码，第二个版本的forName()方法需要一个类加载器（Class loader）。</p>\n","excerpt":"<p><strong>使用 Class.forName() 加载类</strong></p>\n<p>在一些应用中，我们无法事先知道使用者将会加载什么类，而必须让使用者指定类名类加载类，我们就可以用Class的静态forName()方法来实现动态加载类，如下：<br></p>","more":"<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package <span class=\"type\">CoreJava</span>.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForNameDemo</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"type\">String</span>[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"type\">Class</span> <span class=\"built_in\">c</span> = <span class=\"type\">Class</span>.forName(args[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"类名：\"</span> +</div><div class=\"line\">                    <span class=\"built_in\">c</span>.getName());</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"是否为接口：\"</span> +</div><div class=\"line\">                    <span class=\"built_in\">c</span>.isInterface());</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"是否为基本类型：\"</span> +</div><div class=\"line\">                    <span class=\"built_in\">c</span>.isPrimitive());</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"是否为数组：\"</span> + <span class=\"built_in\">c</span>.isArray());</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"父类名：\"</span> +</div><div class=\"line\">                    <span class=\"built_in\">c</span>.getSuperclass().getName());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">ArrayIndexOutOfBoundsException</span> e) &#123;</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"没有指定的类名\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">ClassNotFoundException</span> e) &#123;</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"找不到指定类\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p>\n<p>输出:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">java ForNameDemo java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.String</span></div><div class=\"line\">类名：java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.Scanner</span></div><div class=\"line\">是否为接口：false</div><div class=\"line\">是否为基本类型：false</div><div class=\"line\">是否为数组：false</div><div class=\"line\">父类名：java<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.Object</span></div></pre></td></tr></table></figure>\n<p>Class的静态方法forName()方法有两个版本，上面所示的是指定类名版本，还一个版本可以让我们指定类名，加载时是否执行静态代码块，指定类的加载器（Class loader）:</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">Class</span> forName(<span class=\"keyword\">String</span> <span class=\"keyword\">name</span>, boolean initialize, ClassLoader loader)</div></pre></td></tr></table></figure>\n<p><a href=\"http://justdoitlee.com/javafan-she-xue-xi-bi-ji/\" target=\"_blank\"><br>上一篇</a>写到过，假设在加载类的时候，如果类中有定义静态代码块则会执行它，我们可以使用forName的第二个版本，将initialize设为false，如果在加载类时并不会马上执行静态代码块的代码，而会在使用类实例对象时才执行静态代码块，我们可以做一下测试：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass2</span> &#123;</span></div><div class=\"line\">        <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"[执行静态代码块]\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里我们只定义了静态代码块显示一段信息，来观察静态代码块何时被执行。先用第一个版本来测试：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ForNameDemoV1 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"加载TestClass2\"</span>);</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = <span class=\"keyword\">Class</span>.forName(<span class=\"string\">\"TestClass2\"</span>);</div><div class=\"line\"></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"TestClass2声明\"</span>);</div><div class=\"line\">            TestClass2 test = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"TestClass2实例对象\"</span>);</div><div class=\"line\">            test = <span class=\"keyword\">new</span> TestClass2();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到指定的类\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">加载TestClass2</div><div class=\"line\">[执行静态代码块]</div><div class=\"line\">TestClass2声明</div><div class=\"line\">TestClass2实例对象</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>可以从结果看出，第一个版本的forName()方法在加载类之后，会马上执行静态代码块，再看看第二种结果怎么样：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ForNameDemoV2 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"加载TestClass2\"</span>);</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = <span class=\"keyword\">Class</span>.forName(</div><div class=\"line\">                    <span class=\"string\">\"CoreJava.day_2.TestClass2\"</span>,</div><div class=\"line\">                    <span class=\"keyword\">false</span>, <span class=\"comment\">// 加载类时不执行静态代码块代码</span></div><div class=\"line\">                    Thread.currentThread().getContextClassLoader());</div><div class=\"line\"></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"TestClass2声明\"</span>);</div><div class=\"line\">            TestClass2 test = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"TestClass2实例对象\"</span>);</div><div class=\"line\">            test = <span class=\"keyword\">new</span> TestClass2();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到指定的类\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">加载TestClass2</div><div class=\"line\">TestClass2声明</div><div class=\"line\">TestClass2实例对象</div><div class=\"line\">[执行静态代码块]</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p>由于在第二个版本的forName()方法中，把initialize设为了false，所以加载类时并不会马上执行静态代码块，而会在类实例对象时才去执行静态代码块代码，第二个版本的forName()方法需要一个类加载器（Class loader）。</p>"},{"title":"Java基于zxing生成二维码demo","date":"2017-03-23T11:43:10.000Z","_content":"QR码属于矩阵式二维码中的一个种类，由DENSO(日本电装)公司开发，由JIS和ISO将其标准化。QR码的样子其实在很多场合已经能够被看到了，我这还是贴个图展示一下：\n\n<img src=\"http://img.blog.csdn.net/20170323193748791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWVsb2RfYmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" height=\"300\" width=\"300\" />\n<!--more-->\n\n这个图如果被正确解码，应该看到百度。\n\n具体的也不说什么了，百度一大把，直接上源码~\n\n```\npackage com.lincoln.Untils;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.EncodeHintType;\nimport com.google.zxing.MultiFormatWriter;\nimport com.google.zxing.common.BitMatrix;\n\nimport javax.imageio.ImageIO;\nimport java.io.File;\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.awt.image.BufferedImage;\nimport java.util.Hashtable;\n\npublic class QRUtil {\n\n    private static final int BLACK = 0xFF000000;\n    private static final int WHITE = 0xFFFFFFFF;\n\n    /**\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n        String text = \"http://www.baidu.com\";\n        int width = 300;\n        int height = 300;\n        //二维码的图片格式\n        String format = \"gif\";\n        Hashtable hints = new Hashtable();\n        //内容所使用编码\n        hints.put(EncodeHintType.CHARACTER_SET, \"utf-8\");\n        BitMatrix bitMatrix = new MultiFormatWriter().encode(text,\n                BarcodeFormat.QR_CODE, width, height, hints);\n        //生成二维码\n        File outputFile = new File(\"/Users/lizhi/Downloads\" + File.separator + \"new.gif\");\n        QRUtil.writeToFile(bitMatrix, format, outputFile);\n    }\n\n    private QRUtil() {\n    }\n\n\n    public static BufferedImage toBufferedImage(BitMatrix matrix) {\n        int width = matrix.getWidth();\n        int height = matrix.getHeight();\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        for (int x = 0; x < width; x++) {\n            for (int y = 0; y < height; y++) {\n                image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);\n            }\n        }\n        return image;\n    }\n\n\n    public static void writeToFile(BitMatrix matrix, String format, File file)\n            throws IOException {\n        BufferedImage image = toBufferedImage(matrix);\n        if (!ImageIO.write(image, format, file)) {\n            throw new IOException(\"Could not write an image of format \" + format + \" to \" + file);\n        }\n    }\n\n\n    public static void writeToStream(BitMatrix matrix, String format, OutputStream stream)\n            throws IOException {\n        BufferedImage image = toBufferedImage(matrix);\n        if (!ImageIO.write(image, format, stream)) {\n            throw new IOException(\"Could not write an image of format \" + format);\n        }\n    }\n}\n```\n\n恩，就这么简单。\n","source":"_posts/Java基于zxing生成二维码demo.md","raw":"---\ntitle: Java基于zxing生成二维码demo\ndate: 2017-03-23 19:43:10\ncategories: Java二三事\ntags:\n\t- Java\n\t- 二维码\n---\nQR码属于矩阵式二维码中的一个种类，由DENSO(日本电装)公司开发，由JIS和ISO将其标准化。QR码的样子其实在很多场合已经能够被看到了，我这还是贴个图展示一下：\n\n<img src=\"http://img.blog.csdn.net/20170323193748791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWVsb2RfYmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" height=\"300\" width=\"300\" />\n<!--more-->\n\n这个图如果被正确解码，应该看到百度。\n\n具体的也不说什么了，百度一大把，直接上源码~\n\n```\npackage com.lincoln.Untils;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.EncodeHintType;\nimport com.google.zxing.MultiFormatWriter;\nimport com.google.zxing.common.BitMatrix;\n\nimport javax.imageio.ImageIO;\nimport java.io.File;\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.awt.image.BufferedImage;\nimport java.util.Hashtable;\n\npublic class QRUtil {\n\n    private static final int BLACK = 0xFF000000;\n    private static final int WHITE = 0xFFFFFFFF;\n\n    /**\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n        String text = \"http://www.baidu.com\";\n        int width = 300;\n        int height = 300;\n        //二维码的图片格式\n        String format = \"gif\";\n        Hashtable hints = new Hashtable();\n        //内容所使用编码\n        hints.put(EncodeHintType.CHARACTER_SET, \"utf-8\");\n        BitMatrix bitMatrix = new MultiFormatWriter().encode(text,\n                BarcodeFormat.QR_CODE, width, height, hints);\n        //生成二维码\n        File outputFile = new File(\"/Users/lizhi/Downloads\" + File.separator + \"new.gif\");\n        QRUtil.writeToFile(bitMatrix, format, outputFile);\n    }\n\n    private QRUtil() {\n    }\n\n\n    public static BufferedImage toBufferedImage(BitMatrix matrix) {\n        int width = matrix.getWidth();\n        int height = matrix.getHeight();\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        for (int x = 0; x < width; x++) {\n            for (int y = 0; y < height; y++) {\n                image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);\n            }\n        }\n        return image;\n    }\n\n\n    public static void writeToFile(BitMatrix matrix, String format, File file)\n            throws IOException {\n        BufferedImage image = toBufferedImage(matrix);\n        if (!ImageIO.write(image, format, file)) {\n            throw new IOException(\"Could not write an image of format \" + format + \" to \" + file);\n        }\n    }\n\n\n    public static void writeToStream(BitMatrix matrix, String format, OutputStream stream)\n            throws IOException {\n        BufferedImage image = toBufferedImage(matrix);\n        if (!ImageIO.write(image, format, stream)) {\n            throw new IOException(\"Could not write an image of format \" + format);\n        }\n    }\n}\n```\n\n恩，就这么简单。\n","slug":"Java基于zxing生成二维码demo","published":1,"updated":"2017-03-23T11:44:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kev0017rhsouh07p1ly","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>QR码属于矩阵式二维码中的一个种类，由DENSO(日本电装)公司开发，由JIS和ISO将其标准化。QR码的样子其实在很多场合已经能够被看到了，我这还是贴个图展示一下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170323193748791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWVsb2RfYmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" height=\"300\" width=\"300\"><br><a id=\"more\"></a></p>\n<p>这个图如果被正确解码，应该看到百度。</p>\n<p>具体的也不说什么了，百度一大把，直接上源码~</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.lincoln.Untils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.BarcodeFormat;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.EncodeHintType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.MultiFormatWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.common.BitMatrix;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.<span class=\"built_in\">File</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.<span class=\"built_in\">image</span>.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> QRUtil &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> final <span class=\"keyword\">int</span> BLACK = <span class=\"number\">0xFF000000</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> final <span class=\"keyword\">int</span> WHITE = <span class=\"number\">0xFFFFFFFF</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * @param args</div><div class=\"line\">     * @throws Exception</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) throws Exception &#123;</div><div class=\"line\">        <span class=\"keyword\">String</span> <span class=\"built_in\">text</span> = <span class=\"string\">\"http://www.baidu.com\"</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">width</span> = <span class=\"number\">300</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">height</span> = <span class=\"number\">300</span>;</div><div class=\"line\">        <span class=\"comment\">//二维码的图片格式</span></div><div class=\"line\">        <span class=\"keyword\">String</span> format = <span class=\"string\">\"gif\"</span>;</div><div class=\"line\">        Hashtable hints = <span class=\"keyword\">new</span> Hashtable();</div><div class=\"line\">        <span class=\"comment\">//内容所使用编码</span></div><div class=\"line\">        hints.<span class=\"built_in\">put</span>(EncodeHintType.CHARACTER_SET, <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">        BitMatrix bitMatrix = <span class=\"keyword\">new</span> MultiFormatWriter().encode(<span class=\"built_in\">text</span>,</div><div class=\"line\">                BarcodeFormat.QR_CODE, <span class=\"built_in\">width</span>, <span class=\"built_in\">height</span>, hints);</div><div class=\"line\">        <span class=\"comment\">//生成二维码</span></div><div class=\"line\">        <span class=\"built_in\">File</span> outputFile = <span class=\"keyword\">new</span> <span class=\"built_in\">File</span>(<span class=\"string\">\"/Users/lizhi/Downloads\"</span> + <span class=\"built_in\">File</span>.separator + <span class=\"string\">\"new.gif\"</span>);</div><div class=\"line\">        QRUtil.writeToFile(bitMatrix, format, outputFile);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> QRUtil() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage toBufferedImage(BitMatrix matrix) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">width</span> = matrix.getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">height</span> = matrix.getHeight();</div><div class=\"line\">        BufferedImage <span class=\"built_in\">image</span> = <span class=\"keyword\">new</span> BufferedImage(<span class=\"built_in\">width</span>, <span class=\"built_in\">height</span>, BufferedImage.TYPE_INT_RGB);</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"built_in\">width</span>; x++) &#123;</div><div class=\"line\">            <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; <span class=\"built_in\">height</span>; y++) &#123;</div><div class=\"line\">                <span class=\"built_in\">image</span>.setRGB(x, y, matrix.<span class=\"built_in\">get</span>(x, y) ? BLACK : WHITE);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">return</span> <span class=\"built_in\">image</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> writeToFile(BitMatrix matrix, <span class=\"keyword\">String</span> format, <span class=\"built_in\">File</span> file)</div><div class=\"line\">            throws IOException &#123;</div><div class=\"line\">        BufferedImage <span class=\"built_in\">image</span> = toBufferedImage(matrix);</div><div class=\"line\">        <span class=\"built_in\">if</span> (!ImageIO.<span class=\"built_in\">write</span>(<span class=\"built_in\">image</span>, format, file)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Could not write an image of format \"</span> + format + <span class=\"string\">\" to \"</span> + file);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> writeToStream(BitMatrix matrix, <span class=\"keyword\">String</span> format, OutputStream stream)</div><div class=\"line\">            throws IOException &#123;</div><div class=\"line\">        BufferedImage <span class=\"built_in\">image</span> = toBufferedImage(matrix);</div><div class=\"line\">        <span class=\"built_in\">if</span> (!ImageIO.<span class=\"built_in\">write</span>(<span class=\"built_in\">image</span>, format, stream)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Could not write an image of format \"</span> + format);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>恩，就这么简单。</p>\n","excerpt":"<p>QR码属于矩阵式二维码中的一个种类，由DENSO(日本电装)公司开发，由JIS和ISO将其标准化。QR码的样子其实在很多场合已经能够被看到了，我这还是贴个图展示一下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170323193748791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTWVsb2RfYmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" height=\"300\" width=\"300\"><br></p>","more":"<p></p>\n<p>这个图如果被正确解码，应该看到百度。</p>\n<p>具体的也不说什么了，百度一大把，直接上源码~</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.lincoln.Untils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.BarcodeFormat;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.EncodeHintType;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.MultiFormatWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.common.BitMatrix;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.<span class=\"built_in\">File</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.<span class=\"built_in\">image</span>.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> QRUtil &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> final <span class=\"keyword\">int</span> BLACK = <span class=\"number\">0xFF000000</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> final <span class=\"keyword\">int</span> WHITE = <span class=\"number\">0xFFFFFFFF</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * @param args</div><div class=\"line\">     * @throws Exception</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) throws Exception &#123;</div><div class=\"line\">        <span class=\"keyword\">String</span> <span class=\"built_in\">text</span> = <span class=\"string\">\"http://www.baidu.com\"</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">width</span> = <span class=\"number\">300</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">height</span> = <span class=\"number\">300</span>;</div><div class=\"line\">        <span class=\"comment\">//二维码的图片格式</span></div><div class=\"line\">        <span class=\"keyword\">String</span> format = <span class=\"string\">\"gif\"</span>;</div><div class=\"line\">        Hashtable hints = <span class=\"keyword\">new</span> Hashtable();</div><div class=\"line\">        <span class=\"comment\">//内容所使用编码</span></div><div class=\"line\">        hints.<span class=\"built_in\">put</span>(EncodeHintType.CHARACTER_SET, <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">        BitMatrix bitMatrix = <span class=\"keyword\">new</span> MultiFormatWriter().encode(<span class=\"built_in\">text</span>,</div><div class=\"line\">                BarcodeFormat.QR_CODE, <span class=\"built_in\">width</span>, <span class=\"built_in\">height</span>, hints);</div><div class=\"line\">        <span class=\"comment\">//生成二维码</span></div><div class=\"line\">        <span class=\"built_in\">File</span> outputFile = <span class=\"keyword\">new</span> <span class=\"built_in\">File</span>(<span class=\"string\">\"/Users/lizhi/Downloads\"</span> + <span class=\"built_in\">File</span>.separator + <span class=\"string\">\"new.gif\"</span>);</div><div class=\"line\">        QRUtil.writeToFile(bitMatrix, format, outputFile);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> QRUtil() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage toBufferedImage(BitMatrix matrix) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">width</span> = matrix.getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">height</span> = matrix.getHeight();</div><div class=\"line\">        BufferedImage <span class=\"built_in\">image</span> = <span class=\"keyword\">new</span> BufferedImage(<span class=\"built_in\">width</span>, <span class=\"built_in\">height</span>, BufferedImage.TYPE_INT_RGB);</div><div class=\"line\">        <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"built_in\">width</span>; x++) &#123;</div><div class=\"line\">            <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; <span class=\"built_in\">height</span>; y++) &#123;</div><div class=\"line\">                <span class=\"built_in\">image</span>.setRGB(x, y, matrix.<span class=\"built_in\">get</span>(x, y) ? BLACK : WHITE);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">return</span> <span class=\"built_in\">image</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> writeToFile(BitMatrix matrix, <span class=\"keyword\">String</span> format, <span class=\"built_in\">File</span> file)</div><div class=\"line\">            throws IOException &#123;</div><div class=\"line\">        BufferedImage <span class=\"built_in\">image</span> = toBufferedImage(matrix);</div><div class=\"line\">        <span class=\"built_in\">if</span> (!ImageIO.<span class=\"built_in\">write</span>(<span class=\"built_in\">image</span>, format, file)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Could not write an image of format \"</span> + format + <span class=\"string\">\" to \"</span> + file);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> writeToStream(BitMatrix matrix, <span class=\"keyword\">String</span> format, OutputStream stream)</div><div class=\"line\">            throws IOException &#123;</div><div class=\"line\">        BufferedImage <span class=\"built_in\">image</span> = toBufferedImage(matrix);</div><div class=\"line\">        <span class=\"built_in\">if</span> (!ImageIO.<span class=\"built_in\">write</span>(<span class=\"built_in\">image</span>, format, stream)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"Could not write an image of format \"</span> + format);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>恩，就这么简单。</p>"},{"title":"Java反射学习总结（四）","date":"2017-02-18T13:15:55.000Z","_content":"**类加载器**\n\nJava在需要使用类的时候，才会将类加载，Java的类加载是由类加载器（Class loader）来完成的。\n当我们在命令模式下执行java xxx指令后，Java执行程序会尝试找到jre安装的所在目录，然后找到jvm.dll（假设在jre目录下的bin\\client下），接着启动jvm并进行初始化操作，接着会产生bootstrap loader，bootstrap loader则会加载 extended loader，并设定 extended loader的parent为bootstrap loader，接着bootstrap loader会加载system loader，并将system loader的parent设为 extended loader。\n<!--more-->\nbootstrap loader通常是由c写的， extended loader是由Java写的，实际这个对应着sun.misc.Launcher\\$ExtClassLoader（Launcher 中的内部类）；system loader 是由 Java写的，实际对应sun.misc. Launcher\\$AppClassLoader（Launcher 中的内部类）。\n\n\n\n**流程如下图：**\n![这里写图片描述](http://img.blog.csdn.net/20161205220032526)\n\n\nBootstrap Loader 会查找系统参数 sun.boot.class.path 中指定位置的类，假设是 JRE classes 下之文件，或 lib 目录下 .jar 文件中（例如 rt.jar）的类并加载，我们可以使用 System.getProperty(\"sun.boot.class.path\") 来显示 sun.boot.class.path 中指定的路劲，例如在我的终端显示的是以下的路劲：\n\n```\n/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/classes\n\n```\n\nExtended Loader（sun.misc.Launcher$ExtClassLoader）是由 Java 写的，会查找系统参数java.ext.dirs 中指定位置的类，假设是 JRE 目录下的 lib\\ext\\classes 目录下的 .class 文件，或 lib\\ext 目录下的 .jar 文件中（例如 rt.jar）的类并加载，我们可以使用 System.getProperty(\"java.ext.dirs\") 来显示指定的路劲:\n\n```\n/Users/lizhi/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java\n\n```\nSystem Loader（sun.misc.Launcher$AppClassLoader）是由 Java 写的，会查找系统参 java.class.path 中指定位置的类，也就是 Classpath 所指定的路径，假设是目前工作路径下的 .class 文件，我们可以使用 System.getProperty(\"java.class.path\") 来显示 java.class.path 中指定的路径，在使用 java 执行程序时，我们也可以加上 -cp 來覆盖原有的 Classpath 设置，例如：\n\n```\njava –cp ./classes SomeClass\n```\nBootstrap Loader 会在 JVM 启动之后生成，之后它会加载 Extended Loader 并将其 parent 设为 Bootstrap Loader，然后Bootstrap Loader 再加载 System Loader 并将其 parent 设为 ExtClassLoader，接着System Loader 开始加载我们指定的类，在加载类时，每个类加载器会先将加载类的任务讲给他的parent，如果 parent 找不到，才由自己负责加载，所以在加载类时，会以 Bootstrap Loader→Extended Loader→System Loader 的顺序开查找类，如果都找不到，就会抛出 NoClassDefFoundError。\n\n类加载器在 Java 中是以 java.lang.ClassLoader 形式存在，每一个类被加载后，都会有一个 Class 的实例来代表，而每个 Class 的实例都会记得自己是由哪个 ClassLoader 加载的，可以由 Class 的 getClassLoader() 取得加载该类的 ClassLoader，而从 ClassLoader 的 getParent() 方法可以取得自己的 parent。\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class SomeClass {\n    public static void main(String[] args) {\n        // 建立SomeClass实例\n        SomeClass some = new SomeClass();\n        // 取得SomeClass的Class实例\n        Class c = some.getClass();\n        // 取得ClassLoader\n        ClassLoader loader = c.getClassLoader();\n        System.out.println(loader);\n        // 取得父ClassLoader\n        System.out.println(loader.getParent());\n        // 再取得父ClassLoader\n        System.out.println(loader.getParent().getParent());\n    }\n}\n\n```\n\n输出：\n\n```\nsun.misc.Launcher$AppClassLoader@60e53b93\nsun.misc.Launcher$ExtClassLoader@66d3c617\nnull\n\nProcess finished with exit code 0\n```\nCoreJava.day_2.SomeClass 是个自定义类，我们在目前的目录下执行程序，首先 AppClassLoader 会将加载类的任务交給 ExtClassLoader，而 ExtClassLoader 将会把加载类的任务交给 Bootstrap Loader，由于Bootstrap Loader 在它的路径（sun.boot.class.path）下找不到类，所以由 ExtClassLoader 来尝试查找，而 ExtClassLoader 在它的路径设置（java.ext.dirs）下也找不到类，所以由 AppClassLoader 来尝试查找，AppClassLoader 最后在 Classpath（java.class.path）设置下找到指定的类并加载。\n\n在输出中可以看到，加载 SomeClass 的 ClassLoader 是 AppClassLoader，而 AppClassLoader 的 parent 是 ExtClassLoader，而 ExtClassLoader 的 parent 是 null，null 并不是表示 ExtClassLoader 没有设置 parent，而是因为 Bootstrap Loader 通常由 C 写的，在 Java 中并没有一个类来表示它，所以才会显示为null。\n\n如果把 SomeClass 的 .class 文件移至 JRE 目录下的 lib\\ext\\classes下，并重新（任何目录下）执行程序，我们可以看到：\n\n```\nnull\nException in thread \"main\" java.lang.NullPointerException\n        at CoreJava.day_2.SomeClass.main(SomeClass.java:13)\n\n```\n由于 SomeClass 这次可以在 Bootstrap Loader 的设置路径下找到，所以会由 Bootstrap Loader 来加载 SomeClass 类，Bootstrap Loader 通常由 C 写的，在 Java 中没有一个实际类来表示，所以显示为 null，因为表示为null，所以再由 null 上尝试调用 getParent() 方法就会抛出 NullPointerException 异常。\n\n取得 ClassLoader 的实例之后，我们可以使用它的 loadClass() 方法来加载类，使用 loadClass() 方法加载类时，不会执行静态代码块，静态代码块的执行会等到真正使用类时来建立实例：\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class TestClass2 {\n        static {\n            System.out.println(\"[执行静态代码块]\");\n        }\n}\n```\n<br>\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class ForNameDemoV3 {\n    public static void main(String[] args) {\n        try {\n            System.out.println(\"加载TestClass2\");\n            ClassLoader loader = ForNameDemoV3.class.getClassLoader();\n            Class c = loader.loadClass(\"CoreJava.day_2.TestClass2\");\n\n            System.out.println(\"TestClass2声明\");\n            TestClass2 test = null;\n\n            System.out.println(\"TestClass2实例对象\");\n            test = new TestClass2();\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定的类\");\n        }\n    }\n}\n```\n\n输出：\n\n```\n加载TestClass2\nTestClass2声明\nTestClass2实例对象\n[执行静态代码块]\n\nProcess finished with exit code 0\n```\n可以看出，loadClass() 不会在加载类时执行静态代码块，而会在使用类new对象时才执行静态代码块代码。","source":"_posts/Java反射学习总结（四）.md","raw":"---\ntitle: Java反射学习总结（四）\ndate: 2017-02-18 21:15:55\ncategories: Java二三事\ntags: \n\t- 反射\n---\n**类加载器**\n\nJava在需要使用类的时候，才会将类加载，Java的类加载是由类加载器（Class loader）来完成的。\n当我们在命令模式下执行java xxx指令后，Java执行程序会尝试找到jre安装的所在目录，然后找到jvm.dll（假设在jre目录下的bin\\client下），接着启动jvm并进行初始化操作，接着会产生bootstrap loader，bootstrap loader则会加载 extended loader，并设定 extended loader的parent为bootstrap loader，接着bootstrap loader会加载system loader，并将system loader的parent设为 extended loader。\n<!--more-->\nbootstrap loader通常是由c写的， extended loader是由Java写的，实际这个对应着sun.misc.Launcher\\$ExtClassLoader（Launcher 中的内部类）；system loader 是由 Java写的，实际对应sun.misc. Launcher\\$AppClassLoader（Launcher 中的内部类）。\n\n\n\n**流程如下图：**\n![这里写图片描述](http://img.blog.csdn.net/20161205220032526)\n\n\nBootstrap Loader 会查找系统参数 sun.boot.class.path 中指定位置的类，假设是 JRE classes 下之文件，或 lib 目录下 .jar 文件中（例如 rt.jar）的类并加载，我们可以使用 System.getProperty(\"sun.boot.class.path\") 来显示 sun.boot.class.path 中指定的路劲，例如在我的终端显示的是以下的路劲：\n\n```\n/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/classes\n\n```\n\nExtended Loader（sun.misc.Launcher$ExtClassLoader）是由 Java 写的，会查找系统参数java.ext.dirs 中指定位置的类，假设是 JRE 目录下的 lib\\ext\\classes 目录下的 .class 文件，或 lib\\ext 目录下的 .jar 文件中（例如 rt.jar）的类并加载，我们可以使用 System.getProperty(\"java.ext.dirs\") 来显示指定的路劲:\n\n```\n/Users/lizhi/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java\n\n```\nSystem Loader（sun.misc.Launcher$AppClassLoader）是由 Java 写的，会查找系统参 java.class.path 中指定位置的类，也就是 Classpath 所指定的路径，假设是目前工作路径下的 .class 文件，我们可以使用 System.getProperty(\"java.class.path\") 来显示 java.class.path 中指定的路径，在使用 java 执行程序时，我们也可以加上 -cp 來覆盖原有的 Classpath 设置，例如：\n\n```\njava –cp ./classes SomeClass\n```\nBootstrap Loader 会在 JVM 启动之后生成，之后它会加载 Extended Loader 并将其 parent 设为 Bootstrap Loader，然后Bootstrap Loader 再加载 System Loader 并将其 parent 设为 ExtClassLoader，接着System Loader 开始加载我们指定的类，在加载类时，每个类加载器会先将加载类的任务讲给他的parent，如果 parent 找不到，才由自己负责加载，所以在加载类时，会以 Bootstrap Loader→Extended Loader→System Loader 的顺序开查找类，如果都找不到，就会抛出 NoClassDefFoundError。\n\n类加载器在 Java 中是以 java.lang.ClassLoader 形式存在，每一个类被加载后，都会有一个 Class 的实例来代表，而每个 Class 的实例都会记得自己是由哪个 ClassLoader 加载的，可以由 Class 的 getClassLoader() 取得加载该类的 ClassLoader，而从 ClassLoader 的 getParent() 方法可以取得自己的 parent。\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class SomeClass {\n    public static void main(String[] args) {\n        // 建立SomeClass实例\n        SomeClass some = new SomeClass();\n        // 取得SomeClass的Class实例\n        Class c = some.getClass();\n        // 取得ClassLoader\n        ClassLoader loader = c.getClassLoader();\n        System.out.println(loader);\n        // 取得父ClassLoader\n        System.out.println(loader.getParent());\n        // 再取得父ClassLoader\n        System.out.println(loader.getParent().getParent());\n    }\n}\n\n```\n\n输出：\n\n```\nsun.misc.Launcher$AppClassLoader@60e53b93\nsun.misc.Launcher$ExtClassLoader@66d3c617\nnull\n\nProcess finished with exit code 0\n```\nCoreJava.day_2.SomeClass 是个自定义类，我们在目前的目录下执行程序，首先 AppClassLoader 会将加载类的任务交給 ExtClassLoader，而 ExtClassLoader 将会把加载类的任务交给 Bootstrap Loader，由于Bootstrap Loader 在它的路径（sun.boot.class.path）下找不到类，所以由 ExtClassLoader 来尝试查找，而 ExtClassLoader 在它的路径设置（java.ext.dirs）下也找不到类，所以由 AppClassLoader 来尝试查找，AppClassLoader 最后在 Classpath（java.class.path）设置下找到指定的类并加载。\n\n在输出中可以看到，加载 SomeClass 的 ClassLoader 是 AppClassLoader，而 AppClassLoader 的 parent 是 ExtClassLoader，而 ExtClassLoader 的 parent 是 null，null 并不是表示 ExtClassLoader 没有设置 parent，而是因为 Bootstrap Loader 通常由 C 写的，在 Java 中并没有一个类来表示它，所以才会显示为null。\n\n如果把 SomeClass 的 .class 文件移至 JRE 目录下的 lib\\ext\\classes下，并重新（任何目录下）执行程序，我们可以看到：\n\n```\nnull\nException in thread \"main\" java.lang.NullPointerException\n        at CoreJava.day_2.SomeClass.main(SomeClass.java:13)\n\n```\n由于 SomeClass 这次可以在 Bootstrap Loader 的设置路径下找到，所以会由 Bootstrap Loader 来加载 SomeClass 类，Bootstrap Loader 通常由 C 写的，在 Java 中没有一个实际类来表示，所以显示为 null，因为表示为null，所以再由 null 上尝试调用 getParent() 方法就会抛出 NullPointerException 异常。\n\n取得 ClassLoader 的实例之后，我们可以使用它的 loadClass() 方法来加载类，使用 loadClass() 方法加载类时，不会执行静态代码块，静态代码块的执行会等到真正使用类时来建立实例：\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/4\n */\npublic class TestClass2 {\n        static {\n            System.out.println(\"[执行静态代码块]\");\n        }\n}\n```\n<br>\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class ForNameDemoV3 {\n    public static void main(String[] args) {\n        try {\n            System.out.println(\"加载TestClass2\");\n            ClassLoader loader = ForNameDemoV3.class.getClassLoader();\n            Class c = loader.loadClass(\"CoreJava.day_2.TestClass2\");\n\n            System.out.println(\"TestClass2声明\");\n            TestClass2 test = null;\n\n            System.out.println(\"TestClass2实例对象\");\n            test = new TestClass2();\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定的类\");\n        }\n    }\n}\n```\n\n输出：\n\n```\n加载TestClass2\nTestClass2声明\nTestClass2实例对象\n[执行静态代码块]\n\nProcess finished with exit code 0\n```\n可以看出，loadClass() 不会在加载类时执行静态代码块，而会在使用类new对象时才执行静态代码块代码。","slug":"Java反射学习总结（四）","published":1,"updated":"2017-04-10T08:14:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kez001arhsobz2c9pf9","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p><strong>类加载器</strong></p>\n<p>Java在需要使用类的时候，才会将类加载，Java的类加载是由类加载器（Class loader）来完成的。<br>当我们在命令模式下执行java xxx指令后，Java执行程序会尝试找到jre安装的所在目录，然后找到jvm.dll（假设在jre目录下的bin\\client下），接着启动jvm并进行初始化操作，接着会产生bootstrap loader，bootstrap loader则会加载 extended loader，并设定 extended loader的parent为bootstrap loader，接着bootstrap loader会加载system loader，并将system loader的parent设为 extended loader。<br><a id=\"more\"></a><br>bootstrap loader通常是由c写的， extended loader是由Java写的，实际这个对应着sun.misc.Launcher\\$ExtClassLoader（Launcher 中的内部类）；system loader 是由 Java写的，实际对应sun.misc. Launcher\\$AppClassLoader（Launcher 中的内部类）。</p>\n<p><strong>流程如下图：</strong><br><img src=\"http://img.blog.csdn.net/20161205220032526\" alt=\"这里写图片描述\"></p>\n<p>Bootstrap Loader 会查找系统参数 sun.boot.class.path 中指定位置的类，假设是 JRE classes 下之文件，或 lib 目录下 .jar 文件中（例如 rt.jar）的类并加载，我们可以使用 System.getProperty(“sun.boot.class.path”) 来显示 sun.boot.class.path 中指定的路劲，例如在我的终端显示的是以下的路劲：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/JavaVirtualMachines/</span>jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span>_65.jdk<span class=\"regexp\">/Contents/</span>Home<span class=\"regexp\">/jre/</span>lib<span class=\"regexp\">/resources.jar:/</span>Library<span class=\"regexp\">/Java/</span>JavaVirtualMachines<span class=\"regexp\">/jdk1.8.0_65.jdk/</span>Contents<span class=\"regexp\">/Home/</span>jre<span class=\"regexp\">/lib/</span>rt.<span class=\"string\">jar:</span><span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/JavaVirtualMachines/</span>jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span>_65.jdk<span class=\"regexp\">/Contents/</span>Home<span class=\"regexp\">/jre/</span>lib<span class=\"regexp\">/sunrsasign.jar:/</span>Library<span class=\"regexp\">/Java/</span>JavaVirtualMachines<span class=\"regexp\">/jdk1.8.0_65.jdk/</span>Contents<span class=\"regexp\">/Home/</span>jre<span class=\"regexp\">/lib/</span>jsse.<span class=\"string\">jar:</span><span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/JavaVirtualMachines/</span>jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span>_65.jdk<span class=\"regexp\">/Contents/</span>Home<span class=\"regexp\">/jre/</span>lib<span class=\"regexp\">/jce.jar:/</span>Library<span class=\"regexp\">/Java/</span>JavaVirtualMachines<span class=\"regexp\">/jdk1.8.0_65.jdk/</span>Contents<span class=\"regexp\">/Home/</span>jre<span class=\"regexp\">/lib/</span>charsets.<span class=\"string\">jar:</span><span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/JavaVirtualMachines/</span>jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span>_65.jdk<span class=\"regexp\">/Contents/</span>Home<span class=\"regexp\">/jre/</span>lib<span class=\"regexp\">/jfr.jar:/</span>Library<span class=\"regexp\">/Java/</span>JavaVirtualMachines<span class=\"regexp\">/jdk1.8.0_65.jdk/</span>Contents<span class=\"regexp\">/Home/</span>jre/classes</div></pre></td></tr></table></figure>\n<p>Extended Loader（sun.misc.Launcher$ExtClassLoader）是由 Java 写的，会查找系统参数java.ext.dirs 中指定位置的类，假设是 JRE 目录下的 lib\\ext\\classes 目录下的 .class 文件，或 lib\\ext 目录下的 .jar 文件中（例如 rt.jar）的类并加载，我们可以使用 System.getProperty(“java.ext.dirs”) 来显示指定的路劲:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">/Users/</span>lizhi<span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/Extensions:/</span>Library<span class=\"regexp\">/Java/</span>JavaVirtualMachines<span class=\"regexp\">/jdk1.8.0_65.jdk/</span>Contents<span class=\"regexp\">/Home/</span>jre<span class=\"regexp\">/lib/</span><span class=\"string\">ext:</span><span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/Extensions:/</span>Network<span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/Extensions:/</span>System<span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/Extensions:/</span>usr<span class=\"regexp\">/lib/</span>java</div></pre></td></tr></table></figure>\n<p>System Loader（sun.misc.Launcher$AppClassLoader）是由 Java 写的，会查找系统参 java.class.path 中指定位置的类，也就是 Classpath 所指定的路径，假设是目前工作路径下的 .class 文件，我们可以使用 System.getProperty(“java.class.path”) 来显示 java.class.path 中指定的路径，在使用 java 执行程序时，我们也可以加上 -cp 來覆盖原有的 Classpath 设置，例如：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">java</span> –<span class=\"meta\">cp</span> ./classes SomeClass</div></pre></td></tr></table></figure>\n<p>Bootstrap Loader 会在 JVM 启动之后生成，之后它会加载 Extended Loader 并将其 parent 设为 Bootstrap Loader，然后Bootstrap Loader 再加载 System Loader 并将其 parent 设为 ExtClassLoader，接着System Loader 开始加载我们指定的类，在加载类时，每个类加载器会先将加载类的任务讲给他的parent，如果 parent 找不到，才由自己负责加载，所以在加载类时，会以 Bootstrap Loader→Extended Loader→System Loader 的顺序开查找类，如果都找不到，就会抛出 NoClassDefFoundError。</p>\n<p>类加载器在 Java 中是以 java.lang.ClassLoader 形式存在，每一个类被加载后，都会有一个 Class 的实例来代表，而每个 Class 的实例都会记得自己是由哪个 ClassLoader 加载的，可以由 Class 的 getClassLoader() 取得加载该类的 ClassLoader，而从 ClassLoader 的 getParent() 方法可以取得自己的 parent。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 建立SomeClass实例</span></div><div class=\"line\">        SomeClass some = <span class=\"keyword\">new</span> SomeClass();</div><div class=\"line\">        <span class=\"comment\">// 取得SomeClass的Class实例</span></div><div class=\"line\">        Class c = some.getClass();</div><div class=\"line\">        <span class=\"comment\">// 取得ClassLoader</span></div><div class=\"line\">        ClassLoader loader = c.getClassLoader();</div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(loader);</div><div class=\"line\">        <span class=\"comment\">// 取得父ClassLoader</span></div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(loader.getParent());</div><div class=\"line\">        <span class=\"comment\">// 再取得父ClassLoader</span></div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(loader.getParent().getParent());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span>@<span class=\"number\">60</span>e53b93</div><div class=\"line\">sun.misc.Launcher<span class=\"variable\">$ExtClassLoader</span>@<span class=\"number\">66</span>d3c617</div><div class=\"line\">null</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>CoreJava.day_2.SomeClass 是个自定义类，我们在目前的目录下执行程序，首先 AppClassLoader 会将加载类的任务交給 ExtClassLoader，而 ExtClassLoader 将会把加载类的任务交给 Bootstrap Loader，由于Bootstrap Loader 在它的路径（sun.boot.class.path）下找不到类，所以由 ExtClassLoader 来尝试查找，而 ExtClassLoader 在它的路径设置（java.ext.dirs）下也找不到类，所以由 AppClassLoader 来尝试查找，AppClassLoader 最后在 Classpath（java.class.path）设置下找到指定的类并加载。</p>\n<p>在输出中可以看到，加载 SomeClass 的 ClassLoader 是 AppClassLoader，而 AppClassLoader 的 parent 是 ExtClassLoader，而 ExtClassLoader 的 parent 是 null，null 并不是表示 ExtClassLoader 没有设置 parent，而是因为 Bootstrap Loader 通常由 C 写的，在 Java 中并没有一个类来表示它，所以才会显示为null。</p>\n<p>如果把 SomeClass 的 .class 文件移至 JRE 目录下的 lib\\ext\\classes下，并重新（任何目录下）执行程序，我们可以看到：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">null</div><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"main\"</span> java<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.NullPointerException</span></div><div class=\"line\">        at CoreJava<span class=\"selector-class\">.day_2</span><span class=\"selector-class\">.SomeClass</span><span class=\"selector-class\">.main</span>(SomeClass<span class=\"selector-class\">.java</span>:<span class=\"number\">13</span>)</div></pre></td></tr></table></figure>\n<p>由于 SomeClass 这次可以在 Bootstrap Loader 的设置路径下找到，所以会由 Bootstrap Loader 来加载 SomeClass 类，Bootstrap Loader 通常由 C 写的，在 Java 中没有一个实际类来表示，所以显示为 null，因为表示为null，所以再由 null 上尝试调用 getParent() 方法就会抛出 NullPointerException 异常。</p>\n<p>取得 ClassLoader 的实例之后，我们可以使用它的 loadClass() 方法来加载类，使用 loadClass() 方法加载类时，不会执行静态代码块，静态代码块的执行会等到真正使用类时来建立实例：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass2</span> &#123;</span></div><div class=\"line\">        <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"[执行静态代码块]\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><br><br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ForNameDemoV3 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"加载TestClass2\"</span>);</div><div class=\"line\">            ClassLoader loader = ForNameDemoV3.<span class=\"keyword\">class</span>.getClassLoader();</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = loader.loadClass(<span class=\"string\">\"CoreJava.day_2.TestClass2\"</span>);</div><div class=\"line\"></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"TestClass2声明\"</span>);</div><div class=\"line\">            TestClass2 test = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"TestClass2实例对象\"</span>);</div><div class=\"line\">            test = <span class=\"keyword\">new</span> TestClass2();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到指定的类\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">加载TestClass2</div><div class=\"line\">TestClass2声明</div><div class=\"line\">TestClass2实例对象</div><div class=\"line\">[执行静态代码块]</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>可以看出，loadClass() 不会在加载类时执行静态代码块，而会在使用类new对象时才执行静态代码块代码。</p>\n","excerpt":"<p><strong>类加载器</strong></p>\n<p>Java在需要使用类的时候，才会将类加载，Java的类加载是由类加载器（Class loader）来完成的。<br>当我们在命令模式下执行java xxx指令后，Java执行程序会尝试找到jre安装的所在目录，然后找到jvm.dll（假设在jre目录下的bin\\client下），接着启动jvm并进行初始化操作，接着会产生bootstrap loader，bootstrap loader则会加载 extended loader，并设定 extended loader的parent为bootstrap loader，接着bootstrap loader会加载system loader，并将system loader的parent设为 extended loader。<br></p>","more":"<br>bootstrap loader通常是由c写的， extended loader是由Java写的，实际这个对应着sun.misc.Launcher\\$ExtClassLoader（Launcher 中的内部类）；system loader 是由 Java写的，实际对应sun.misc. Launcher\\$AppClassLoader（Launcher 中的内部类）。<p></p>\n<p><strong>流程如下图：</strong><br><img src=\"http://img.blog.csdn.net/20161205220032526\" alt=\"这里写图片描述\"></p>\n<p>Bootstrap Loader 会查找系统参数 sun.boot.class.path 中指定位置的类，假设是 JRE classes 下之文件，或 lib 目录下 .jar 文件中（例如 rt.jar）的类并加载，我们可以使用 System.getProperty(“sun.boot.class.path”) 来显示 sun.boot.class.path 中指定的路劲，例如在我的终端显示的是以下的路劲：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/JavaVirtualMachines/</span>jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span>_65.jdk<span class=\"regexp\">/Contents/</span>Home<span class=\"regexp\">/jre/</span>lib<span class=\"regexp\">/resources.jar:/</span>Library<span class=\"regexp\">/Java/</span>JavaVirtualMachines<span class=\"regexp\">/jdk1.8.0_65.jdk/</span>Contents<span class=\"regexp\">/Home/</span>jre<span class=\"regexp\">/lib/</span>rt.<span class=\"string\">jar:</span><span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/JavaVirtualMachines/</span>jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span>_65.jdk<span class=\"regexp\">/Contents/</span>Home<span class=\"regexp\">/jre/</span>lib<span class=\"regexp\">/sunrsasign.jar:/</span>Library<span class=\"regexp\">/Java/</span>JavaVirtualMachines<span class=\"regexp\">/jdk1.8.0_65.jdk/</span>Contents<span class=\"regexp\">/Home/</span>jre<span class=\"regexp\">/lib/</span>jsse.<span class=\"string\">jar:</span><span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/JavaVirtualMachines/</span>jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span>_65.jdk<span class=\"regexp\">/Contents/</span>Home<span class=\"regexp\">/jre/</span>lib<span class=\"regexp\">/jce.jar:/</span>Library<span class=\"regexp\">/Java/</span>JavaVirtualMachines<span class=\"regexp\">/jdk1.8.0_65.jdk/</span>Contents<span class=\"regexp\">/Home/</span>jre<span class=\"regexp\">/lib/</span>charsets.<span class=\"string\">jar:</span><span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/JavaVirtualMachines/</span>jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span>_65.jdk<span class=\"regexp\">/Contents/</span>Home<span class=\"regexp\">/jre/</span>lib<span class=\"regexp\">/jfr.jar:/</span>Library<span class=\"regexp\">/Java/</span>JavaVirtualMachines<span class=\"regexp\">/jdk1.8.0_65.jdk/</span>Contents<span class=\"regexp\">/Home/</span>jre/classes</div></pre></td></tr></table></figure>\n<p>Extended Loader（sun.misc.Launcher$ExtClassLoader）是由 Java 写的，会查找系统参数java.ext.dirs 中指定位置的类，假设是 JRE 目录下的 lib\\ext\\classes 目录下的 .class 文件，或 lib\\ext 目录下的 .jar 文件中（例如 rt.jar）的类并加载，我们可以使用 System.getProperty(“java.ext.dirs”) 来显示指定的路劲:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">/Users/</span>lizhi<span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/Extensions:/</span>Library<span class=\"regexp\">/Java/</span>JavaVirtualMachines<span class=\"regexp\">/jdk1.8.0_65.jdk/</span>Contents<span class=\"regexp\">/Home/</span>jre<span class=\"regexp\">/lib/</span><span class=\"string\">ext:</span><span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/Extensions:/</span>Network<span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/Extensions:/</span>System<span class=\"regexp\">/Library/</span>Java<span class=\"regexp\">/Extensions:/</span>usr<span class=\"regexp\">/lib/</span>java</div></pre></td></tr></table></figure>\n<p>System Loader（sun.misc.Launcher$AppClassLoader）是由 Java 写的，会查找系统参 java.class.path 中指定位置的类，也就是 Classpath 所指定的路径，假设是目前工作路径下的 .class 文件，我们可以使用 System.getProperty(“java.class.path”) 来显示 java.class.path 中指定的路径，在使用 java 执行程序时，我们也可以加上 -cp 來覆盖原有的 Classpath 设置，例如：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">java</span> –<span class=\"meta\">cp</span> ./classes SomeClass</div></pre></td></tr></table></figure>\n<p>Bootstrap Loader 会在 JVM 启动之后生成，之后它会加载 Extended Loader 并将其 parent 设为 Bootstrap Loader，然后Bootstrap Loader 再加载 System Loader 并将其 parent 设为 ExtClassLoader，接着System Loader 开始加载我们指定的类，在加载类时，每个类加载器会先将加载类的任务讲给他的parent，如果 parent 找不到，才由自己负责加载，所以在加载类时，会以 Bootstrap Loader→Extended Loader→System Loader 的顺序开查找类，如果都找不到，就会抛出 NoClassDefFoundError。</p>\n<p>类加载器在 Java 中是以 java.lang.ClassLoader 形式存在，每一个类被加载后，都会有一个 Class 的实例来代表，而每个 Class 的实例都会记得自己是由哪个 ClassLoader 加载的，可以由 Class 的 getClassLoader() 取得加载该类的 ClassLoader，而从 ClassLoader 的 getParent() 方法可以取得自己的 parent。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 建立SomeClass实例</span></div><div class=\"line\">        SomeClass some = <span class=\"keyword\">new</span> SomeClass();</div><div class=\"line\">        <span class=\"comment\">// 取得SomeClass的Class实例</span></div><div class=\"line\">        Class c = some.getClass();</div><div class=\"line\">        <span class=\"comment\">// 取得ClassLoader</span></div><div class=\"line\">        ClassLoader loader = c.getClassLoader();</div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(loader);</div><div class=\"line\">        <span class=\"comment\">// 取得父ClassLoader</span></div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(loader.getParent());</div><div class=\"line\">        <span class=\"comment\">// 再取得父ClassLoader</span></div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(loader.getParent().getParent());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span>@<span class=\"number\">60</span>e53b93</div><div class=\"line\">sun.misc.Launcher<span class=\"variable\">$ExtClassLoader</span>@<span class=\"number\">66</span>d3c617</div><div class=\"line\">null</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>CoreJava.day_2.SomeClass 是个自定义类，我们在目前的目录下执行程序，首先 AppClassLoader 会将加载类的任务交給 ExtClassLoader，而 ExtClassLoader 将会把加载类的任务交给 Bootstrap Loader，由于Bootstrap Loader 在它的路径（sun.boot.class.path）下找不到类，所以由 ExtClassLoader 来尝试查找，而 ExtClassLoader 在它的路径设置（java.ext.dirs）下也找不到类，所以由 AppClassLoader 来尝试查找，AppClassLoader 最后在 Classpath（java.class.path）设置下找到指定的类并加载。</p>\n<p>在输出中可以看到，加载 SomeClass 的 ClassLoader 是 AppClassLoader，而 AppClassLoader 的 parent 是 ExtClassLoader，而 ExtClassLoader 的 parent 是 null，null 并不是表示 ExtClassLoader 没有设置 parent，而是因为 Bootstrap Loader 通常由 C 写的，在 Java 中并没有一个类来表示它，所以才会显示为null。</p>\n<p>如果把 SomeClass 的 .class 文件移至 JRE 目录下的 lib\\ext\\classes下，并重新（任何目录下）执行程序，我们可以看到：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">null</div><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"main\"</span> java<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.NullPointerException</span></div><div class=\"line\">        at CoreJava<span class=\"selector-class\">.day_2</span><span class=\"selector-class\">.SomeClass</span><span class=\"selector-class\">.main</span>(SomeClass<span class=\"selector-class\">.java</span>:<span class=\"number\">13</span>)</div></pre></td></tr></table></figure>\n<p>由于 SomeClass 这次可以在 Bootstrap Loader 的设置路径下找到，所以会由 Bootstrap Loader 来加载 SomeClass 类，Bootstrap Loader 通常由 C 写的，在 Java 中没有一个实际类来表示，所以显示为 null，因为表示为null，所以再由 null 上尝试调用 getParent() 方法就会抛出 NullPointerException 异常。</p>\n<p>取得 ClassLoader 的实例之后，我们可以使用它的 loadClass() 方法来加载类，使用 loadClass() 方法加载类时，不会执行静态代码块，静态代码块的执行会等到真正使用类时来建立实例：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/4</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass2</span> &#123;</span></div><div class=\"line\">        <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"[执行静态代码块]\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><br><br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ForNameDemoV3 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"加载TestClass2\"</span>);</div><div class=\"line\">            ClassLoader loader = ForNameDemoV3.<span class=\"keyword\">class</span>.getClassLoader();</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = loader.loadClass(<span class=\"string\">\"CoreJava.day_2.TestClass2\"</span>);</div><div class=\"line\"></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"TestClass2声明\"</span>);</div><div class=\"line\">            TestClass2 test = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"TestClass2实例对象\"</span>);</div><div class=\"line\">            test = <span class=\"keyword\">new</span> TestClass2();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到指定的类\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">加载TestClass2</div><div class=\"line\">TestClass2声明</div><div class=\"line\">TestClass2实例对象</div><div class=\"line\">[执行静态代码块]</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>可以看出，loadClass() 不会在加载类时执行静态代码块，而会在使用类new对象时才执行静态代码块代码。</p>"},{"title":"Java反射学习总结（五）","date":"2017-02-18T13:16:51.000Z","_content":"**使用反射实例对象**\n\n使用反射机制，我们可以在运行时动态加载类并且实例化对象，操作对象的方法、改变类成员的值，甚至还可以改变私有（private）成员的值。\n\n我们可以用 Class 的 newInstance() 方法来实例化一个对象，实例化的对象是以 Object 传回的，例如：\n<!--more-->\n```\nClass c = Class.forName(className);\nObject obj = c.newInstance();\n```\n\n下面范例动态加载list接口的类：\n\n```\npackage CoreJava.day_2;\n\nimport java.util.List;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class NewInstanceDemo {\n    public static void main(String[] args) {\n        try {\n            Class c = Class.forName(args[0]);\n            List list = (List) c.newInstance();\n\n            for (int i = 0; i < 5; i++) {\n                list.add(\"element \" + i);\n            }\n\n            for (Object o : list.toArray()) {\n                System.out.println(o);\n            }\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定的类\");\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n输出：\n\n```\njava CoreJava.day_2.NewInstanceDemo java.util.ArrayList\nelement 0\nelement 1\nelement 2\nelement 3\nelement 4\n```\n\n实际上如果想要使用反射来动态加载类，通常是对对象的接口或类别都一无所知，也就无法像上面对 newInstance() 传回的对象进行接口转换。\n\n如果加载的类中具备无参数的构造方法，则可以无参数的 newInstance() 来构造一个不指定初始化的引用，如果要在动态加载及生成对象时指定对象的引用，则要先指定参数类型、取得 Constructor 对象、使用 Constructor 的 newInstance() 并指定参数。\n\n可以用一个例子来说明，先定义一个student类:\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/05\n */\npublic class Student {\n    private String name;\n    private int score;\n\n    public Student() {\n        name = \"N/A\";\n    }\n\n    public Student(String name, int score) {\n        this.name = name;\n        this.score = score;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setScore(int score) {\n        this.score = score;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getScore() {\n        return score;\n    }\n\n    public String toString() {\n        return name + \":\" + score;\n    }\n}\n```\n\n我们可以用 Class.forName() 来加载 Student ，并使用第二个有参数的构造方法来构造Student 实例：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class NewInstanceDemo2 {\n    public static void main(String[] args) {\n        try {\n            Class c = Class.forName(args[0]);\n\n            // 指定参数\n            Class[] params = new Class[2];\n            // 第一个是String\n            params[0] = String.class;\n            // 第二个是int\n            params[1] = Integer.TYPE;\n\n            // 取得对应的构造方法\n            Constructor constructor =\n                    c.getConstructor(params);\n\n            // 指定引用内容\n            Object[] argObjs = new Object[2];\n            argObjs[0] = \"caterpillar\";\n            argObjs[1] = new Integer(90);\n\n            // 给定引用并初始化\n            Object obj = constructor.newInstance(argObjs);\n            // toString()查看\n            System.out.println(obj);\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到类\");\n        } catch (SecurityException e) {\n            e.printStackTrace();\n        } catch (NoSuchMethodException e) {\n            System.out.println(\"没有所指定的方法\");\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n输出：\n\n```\njava NewInstanceDemo2 CoreJava.day_2.Student\ncaterpillar:90\n```\n\n**调用方法**\n\n使用反射可以取回类上方法的对象代表，方法的物件代表是 java.lang.reflect.Method 的实例，我们可以使用它的 invoke() 方法来动态调用指定的方法，例如调用上面 Student 上的 setName() 等方法：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class InvokeMethodDemo {\n    public static void main(String[] args) {\n        try {\n            Class c = Class.forName(args[0]);\n            // 使用无参构造方法实例对象\n            Object targetObj = c.newInstance();\n            // 设置参数类型\n            Class[] param1 = {String.class};\n            // 根据参数取回方法\n            Method setNameMethod = c.getMethod(\"setName\", param1);\n            // 设置引用\n            Object[] argObjs1 = {\"caterpillar\"};\n            // 给引用调用指定对象的方法方法\n            setNameMethod.invoke(targetObj, argObjs1);\n\n\n            Class[] param2 = {Integer.TYPE};\n            Method setScoreMethod =\n                    c.getMethod(\"setScore\", param2);\n\n            Object[] argObjs2 = {new Integer(90)};\n            setScoreMethod.invoke(targetObj, argObjs2);\n            // 显示类描述\n            System.out.println(targetObj);\n\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到类\");\n        } catch (SecurityException e) {\n            e.printStackTrace();\n        } catch (NoSuchMethodException e) {\n            System.out.println(\"没有这个方法\");\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n我们可以指定加载 Student 类并生成实例，接着可以动态调用 setName() 和 setScore() 方法，由于调用setName() 和 setScore() 所设置的参数是 \"caterpillar\" 和90。\n\n在很少的情況下，我们需要突破 Java 的存取限制来调用受保护的（protected）或私有（private）的方法（例如我们拿到一个组件（Component），但我们没法修改它的原始码来改变某个私有方法的权限，而我们又一定要调用某个私有方法），这时我们可以使用反射机制來达到目的，一个存取私有方法的例子如下：\n\n```\nMethod privateMethod = \n            c.getDeclaredMethod(\"somePrivateMethod\", new Class[0]);\nprivateMethod.setAccessible(true);\nprivateMethod.invoke(targetObj, argObjs);\n```\n\n使用反射来动态调用方法的实例例子之一是在 JavaBean 的设定，例如在 JSP/Servlet 中，可以根据使用者的请求名和 JavaBean 的属性自动对比，将请求值设置到指定的 JavaBean 上，并自动根据参数类型转换。\n\n下面是一个map的小例子：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.Map;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class CommandUtil {\n    public static Object getCommand(Map requestMap,\n                                    String commandClass)\n            throws Exception {\n        Class c = Class.forName(commandClass);\n        Object o = c.newInstance();\n\n        return updateCommand(requestMap, o);\n    }\n\n    // 使用reflection自动找出要更新的属性\n    public static Object updateCommand(\n            Map requestMap,\n            Object command)\n            throws Exception {\n        Method[] methods =\n                command.getClass().getDeclaredMethods();\n\n        for (int i = 0; i < methods.length; i++) {\n            // 略过private、protected成员\n            // 且找出必须是set开头的方法\n            if (!Modifier.isPrivate(methods[i].getModifiers()) &&\n                    !Modifier.isProtected(methods[i].getModifiers()) &&\n                    methods[i].getName().startsWith(\"set\")) {\n                // 取得不包括set方法\n                String name = methods[i].getName()\n                        .substring(3)\n                        .toLowerCase();\n                // 如果setter名称键值对相同\n                // 调用对应的setter并给值\n                if (requestMap.containsKey(name)) {\n                    String param = (String) requestMap.get(name);\n                    Object[] values = findOutParamValues(\n                            param, methods[i]);\n                    methods[i].invoke(command, values);\n                }\n            }\n        }\n        return command;\n    }\n\n    // 转换对应类型\n    private static Object[] findOutParamValues(\n            String param, Method method) {\n        Class[] params = method.getParameterTypes();\n        Object[] objs = new Object[params.length];\n\n        for (int i = 0; i < params.length; i++) {\n            if (params[i] == String.class) {\n                objs[i] = param;\n            } else if (params[i] == Short.TYPE) {\n                short number = Short.parseShort(param);\n                objs[i] = new Short(number);\n            } else if (params[i] == Integer.TYPE) {\n                int number = Integer.parseInt(param);\n                objs[i] = new Integer(number);\n            } else if (params[i] == Long.TYPE) {\n                long number = Long.parseLong(param);\n                objs[i] = new Long(number);\n            } else if (params[i] == Float.TYPE) {\n                float number = Float.parseFloat(param);\n                objs[i] = new Float(number);\n            } else if (params[i] == Double.TYPE) {\n                double number = Double.parseDouble(param);\n                objs[i] = new Double(number);\n            } else if (params[i] == Boolean.TYPE) {\n                boolean bool = Boolean.parseBoolean(param);\n                objs[i] = new Boolean(bool);\n            }\n        }\n        return objs;\n    }\n     public static void main(String[] args) throws Exception {\n        Map<String, String> request = \n                  new HashMap<String, String>();\n        request.put(\"name\", \"caterpillar\");\n        request.put(\"score\", \"90\");\n        Object obj = CommandUtil.getCommand(request, args[0]);\n        System.out.println(obj);\n    }\n}\n\n```\nCommandUtil 可以自动根据方法上的参数类型，将Map 中的value转换成相应的类型，目前它可以转换基本类型和 String。\n\n输出：\n\n```\njava CommandUtilDemo CoreJava.day_2.Student\ncaterpillar:90\n```\n\n当然也可以修改**成员变量**，尽管直接读取类的成员属性（Field）是不被鼓励的，但我们仍是可以直接存取公共的（public）成员属性的，而我们甚至也可以通过反射机制来读取私用成员变量，以一个例子来说明：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class TestField {\n    public int testInt;\n    public String testString;\n\n    public String toString() {\n        return testInt + \":\" + testString;\n    }\n}\n\n```\n然后利用反射机制动态的读取成员变量：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.Field;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class AssignFieldDemo {\n    public static void main(String[] args) {\n        try {\n            Class c = Class.forName(args[0]);\n            Object targetObj = c.newInstance();\n\n            Field testInt = c.getField(\"testInt\");\n            testInt.setInt(targetObj, 99);\n\n            Field testString = c.getField(\"testString\");\n            testString.set(targetObj, \"caterpillar\");\n\n            System.out.println(targetObj);\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"没有指定类\");\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定的类\");\n        } catch (SecurityException e) {\n            e.printStackTrace();\n        } catch (NoSuchFieldException e) {\n            System.out.println(\"找不到指定的成员变量\");\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n输出：\n\n```\njava AssignFieldDemo CoreJava.day_2.TestField\n99:caterpillar\n```\n如果有必要的话，也可以通过反射机制来读取私有的成员变量，例如：\n\n```\nField privateField = c.getDeclaredField(\"privateField\"); \nprivateField.setAccessible(true);\nprivateField.setInt(targetObj, 99);\n```\n\n**数组**\n在 Java 中数组也是一个对象，也会有一个 Class 实例来表示它，我们用几个基本类型和String来进行测试：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class ArrayDemo {\n    public static void main(String[] args) {\n        short[] sArr = new short[5];\n        int[] iArr = new int[5];\n        long[] lArr = new long[5];\n        float[] fArr = new float[5];\n        double[] dArr = new double[5];\n        byte[] bArr = new byte[5];\n        boolean[] zArr = new boolean[5];\n        String[] strArr = new String[5];\n\n        System.out.println(\"short 数组：\" + sArr.getClass());\n        System.out.println(\"int 数组：\" + iArr.getClass());\n        System.out.println(\"long 数组：\" + lArr.getClass());\n        System.out.println(\"float 数组：\" + fArr.getClass());\n        System.out.println(\"double 数组：\" + dArr.getClass());\n        System.out.println(\"byte 数组：\" + bArr.getClass());\n        System.out.println(\"boolean 数组：\" + zArr.getClass());\n        System.out.println(\"String 数组：\" + strArr.getClass());\n    }\n}\n\n```\n输出：\n\n```\nshort 数组：class [S\nint 数组：class [I\nlong 数组：class [J\nfloat 数组：class [F\ndouble 数组：class [D\nbyte 数组：class [B\nboolean 数组：class [Z\nString 数组：class [Ljava.lang.String;\n\nProcess finished with exit code 0\n```\n\n要使用**反射机制动态生成数组**的话，也可以这样：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.Array;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class NewArrayDemo {\n    public static void main(String[] args) {\n        Class c = String.class;\n        Object objArr = Array.newInstance(c, 5);\n\n        for (int i = 0; i < 5; i++) {\n            Array.set(objArr, i, i + \"\");\n        }\n\n        for (int i = 0; i < 5; i++) {\n            System.out.print(Array.get(objArr, i) + \" \");\n        }\n        System.out.println();\n\n        String[] strs = (String[]) objArr;\n        for (String s : strs) {\n            System.out.print(s + \" \");\n        }\n    }\n}\n\n```\n\nArray.newInstance() 的第一个参数是指定参数类型，而第二个参数是用来指定数组长度的，结果如下：\n\n```\n0 1 2 3 4\n0 1 2 3 4\n```\n\n如果是二维数组，也是一样的：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.Array;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class NewArrayDemo2 {\n    public static void main(String[] args) {\n        Class c = String.class;\n\n        // 打算建立一个3*4数组\n        int[] dim = new int[]{3, 4};\n        Object objArr = Array.newInstance(c, dim);\n\n        for (int i = 0; i < 3; i++) {\n            Object row = Array.get(objArr, i);\n            for (int j = 0; j < 4; j++) {\n                Array.set(row, j, \"\" + (i + 1) * (j + 1));\n            }\n        }\n\n        for (int i = 0; i < 3; i++) {\n            Object row = Array.get(objArr, i);\n            for (int j = 0; j < 4; j++) {\n                System.out.print(Array.get(row, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n\n```\n\n输出结果：\n\n```\n1 2 3 4\n2 4 6 8\n3 6 9 12\n```\n\n如果想要知道数组元素的类型，可以在取得数组的 Class 实例之后，使用 Class 实例的 getComponentType() 方法，所取回的是元素的 Class 实例，例如：\n\n```\nint[] iArr = new int[5];\nSystem.out.println(iArr.getClass().getComponentType());\n```\n\n\n对反射的总结差不多就写到这里了，查阅了很多资料，网络上写的也是参差不齐的，在手写的几十个demo支撑下，得出的一点关于反射的东西，肯定不能说全部正确，但是还是可以提供一些帮助的  -。-\n","source":"_posts/Java反射学习总结（五）.md","raw":"---\ntitle: Java反射学习总结（五）\ndate: 2017-02-18 21:16:51\ncategories: Java二三事\ntags: \n\t- 反射\n---\n**使用反射实例对象**\n\n使用反射机制，我们可以在运行时动态加载类并且实例化对象，操作对象的方法、改变类成员的值，甚至还可以改变私有（private）成员的值。\n\n我们可以用 Class 的 newInstance() 方法来实例化一个对象，实例化的对象是以 Object 传回的，例如：\n<!--more-->\n```\nClass c = Class.forName(className);\nObject obj = c.newInstance();\n```\n\n下面范例动态加载list接口的类：\n\n```\npackage CoreJava.day_2;\n\nimport java.util.List;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class NewInstanceDemo {\n    public static void main(String[] args) {\n        try {\n            Class c = Class.forName(args[0]);\n            List list = (List) c.newInstance();\n\n            for (int i = 0; i < 5; i++) {\n                list.add(\"element \" + i);\n            }\n\n            for (Object o : list.toArray()) {\n                System.out.println(o);\n            }\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定的类\");\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n输出：\n\n```\njava CoreJava.day_2.NewInstanceDemo java.util.ArrayList\nelement 0\nelement 1\nelement 2\nelement 3\nelement 4\n```\n\n实际上如果想要使用反射来动态加载类，通常是对对象的接口或类别都一无所知，也就无法像上面对 newInstance() 传回的对象进行接口转换。\n\n如果加载的类中具备无参数的构造方法，则可以无参数的 newInstance() 来构造一个不指定初始化的引用，如果要在动态加载及生成对象时指定对象的引用，则要先指定参数类型、取得 Constructor 对象、使用 Constructor 的 newInstance() 并指定参数。\n\n可以用一个例子来说明，先定义一个student类:\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/05\n */\npublic class Student {\n    private String name;\n    private int score;\n\n    public Student() {\n        name = \"N/A\";\n    }\n\n    public Student(String name, int score) {\n        this.name = name;\n        this.score = score;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setScore(int score) {\n        this.score = score;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getScore() {\n        return score;\n    }\n\n    public String toString() {\n        return name + \":\" + score;\n    }\n}\n```\n\n我们可以用 Class.forName() 来加载 Student ，并使用第二个有参数的构造方法来构造Student 实例：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class NewInstanceDemo2 {\n    public static void main(String[] args) {\n        try {\n            Class c = Class.forName(args[0]);\n\n            // 指定参数\n            Class[] params = new Class[2];\n            // 第一个是String\n            params[0] = String.class;\n            // 第二个是int\n            params[1] = Integer.TYPE;\n\n            // 取得对应的构造方法\n            Constructor constructor =\n                    c.getConstructor(params);\n\n            // 指定引用内容\n            Object[] argObjs = new Object[2];\n            argObjs[0] = \"caterpillar\";\n            argObjs[1] = new Integer(90);\n\n            // 给定引用并初始化\n            Object obj = constructor.newInstance(argObjs);\n            // toString()查看\n            System.out.println(obj);\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到类\");\n        } catch (SecurityException e) {\n            e.printStackTrace();\n        } catch (NoSuchMethodException e) {\n            System.out.println(\"没有所指定的方法\");\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n输出：\n\n```\njava NewInstanceDemo2 CoreJava.day_2.Student\ncaterpillar:90\n```\n\n**调用方法**\n\n使用反射可以取回类上方法的对象代表，方法的物件代表是 java.lang.reflect.Method 的实例，我们可以使用它的 invoke() 方法来动态调用指定的方法，例如调用上面 Student 上的 setName() 等方法：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class InvokeMethodDemo {\n    public static void main(String[] args) {\n        try {\n            Class c = Class.forName(args[0]);\n            // 使用无参构造方法实例对象\n            Object targetObj = c.newInstance();\n            // 设置参数类型\n            Class[] param1 = {String.class};\n            // 根据参数取回方法\n            Method setNameMethod = c.getMethod(\"setName\", param1);\n            // 设置引用\n            Object[] argObjs1 = {\"caterpillar\"};\n            // 给引用调用指定对象的方法方法\n            setNameMethod.invoke(targetObj, argObjs1);\n\n\n            Class[] param2 = {Integer.TYPE};\n            Method setScoreMethod =\n                    c.getMethod(\"setScore\", param2);\n\n            Object[] argObjs2 = {new Integer(90)};\n            setScoreMethod.invoke(targetObj, argObjs2);\n            // 显示类描述\n            System.out.println(targetObj);\n\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到类\");\n        } catch (SecurityException e) {\n            e.printStackTrace();\n        } catch (NoSuchMethodException e) {\n            System.out.println(\"没有这个方法\");\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n我们可以指定加载 Student 类并生成实例，接着可以动态调用 setName() 和 setScore() 方法，由于调用setName() 和 setScore() 所设置的参数是 \"caterpillar\" 和90。\n\n在很少的情況下，我们需要突破 Java 的存取限制来调用受保护的（protected）或私有（private）的方法（例如我们拿到一个组件（Component），但我们没法修改它的原始码来改变某个私有方法的权限，而我们又一定要调用某个私有方法），这时我们可以使用反射机制來达到目的，一个存取私有方法的例子如下：\n\n```\nMethod privateMethod = \n            c.getDeclaredMethod(\"somePrivateMethod\", new Class[0]);\nprivateMethod.setAccessible(true);\nprivateMethod.invoke(targetObj, argObjs);\n```\n\n使用反射来动态调用方法的实例例子之一是在 JavaBean 的设定，例如在 JSP/Servlet 中，可以根据使用者的请求名和 JavaBean 的属性自动对比，将请求值设置到指定的 JavaBean 上，并自动根据参数类型转换。\n\n下面是一个map的小例子：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.Map;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class CommandUtil {\n    public static Object getCommand(Map requestMap,\n                                    String commandClass)\n            throws Exception {\n        Class c = Class.forName(commandClass);\n        Object o = c.newInstance();\n\n        return updateCommand(requestMap, o);\n    }\n\n    // 使用reflection自动找出要更新的属性\n    public static Object updateCommand(\n            Map requestMap,\n            Object command)\n            throws Exception {\n        Method[] methods =\n                command.getClass().getDeclaredMethods();\n\n        for (int i = 0; i < methods.length; i++) {\n            // 略过private、protected成员\n            // 且找出必须是set开头的方法\n            if (!Modifier.isPrivate(methods[i].getModifiers()) &&\n                    !Modifier.isProtected(methods[i].getModifiers()) &&\n                    methods[i].getName().startsWith(\"set\")) {\n                // 取得不包括set方法\n                String name = methods[i].getName()\n                        .substring(3)\n                        .toLowerCase();\n                // 如果setter名称键值对相同\n                // 调用对应的setter并给值\n                if (requestMap.containsKey(name)) {\n                    String param = (String) requestMap.get(name);\n                    Object[] values = findOutParamValues(\n                            param, methods[i]);\n                    methods[i].invoke(command, values);\n                }\n            }\n        }\n        return command;\n    }\n\n    // 转换对应类型\n    private static Object[] findOutParamValues(\n            String param, Method method) {\n        Class[] params = method.getParameterTypes();\n        Object[] objs = new Object[params.length];\n\n        for (int i = 0; i < params.length; i++) {\n            if (params[i] == String.class) {\n                objs[i] = param;\n            } else if (params[i] == Short.TYPE) {\n                short number = Short.parseShort(param);\n                objs[i] = new Short(number);\n            } else if (params[i] == Integer.TYPE) {\n                int number = Integer.parseInt(param);\n                objs[i] = new Integer(number);\n            } else if (params[i] == Long.TYPE) {\n                long number = Long.parseLong(param);\n                objs[i] = new Long(number);\n            } else if (params[i] == Float.TYPE) {\n                float number = Float.parseFloat(param);\n                objs[i] = new Float(number);\n            } else if (params[i] == Double.TYPE) {\n                double number = Double.parseDouble(param);\n                objs[i] = new Double(number);\n            } else if (params[i] == Boolean.TYPE) {\n                boolean bool = Boolean.parseBoolean(param);\n                objs[i] = new Boolean(bool);\n            }\n        }\n        return objs;\n    }\n     public static void main(String[] args) throws Exception {\n        Map<String, String> request = \n                  new HashMap<String, String>();\n        request.put(\"name\", \"caterpillar\");\n        request.put(\"score\", \"90\");\n        Object obj = CommandUtil.getCommand(request, args[0]);\n        System.out.println(obj);\n    }\n}\n\n```\nCommandUtil 可以自动根据方法上的参数类型，将Map 中的value转换成相应的类型，目前它可以转换基本类型和 String。\n\n输出：\n\n```\njava CommandUtilDemo CoreJava.day_2.Student\ncaterpillar:90\n```\n\n当然也可以修改**成员变量**，尽管直接读取类的成员属性（Field）是不被鼓励的，但我们仍是可以直接存取公共的（public）成员属性的，而我们甚至也可以通过反射机制来读取私用成员变量，以一个例子来说明：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class TestField {\n    public int testInt;\n    public String testString;\n\n    public String toString() {\n        return testInt + \":\" + testString;\n    }\n}\n\n```\n然后利用反射机制动态的读取成员变量：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.Field;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class AssignFieldDemo {\n    public static void main(String[] args) {\n        try {\n            Class c = Class.forName(args[0]);\n            Object targetObj = c.newInstance();\n\n            Field testInt = c.getField(\"testInt\");\n            testInt.setInt(targetObj, 99);\n\n            Field testString = c.getField(\"testString\");\n            testString.set(targetObj, \"caterpillar\");\n\n            System.out.println(targetObj);\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"没有指定类\");\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"找不到指定的类\");\n        } catch (SecurityException e) {\n            e.printStackTrace();\n        } catch (NoSuchFieldException e) {\n            System.out.println(\"找不到指定的成员变量\");\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n输出：\n\n```\njava AssignFieldDemo CoreJava.day_2.TestField\n99:caterpillar\n```\n如果有必要的话，也可以通过反射机制来读取私有的成员变量，例如：\n\n```\nField privateField = c.getDeclaredField(\"privateField\"); \nprivateField.setAccessible(true);\nprivateField.setInt(targetObj, 99);\n```\n\n**数组**\n在 Java 中数组也是一个对象，也会有一个 Class 实例来表示它，我们用几个基本类型和String来进行测试：\n\n```\npackage CoreJava.day_2;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class ArrayDemo {\n    public static void main(String[] args) {\n        short[] sArr = new short[5];\n        int[] iArr = new int[5];\n        long[] lArr = new long[5];\n        float[] fArr = new float[5];\n        double[] dArr = new double[5];\n        byte[] bArr = new byte[5];\n        boolean[] zArr = new boolean[5];\n        String[] strArr = new String[5];\n\n        System.out.println(\"short 数组：\" + sArr.getClass());\n        System.out.println(\"int 数组：\" + iArr.getClass());\n        System.out.println(\"long 数组：\" + lArr.getClass());\n        System.out.println(\"float 数组：\" + fArr.getClass());\n        System.out.println(\"double 数组：\" + dArr.getClass());\n        System.out.println(\"byte 数组：\" + bArr.getClass());\n        System.out.println(\"boolean 数组：\" + zArr.getClass());\n        System.out.println(\"String 数组：\" + strArr.getClass());\n    }\n}\n\n```\n输出：\n\n```\nshort 数组：class [S\nint 数组：class [I\nlong 数组：class [J\nfloat 数组：class [F\ndouble 数组：class [D\nbyte 数组：class [B\nboolean 数组：class [Z\nString 数组：class [Ljava.lang.String;\n\nProcess finished with exit code 0\n```\n\n要使用**反射机制动态生成数组**的话，也可以这样：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.Array;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class NewArrayDemo {\n    public static void main(String[] args) {\n        Class c = String.class;\n        Object objArr = Array.newInstance(c, 5);\n\n        for (int i = 0; i < 5; i++) {\n            Array.set(objArr, i, i + \"\");\n        }\n\n        for (int i = 0; i < 5; i++) {\n            System.out.print(Array.get(objArr, i) + \" \");\n        }\n        System.out.println();\n\n        String[] strs = (String[]) objArr;\n        for (String s : strs) {\n            System.out.print(s + \" \");\n        }\n    }\n}\n\n```\n\nArray.newInstance() 的第一个参数是指定参数类型，而第二个参数是用来指定数组长度的，结果如下：\n\n```\n0 1 2 3 4\n0 1 2 3 4\n```\n\n如果是二维数组，也是一样的：\n\n```\npackage CoreJava.day_2;\n\nimport java.lang.reflect.Array;\n\n/**\n * @author 李智\n * @date 2016/12/5\n */\npublic class NewArrayDemo2 {\n    public static void main(String[] args) {\n        Class c = String.class;\n\n        // 打算建立一个3*4数组\n        int[] dim = new int[]{3, 4};\n        Object objArr = Array.newInstance(c, dim);\n\n        for (int i = 0; i < 3; i++) {\n            Object row = Array.get(objArr, i);\n            for (int j = 0; j < 4; j++) {\n                Array.set(row, j, \"\" + (i + 1) * (j + 1));\n            }\n        }\n\n        for (int i = 0; i < 3; i++) {\n            Object row = Array.get(objArr, i);\n            for (int j = 0; j < 4; j++) {\n                System.out.print(Array.get(row, j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n\n```\n\n输出结果：\n\n```\n1 2 3 4\n2 4 6 8\n3 6 9 12\n```\n\n如果想要知道数组元素的类型，可以在取得数组的 Class 实例之后，使用 Class 实例的 getComponentType() 方法，所取回的是元素的 Class 实例，例如：\n\n```\nint[] iArr = new int[5];\nSystem.out.println(iArr.getClass().getComponentType());\n```\n\n\n对反射的总结差不多就写到这里了，查阅了很多资料，网络上写的也是参差不齐的，在手写的几十个demo支撑下，得出的一点关于反射的东西，肯定不能说全部正确，但是还是可以提供一些帮助的  -。-\n","slug":"Java反射学习总结（五）","published":1,"updated":"2018-06-30T17:49:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kf0001frhso0ufj26vr","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p><strong>使用反射实例对象</strong></p>\n<p>使用反射机制，我们可以在运行时动态加载类并且实例化对象，操作对象的方法、改变类成员的值，甚至还可以改变私有（private）成员的值。</p>\n<p>我们可以用 Class 的 newInstance() 方法来实例化一个对象，实例化的对象是以 Object 传回的，例如：<br><a id=\"more\"></a><br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Class c</span> = Class.forName(className);</div><div class=\"line\"><span class=\"attribute\">Object obj</span> = c.newInstance();</div></pre></td></tr></table></figure></p>\n<p>下面范例动态加载list接口的类：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> NewInstanceDemo &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = <span class=\"keyword\">Class</span>.forName(args[<span class=\"number\">0</span>]);</div><div class=\"line\">            List list = (List) c.newInstance();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">                list.add(<span class=\"string\">\"element \"</span> + i);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (Object o : list.toArray()) &#123;</div><div class=\"line\">                System.out.<span class=\"keyword\">println</span>(o);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到指定的类\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">java CoreJava<span class=\"selector-class\">.day_2</span><span class=\"selector-class\">.NewInstanceDemo</span> java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.ArrayList</span></div><div class=\"line\">element <span class=\"number\">0</span></div><div class=\"line\">element <span class=\"number\">1</span></div><div class=\"line\">element <span class=\"number\">2</span></div><div class=\"line\">element <span class=\"number\">3</span></div><div class=\"line\">element <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>实际上如果想要使用反射来动态加载类，通常是对对象的接口或类别都一无所知，也就无法像上面对 newInstance() 传回的对象进行接口转换。</p>\n<p>如果加载的类中具备无参数的构造方法，则可以无参数的 newInstance() 来构造一个不指定初始化的引用，如果要在动态加载及生成对象时指定对象的引用，则要先指定参数类型、取得 Constructor 对象、使用 Constructor 的 newInstance() 并指定参数。</p>\n<p>可以用一个例子来说明，先定义一个student类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/05</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> score;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        name = <span class=\"string\">\"N/A\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> score)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.score = score;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setScore</span><span class=\"params\">(<span class=\"keyword\">int</span> score)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.score = score;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getScore</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> score;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name + <span class=\"string\">\":\"</span> + score;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以用 Class.forName() 来加载 Student ，并使用第二个有参数的构造方法来构造Student 实例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> NewInstanceDemo2 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = <span class=\"keyword\">Class</span>.forName(args[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 指定参数</span></div><div class=\"line\">            <span class=\"keyword\">Class</span>[] params = <span class=\"keyword\">new</span> <span class=\"keyword\">Class</span>[<span class=\"number\">2</span>];</div><div class=\"line\">            <span class=\"comment\">// 第一个是String</span></div><div class=\"line\">            params[<span class=\"number\">0</span>] = String.<span class=\"keyword\">class</span>;</div><div class=\"line\">            <span class=\"comment\">// 第二个是int</span></div><div class=\"line\">            params[<span class=\"number\">1</span>] = Integer.TYPE;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 取得对应的构造方法</span></div><div class=\"line\">            Constructor constructor =</div><div class=\"line\">                    c.getConstructor(params);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 指定引用内容</span></div><div class=\"line\">            Object[] argObjs = <span class=\"keyword\">new</span> Object[<span class=\"number\">2</span>];</div><div class=\"line\">            argObjs[<span class=\"number\">0</span>] = <span class=\"string\">\"caterpillar\"</span>;</div><div class=\"line\">            argObjs[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> Integer(<span class=\"number\">90</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 给定引用并初始化</span></div><div class=\"line\">            Object obj = constructor.newInstance(argObjs);</div><div class=\"line\">            <span class=\"comment\">// toString()查看</span></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(obj);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到类\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SecurityException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"没有所指定的方法\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">java</span> <span class=\"selector-tag\">NewInstanceDemo2</span> <span class=\"selector-tag\">CoreJava</span><span class=\"selector-class\">.day_2</span><span class=\"selector-class\">.Student</span></div><div class=\"line\"><span class=\"selector-tag\">caterpillar</span><span class=\"selector-pseudo\">:90</span></div></pre></td></tr></table></figure>\n<p><strong>调用方法</strong></p>\n<p>使用反射可以取回类上方法的对象代表，方法的物件代表是 java.lang.reflect.Method 的实例，我们可以使用它的 invoke() 方法来动态调用指定的方法，例如调用上面 Student 上的 setName() 等方法：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> InvokeMethodDemo &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = <span class=\"keyword\">Class</span>.forName(args[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"comment\">// 使用无参构造方法实例对象</span></div><div class=\"line\">            Object targetObj = c.newInstance();</div><div class=\"line\">            <span class=\"comment\">// 设置参数类型</span></div><div class=\"line\">            <span class=\"keyword\">Class</span>[] param1 = &#123;String.<span class=\"keyword\">class</span>&#125;;</div><div class=\"line\">            <span class=\"comment\">// 根据参数取回方法</span></div><div class=\"line\">            Method setNameMethod = c.getMethod(<span class=\"string\">\"setName\"</span>, param1);</div><div class=\"line\">            <span class=\"comment\">// 设置引用</span></div><div class=\"line\">            Object[] argObjs1 = &#123;<span class=\"string\">\"caterpillar\"</span>&#125;;</div><div class=\"line\">            <span class=\"comment\">// 给引用调用指定对象的方法方法</span></div><div class=\"line\">            setNameMethod.invoke(targetObj, argObjs1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">Class</span>[] param2 = &#123;Integer.TYPE&#125;;</div><div class=\"line\">            Method setScoreMethod =</div><div class=\"line\">                    c.getMethod(<span class=\"string\">\"setScore\"</span>, param2);</div><div class=\"line\"></div><div class=\"line\">            Object[] argObjs2 = &#123;<span class=\"keyword\">new</span> Integer(<span class=\"number\">90</span>)&#125;;</div><div class=\"line\">            setScoreMethod.invoke(targetObj, argObjs2);</div><div class=\"line\">            <span class=\"comment\">// 显示类描述</span></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(targetObj);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到类\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SecurityException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"没有这个方法\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以指定加载 Student 类并生成实例，接着可以动态调用 setName() 和 setScore() 方法，由于调用setName() 和 setScore() 所设置的参数是 “caterpillar” 和90。</p>\n<p>在很少的情況下，我们需要突破 Java 的存取限制来调用受保护的（protected）或私有（private）的方法（例如我们拿到一个组件（Component），但我们没法修改它的原始码来改变某个私有方法的权限，而我们又一定要调用某个私有方法），这时我们可以使用反射机制來达到目的，一个存取私有方法的例子如下：</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">privateMethod</span> = </span></div><div class=\"line\">            <span class=\"title\">c</span>.<span class=\"title\">getDeclaredMethod</span><span class=\"params\">(\"somePrivateMethod\", <span class=\"keyword\">new</span> <span class=\"keyword\">Class</span>[0])</span>;</div><div class=\"line\">privateMethod.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">privateMethod.invoke(targetObj, argObjs);</div></pre></td></tr></table></figure>\n<p>使用反射来动态调用方法的实例例子之一是在 JavaBean 的设定，例如在 JSP/Servlet 中，可以根据使用者的请求名和 JavaBean 的属性自动对比，将请求值设置到指定的 JavaBean 上，并自动根据参数类型转换。</p>\n<p>下面是一个map的小例子：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Modifier;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class CommandUtil &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">Object</span> getCommand(Map requestMap,</div><div class=\"line\">                                    <span class=\"keyword\">String</span> commandClass)</div><div class=\"line\">            <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">        Class c = Class.forName(commandClass);</div><div class=\"line\">        <span class=\"keyword\">Object</span> o = c.newInstance();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> updateCommand(requestMap, o);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用reflection自动找出要更新的属性</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">Object</span> updateCommand(</div><div class=\"line\">            Map requestMap,</div><div class=\"line\">            <span class=\"keyword\">Object</span> command)</div><div class=\"line\">            <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">        Method[] methods =</div><div class=\"line\">                command.getClass().getDeclaredMethods();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; methods.length; i++) &#123;</div><div class=\"line\">            <span class=\"comment\">// 略过private、protected成员</span></div><div class=\"line\">            <span class=\"comment\">// 且找出必须是set开头的方法</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!Modifier.isPrivate(methods[i].getModifiers()) &amp;&amp;</div><div class=\"line\">                    !Modifier.isProtected(methods[i].getModifiers()) &amp;&amp;</div><div class=\"line\">                    methods[i].getName().startsWith(<span class=\"string\">\"set\"</span>)) &#123;</div><div class=\"line\">                <span class=\"comment\">// 取得不包括set方法</span></div><div class=\"line\">                <span class=\"keyword\">String</span> name = methods[i].getName()</div><div class=\"line\">                        .substring(<span class=\"number\">3</span>)</div><div class=\"line\">                        .toLowerCase();</div><div class=\"line\">                <span class=\"comment\">// 如果setter名称键值对相同</span></div><div class=\"line\">                <span class=\"comment\">// 调用对应的setter并给值</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (requestMap.containsKey(name)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">String</span> param = (<span class=\"keyword\">String</span>) requestMap.<span class=\"built_in\">get</span>(name);</div><div class=\"line\">                    <span class=\"keyword\">Object</span>[] values = findOutParamValues(</div><div class=\"line\">                            param, methods[i]);</div><div class=\"line\">                    methods[i].invoke(command, values);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> command;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 转换对应类型</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">Object</span>[] findOutParamValues(</div><div class=\"line\">            <span class=\"keyword\">String</span> param, Method method) &#123;</div><div class=\"line\">        Class[] params = method.getParameterTypes();</div><div class=\"line\">        <span class=\"keyword\">Object</span>[] objs = <span class=\"keyword\">new</span> <span class=\"keyword\">Object</span>[params.length];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; params.length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (params[i] == <span class=\"keyword\">String</span>.class) &#123;</div><div class=\"line\">                objs[i] = param;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params[i] == Short.TYPE) &#123;</div><div class=\"line\">                <span class=\"keyword\">short</span> number = Short.parseShort(param);</div><div class=\"line\">                objs[i] = <span class=\"keyword\">new</span> Short(number);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params[i] == Integer.TYPE) &#123;</div><div class=\"line\">                <span class=\"built_in\">int</span> number = Integer.parseInt(param);</div><div class=\"line\">                objs[i] = <span class=\"keyword\">new</span> Integer(number);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params[i] == Long.TYPE) &#123;</div><div class=\"line\">                <span class=\"keyword\">long</span> number = Long.parseLong(param);</div><div class=\"line\">                objs[i] = <span class=\"keyword\">new</span> Long(number);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params[i] == Float.TYPE) &#123;</div><div class=\"line\">                <span class=\"built_in\">float</span> number = Float.parseFloat(param);</div><div class=\"line\">                objs[i] = <span class=\"keyword\">new</span> Float(number);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params[i] == Double.TYPE) &#123;</div><div class=\"line\">                <span class=\"keyword\">double</span> number = Double.parseDouble(param);</div><div class=\"line\">                objs[i] = <span class=\"keyword\">new</span> Double(number);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params[i] == Boolean.TYPE) &#123;</div><div class=\"line\">                <span class=\"built_in\">boolean</span> bool = Boolean.parseBoolean(param);</div><div class=\"line\">                objs[i] = <span class=\"keyword\">new</span> Boolean(bool);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> objs;</div><div class=\"line\">    &#125;</div><div class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">        Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; request = </div><div class=\"line\">                  <span class=\"keyword\">new</span> <span class=\"keyword\">HashMap</span>&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt;();</div><div class=\"line\">        request.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"caterpillar\"</span>);</div><div class=\"line\">        request.put(<span class=\"string\">\"score\"</span>, <span class=\"string\">\"90\"</span>);</div><div class=\"line\">        <span class=\"keyword\">Object</span> obj = CommandUtil.getCommand(request, args[<span class=\"number\">0</span>]);</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>CommandUtil 可以自动根据方法上的参数类型，将Map 中的value转换成相应的类型，目前它可以转换基本类型和 String。</p>\n<p>输出：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">java</span> <span class=\"selector-tag\">CommandUtilDemo</span> <span class=\"selector-tag\">CoreJava</span><span class=\"selector-class\">.day_2</span><span class=\"selector-class\">.Student</span></div><div class=\"line\"><span class=\"selector-tag\">caterpillar</span><span class=\"selector-pseudo\">:90</span></div></pre></td></tr></table></figure>\n<p>当然也可以修改<strong>成员变量</strong>，尽管直接读取类的成员属性（Field）是不被鼓励的，但我们仍是可以直接存取公共的（public）成员属性的，而我们甚至也可以通过反射机制来读取私用成员变量，以一个例子来说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestField</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> testInt;</div><div class=\"line\">    <span class=\"keyword\">public</span> String testString;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> testInt + <span class=\"string\">\":\"</span> + testString;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后利用反射机制动态的读取成员变量：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">package <span class=\"type\">CoreJava</span>.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AssignFieldDemo</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"type\">String</span>[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"type\">Class</span> <span class=\"built_in\">c</span> = <span class=\"type\">Class</span>.forName(args[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"type\">Object</span> targetObj = <span class=\"built_in\">c</span>.newInstance();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"type\">Field</span> testInt = <span class=\"built_in\">c</span>.getField(<span class=\"string\">\"testInt\"</span>);</div><div class=\"line\">            testInt.setInt(targetObj, <span class=\"number\">99</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"type\">Field</span> testString = <span class=\"built_in\">c</span>.getField(<span class=\"string\">\"testString\"</span>);</div><div class=\"line\">            testString.<span class=\"keyword\">set</span>(targetObj, <span class=\"string\">\"caterpillar\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(targetObj);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">ArrayIndexOutOfBoundsException</span> e) &#123;</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"没有指定类\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">ClassNotFoundException</span> e) &#123;</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"找不到指定的类\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">SecurityException</span> e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">NoSuchFieldException</span> e) &#123;</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"找不到指定的成员变量\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">InstantiationException</span> e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">IllegalAccessException</span> e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">java</span> <span class=\"selector-tag\">AssignFieldDemo</span> <span class=\"selector-tag\">CoreJava</span><span class=\"selector-class\">.day_2</span><span class=\"selector-class\">.TestField</span></div><div class=\"line\">99<span class=\"selector-pseudo\">:caterpillar</span></div></pre></td></tr></table></figure>\n<p>如果有必要的话，也可以通过反射机制来读取私有的成员变量，例如：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Field privateField = c.getDeclaredField(<span class=\"string\">\"privateField\"</span>)<span class=\"comment\">; </span></div><div class=\"line\">privateField.setAccessible(true)<span class=\"comment\">;</span></div><div class=\"line\">privateField.setInt(targetObj, <span class=\"number\">99</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p><strong>数组</strong><br>在 Java 中数组也是一个对象，也会有一个 Class 实例来表示它，我们用几个基本类型和String来进行测试：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ArrayDemo &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">short</span>[] sArr = <span class=\"keyword\">new</span> <span class=\"keyword\">short</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span>[] iArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">long</span>[] lArr = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">float</span>[] fArr = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">double</span>[] dArr = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] bArr = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">boolean</span>[] zArr = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">String</span>[] strArr = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>[<span class=\"number\">5</span>];</div><div class=\"line\"></div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"short 数组：\"</span> + sArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"int 数组：\"</span> + iArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"long 数组：\"</span> + lArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"float 数组：\"</span> + fArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"double 数组：\"</span> + dArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"byte 数组：\"</span> + bArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"boolean 数组：\"</span> + zArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"String 数组：\"</span> + strArr.getClass());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">short</span> 数组：<span class=\"keyword\">class</span> [S</div><div class=\"line\"><span class=\"keyword\">int</span> 数组：<span class=\"keyword\">class</span> [I</div><div class=\"line\"><span class=\"keyword\">long</span> 数组：<span class=\"keyword\">class</span> [J</div><div class=\"line\"><span class=\"keyword\">float</span> 数组：<span class=\"keyword\">class</span> [F</div><div class=\"line\"><span class=\"keyword\">double</span> 数组：<span class=\"keyword\">class</span> [D</div><div class=\"line\"><span class=\"keyword\">byte</span> 数组：<span class=\"keyword\">class</span> [B</div><div class=\"line\"><span class=\"keyword\">boolean</span> 数组：<span class=\"keyword\">class</span> [Z</div><div class=\"line\"><span class=\"keyword\">String</span> 数组：<span class=\"keyword\">class</span> [Ljava.lang.<span class=\"keyword\">String</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Process</span> finished with exit code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>要使用<strong>反射机制动态生成数组</strong>的话，也可以这样：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.<span class=\"keyword\">Array</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class NewArrayDemo &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        Class c = <span class=\"keyword\">String</span>.class;</div><div class=\"line\">        <span class=\"keyword\">Object</span> objArr = <span class=\"keyword\">Array</span>.newInstance(c, <span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">Array</span>.<span class=\"built_in\">set</span>(objArr, i, i + <span class=\"string\">\"\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">            System.out.<span class=\"built_in\">print</span>(<span class=\"keyword\">Array</span>.<span class=\"built_in\">get</span>(objArr, i) + <span class=\"string\">\" \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">String</span>[] strs = (<span class=\"keyword\">String</span>[]) objArr;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">String</span> s : strs) &#123;</div><div class=\"line\">            System.out.<span class=\"built_in\">print</span>(s + <span class=\"string\">\" \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Array.newInstance() 的第一个参数是指定参数类型，而第二个参数是用来指定数组长度的，结果如下：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></div><div class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>如果是二维数组，也是一样的：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.<span class=\"keyword\">Array</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class NewArrayDemo2 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        Class c = <span class=\"keyword\">String</span>.class;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 打算建立一个3*4数组</span></div><div class=\"line\">        <span class=\"built_in\">int</span>[] dim = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[]&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">Object</span> objArr = <span class=\"keyword\">Array</span>.newInstance(c, dim);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">Object</span> row = <span class=\"keyword\">Array</span>.<span class=\"built_in\">get</span>(objArr, i);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">Array</span>.<span class=\"built_in\">set</span>(row, j, <span class=\"string\">\"\"</span> + (i + <span class=\"number\">1</span>) * (j + <span class=\"number\">1</span>));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">Object</span> row = <span class=\"keyword\">Array</span>.<span class=\"built_in\">get</span>(objArr, i);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</div><div class=\"line\">                System.out.<span class=\"built_in\">print</span>(<span class=\"keyword\">Array</span>.<span class=\"built_in\">get</span>(row, j) + <span class=\"string\">\" \"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.out.<span class=\"built_in\">println</span>();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">1 </span><span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></div><div class=\"line\"><span class=\"symbol\">2 </span><span class=\"number\">4</span> <span class=\"number\">6</span> <span class=\"number\">8</span></div><div class=\"line\"><span class=\"symbol\">3 </span><span class=\"number\">6</span> <span class=\"number\">9</span> <span class=\"number\">12</span></div></pre></td></tr></table></figure>\n<p>如果想要知道数组元素的类型，可以在取得数组的 Class 实例之后，使用 Class 实例的 getComponentType() 方法，所取回的是元素的 Class 实例，例如：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>[] iArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</div><div class=\"line\">System.out.<span class=\"built_in\">println</span>(iArr.getClass().getComponentType());</div></pre></td></tr></table></figure>\n<p>对反射的总结差不多就写到这里了，查阅了很多资料，网络上写的也是参差不齐的，在手写的几十个demo支撑下，得出的一点关于反射的东西，肯定不能说全部正确，但是还是可以提供一些帮助的  -。-</p>\n","excerpt":"<p><strong>使用反射实例对象</strong></p>\n<p>使用反射机制，我们可以在运行时动态加载类并且实例化对象，操作对象的方法、改变类成员的值，甚至还可以改变私有（private）成员的值。</p>\n<p>我们可以用 Class 的 newInstance() 方法来实例化一个对象，实例化的对象是以 Object 传回的，例如：<br></p>","more":"<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Class c</span> = Class.forName(className);</div><div class=\"line\"><span class=\"attribute\">Object obj</span> = c.newInstance();</div></pre></td></tr></table></figure><p></p>\n<p>下面范例动态加载list接口的类：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> NewInstanceDemo &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = <span class=\"keyword\">Class</span>.forName(args[<span class=\"number\">0</span>]);</div><div class=\"line\">            List list = (List) c.newInstance();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">                list.add(<span class=\"string\">\"element \"</span> + i);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (Object o : list.toArray()) &#123;</div><div class=\"line\">                System.out.<span class=\"keyword\">println</span>(o);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到指定的类\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">java CoreJava<span class=\"selector-class\">.day_2</span><span class=\"selector-class\">.NewInstanceDemo</span> java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.ArrayList</span></div><div class=\"line\">element <span class=\"number\">0</span></div><div class=\"line\">element <span class=\"number\">1</span></div><div class=\"line\">element <span class=\"number\">2</span></div><div class=\"line\">element <span class=\"number\">3</span></div><div class=\"line\">element <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>实际上如果想要使用反射来动态加载类，通常是对对象的接口或类别都一无所知，也就无法像上面对 newInstance() 传回的对象进行接口转换。</p>\n<p>如果加载的类中具备无参数的构造方法，则可以无参数的 newInstance() 来构造一个不指定初始化的引用，如果要在动态加载及生成对象时指定对象的引用，则要先指定参数类型、取得 Constructor 对象、使用 Constructor 的 newInstance() 并指定参数。</p>\n<p>可以用一个例子来说明，先定义一个student类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/05</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> score;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        name = <span class=\"string\">\"N/A\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> score)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.score = score;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setScore</span><span class=\"params\">(<span class=\"keyword\">int</span> score)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.score = score;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getScore</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> score;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name + <span class=\"string\">\":\"</span> + score;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以用 Class.forName() 来加载 Student ，并使用第二个有参数的构造方法来构造Student 实例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> NewInstanceDemo2 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = <span class=\"keyword\">Class</span>.forName(args[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 指定参数</span></div><div class=\"line\">            <span class=\"keyword\">Class</span>[] params = <span class=\"keyword\">new</span> <span class=\"keyword\">Class</span>[<span class=\"number\">2</span>];</div><div class=\"line\">            <span class=\"comment\">// 第一个是String</span></div><div class=\"line\">            params[<span class=\"number\">0</span>] = String.<span class=\"keyword\">class</span>;</div><div class=\"line\">            <span class=\"comment\">// 第二个是int</span></div><div class=\"line\">            params[<span class=\"number\">1</span>] = Integer.TYPE;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 取得对应的构造方法</span></div><div class=\"line\">            Constructor constructor =</div><div class=\"line\">                    c.getConstructor(params);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 指定引用内容</span></div><div class=\"line\">            Object[] argObjs = <span class=\"keyword\">new</span> Object[<span class=\"number\">2</span>];</div><div class=\"line\">            argObjs[<span class=\"number\">0</span>] = <span class=\"string\">\"caterpillar\"</span>;</div><div class=\"line\">            argObjs[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> Integer(<span class=\"number\">90</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 给定引用并初始化</span></div><div class=\"line\">            Object obj = constructor.newInstance(argObjs);</div><div class=\"line\">            <span class=\"comment\">// toString()查看</span></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(obj);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到类\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SecurityException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"没有所指定的方法\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">java</span> <span class=\"selector-tag\">NewInstanceDemo2</span> <span class=\"selector-tag\">CoreJava</span><span class=\"selector-class\">.day_2</span><span class=\"selector-class\">.Student</span></div><div class=\"line\"><span class=\"selector-tag\">caterpillar</span><span class=\"selector-pseudo\">:90</span></div></pre></td></tr></table></figure>\n<p><strong>调用方法</strong></p>\n<p>使用反射可以取回类上方法的对象代表，方法的物件代表是 java.lang.reflect.Method 的实例，我们可以使用它的 invoke() 方法来动态调用指定的方法，例如调用上面 Student 上的 setName() 等方法：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> InvokeMethodDemo &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">Class</span> c = <span class=\"keyword\">Class</span>.forName(args[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"comment\">// 使用无参构造方法实例对象</span></div><div class=\"line\">            Object targetObj = c.newInstance();</div><div class=\"line\">            <span class=\"comment\">// 设置参数类型</span></div><div class=\"line\">            <span class=\"keyword\">Class</span>[] param1 = &#123;String.<span class=\"keyword\">class</span>&#125;;</div><div class=\"line\">            <span class=\"comment\">// 根据参数取回方法</span></div><div class=\"line\">            Method setNameMethod = c.getMethod(<span class=\"string\">\"setName\"</span>, param1);</div><div class=\"line\">            <span class=\"comment\">// 设置引用</span></div><div class=\"line\">            Object[] argObjs1 = &#123;<span class=\"string\">\"caterpillar\"</span>&#125;;</div><div class=\"line\">            <span class=\"comment\">// 给引用调用指定对象的方法方法</span></div><div class=\"line\">            setNameMethod.invoke(targetObj, argObjs1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">Class</span>[] param2 = &#123;Integer.TYPE&#125;;</div><div class=\"line\">            Method setScoreMethod =</div><div class=\"line\">                    c.getMethod(<span class=\"string\">\"setScore\"</span>, param2);</div><div class=\"line\"></div><div class=\"line\">            Object[] argObjs2 = &#123;<span class=\"keyword\">new</span> Integer(<span class=\"number\">90</span>)&#125;;</div><div class=\"line\">            setScoreMethod.invoke(targetObj, argObjs2);</div><div class=\"line\">            <span class=\"comment\">// 显示类描述</span></div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(targetObj);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"找不到类\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SecurityException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</div><div class=\"line\">            System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"没有这个方法\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以指定加载 Student 类并生成实例，接着可以动态调用 setName() 和 setScore() 方法，由于调用setName() 和 setScore() 所设置的参数是 “caterpillar” 和90。</p>\n<p>在很少的情況下，我们需要突破 Java 的存取限制来调用受保护的（protected）或私有（private）的方法（例如我们拿到一个组件（Component），但我们没法修改它的原始码来改变某个私有方法的权限，而我们又一定要调用某个私有方法），这时我们可以使用反射机制來达到目的，一个存取私有方法的例子如下：</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">privateMethod</span> = </span></div><div class=\"line\">            <span class=\"title\">c</span>.<span class=\"title\">getDeclaredMethod</span><span class=\"params\">(\"somePrivateMethod\", <span class=\"keyword\">new</span> <span class=\"keyword\">Class</span>[0])</span>;</div><div class=\"line\">privateMethod.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">privateMethod.invoke(targetObj, argObjs);</div></pre></td></tr></table></figure>\n<p>使用反射来动态调用方法的实例例子之一是在 JavaBean 的设定，例如在 JSP/Servlet 中，可以根据使用者的请求名和 JavaBean 的属性自动对比，将请求值设置到指定的 JavaBean 上，并自动根据参数类型转换。</p>\n<p>下面是一个map的小例子：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Modifier;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class CommandUtil &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">Object</span> getCommand(Map requestMap,</div><div class=\"line\">                                    <span class=\"keyword\">String</span> commandClass)</div><div class=\"line\">            <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">        Class c = Class.forName(commandClass);</div><div class=\"line\">        <span class=\"keyword\">Object</span> o = c.newInstance();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> updateCommand(requestMap, o);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用reflection自动找出要更新的属性</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">Object</span> updateCommand(</div><div class=\"line\">            Map requestMap,</div><div class=\"line\">            <span class=\"keyword\">Object</span> command)</div><div class=\"line\">            <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">        Method[] methods =</div><div class=\"line\">                command.getClass().getDeclaredMethods();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; methods.length; i++) &#123;</div><div class=\"line\">            <span class=\"comment\">// 略过private、protected成员</span></div><div class=\"line\">            <span class=\"comment\">// 且找出必须是set开头的方法</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!Modifier.isPrivate(methods[i].getModifiers()) &amp;&amp;</div><div class=\"line\">                    !Modifier.isProtected(methods[i].getModifiers()) &amp;&amp;</div><div class=\"line\">                    methods[i].getName().startsWith(<span class=\"string\">\"set\"</span>)) &#123;</div><div class=\"line\">                <span class=\"comment\">// 取得不包括set方法</span></div><div class=\"line\">                <span class=\"keyword\">String</span> name = methods[i].getName()</div><div class=\"line\">                        .substring(<span class=\"number\">3</span>)</div><div class=\"line\">                        .toLowerCase();</div><div class=\"line\">                <span class=\"comment\">// 如果setter名称键值对相同</span></div><div class=\"line\">                <span class=\"comment\">// 调用对应的setter并给值</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (requestMap.containsKey(name)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">String</span> param = (<span class=\"keyword\">String</span>) requestMap.<span class=\"built_in\">get</span>(name);</div><div class=\"line\">                    <span class=\"keyword\">Object</span>[] values = findOutParamValues(</div><div class=\"line\">                            param, methods[i]);</div><div class=\"line\">                    methods[i].invoke(command, values);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> command;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 转换对应类型</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">Object</span>[] findOutParamValues(</div><div class=\"line\">            <span class=\"keyword\">String</span> param, Method method) &#123;</div><div class=\"line\">        Class[] params = method.getParameterTypes();</div><div class=\"line\">        <span class=\"keyword\">Object</span>[] objs = <span class=\"keyword\">new</span> <span class=\"keyword\">Object</span>[params.length];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; params.length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (params[i] == <span class=\"keyword\">String</span>.class) &#123;</div><div class=\"line\">                objs[i] = param;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params[i] == Short.TYPE) &#123;</div><div class=\"line\">                <span class=\"keyword\">short</span> number = Short.parseShort(param);</div><div class=\"line\">                objs[i] = <span class=\"keyword\">new</span> Short(number);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params[i] == Integer.TYPE) &#123;</div><div class=\"line\">                <span class=\"built_in\">int</span> number = Integer.parseInt(param);</div><div class=\"line\">                objs[i] = <span class=\"keyword\">new</span> Integer(number);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params[i] == Long.TYPE) &#123;</div><div class=\"line\">                <span class=\"keyword\">long</span> number = Long.parseLong(param);</div><div class=\"line\">                objs[i] = <span class=\"keyword\">new</span> Long(number);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params[i] == Float.TYPE) &#123;</div><div class=\"line\">                <span class=\"built_in\">float</span> number = Float.parseFloat(param);</div><div class=\"line\">                objs[i] = <span class=\"keyword\">new</span> Float(number);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params[i] == Double.TYPE) &#123;</div><div class=\"line\">                <span class=\"keyword\">double</span> number = Double.parseDouble(param);</div><div class=\"line\">                objs[i] = <span class=\"keyword\">new</span> Double(number);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (params[i] == Boolean.TYPE) &#123;</div><div class=\"line\">                <span class=\"built_in\">boolean</span> bool = Boolean.parseBoolean(param);</div><div class=\"line\">                objs[i] = <span class=\"keyword\">new</span> Boolean(bool);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> objs;</div><div class=\"line\">    &#125;</div><div class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">        Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; request = </div><div class=\"line\">                  <span class=\"keyword\">new</span> <span class=\"keyword\">HashMap</span>&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt;();</div><div class=\"line\">        request.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"caterpillar\"</span>);</div><div class=\"line\">        request.put(<span class=\"string\">\"score\"</span>, <span class=\"string\">\"90\"</span>);</div><div class=\"line\">        <span class=\"keyword\">Object</span> obj = CommandUtil.getCommand(request, args[<span class=\"number\">0</span>]);</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>CommandUtil 可以自动根据方法上的参数类型，将Map 中的value转换成相应的类型，目前它可以转换基本类型和 String。</p>\n<p>输出：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">java</span> <span class=\"selector-tag\">CommandUtilDemo</span> <span class=\"selector-tag\">CoreJava</span><span class=\"selector-class\">.day_2</span><span class=\"selector-class\">.Student</span></div><div class=\"line\"><span class=\"selector-tag\">caterpillar</span><span class=\"selector-pseudo\">:90</span></div></pre></td></tr></table></figure>\n<p>当然也可以修改<strong>成员变量</strong>，尽管直接读取类的成员属性（Field）是不被鼓励的，但我们仍是可以直接存取公共的（public）成员属性的，而我们甚至也可以通过反射机制来读取私用成员变量，以一个例子来说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestField</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> testInt;</div><div class=\"line\">    <span class=\"keyword\">public</span> String testString;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> testInt + <span class=\"string\">\":\"</span> + testString;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后利用反射机制动态的读取成员变量：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">package <span class=\"type\">CoreJava</span>.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AssignFieldDemo</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"type\">String</span>[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"type\">Class</span> <span class=\"built_in\">c</span> = <span class=\"type\">Class</span>.forName(args[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"type\">Object</span> targetObj = <span class=\"built_in\">c</span>.newInstance();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"type\">Field</span> testInt = <span class=\"built_in\">c</span>.getField(<span class=\"string\">\"testInt\"</span>);</div><div class=\"line\">            testInt.setInt(targetObj, <span class=\"number\">99</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"type\">Field</span> testString = <span class=\"built_in\">c</span>.getField(<span class=\"string\">\"testString\"</span>);</div><div class=\"line\">            testString.<span class=\"keyword\">set</span>(targetObj, <span class=\"string\">\"caterpillar\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(targetObj);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">ArrayIndexOutOfBoundsException</span> e) &#123;</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"没有指定类\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">ClassNotFoundException</span> e) &#123;</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"找不到指定的类\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">SecurityException</span> e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">NoSuchFieldException</span> e) &#123;</div><div class=\"line\">            <span class=\"type\">System</span>.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"找不到指定的成员变量\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">InstantiationException</span> e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">IllegalAccessException</span> e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">java</span> <span class=\"selector-tag\">AssignFieldDemo</span> <span class=\"selector-tag\">CoreJava</span><span class=\"selector-class\">.day_2</span><span class=\"selector-class\">.TestField</span></div><div class=\"line\">99<span class=\"selector-pseudo\">:caterpillar</span></div></pre></td></tr></table></figure>\n<p>如果有必要的话，也可以通过反射机制来读取私有的成员变量，例如：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Field privateField = c.getDeclaredField(<span class=\"string\">\"privateField\"</span>)<span class=\"comment\">; </span></div><div class=\"line\">privateField.setAccessible(true)<span class=\"comment\">;</span></div><div class=\"line\">privateField.setInt(targetObj, <span class=\"number\">99</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p><strong>数组</strong><br>在 Java 中数组也是一个对象，也会有一个 Class 实例来表示它，我们用几个基本类型和String来进行测试：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ArrayDemo &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        <span class=\"keyword\">short</span>[] sArr = <span class=\"keyword\">new</span> <span class=\"keyword\">short</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span>[] iArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">long</span>[] lArr = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">float</span>[] fArr = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">double</span>[] dArr = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] bArr = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">boolean</span>[] zArr = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">5</span>];</div><div class=\"line\">        <span class=\"keyword\">String</span>[] strArr = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>[<span class=\"number\">5</span>];</div><div class=\"line\"></div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"short 数组：\"</span> + sArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"int 数组：\"</span> + iArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"long 数组：\"</span> + lArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"float 数组：\"</span> + fArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"double 数组：\"</span> + dArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"byte 数组：\"</span> + bArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"boolean 数组：\"</span> + zArr.getClass());</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"String 数组：\"</span> + strArr.getClass());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">short</span> 数组：<span class=\"keyword\">class</span> [S</div><div class=\"line\"><span class=\"keyword\">int</span> 数组：<span class=\"keyword\">class</span> [I</div><div class=\"line\"><span class=\"keyword\">long</span> 数组：<span class=\"keyword\">class</span> [J</div><div class=\"line\"><span class=\"keyword\">float</span> 数组：<span class=\"keyword\">class</span> [F</div><div class=\"line\"><span class=\"keyword\">double</span> 数组：<span class=\"keyword\">class</span> [D</div><div class=\"line\"><span class=\"keyword\">byte</span> 数组：<span class=\"keyword\">class</span> [B</div><div class=\"line\"><span class=\"keyword\">boolean</span> 数组：<span class=\"keyword\">class</span> [Z</div><div class=\"line\"><span class=\"keyword\">String</span> 数组：<span class=\"keyword\">class</span> [Ljava.lang.<span class=\"keyword\">String</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Process</span> finished with exit code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>要使用<strong>反射机制动态生成数组</strong>的话，也可以这样：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.<span class=\"keyword\">Array</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class NewArrayDemo &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        Class c = <span class=\"keyword\">String</span>.class;</div><div class=\"line\">        <span class=\"keyword\">Object</span> objArr = <span class=\"keyword\">Array</span>.newInstance(c, <span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">Array</span>.<span class=\"built_in\">set</span>(objArr, i, i + <span class=\"string\">\"\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">            System.out.<span class=\"built_in\">print</span>(<span class=\"keyword\">Array</span>.<span class=\"built_in\">get</span>(objArr, i) + <span class=\"string\">\" \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">String</span>[] strs = (<span class=\"keyword\">String</span>[]) objArr;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">String</span> s : strs) &#123;</div><div class=\"line\">            System.out.<span class=\"built_in\">print</span>(s + <span class=\"string\">\" \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Array.newInstance() 的第一个参数是指定参数类型，而第二个参数是用来指定数组长度的，结果如下：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></div><div class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>如果是二维数组，也是一样的：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.<span class=\"keyword\">Array</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/5</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class NewArrayDemo2 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        Class c = <span class=\"keyword\">String</span>.class;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 打算建立一个3*4数组</span></div><div class=\"line\">        <span class=\"built_in\">int</span>[] dim = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[]&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">Object</span> objArr = <span class=\"keyword\">Array</span>.newInstance(c, dim);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">Object</span> row = <span class=\"keyword\">Array</span>.<span class=\"built_in\">get</span>(objArr, i);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">Array</span>.<span class=\"built_in\">set</span>(row, j, <span class=\"string\">\"\"</span> + (i + <span class=\"number\">1</span>) * (j + <span class=\"number\">1</span>));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">Object</span> row = <span class=\"keyword\">Array</span>.<span class=\"built_in\">get</span>(objArr, i);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</div><div class=\"line\">                System.out.<span class=\"built_in\">print</span>(<span class=\"keyword\">Array</span>.<span class=\"built_in\">get</span>(row, j) + <span class=\"string\">\" \"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.out.<span class=\"built_in\">println</span>();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">1 </span><span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></div><div class=\"line\"><span class=\"symbol\">2 </span><span class=\"number\">4</span> <span class=\"number\">6</span> <span class=\"number\">8</span></div><div class=\"line\"><span class=\"symbol\">3 </span><span class=\"number\">6</span> <span class=\"number\">9</span> <span class=\"number\">12</span></div></pre></td></tr></table></figure>\n<p>如果想要知道数组元素的类型，可以在取得数组的 Class 实例之后，使用 Class 实例的 getComponentType() 方法，所取回的是元素的 Class 实例，例如：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>[] iArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</div><div class=\"line\">System.out.<span class=\"built_in\">println</span>(iArr.getClass().getComponentType());</div></pre></td></tr></table></figure>\n<p>对反射的总结差不多就写到这里了，查阅了很多资料，网络上写的也是参差不齐的，在手写的几十个demo支撑下，得出的一点关于反射的东西，肯定不能说全部正确，但是还是可以提供一些帮助的  -。-</p>"},{"title":"Java接口是常量存放的最佳地点吗？","date":"2017-02-18T13:18:07.000Z","_content":"今天偶然看到接口中不能包含**实例域**或**静态方法**，但是却可以包含**常量**。<br>\n其实在之前，就知道这么回事，但是一直只是当做知道而已，现在回过头来巩固基础，觉得有必要多想想。\n<!--more-->\n首先，由于java的接口中声明的字段在编译时会自动加上static final的修饰符，即声明为常量。因而接口通常是存放常量的最佳地点，因为这样可以省去很多修饰符嘛，然而在java的实际应用时却会产生一些问题。<br>\n\n问题的起因个人觉得有两个:<br>\n第一，是我们所使用的常量并不是一成不变的，而是相对于变量不能赋值改变。例如我们在一个项目初期定义常量π＝3.14，而由于计算精度的提高我们可能会重新定义π＝3.14159，此时整个项目对此常量的引用都应该做出改变。<br>\n第二，java是动态语言。与c++之类的静态语言不同,java对一些字段的引用可以在运行期动态进行，这种灵活性是java这样的动态语言的一大优势。也就使得我们在java项目中有时部分内容的改变不用重新编译整个项目，而只需编译改变的部分重新发布就可以改变整个应用。\n\n例如，有一个interface A，一个class B，代码如下：\n\n```\npublic interface A{\n\tString name = \"bright\";\n}\n\npublic class B{\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(\"Class A's name = \" + A.name);\n\t}\n}\n```\n编译A和B。<br>\n运行，输入java B，显然结果如下：\n```\nClass A's name = bright\n```\n我们现在修改A如下：\n```\npublic interface A{\n\tString name = \"bright sea\";\n}\n```\n编译A后重新运行B，输入java B，注意：结果如下\n```\nClass A's name = bright\n```\n为什么不是\"Class A's name = bright sea\"？让我们使用jdk提供的反编译工具javap反编译B.class看个究竟，输入：javap -c B ，结果如下：\n\n```\nCompiled from B.java\npublic class B extends java.lang.Object {\n    public B();\n    public static void main(java.lang.String[]);\n}\nMethod B()\n   0 aload_0\n   1 invokespecial #1 <Method java.lang.Object()>\n   4 return\nMethod void main(java.lang.String[])\n   0 getstatic #2 <Field java.io.PrintStream out>\n   3 ldc #3 <String \"Class A's name = bright\">\n   5 invokevirtual #4 <Method void println(java.lang.String)>\n   8 return\n```\n注意到标号3的代码了吗？由于引用了一个static final 的字段，编译器已经将interface A中name的内容编译进了class B中，而不是对interface A中的name的引用。因此除非我们重新编译class B，interface A中name发生的变化无法在class B中反映。如果这样去做那么java的动态优势就消失殆尽。<br>\n\n解决方案，有两种解决方法。<br>\n第一种方法是不再使用常量，将所需字段放入class中声明，并去掉final修饰符。但这种方法存在一定的风险，由于不再是常量着因而在系统运行时有可能被其他类修改其值而发生错误，也就违背了我们设置它为常量的初衷，因而不推荐使用。<br>\n第二种方法，将常量放入class中声明，使用class方法来得到此常量的值。为了保持对此常量引用的简单性，我们可以使用一个静态方法。我们将A.java和B.java修改如下：\n```\npublic class A{\n\tprivate static final String name = \"bright\";\n\tpublic static String getName(){\n\t\treturn name;\n\t}\n}\n\npublic class B{\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(\"Class A's name = \" + A.getName());\n\t}\n}\n```\n同样我们编译A和B。运行class B，输入java B，显然结果如下：\nClass A's name = bright\n现在我们修改A如下：\n```\npublic class A{\n\tprivate static final String name = \"bright\";\n\tpublic static String getName(){\n\t\treturn name;\n\t}\n}\n```\n我们再次编译A后重新运行B，输入java B：结果如下\n```\nClass A's name = bright sea\n```\n终于得到了我们想要的结果，我们可以再次反编译B看看class B的改变，输入\njavap -c B,结果如下：\n```\nCompiled from B.java\npublic class B extends java.lang.Object {\n    public B();\n    public static void main(java.lang.String[]);\n}\nMethod B()\n   0 aload_0\n   1 invokespecial #1 <Method java.lang.Object()>\n   4 return\nMethod void main(java.lang.String[])\n   0 getstatic #2 <Field java.io.PrintStream out>\n   3 new #3 <Class java.lang.StringBuffer>\n   6 dup\n   7 invokespecial #4 <Method java.lang.StringBuffer()>\n  10 ldc #5 <String \"Class A's name = \">\n  12 invokevirtual #6 <Method java.lang.StringBuffer append(java.lang.String)>\n  15 invokestatic #7 <Method java.lang.String getName()>\n  18 invokevirtual #6 <Method java.lang.StringBuffer append(java.lang.String)>\n  21 invokevirtual #8 <Method java.lang.String toString()>\n  24 invokevirtual #9 <Method void println(java.lang.String)>\n  27 return\n```\n注意标号10至15行的代码，class B中已经变为对A class的getName()方法的引用，当常量name的值改变时我们只需对class A中的常量做修改并重新编译，无需编译整个项目工程我们就能改变整个应用对此常量的引用，即保持了java动态优势又保持了我们使用常量的初衷，因而方法二是一个最佳解决方案。","source":"_posts/Java接口是常量存放的最佳地点吗？.md","raw":"---\ntitle: Java接口是常量存放的最佳地点吗？\ndate: 2017-02-18 21:18:07\ncategories: Java二三事\ntags: \n\t- 接口\n\t- 常量\n---\n今天偶然看到接口中不能包含**实例域**或**静态方法**，但是却可以包含**常量**。<br>\n其实在之前，就知道这么回事，但是一直只是当做知道而已，现在回过头来巩固基础，觉得有必要多想想。\n<!--more-->\n首先，由于java的接口中声明的字段在编译时会自动加上static final的修饰符，即声明为常量。因而接口通常是存放常量的最佳地点，因为这样可以省去很多修饰符嘛，然而在java的实际应用时却会产生一些问题。<br>\n\n问题的起因个人觉得有两个:<br>\n第一，是我们所使用的常量并不是一成不变的，而是相对于变量不能赋值改变。例如我们在一个项目初期定义常量π＝3.14，而由于计算精度的提高我们可能会重新定义π＝3.14159，此时整个项目对此常量的引用都应该做出改变。<br>\n第二，java是动态语言。与c++之类的静态语言不同,java对一些字段的引用可以在运行期动态进行，这种灵活性是java这样的动态语言的一大优势。也就使得我们在java项目中有时部分内容的改变不用重新编译整个项目，而只需编译改变的部分重新发布就可以改变整个应用。\n\n例如，有一个interface A，一个class B，代码如下：\n\n```\npublic interface A{\n\tString name = \"bright\";\n}\n\npublic class B{\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(\"Class A's name = \" + A.name);\n\t}\n}\n```\n编译A和B。<br>\n运行，输入java B，显然结果如下：\n```\nClass A's name = bright\n```\n我们现在修改A如下：\n```\npublic interface A{\n\tString name = \"bright sea\";\n}\n```\n编译A后重新运行B，输入java B，注意：结果如下\n```\nClass A's name = bright\n```\n为什么不是\"Class A's name = bright sea\"？让我们使用jdk提供的反编译工具javap反编译B.class看个究竟，输入：javap -c B ，结果如下：\n\n```\nCompiled from B.java\npublic class B extends java.lang.Object {\n    public B();\n    public static void main(java.lang.String[]);\n}\nMethod B()\n   0 aload_0\n   1 invokespecial #1 <Method java.lang.Object()>\n   4 return\nMethod void main(java.lang.String[])\n   0 getstatic #2 <Field java.io.PrintStream out>\n   3 ldc #3 <String \"Class A's name = bright\">\n   5 invokevirtual #4 <Method void println(java.lang.String)>\n   8 return\n```\n注意到标号3的代码了吗？由于引用了一个static final 的字段，编译器已经将interface A中name的内容编译进了class B中，而不是对interface A中的name的引用。因此除非我们重新编译class B，interface A中name发生的变化无法在class B中反映。如果这样去做那么java的动态优势就消失殆尽。<br>\n\n解决方案，有两种解决方法。<br>\n第一种方法是不再使用常量，将所需字段放入class中声明，并去掉final修饰符。但这种方法存在一定的风险，由于不再是常量着因而在系统运行时有可能被其他类修改其值而发生错误，也就违背了我们设置它为常量的初衷，因而不推荐使用。<br>\n第二种方法，将常量放入class中声明，使用class方法来得到此常量的值。为了保持对此常量引用的简单性，我们可以使用一个静态方法。我们将A.java和B.java修改如下：\n```\npublic class A{\n\tprivate static final String name = \"bright\";\n\tpublic static String getName(){\n\t\treturn name;\n\t}\n}\n\npublic class B{\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(\"Class A's name = \" + A.getName());\n\t}\n}\n```\n同样我们编译A和B。运行class B，输入java B，显然结果如下：\nClass A's name = bright\n现在我们修改A如下：\n```\npublic class A{\n\tprivate static final String name = \"bright\";\n\tpublic static String getName(){\n\t\treturn name;\n\t}\n}\n```\n我们再次编译A后重新运行B，输入java B：结果如下\n```\nClass A's name = bright sea\n```\n终于得到了我们想要的结果，我们可以再次反编译B看看class B的改变，输入\njavap -c B,结果如下：\n```\nCompiled from B.java\npublic class B extends java.lang.Object {\n    public B();\n    public static void main(java.lang.String[]);\n}\nMethod B()\n   0 aload_0\n   1 invokespecial #1 <Method java.lang.Object()>\n   4 return\nMethod void main(java.lang.String[])\n   0 getstatic #2 <Field java.io.PrintStream out>\n   3 new #3 <Class java.lang.StringBuffer>\n   6 dup\n   7 invokespecial #4 <Method java.lang.StringBuffer()>\n  10 ldc #5 <String \"Class A's name = \">\n  12 invokevirtual #6 <Method java.lang.StringBuffer append(java.lang.String)>\n  15 invokestatic #7 <Method java.lang.String getName()>\n  18 invokevirtual #6 <Method java.lang.StringBuffer append(java.lang.String)>\n  21 invokevirtual #8 <Method java.lang.String toString()>\n  24 invokevirtual #9 <Method void println(java.lang.String)>\n  27 return\n```\n注意标号10至15行的代码，class B中已经变为对A class的getName()方法的引用，当常量name的值改变时我们只需对class A中的常量做修改并重新编译，无需编译整个项目工程我们就能改变整个应用对此常量的引用，即保持了java动态优势又保持了我们使用常量的初衷，因而方法二是一个最佳解决方案。","slug":"Java接口是常量存放的最佳地点吗？","published":1,"updated":"2017-02-18T13:20:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kf1001irhsol0fxzl3v","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>今天偶然看到接口中不能包含<strong>实例域</strong>或<strong>静态方法</strong>，但是却可以包含<strong>常量</strong>。<br><br>其实在之前，就知道这么回事，但是一直只是当做知道而已，现在回过头来巩固基础，觉得有必要多想想。<br><a id=\"more\"></a><br>首先，由于java的接口中声明的字段在编译时会自动加上static final的修饰符，即声明为常量。因而接口通常是存放常量的最佳地点，因为这样可以省去很多修饰符嘛，然而在java的实际应用时却会产生一些问题。<br></p>\n<p>问题的起因个人觉得有两个:<br><br>第一，是我们所使用的常量并不是一成不变的，而是相对于变量不能赋值改变。例如我们在一个项目初期定义常量π＝3.14，而由于计算精度的提高我们可能会重新定义π＝3.14159，此时整个项目对此常量的引用都应该做出改变。<br><br>第二，java是动态语言。与c++之类的静态语言不同,java对一些字段的引用可以在运行期动态进行，这种灵活性是java这样的动态语言的一大优势。也就使得我们在java项目中有时部分内容的改变不用重新编译整个项目，而只需编译改变的部分重新发布就可以改变整个应用。</p>\n<p>例如，有一个interface A，一个class B，代码如下：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">A</span>&#123;</div><div class=\"line\">\tString name = <span class=\"string\">\"bright\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">B</span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>)</span>&#123;</div><div class=\"line\">\t\tSystem.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"Class A's name = \"</span> + A.name);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译A和B。<br><br>运行，输入java B，显然结果如下：<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">A</span>'<span class=\"title\">s</span> <span class=\"title\">name</span> = <span class=\"title\">bright</span></span></div></pre></td></tr></table></figure></p>\n<p>我们现在修改A如下：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">String</span> name = <span class=\"string\">\"bright sea\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译A后重新运行B，输入java B，注意：结果如下<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">A</span>'<span class=\"title\">s</span> <span class=\"title\">name</span> = <span class=\"title\">bright</span></span></div></pre></td></tr></table></figure></p>\n<p>为什么不是”Class A’s name = bright sea”？让我们使用jdk提供的反编译工具javap反编译B.class看个究竟，输入：javap -c B ，结果如下：</p>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Compiled from B.java</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Object</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">public</span> B();</div><div class=\"line\">    <span class=\"keyword\">public</span> static void main(java.lang.String[]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">B</span>(</span>)</div><div class=\"line\">   <span class=\"number\">0</span> aload_0</div><div class=\"line\">   <span class=\"number\">1</span> invokespecial<span class=\"meta\"> #1 &lt;Method java.lang.Object()&gt;</span></div><div class=\"line\">   <span class=\"number\">4</span> <span class=\"keyword\">return</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">void</span> <span class=\"title\">main</span>(</span>java.lang.String[])</div><div class=\"line\">   <span class=\"number\">0</span> getstatic<span class=\"meta\"> #2 &lt;Field java.io.PrintStream out&gt;</span></div><div class=\"line\">   <span class=\"number\">3</span> ldc<span class=\"meta\"> #3 &lt;String \"Class A's name = bright\"&gt;</span></div><div class=\"line\">   <span class=\"number\">5</span> invokevirtual<span class=\"meta\"> #4 &lt;Method void println(java.lang.String)&gt;</span></div><div class=\"line\">   <span class=\"number\">8</span> <span class=\"keyword\">return</span></div></pre></td></tr></table></figure>\n<p>注意到标号3的代码了吗？由于引用了一个static final 的字段，编译器已经将interface A中name的内容编译进了class B中，而不是对interface A中的name的引用。因此除非我们重新编译class B，interface A中name发生的变化无法在class B中反映。如果这样去做那么java的动态优势就消失殆尽。<br></p>\n<p>解决方案，有两种解决方法。<br><br>第一种方法是不再使用常量，将所需字段放入class中声明，并去掉final修饰符。但这种方法存在一定的风险，由于不再是常量着因而在系统运行时有可能被其他类修改其值而发生错误，也就违背了我们设置它为常量的初衷，因而不推荐使用。<br><br>第二种方法，将常量放入class中声明，使用class方法来得到此常量的值。为了保持对此常量引用的简单性，我们可以使用一个静态方法。我们将A.java和B.java修改如下：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> final String name = <span class=\"string\">\"bright\"</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">B</span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>)</span>&#123;</div><div class=\"line\">\t\tSystem.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"Class A's name = \"</span> + A.getName());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>同样我们编译A和B。运行class B，输入java B，显然结果如下：<br>Class A’s name = bright<br>现在我们修改A如下：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> final <span class=\"keyword\">String</span> name = <span class=\"string\">\"bright\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getName()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们再次编译A后重新运行B，输入java B：结果如下<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">A</span>'<span class=\"title\">s</span> <span class=\"title\">name</span> = <span class=\"title\">bright</span> <span class=\"title\">sea</span></span></div></pre></td></tr></table></figure></p>\n<p>终于得到了我们想要的结果，我们可以再次反编译B看看class B的改变，输入<br>javap -c B,结果如下：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">Compiled from B.java</div><div class=\"line\">public <span class=\"keyword\">class</span> B extends java.lang.Object &#123;</div><div class=\"line\">    public B();</div><div class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(java.lang.String[]);</div><div class=\"line\">&#125;</div><div class=\"line\">Method B()</div><div class=\"line\">   <span class=\"number\">0</span> aload_0</div><div class=\"line\">   <span class=\"number\">1</span> invokespecial <span class=\"meta\">#1 <span class=\"meta-string\">&lt;Method java.lang.Object()&gt;</span></span></div><div class=\"line\">   <span class=\"number\">4</span> <span class=\"keyword\">return</span></div><div class=\"line\">Method <span class=\"keyword\">void</span> main(java.lang.String[])</div><div class=\"line\">   <span class=\"number\">0</span> getstatic <span class=\"meta\">#2 <span class=\"meta-string\">&lt;Field java.io.PrintStream out&gt;</span></span></div><div class=\"line\">   <span class=\"number\">3</span> new <span class=\"meta\">#3 <span class=\"meta-string\">&lt;Class java.lang.StringBuffer&gt;</span></span></div><div class=\"line\">   <span class=\"number\">6</span> dup</div><div class=\"line\">   <span class=\"number\">7</span> invokespecial <span class=\"meta\">#4 <span class=\"meta-string\">&lt;Method java.lang.StringBuffer()&gt;</span></span></div><div class=\"line\">  <span class=\"number\">10</span> ldc <span class=\"meta\">#5 <span class=\"meta-string\">&lt;String \"Class A's name = \"&gt;</span></span></div><div class=\"line\">  <span class=\"number\">12</span> invokevirtual <span class=\"meta\">#6 <span class=\"meta-string\">&lt;Method java.lang.StringBuffer append(java.lang.String)&gt;</span></span></div><div class=\"line\">  <span class=\"number\">15</span> invokestatic <span class=\"meta\">#7 <span class=\"meta-string\">&lt;Method java.lang.String getName()&gt;</span></span></div><div class=\"line\">  <span class=\"number\">18</span> invokevirtual <span class=\"meta\">#6 <span class=\"meta-string\">&lt;Method java.lang.StringBuffer append(java.lang.String)&gt;</span></span></div><div class=\"line\">  <span class=\"number\">21</span> invokevirtual <span class=\"meta\">#8 <span class=\"meta-string\">&lt;Method java.lang.String toString()&gt;</span></span></div><div class=\"line\">  <span class=\"number\">24</span> invokevirtual <span class=\"meta\">#9 <span class=\"meta-string\">&lt;Method void println(java.lang.String)&gt;</span></span></div><div class=\"line\">  <span class=\"number\">27</span> <span class=\"keyword\">return</span></div></pre></td></tr></table></figure></p>\n<p>注意标号10至15行的代码，class B中已经变为对A class的getName()方法的引用，当常量name的值改变时我们只需对class A中的常量做修改并重新编译，无需编译整个项目工程我们就能改变整个应用对此常量的引用，即保持了java动态优势又保持了我们使用常量的初衷，因而方法二是一个最佳解决方案。</p>\n","excerpt":"<p>今天偶然看到接口中不能包含<strong>实例域</strong>或<strong>静态方法</strong>，但是却可以包含<strong>常量</strong>。<br><br>其实在之前，就知道这么回事，但是一直只是当做知道而已，现在回过头来巩固基础，觉得有必要多想想。<br></p>","more":"<br>首先，由于java的接口中声明的字段在编译时会自动加上static final的修饰符，即声明为常量。因而接口通常是存放常量的最佳地点，因为这样可以省去很多修饰符嘛，然而在java的实际应用时却会产生一些问题。<br><p></p>\n<p>问题的起因个人觉得有两个:<br><br>第一，是我们所使用的常量并不是一成不变的，而是相对于变量不能赋值改变。例如我们在一个项目初期定义常量π＝3.14，而由于计算精度的提高我们可能会重新定义π＝3.14159，此时整个项目对此常量的引用都应该做出改变。<br><br>第二，java是动态语言。与c++之类的静态语言不同,java对一些字段的引用可以在运行期动态进行，这种灵活性是java这样的动态语言的一大优势。也就使得我们在java项目中有时部分内容的改变不用重新编译整个项目，而只需编译改变的部分重新发布就可以改变整个应用。</p>\n<p>例如，有一个interface A，一个class B，代码如下：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">A</span>&#123;</div><div class=\"line\">\tString name = <span class=\"string\">\"bright\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">B</span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>)</span>&#123;</div><div class=\"line\">\t\tSystem.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"Class A's name = \"</span> + A.name);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译A和B。<br><br>运行，输入java B，显然结果如下：<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">A</span>'<span class=\"title\">s</span> <span class=\"title\">name</span> = <span class=\"title\">bright</span></span></div></pre></td></tr></table></figure></p>\n<p>我们现在修改A如下：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">String</span> name = <span class=\"string\">\"bright sea\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译A后重新运行B，输入java B，注意：结果如下<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">A</span>'<span class=\"title\">s</span> <span class=\"title\">name</span> = <span class=\"title\">bright</span></span></div></pre></td></tr></table></figure></p>\n<p>为什么不是”Class A’s name = bright sea”？让我们使用jdk提供的反编译工具javap反编译B.class看个究竟，输入：javap -c B ，结果如下：</p>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Compiled from B.java</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Object</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">public</span> B();</div><div class=\"line\">    <span class=\"keyword\">public</span> static void main(java.lang.String[]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">B</span>(</span>)</div><div class=\"line\">   <span class=\"number\">0</span> aload_0</div><div class=\"line\">   <span class=\"number\">1</span> invokespecial<span class=\"meta\"> #1 &lt;Method java.lang.Object()&gt;</span></div><div class=\"line\">   <span class=\"number\">4</span> <span class=\"keyword\">return</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">void</span> <span class=\"title\">main</span>(</span>java.lang.String[])</div><div class=\"line\">   <span class=\"number\">0</span> getstatic<span class=\"meta\"> #2 &lt;Field java.io.PrintStream out&gt;</span></div><div class=\"line\">   <span class=\"number\">3</span> ldc<span class=\"meta\"> #3 &lt;String \"Class A's name = bright\"&gt;</span></div><div class=\"line\">   <span class=\"number\">5</span> invokevirtual<span class=\"meta\"> #4 &lt;Method void println(java.lang.String)&gt;</span></div><div class=\"line\">   <span class=\"number\">8</span> <span class=\"keyword\">return</span></div></pre></td></tr></table></figure>\n<p>注意到标号3的代码了吗？由于引用了一个static final 的字段，编译器已经将interface A中name的内容编译进了class B中，而不是对interface A中的name的引用。因此除非我们重新编译class B，interface A中name发生的变化无法在class B中反映。如果这样去做那么java的动态优势就消失殆尽。<br></p>\n<p>解决方案，有两种解决方法。<br><br>第一种方法是不再使用常量，将所需字段放入class中声明，并去掉final修饰符。但这种方法存在一定的风险，由于不再是常量着因而在系统运行时有可能被其他类修改其值而发生错误，也就违背了我们设置它为常量的初衷，因而不推荐使用。<br><br>第二种方法，将常量放入class中声明，使用class方法来得到此常量的值。为了保持对此常量引用的简单性，我们可以使用一个静态方法。我们将A.java和B.java修改如下：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">A</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> final String name = <span class=\"string\">\"bright\"</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">B</span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>)</span>&#123;</div><div class=\"line\">\t\tSystem.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"Class A's name = \"</span> + A.getName());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>同样我们编译A和B。运行class B，输入java B，显然结果如下：<br>Class A’s name = bright<br>现在我们修改A如下：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> final <span class=\"keyword\">String</span> name = <span class=\"string\">\"bright\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getName()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们再次编译A后重新运行B，输入java B：结果如下<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">Class</span> <span class=\"title\">A</span>'<span class=\"title\">s</span> <span class=\"title\">name</span> = <span class=\"title\">bright</span> <span class=\"title\">sea</span></span></div></pre></td></tr></table></figure></p>\n<p>终于得到了我们想要的结果，我们可以再次反编译B看看class B的改变，输入<br>javap -c B,结果如下：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">Compiled from B.java</div><div class=\"line\">public <span class=\"keyword\">class</span> B extends java.lang.Object &#123;</div><div class=\"line\">    public B();</div><div class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(java.lang.String[]);</div><div class=\"line\">&#125;</div><div class=\"line\">Method B()</div><div class=\"line\">   <span class=\"number\">0</span> aload_0</div><div class=\"line\">   <span class=\"number\">1</span> invokespecial <span class=\"meta\">#1 <span class=\"meta-string\">&lt;Method java.lang.Object()&gt;</span></span></div><div class=\"line\">   <span class=\"number\">4</span> <span class=\"keyword\">return</span></div><div class=\"line\">Method <span class=\"keyword\">void</span> main(java.lang.String[])</div><div class=\"line\">   <span class=\"number\">0</span> getstatic <span class=\"meta\">#2 <span class=\"meta-string\">&lt;Field java.io.PrintStream out&gt;</span></span></div><div class=\"line\">   <span class=\"number\">3</span> new <span class=\"meta\">#3 <span class=\"meta-string\">&lt;Class java.lang.StringBuffer&gt;</span></span></div><div class=\"line\">   <span class=\"number\">6</span> dup</div><div class=\"line\">   <span class=\"number\">7</span> invokespecial <span class=\"meta\">#4 <span class=\"meta-string\">&lt;Method java.lang.StringBuffer()&gt;</span></span></div><div class=\"line\">  <span class=\"number\">10</span> ldc <span class=\"meta\">#5 <span class=\"meta-string\">&lt;String \"Class A's name = \"&gt;</span></span></div><div class=\"line\">  <span class=\"number\">12</span> invokevirtual <span class=\"meta\">#6 <span class=\"meta-string\">&lt;Method java.lang.StringBuffer append(java.lang.String)&gt;</span></span></div><div class=\"line\">  <span class=\"number\">15</span> invokestatic <span class=\"meta\">#7 <span class=\"meta-string\">&lt;Method java.lang.String getName()&gt;</span></span></div><div class=\"line\">  <span class=\"number\">18</span> invokevirtual <span class=\"meta\">#6 <span class=\"meta-string\">&lt;Method java.lang.StringBuffer append(java.lang.String)&gt;</span></span></div><div class=\"line\">  <span class=\"number\">21</span> invokevirtual <span class=\"meta\">#8 <span class=\"meta-string\">&lt;Method java.lang.String toString()&gt;</span></span></div><div class=\"line\">  <span class=\"number\">24</span> invokevirtual <span class=\"meta\">#9 <span class=\"meta-string\">&lt;Method void println(java.lang.String)&gt;</span></span></div><div class=\"line\">  <span class=\"number\">27</span> <span class=\"keyword\">return</span></div></pre></td></tr></table></figure></p>\n<p>注意标号10至15行的代码，class B中已经变为对A class的getName()方法的引用，当常量name的值改变时我们只需对class A中的常量做修改并重新编译，无需编译整个项目工程我们就能改变整个应用对此常量的引用，即保持了java动态优势又保持了我们使用常量的初衷，因而方法二是一个最佳解决方案。</p>"},{"title":"Java泛型总结","date":"2017-02-18T13:26:07.000Z","_content":"**一. 我们为什么需要泛型？**\n\n首先，我们看下下面这段简短的代码:\n\n```\npackage CoreJava.day_5;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest {\n    public static void main(String[] args) {\n        List list = new ArrayList();\n        list.add(\"justdoit\");\n        list.add(\"core\");\n        list.add(100);\n\n        for (int i = 0; i < list.size(); i++) {\n            String name = (String) list.get(i); // 1\n            System.out.println(\"name:\" + name);\n        }\n    }\n}\n\n```\n<!--more-->\n我们定义一个List类型的集合，先向其中加入了两个字符串类型的值，随后加入一个Integer类型的值。这是完全允许的，因为此时list默认的类型为Object类型。在之后的循环中，由于忘记了之前在list中也加入了Integer类型的值或其他编码原因，很容易出现类似于//1中的错误。因为编译阶段正常，而运行时会出现“java.lang.ClassCastException”异常。因此，导致此类错误编码过程中不易发现。\n\n **在如上的编码过程中，我们发现主要存在两个问题：**\n\n1.当我们将一个对象放入集合中，集合不会记住此对象的类型，当再次从集合中取出此对象时，改对象的编译类型变成了Object类型，但其运行时类型任然为其本身类型。\n\n2.因此，//1处取出集合元素时需要人为的强制类型转化到具体的目标类型，且很容易出现“java.lang.ClassCastException”异常。\n\n<font color=\"#008080\">**那么有没有什么办法可以使集合能够记住集合内元素各类型，且能够达到只要编译时不出现问题，运行时就不会出现“java.lang.ClassCastException”异常呢？答案就是使用泛型。**</font>\n\n**二.什么是泛型？**\n\n泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。\n\n这样说有点复杂，我们来看下上面那个例子采用泛型的写法:\n\n```\npackage CoreJava.day_5;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_2 {\n    public static void main(String[] args) {\n        /*\n        List list = new ArrayList();\n        list.add(\"justdoit\");\n        list.add(\"core\");\n        list.add(100);\n        */\n\n        List<String> list = new ArrayList<String>();\n        list.add(\"justdoit\");\n        list.add(\"core\");\n        //list.add(100);   // 1  提示编译错误\n\n        for (int i = 0; i < list.size(); i++) {\n            String name = list.get(i); // 2\n            System.out.println(\"name:\" + name);\n        }\n    }\n}\n\n```\n\n采用泛型写法后，在//1处想加入一个Integer类型的对象时会出现编译错误，通过List< String>，直接限定了list集合中只能含有String类型的元素，从而在//2处无须进行强制类型转换，因为此时，集合能够记住元素的类型信息，编译器已经能够确认它是String类型了。\n\n结合上面的泛型定义，我们知道在List< String>中，String是类型实参，也就是说，相应的List接口中肯定含有类型形参。且get()方法的返回结果也直接是此形参类型（也就是对应的传入的类型实参）。下面就来看看List接口的的具体定义：\n\n```\npublic interface List<E> extends Collection<E> {\n\n    int size();\n\n    boolean isEmpty();\n\n    boolean contains(Object o);\n\n    Iterator<E> iterator();\n\n    Object[] toArray();\n\n    <T> T[] toArray(T[] a);\n\n    boolean add(E e);\n\n    boolean remove(Object o);\n\n    boolean containsAll(Collection<?> c);\n\n    boolean addAll(Collection<? extends E> c);\n\n    boolean addAll(int index, Collection<? extends E> c);\n\n    boolean removeAll(Collection<?> c);\n\n    boolean retainAll(Collection<?> c);\n\n    void clear();\n\n    boolean equals(Object o);\n\n    int hashCode();\n\n    E get(int index);\n\n    E set(int index, E element);\n\n    void add(int index, E element);\n\n    E remove(int index);\n\n    int indexOf(Object o);\n\n    int lastIndexOf(Object o);\n\n    ListIterator<E> listIterator();\n\n    ListIterator<E> listIterator(int index);\n\n    List<E> subList(int fromIndex, int toIndex);\n}\n```\n\n我们可以看到，在List接口中采用泛型化定义之后，< E>中的E表示类型形参，可以接收具体的类型实参，并且此接口定义中，凡是出现E的地方均表示相同的接受自外部的类型实参。\n\n自然的，ArrayList作为List接口的实现类，其定义形式是:\n\n```\npublic class ArrayList<E> extends AbstractList<E> \n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n    \n    public boolean add(E e) {\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        elementData[size++] = e;\n        return true;\n    }\n    \n    public E get(int index) {\n        rangeCheck(index);\n        checkForComodification();\n        return ArrayList.this.elementData(offset + index);\n    }\n    \n    //...省略掉其他具体的定义过程\n\n}\n```\n\n由此，我们可以从源代码角度明白了为什么//1处加入Integer类型对象编译错误，且//2处get()到的类型直接就是String类型了。\n\n\n**三.自定义泛型接口、泛型类和泛型方法**\n\n从上面的内容中，大家已经明白了泛型的具体运作过程。也知道了接口、类和方法也都可以使用泛型去定义，以及相应的使用。是的，在具体使用时，可以分为泛型接口、泛型类和泛型方法。\n\n自定义泛型接口、泛型类和泛型方法与上述Java源码中的List、ArrayList类似。如下，我们看一个最简单的泛型类和方法定义：\n\n```\npackage CoreJava.day_5;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_3 {\n    public static void main(String[] args) {\n\n        Box<String> name = new Box<String>(\"core\");\n        System.out.println(\"name:\" + name.getData());\n    }\n\n}\n\nclass Box<T> {\n\n    private T data;\n\n    public Box() {\n\n    }\n\n    public Box(T data) {\n        this.data = data;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n}\n```\n\n在泛型接口、泛型类和泛型方法的定义过程中，我们常见的如T、E、K、V等形式的参数常用于表示泛型形参，由于接收来自外部使用时候传入的类型实参。那么对于不同传入的类型实参，生成的相应对象实例的类型是不是一样的呢？\n\n```\npackage CoreJava.day_5;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_4 {\n    public static void main(String[] args) {\n\n        Box<String> name = new Box<String>(\"core\");\n        Box<Integer> age = new Box<Integer>(712);\n\n        System.out.println(\"name class:\" + name.getClass());      // CoreJava.day_5.Box\n        System.out.println(\"age class:\" + age.getClass());        // CoreJava.day_5.Box\n        System.out.println(name.getClass() == age.getClass());    // true\n\n    }\n}\n\n```\n\n由此，我们发现，在使用泛型类时，虽然传入了不同的泛型实参，但并没有真正意义上生成不同的类型，传入不同泛型实参的泛型类在内存上只有一个，即还是原来的最基本的类型（本实例中为Box），当然，在逻辑上我们可以理解成多个不同的泛型类型。\n\n究其原因，在于Java中的泛型这一概念提出的目的，导致其只是作用于代码编译阶段，在编译过程中，对于正确检验泛型结果后，会将泛型的相关信息擦出，也就是说，成功编译过后的class文件中是不包含任何泛型信息的。泛型信息不会进入到运行时阶段。\n\n<font color=\"#008080\">**对此总结成一句话：泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。**</font>\n\n\n**四.类型通配符**\n\n接着上面的结论，我们知道，Box< Number>和Box< Integer>实际上都是Box类型，现在需要继续探讨一个问题，那么在逻辑上，类似于Box< Number>和Box< Integer>是否可以看成具有父子关系的泛型类型呢？\n\n为了弄清这个问题，我们继续看下下面这个例子:\n\n```\npackage CoreJava.day_5;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_6 {\n    public static void main(String[] args) {\n\n        Box<Number> name = new Box<Number>(99);\n        Box<Integer> age = new Box<Integer>(712);\n\n        getData(name);\n\n        //The method getData(Box<Number>) in the type GenericTest is\n        //not applicable for the arguments (Box<Integer>)\n        getData(age);   // 1\n\n    }\n\n    public static void getData(Box<Number> data) {\n        System.out.println(\"data :\" + data.getData());\n    }\n\n}\n\n```\n\n我们发现，在代码//1处出现了错误提示信息：The method getData(Box< Number>) in the t ype GenericTest is not applicable for the arguments (Box< Integer>)。显然，通过提示信息，我们知道Box< Number>在逻辑上不能视为Box< Integer>的父类。那么，原因是什么呢？\n\n```\npackage CoreJava.day_5;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_5 {\n    public static void main(String[] args) {\n\n        Box<Integer> a = new Box<Integer>(712);\n        Box<Number> b = a;  // 1\n        Box<Float> f = new Box<Float>(3.14f);\n        b.setData(f);        // 2\n\n    }\n\n    public static void getData(Box<Number> data) {\n        System.out.println(\"data :\" + data.getData());\n    }\n}\n\nclass Box<T> {\n\n    private T data;\n\n    public Box() {\n\n    }\n\n    public Box(T data) {\n        setData(data);\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n}\n```\n这个例子中，显然//1和//2处肯定会出现错误提示的。在此我们可以使用反证法来进行说明。\n\n假设Box< Number>在逻辑上可以视为Box< Integer>的父类，那么//1和//2处将不会有错误提示了，那么问题就出来了，通过getData()方法取出数据时到底是什么类型呢？Integer? Float? 还是Number？且由于在编程过程中的顺序不可控性，导致在必要的时候必须要进行类型判断，且进行强制类型转换。显然，这与泛型的理念矛盾，因此，<font color=\"#008080\">**在逻辑上Box< Number>不能视为Box< Integer>的父类。**</font>\n\n好，那我们回过头来继续看“类型通配符”中的第一个例子，我们知道其具体的错误提示的深层次原因了。那么如何解决呢？总不能再定义一个新的函数吧。这和Java中的多态理念显然是违背的，<font color=\"#008080\">**因此，我们需要一个在逻辑上可以用来表示同时是Box< Integer>和Box< Number>的父类的一个引用类型，由此，类型通配符应运而生。**</font>\n\n类型通配符一般是使用 ? 代替具体的类型实参。注意了，此处是类型实参，而不是类型形参！且Box<?>在逻辑上是Box< Integer>、Box< Number>...等所有Box<具体类型实参>的父类。由此，我们依然可以定义泛型方法，来完成此类需求。\n\n```\npackage CoreJava.day_5;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_7 {\n    public static void main(String[] args) {\n\n        Box<String> name = new Box<String>(\"core\");\n        Box<Integer> age = new Box<Integer>(712);\n        Box<Number> number = new Box<Number>(314);\n\n        getData(name);\n        getData(age);\n        getData(number);\n    }\n\n    public static void getData(Box<?> data) {\n        System.out.println(\"data :\" + data.getData());\n    }\n\n}\n\n```\n\n有时候，<font color=\"#008080\">**我们还可能听到类型通配符上限和类型通配符下限**。具体有是怎么样的呢？</font>\n\n在上面的例子中，如果需要定义一个功能类似于getData()的方法，但对类型实参又有进一步的限制：只能是Number类及其子类。此时，需要用到类型通配符上限。\n\n```\npackage CoreJava.day_5;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_8 {\n    public static void main(String[] args) {\n\n        Box<String> name = new Box<String>(\"core\");\n        Box<Integer> age = new Box<Integer>(712);\n        Box<Number> number = new Box<Number>(314);\n\n        getData(name);\n        getData(age);\n        getData(number);\n\n        //getUpperNumberData(name); // 1\n        getUpperNumberData(age);    // 2\n        getUpperNumberData(number); // 3\n    }\n\n    public static void getData(Box<?> data) {\n        System.out.println(\"data :\" + data.getData());\n    }\n\n    public static void getUpperNumberData(Box<? extends Number> data) {\n        System.out.println(\"data :\" + data.getData());\n    }\n\n}\n\n```\n\n此时，显然，在代码//1处调用将出现错误提示，而//2 //3处调用正常。\n\n<font color=\"#008080\">**类型通配符上限通过形如Box< ? extends Number>形式定义，相对应的，类型通配符下限为Box< ? super Number>形式，其含义与类型通配符上限正好相反**，</font>在此不作过多阐述了。\n\n \n\n**五.话外篇**\n\n本文中的例子主要是为了阐述泛型中的一些思想而简单举出的，并不一定有着实际的可用性。另外，一提到泛型，相信大家用到最多的就是在集合中，其实，在实际的编程过程中，自己可以使用泛型去简化开发，且能很好的保证代码质量。并且还要注意的一点是，Java中没有所谓的泛型数组一说。\n\n<font color=\"red\">**对于泛型，最主要的还是需要理解其背后的思想和目的。**</font>\n\n\n\n\n\n","source":"_posts/Java泛型总结.md","raw":"---\ntitle: Java泛型总结\ndate: 2017-02-18 21:26:07\ncategories: Java二三事\ntags: \n\t- 泛型\n---\n**一. 我们为什么需要泛型？**\n\n首先，我们看下下面这段简短的代码:\n\n```\npackage CoreJava.day_5;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest {\n    public static void main(String[] args) {\n        List list = new ArrayList();\n        list.add(\"justdoit\");\n        list.add(\"core\");\n        list.add(100);\n\n        for (int i = 0; i < list.size(); i++) {\n            String name = (String) list.get(i); // 1\n            System.out.println(\"name:\" + name);\n        }\n    }\n}\n\n```\n<!--more-->\n我们定义一个List类型的集合，先向其中加入了两个字符串类型的值，随后加入一个Integer类型的值。这是完全允许的，因为此时list默认的类型为Object类型。在之后的循环中，由于忘记了之前在list中也加入了Integer类型的值或其他编码原因，很容易出现类似于//1中的错误。因为编译阶段正常，而运行时会出现“java.lang.ClassCastException”异常。因此，导致此类错误编码过程中不易发现。\n\n **在如上的编码过程中，我们发现主要存在两个问题：**\n\n1.当我们将一个对象放入集合中，集合不会记住此对象的类型，当再次从集合中取出此对象时，改对象的编译类型变成了Object类型，但其运行时类型任然为其本身类型。\n\n2.因此，//1处取出集合元素时需要人为的强制类型转化到具体的目标类型，且很容易出现“java.lang.ClassCastException”异常。\n\n<font color=\"#008080\">**那么有没有什么办法可以使集合能够记住集合内元素各类型，且能够达到只要编译时不出现问题，运行时就不会出现“java.lang.ClassCastException”异常呢？答案就是使用泛型。**</font>\n\n**二.什么是泛型？**\n\n泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。\n\n这样说有点复杂，我们来看下上面那个例子采用泛型的写法:\n\n```\npackage CoreJava.day_5;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_2 {\n    public static void main(String[] args) {\n        /*\n        List list = new ArrayList();\n        list.add(\"justdoit\");\n        list.add(\"core\");\n        list.add(100);\n        */\n\n        List<String> list = new ArrayList<String>();\n        list.add(\"justdoit\");\n        list.add(\"core\");\n        //list.add(100);   // 1  提示编译错误\n\n        for (int i = 0; i < list.size(); i++) {\n            String name = list.get(i); // 2\n            System.out.println(\"name:\" + name);\n        }\n    }\n}\n\n```\n\n采用泛型写法后，在//1处想加入一个Integer类型的对象时会出现编译错误，通过List< String>，直接限定了list集合中只能含有String类型的元素，从而在//2处无须进行强制类型转换，因为此时，集合能够记住元素的类型信息，编译器已经能够确认它是String类型了。\n\n结合上面的泛型定义，我们知道在List< String>中，String是类型实参，也就是说，相应的List接口中肯定含有类型形参。且get()方法的返回结果也直接是此形参类型（也就是对应的传入的类型实参）。下面就来看看List接口的的具体定义：\n\n```\npublic interface List<E> extends Collection<E> {\n\n    int size();\n\n    boolean isEmpty();\n\n    boolean contains(Object o);\n\n    Iterator<E> iterator();\n\n    Object[] toArray();\n\n    <T> T[] toArray(T[] a);\n\n    boolean add(E e);\n\n    boolean remove(Object o);\n\n    boolean containsAll(Collection<?> c);\n\n    boolean addAll(Collection<? extends E> c);\n\n    boolean addAll(int index, Collection<? extends E> c);\n\n    boolean removeAll(Collection<?> c);\n\n    boolean retainAll(Collection<?> c);\n\n    void clear();\n\n    boolean equals(Object o);\n\n    int hashCode();\n\n    E get(int index);\n\n    E set(int index, E element);\n\n    void add(int index, E element);\n\n    E remove(int index);\n\n    int indexOf(Object o);\n\n    int lastIndexOf(Object o);\n\n    ListIterator<E> listIterator();\n\n    ListIterator<E> listIterator(int index);\n\n    List<E> subList(int fromIndex, int toIndex);\n}\n```\n\n我们可以看到，在List接口中采用泛型化定义之后，< E>中的E表示类型形参，可以接收具体的类型实参，并且此接口定义中，凡是出现E的地方均表示相同的接受自外部的类型实参。\n\n自然的，ArrayList作为List接口的实现类，其定义形式是:\n\n```\npublic class ArrayList<E> extends AbstractList<E> \n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n    \n    public boolean add(E e) {\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        elementData[size++] = e;\n        return true;\n    }\n    \n    public E get(int index) {\n        rangeCheck(index);\n        checkForComodification();\n        return ArrayList.this.elementData(offset + index);\n    }\n    \n    //...省略掉其他具体的定义过程\n\n}\n```\n\n由此，我们可以从源代码角度明白了为什么//1处加入Integer类型对象编译错误，且//2处get()到的类型直接就是String类型了。\n\n\n**三.自定义泛型接口、泛型类和泛型方法**\n\n从上面的内容中，大家已经明白了泛型的具体运作过程。也知道了接口、类和方法也都可以使用泛型去定义，以及相应的使用。是的，在具体使用时，可以分为泛型接口、泛型类和泛型方法。\n\n自定义泛型接口、泛型类和泛型方法与上述Java源码中的List、ArrayList类似。如下，我们看一个最简单的泛型类和方法定义：\n\n```\npackage CoreJava.day_5;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_3 {\n    public static void main(String[] args) {\n\n        Box<String> name = new Box<String>(\"core\");\n        System.out.println(\"name:\" + name.getData());\n    }\n\n}\n\nclass Box<T> {\n\n    private T data;\n\n    public Box() {\n\n    }\n\n    public Box(T data) {\n        this.data = data;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n}\n```\n\n在泛型接口、泛型类和泛型方法的定义过程中，我们常见的如T、E、K、V等形式的参数常用于表示泛型形参，由于接收来自外部使用时候传入的类型实参。那么对于不同传入的类型实参，生成的相应对象实例的类型是不是一样的呢？\n\n```\npackage CoreJava.day_5;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_4 {\n    public static void main(String[] args) {\n\n        Box<String> name = new Box<String>(\"core\");\n        Box<Integer> age = new Box<Integer>(712);\n\n        System.out.println(\"name class:\" + name.getClass());      // CoreJava.day_5.Box\n        System.out.println(\"age class:\" + age.getClass());        // CoreJava.day_5.Box\n        System.out.println(name.getClass() == age.getClass());    // true\n\n    }\n}\n\n```\n\n由此，我们发现，在使用泛型类时，虽然传入了不同的泛型实参，但并没有真正意义上生成不同的类型，传入不同泛型实参的泛型类在内存上只有一个，即还是原来的最基本的类型（本实例中为Box），当然，在逻辑上我们可以理解成多个不同的泛型类型。\n\n究其原因，在于Java中的泛型这一概念提出的目的，导致其只是作用于代码编译阶段，在编译过程中，对于正确检验泛型结果后，会将泛型的相关信息擦出，也就是说，成功编译过后的class文件中是不包含任何泛型信息的。泛型信息不会进入到运行时阶段。\n\n<font color=\"#008080\">**对此总结成一句话：泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。**</font>\n\n\n**四.类型通配符**\n\n接着上面的结论，我们知道，Box< Number>和Box< Integer>实际上都是Box类型，现在需要继续探讨一个问题，那么在逻辑上，类似于Box< Number>和Box< Integer>是否可以看成具有父子关系的泛型类型呢？\n\n为了弄清这个问题，我们继续看下下面这个例子:\n\n```\npackage CoreJava.day_5;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_6 {\n    public static void main(String[] args) {\n\n        Box<Number> name = new Box<Number>(99);\n        Box<Integer> age = new Box<Integer>(712);\n\n        getData(name);\n\n        //The method getData(Box<Number>) in the type GenericTest is\n        //not applicable for the arguments (Box<Integer>)\n        getData(age);   // 1\n\n    }\n\n    public static void getData(Box<Number> data) {\n        System.out.println(\"data :\" + data.getData());\n    }\n\n}\n\n```\n\n我们发现，在代码//1处出现了错误提示信息：The method getData(Box< Number>) in the t ype GenericTest is not applicable for the arguments (Box< Integer>)。显然，通过提示信息，我们知道Box< Number>在逻辑上不能视为Box< Integer>的父类。那么，原因是什么呢？\n\n```\npackage CoreJava.day_5;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_5 {\n    public static void main(String[] args) {\n\n        Box<Integer> a = new Box<Integer>(712);\n        Box<Number> b = a;  // 1\n        Box<Float> f = new Box<Float>(3.14f);\n        b.setData(f);        // 2\n\n    }\n\n    public static void getData(Box<Number> data) {\n        System.out.println(\"data :\" + data.getData());\n    }\n}\n\nclass Box<T> {\n\n    private T data;\n\n    public Box() {\n\n    }\n\n    public Box(T data) {\n        setData(data);\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n}\n```\n这个例子中，显然//1和//2处肯定会出现错误提示的。在此我们可以使用反证法来进行说明。\n\n假设Box< Number>在逻辑上可以视为Box< Integer>的父类，那么//1和//2处将不会有错误提示了，那么问题就出来了，通过getData()方法取出数据时到底是什么类型呢？Integer? Float? 还是Number？且由于在编程过程中的顺序不可控性，导致在必要的时候必须要进行类型判断，且进行强制类型转换。显然，这与泛型的理念矛盾，因此，<font color=\"#008080\">**在逻辑上Box< Number>不能视为Box< Integer>的父类。**</font>\n\n好，那我们回过头来继续看“类型通配符”中的第一个例子，我们知道其具体的错误提示的深层次原因了。那么如何解决呢？总不能再定义一个新的函数吧。这和Java中的多态理念显然是违背的，<font color=\"#008080\">**因此，我们需要一个在逻辑上可以用来表示同时是Box< Integer>和Box< Number>的父类的一个引用类型，由此，类型通配符应运而生。**</font>\n\n类型通配符一般是使用 ? 代替具体的类型实参。注意了，此处是类型实参，而不是类型形参！且Box<?>在逻辑上是Box< Integer>、Box< Number>...等所有Box<具体类型实参>的父类。由此，我们依然可以定义泛型方法，来完成此类需求。\n\n```\npackage CoreJava.day_5;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_7 {\n    public static void main(String[] args) {\n\n        Box<String> name = new Box<String>(\"core\");\n        Box<Integer> age = new Box<Integer>(712);\n        Box<Number> number = new Box<Number>(314);\n\n        getData(name);\n        getData(age);\n        getData(number);\n    }\n\n    public static void getData(Box<?> data) {\n        System.out.println(\"data :\" + data.getData());\n    }\n\n}\n\n```\n\n有时候，<font color=\"#008080\">**我们还可能听到类型通配符上限和类型通配符下限**。具体有是怎么样的呢？</font>\n\n在上面的例子中，如果需要定义一个功能类似于getData()的方法，但对类型实参又有进一步的限制：只能是Number类及其子类。此时，需要用到类型通配符上限。\n\n```\npackage CoreJava.day_5;\n\n/**\n * @author 李智\n * @date 2016/12/15\n */\npublic class GenericTest_8 {\n    public static void main(String[] args) {\n\n        Box<String> name = new Box<String>(\"core\");\n        Box<Integer> age = new Box<Integer>(712);\n        Box<Number> number = new Box<Number>(314);\n\n        getData(name);\n        getData(age);\n        getData(number);\n\n        //getUpperNumberData(name); // 1\n        getUpperNumberData(age);    // 2\n        getUpperNumberData(number); // 3\n    }\n\n    public static void getData(Box<?> data) {\n        System.out.println(\"data :\" + data.getData());\n    }\n\n    public static void getUpperNumberData(Box<? extends Number> data) {\n        System.out.println(\"data :\" + data.getData());\n    }\n\n}\n\n```\n\n此时，显然，在代码//1处调用将出现错误提示，而//2 //3处调用正常。\n\n<font color=\"#008080\">**类型通配符上限通过形如Box< ? extends Number>形式定义，相对应的，类型通配符下限为Box< ? super Number>形式，其含义与类型通配符上限正好相反**，</font>在此不作过多阐述了。\n\n \n\n**五.话外篇**\n\n本文中的例子主要是为了阐述泛型中的一些思想而简单举出的，并不一定有着实际的可用性。另外，一提到泛型，相信大家用到最多的就是在集合中，其实，在实际的编程过程中，自己可以使用泛型去简化开发，且能很好的保证代码质量。并且还要注意的一点是，Java中没有所谓的泛型数组一说。\n\n<font color=\"red\">**对于泛型，最主要的还是需要理解其背后的思想和目的。**</font>\n\n\n\n\n\n","slug":"Java泛型总结","published":1,"updated":"2017-02-18T13:27:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kf3001lrhsopr64hb45","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p><strong>一. 我们为什么需要泛型？</strong></p>\n<p>首先，我们看下下面这段简短的代码:</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class GenericTest &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">        list.<span class=\"built_in\">add</span>(<span class=\"string\">\"justdoit\"</span>);</div><div class=\"line\">        list.<span class=\"built_in\">add</span>(<span class=\"string\">\"core\"</span>);</div><div class=\"line\">        list.<span class=\"built_in\">add</span>(<span class=\"number\">100</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; list.<span class=\"built_in\">size</span>(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">String</span> name = (<span class=\"keyword\">String</span>) list.<span class=\"built_in\">get</span>(i); <span class=\"comment\">// 1</span></div><div class=\"line\">            System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"name:\"</span> + name);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>我们定义一个List类型的集合，先向其中加入了两个字符串类型的值，随后加入一个Integer类型的值。这是完全允许的，因为此时list默认的类型为Object类型。在之后的循环中，由于忘记了之前在list中也加入了Integer类型的值或其他编码原因，很容易出现类似于//1中的错误。因为编译阶段正常，而运行时会出现“java.lang.ClassCastException”异常。因此，导致此类错误编码过程中不易发现。</p>\n<p> <strong>在如上的编码过程中，我们发现主要存在两个问题：</strong></p>\n<p>1.当我们将一个对象放入集合中，集合不会记住此对象的类型，当再次从集合中取出此对象时，改对象的编译类型变成了Object类型，但其运行时类型任然为其本身类型。</p>\n<p>2.因此，//1处取出集合元素时需要人为的强制类型转化到具体的目标类型，且很容易出现“java.lang.ClassCastException”异常。</p>\n<font color=\"#008080\"><strong>那么有没有什么办法可以使集合能够记住集合内元素各类型，且能够达到只要编译时不出现问题，运行时就不会出现“java.lang.ClassCastException”异常呢？答案就是使用泛型。</strong></font>\n\n<p><strong>二.什么是泛型？</strong></p>\n<p>泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。</p>\n<p>这样说有点复杂，我们来看下上面那个例子采用泛型的写法:</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class GenericTest_2 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">        List list = new ArrayList();</div><div class=\"line\">        list.add(\"justdoit\");</div><div class=\"line\">        list.add(\"core\");</div><div class=\"line\">        list.add(100);</div><div class=\"line\">        */</div><div class=\"line\"></div><div class=\"line\">        List&lt;<span class=\"keyword\">String</span>&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;<span class=\"keyword\">String</span>&gt;();</div><div class=\"line\">        list.<span class=\"built_in\">add</span>(<span class=\"string\">\"justdoit\"</span>);</div><div class=\"line\">        list.<span class=\"built_in\">add</span>(<span class=\"string\">\"core\"</span>);</div><div class=\"line\">        <span class=\"comment\">//list.add(100);   // 1  提示编译错误</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; list.<span class=\"built_in\">size</span>(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">String</span> name = list.<span class=\"built_in\">get</span>(i); <span class=\"comment\">// 2</span></div><div class=\"line\">            System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"name:\"</span> + name);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>采用泛型写法后，在//1处想加入一个Integer类型的对象时会出现编译错误，通过List&lt; String&gt;，直接限定了list集合中只能含有String类型的元素，从而在//2处无须进行强制类型转换，因为此时，集合能够记住元素的类型信息，编译器已经能够确认它是String类型了。</p>\n<p>结合上面的泛型定义，我们知道在List&lt; String&gt;中，String是类型实参，也就是说，相应的List接口中肯定含有类型形参。且get()方法的返回结果也直接是此形参类型（也就是对应的传入的类型实参）。下面就来看看List接口的的具体定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Collection</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    Object[] toArray();</div><div class=\"line\"></div><div class=\"line\">    &lt;T&gt; T[] toArray(T[] a);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containsAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">List&lt;E&gt; <span class=\"title\">subList</span><span class=\"params\">(<span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以看到，在List接口中采用泛型化定义之后，&lt; E&gt;中的E表示类型形参，可以接收具体的类型实参，并且此接口定义中，凡是出现E的地方均表示相同的接受自外部的类型实参。</p>\n<p>自然的，ArrayList作为List接口的实现类，其定义形式是:</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt; </span></div><div class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> add(E e) &#123;</div><div class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></div><div class=\"line\">        elementData[size++] = e;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> E get(<span class=\"keyword\">int</span> <span class=\"keyword\">index</span>) &#123;</div><div class=\"line\">        rangeCheck(<span class=\"keyword\">index</span>);</div><div class=\"line\">        checkForComodification();</div><div class=\"line\">        <span class=\"keyword\">return</span> ArrayList.<span class=\"keyword\">this</span>.elementData(offset + <span class=\"keyword\">index</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//...省略掉其他具体的定义过程</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由此，我们可以从源代码角度明白了为什么//1处加入Integer类型对象编译错误，且//2处get()到的类型直接就是String类型了。</p>\n<p><strong>三.自定义泛型接口、泛型类和泛型方法</strong></p>\n<p>从上面的内容中，大家已经明白了泛型的具体运作过程。也知道了接口、类和方法也都可以使用泛型去定义，以及相应的使用。是的，在具体使用时，可以分为泛型接口、泛型类和泛型方法。</p>\n<p>自定义泛型接口、泛型类和泛型方法与上述Java源码中的List、ArrayList类似。如下，我们看一个最简单的泛型类和方法定义：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericTest_3</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        Box&lt;String&gt; name = new Box&lt;String&gt;(<span class=\"string\">\"core\"</span>);</div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"name:\"</span> + name.getData());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"type\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> T <span class=\"keyword\">data</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Box() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Box(T <span class=\"keyword\">data</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">data</span> = <span class=\"keyword\">data</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> T getData() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在泛型接口、泛型类和泛型方法的定义过程中，我们常见的如T、E、K、V等形式的参数常用于表示泛型形参，由于接收来自外部使用时候传入的类型实参。那么对于不同传入的类型实参，生成的相应对象实例的类型是不是一样的呢？</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenericTest_4 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        Box&lt;<span class=\"keyword\">String</span>&gt; name = <span class=\"keyword\">new</span> Box&lt;<span class=\"keyword\">String</span>&gt;(<span class=\"string\">\"core\"</span>);</div><div class=\"line\">        Box&lt;Integer&gt; age = <span class=\"keyword\">new</span> Box&lt;Integer&gt;(<span class=\"number\">712</span>);</div><div class=\"line\"></div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"name class:\"</span> + name.getClass());      <span class=\"comment\">// CoreJava.day_5.Box</span></div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"age class:\"</span> + age.getClass());        <span class=\"comment\">// CoreJava.day_5.Box</span></div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(name.getClass() == age.getClass());    <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由此，我们发现，在使用泛型类时，虽然传入了不同的泛型实参，但并没有真正意义上生成不同的类型，传入不同泛型实参的泛型类在内存上只有一个，即还是原来的最基本的类型（本实例中为Box），当然，在逻辑上我们可以理解成多个不同的泛型类型。</p>\n<p>究其原因，在于Java中的泛型这一概念提出的目的，导致其只是作用于代码编译阶段，在编译过程中，对于正确检验泛型结果后，会将泛型的相关信息擦出，也就是说，成功编译过后的class文件中是不包含任何泛型信息的。泛型信息不会进入到运行时阶段。</p>\n<font color=\"#008080\"><strong>对此总结成一句话：泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。</strong></font>\n\n\n<p><strong>四.类型通配符</strong></p>\n<p>接着上面的结论，我们知道，Box&lt; Number&gt;和Box&lt; Integer&gt;实际上都是Box类型，现在需要继续探讨一个问题，那么在逻辑上，类似于Box&lt; Number&gt;和Box&lt; Integer&gt;是否可以看成具有父子关系的泛型类型呢？</p>\n<p>为了弄清这个问题，我们继续看下下面这个例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericTest_6</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Box&lt;Number&gt; name = <span class=\"keyword\">new</span> Box&lt;Number&gt;(<span class=\"number\">99</span>);</div><div class=\"line\">        Box&lt;Integer&gt; age = <span class=\"keyword\">new</span> Box&lt;Integer&gt;(<span class=\"number\">712</span>);</div><div class=\"line\"></div><div class=\"line\">        getData(name);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//The method getData(Box&lt;Number&gt;) in the type GenericTest is</span></div><div class=\"line\">        <span class=\"comment\">//not applicable for the arguments (Box&lt;Integer&gt;)</span></div><div class=\"line\">        getData(age);   <span class=\"comment\">// 1</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getData</span><span class=\"params\">(Box&lt;Number&gt; data)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"data :\"</span> + data.getData());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们发现，在代码//1处出现了错误提示信息：The method getData(Box&lt; Number&gt;) in the t ype GenericTest is not applicable for the arguments (Box&lt; Integer&gt;)。显然，通过提示信息，我们知道Box&lt; Number&gt;在逻辑上不能视为Box&lt; Integer&gt;的父类。那么，原因是什么呢？</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericTest_5</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        Box&lt;Integer&gt; a = new Box&lt;Integer&gt;(<span class=\"number\">712</span>);</div><div class=\"line\">        Box&lt;Number&gt; b = a;  <span class=\"comment\">// 1</span></div><div class=\"line\">        Box&lt;<span class=\"built_in\">Float</span>&gt; f = new Box&lt;<span class=\"built_in\">Float</span>&gt;(<span class=\"number\">3.14</span>f);</div><div class=\"line\">        b.setData(f);        <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> static void getData(Box&lt;Number&gt; <span class=\"keyword\">data</span>) &#123;</div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"data :\"</span> + <span class=\"keyword\">data</span>.getData());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"type\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> T <span class=\"keyword\">data</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Box() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Box(T <span class=\"keyword\">data</span>) &#123;</div><div class=\"line\">        setData(<span class=\"keyword\">data</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> T getData() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> void setData(T <span class=\"keyword\">data</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">data</span> = <span class=\"keyword\">data</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子中，显然//1和//2处肯定会出现错误提示的。在此我们可以使用反证法来进行说明。</p>\n<p>假设Box&lt; Number&gt;在逻辑上可以视为Box&lt; Integer&gt;的父类，那么//1和//2处将不会有错误提示了，那么问题就出来了，通过getData()方法取出数据时到底是什么类型呢？Integer? Float? 还是Number？且由于在编程过程中的顺序不可控性，导致在必要的时候必须要进行类型判断，且进行强制类型转换。显然，这与泛型的理念矛盾，因此，<font color=\"#008080\"><strong>在逻辑上Box&lt; Number&gt;不能视为Box&lt; Integer&gt;的父类。</strong></font></p>\n<p>好，那我们回过头来继续看“类型通配符”中的第一个例子，我们知道其具体的错误提示的深层次原因了。那么如何解决呢？总不能再定义一个新的函数吧。这和Java中的多态理念显然是违背的，<font color=\"#008080\"><strong>因此，我们需要一个在逻辑上可以用来表示同时是Box&lt; Integer&gt;和Box&lt; Number&gt;的父类的一个引用类型，由此，类型通配符应运而生。</strong></font></p>\n<p>类型通配符一般是使用 ? 代替具体的类型实参。注意了，此处是类型实参，而不是类型形参！且Box&lt;?&gt;在逻辑上是Box&lt; Integer&gt;、Box&lt; Number&gt;…等所有Box&lt;具体类型实参&gt;的父类。由此，我们依然可以定义泛型方法，来完成此类需求。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenericTest_7 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> main(<span class=\"built_in\">String</span>[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        Box&lt;<span class=\"built_in\">String</span>&gt; name = <span class=\"keyword\">new</span> Box&lt;<span class=\"built_in\">String</span>&gt;(<span class=\"string\">\"core\"</span>);</div><div class=\"line\">        Box&lt;Integer&gt; age = <span class=\"keyword\">new</span> Box&lt;Integer&gt;(<span class=\"number\">712</span>);</div><div class=\"line\">        Box&lt;<span class=\"built_in\">Number</span>&gt; <span class=\"built_in\">number</span> = <span class=\"keyword\">new</span> Box&lt;<span class=\"built_in\">Number</span>&gt;(<span class=\"number\">314</span>);</div><div class=\"line\"></div><div class=\"line\">        getData(name);</div><div class=\"line\">        getData(age);</div><div class=\"line\">        getData(<span class=\"built_in\">number</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> getData(Box&lt;?&gt; data) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"data :\"</span> + data.getData());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有时候，<font color=\"#008080\"><strong>我们还可能听到类型通配符上限和类型通配符下限</strong>。具体有是怎么样的呢？</font></p>\n<p>在上面的例子中，如果需要定义一个功能类似于getData()的方法，但对类型实参又有进一步的限制：只能是Number类及其子类。此时，需要用到类型通配符上限。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenericTest_8 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> main(<span class=\"built_in\">String</span>[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        Box&lt;<span class=\"built_in\">String</span>&gt; name = <span class=\"keyword\">new</span> Box&lt;<span class=\"built_in\">String</span>&gt;(<span class=\"string\">\"core\"</span>);</div><div class=\"line\">        Box&lt;Integer&gt; age = <span class=\"keyword\">new</span> Box&lt;Integer&gt;(<span class=\"number\">712</span>);</div><div class=\"line\">        Box&lt;<span class=\"built_in\">Number</span>&gt; <span class=\"built_in\">number</span> = <span class=\"keyword\">new</span> Box&lt;<span class=\"built_in\">Number</span>&gt;(<span class=\"number\">314</span>);</div><div class=\"line\"></div><div class=\"line\">        getData(name);</div><div class=\"line\">        getData(age);</div><div class=\"line\">        getData(<span class=\"built_in\">number</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//getUpperNumberData(name); // 1</span></div><div class=\"line\">        getUpperNumberData(age);    <span class=\"comment\">// 2</span></div><div class=\"line\">        getUpperNumberData(<span class=\"built_in\">number</span>); <span class=\"comment\">// 3</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> getData(Box&lt;?&gt; data) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"data :\"</span> + data.getData());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> getUpperNumberData(Box&lt;? extends <span class=\"built_in\">Number</span>&gt; data) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"data :\"</span> + data.getData());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时，显然，在代码//1处调用将出现错误提示，而//2 //3处调用正常。</p>\n<font color=\"#008080\"><strong>类型通配符上限通过形如Box&lt; ? extends Number&gt;形式定义，相对应的，类型通配符下限为Box&lt; ? super Number&gt;形式，其含义与类型通配符上限正好相反</strong>，</font>在此不作过多阐述了。<br><br><br><br><strong>五.话外篇</strong><br><br>本文中的例子主要是为了阐述泛型中的一些思想而简单举出的，并不一定有着实际的可用性。另外，一提到泛型，相信大家用到最多的就是在集合中，其实，在实际的编程过程中，自己可以使用泛型去简化开发，且能很好的保证代码质量。并且还要注意的一点是，Java中没有所谓的泛型数组一说。<br><br><font color=\"red\"><strong>对于泛型，最主要的还是需要理解其背后的思想和目的。</strong></font>\n\n\n\n\n\n","excerpt":"<p><strong>一. 我们为什么需要泛型？</strong></p>\n<p>首先，我们看下下面这段简短的代码:</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class GenericTest &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">        list.<span class=\"built_in\">add</span>(<span class=\"string\">\"justdoit\"</span>);</div><div class=\"line\">        list.<span class=\"built_in\">add</span>(<span class=\"string\">\"core\"</span>);</div><div class=\"line\">        list.<span class=\"built_in\">add</span>(<span class=\"number\">100</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; list.<span class=\"built_in\">size</span>(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">String</span> name = (<span class=\"keyword\">String</span>) list.<span class=\"built_in\">get</span>(i); <span class=\"comment\">// 1</span></div><div class=\"line\">            System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"name:\"</span> + name);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<p>我们定义一个List类型的集合，先向其中加入了两个字符串类型的值，随后加入一个Integer类型的值。这是完全允许的，因为此时list默认的类型为Object类型。在之后的循环中，由于忘记了之前在list中也加入了Integer类型的值或其他编码原因，很容易出现类似于//1中的错误。因为编译阶段正常，而运行时会出现“java.lang.ClassCastException”异常。因此，导致此类错误编码过程中不易发现。</p>\n<p> <strong>在如上的编码过程中，我们发现主要存在两个问题：</strong></p>\n<p>1.当我们将一个对象放入集合中，集合不会记住此对象的类型，当再次从集合中取出此对象时，改对象的编译类型变成了Object类型，但其运行时类型任然为其本身类型。</p>\n<p>2.因此，//1处取出集合元素时需要人为的强制类型转化到具体的目标类型，且很容易出现“java.lang.ClassCastException”异常。</p>\n<font color=\"#008080\"><strong>那么有没有什么办法可以使集合能够记住集合内元素各类型，且能够达到只要编译时不出现问题，运行时就不会出现“java.lang.ClassCastException”异常呢？答案就是使用泛型。</strong></font>\n\n<p><strong>二.什么是泛型？</strong></p>\n<p>泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。</p>\n<p>这样说有点复杂，我们来看下上面那个例子采用泛型的写法:</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class GenericTest_2 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">        List list = new ArrayList();</div><div class=\"line\">        list.add(\"justdoit\");</div><div class=\"line\">        list.add(\"core\");</div><div class=\"line\">        list.add(100);</div><div class=\"line\">        */</div><div class=\"line\"></div><div class=\"line\">        List&lt;<span class=\"keyword\">String</span>&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;<span class=\"keyword\">String</span>&gt;();</div><div class=\"line\">        list.<span class=\"built_in\">add</span>(<span class=\"string\">\"justdoit\"</span>);</div><div class=\"line\">        list.<span class=\"built_in\">add</span>(<span class=\"string\">\"core\"</span>);</div><div class=\"line\">        <span class=\"comment\">//list.add(100);   // 1  提示编译错误</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; list.<span class=\"built_in\">size</span>(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">String</span> name = list.<span class=\"built_in\">get</span>(i); <span class=\"comment\">// 2</span></div><div class=\"line\">            System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"name:\"</span> + name);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>采用泛型写法后，在//1处想加入一个Integer类型的对象时会出现编译错误，通过List&lt; String&gt;，直接限定了list集合中只能含有String类型的元素，从而在//2处无须进行强制类型转换，因为此时，集合能够记住元素的类型信息，编译器已经能够确认它是String类型了。</p>\n<p>结合上面的泛型定义，我们知道在List&lt; String&gt;中，String是类型实参，也就是说，相应的List接口中肯定含有类型形参。且get()方法的返回结果也直接是此形参类型（也就是对应的传入的类型实参）。下面就来看看List接口的的具体定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Collection</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    Object[] toArray();</div><div class=\"line\"></div><div class=\"line\">    &lt;T&gt; T[] toArray(T[] a);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containsAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Collection&lt;? extends E&gt; c)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object o)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">List&lt;E&gt; <span class=\"title\">subList</span><span class=\"params\">(<span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以看到，在List接口中采用泛型化定义之后，&lt; E&gt;中的E表示类型形参，可以接收具体的类型实参，并且此接口定义中，凡是出现E的地方均表示相同的接受自外部的类型实参。</p>\n<p>自然的，ArrayList作为List接口的实现类，其定义形式是:</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt; </span></div><div class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> add(E e) &#123;</div><div class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></div><div class=\"line\">        elementData[size++] = e;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> E get(<span class=\"keyword\">int</span> <span class=\"keyword\">index</span>) &#123;</div><div class=\"line\">        rangeCheck(<span class=\"keyword\">index</span>);</div><div class=\"line\">        checkForComodification();</div><div class=\"line\">        <span class=\"keyword\">return</span> ArrayList.<span class=\"keyword\">this</span>.elementData(offset + <span class=\"keyword\">index</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//...省略掉其他具体的定义过程</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由此，我们可以从源代码角度明白了为什么//1处加入Integer类型对象编译错误，且//2处get()到的类型直接就是String类型了。</p>\n<p><strong>三.自定义泛型接口、泛型类和泛型方法</strong></p>\n<p>从上面的内容中，大家已经明白了泛型的具体运作过程。也知道了接口、类和方法也都可以使用泛型去定义，以及相应的使用。是的，在具体使用时，可以分为泛型接口、泛型类和泛型方法。</p>\n<p>自定义泛型接口、泛型类和泛型方法与上述Java源码中的List、ArrayList类似。如下，我们看一个最简单的泛型类和方法定义：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericTest_3</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        Box&lt;String&gt; name = new Box&lt;String&gt;(<span class=\"string\">\"core\"</span>);</div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"name:\"</span> + name.getData());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"type\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> T <span class=\"keyword\">data</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Box() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Box(T <span class=\"keyword\">data</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">data</span> = <span class=\"keyword\">data</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> T getData() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在泛型接口、泛型类和泛型方法的定义过程中，我们常见的如T、E、K、V等形式的参数常用于表示泛型形参，由于接收来自外部使用时候传入的类型实参。那么对于不同传入的类型实参，生成的相应对象实例的类型是不是一样的呢？</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenericTest_4 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        Box&lt;<span class=\"keyword\">String</span>&gt; name = <span class=\"keyword\">new</span> Box&lt;<span class=\"keyword\">String</span>&gt;(<span class=\"string\">\"core\"</span>);</div><div class=\"line\">        Box&lt;Integer&gt; age = <span class=\"keyword\">new</span> Box&lt;Integer&gt;(<span class=\"number\">712</span>);</div><div class=\"line\"></div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"name class:\"</span> + name.getClass());      <span class=\"comment\">// CoreJava.day_5.Box</span></div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"age class:\"</span> + age.getClass());        <span class=\"comment\">// CoreJava.day_5.Box</span></div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(name.getClass() == age.getClass());    <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由此，我们发现，在使用泛型类时，虽然传入了不同的泛型实参，但并没有真正意义上生成不同的类型，传入不同泛型实参的泛型类在内存上只有一个，即还是原来的最基本的类型（本实例中为Box），当然，在逻辑上我们可以理解成多个不同的泛型类型。</p>\n<p>究其原因，在于Java中的泛型这一概念提出的目的，导致其只是作用于代码编译阶段，在编译过程中，对于正确检验泛型结果后，会将泛型的相关信息擦出，也就是说，成功编译过后的class文件中是不包含任何泛型信息的。泛型信息不会进入到运行时阶段。</p>\n<font color=\"#008080\"><strong>对此总结成一句话：泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。</strong></font>\n\n\n<p><strong>四.类型通配符</strong></p>\n<p>接着上面的结论，我们知道，Box&lt; Number&gt;和Box&lt; Integer&gt;实际上都是Box类型，现在需要继续探讨一个问题，那么在逻辑上，类似于Box&lt; Number&gt;和Box&lt; Integer&gt;是否可以看成具有父子关系的泛型类型呢？</p>\n<p>为了弄清这个问题，我们继续看下下面这个例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericTest_6</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Box&lt;Number&gt; name = <span class=\"keyword\">new</span> Box&lt;Number&gt;(<span class=\"number\">99</span>);</div><div class=\"line\">        Box&lt;Integer&gt; age = <span class=\"keyword\">new</span> Box&lt;Integer&gt;(<span class=\"number\">712</span>);</div><div class=\"line\"></div><div class=\"line\">        getData(name);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//The method getData(Box&lt;Number&gt;) in the type GenericTest is</span></div><div class=\"line\">        <span class=\"comment\">//not applicable for the arguments (Box&lt;Integer&gt;)</span></div><div class=\"line\">        getData(age);   <span class=\"comment\">// 1</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getData</span><span class=\"params\">(Box&lt;Number&gt; data)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"data :\"</span> + data.getData());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们发现，在代码//1处出现了错误提示信息：The method getData(Box&lt; Number&gt;) in the t ype GenericTest is not applicable for the arguments (Box&lt; Integer&gt;)。显然，通过提示信息，我们知道Box&lt; Number&gt;在逻辑上不能视为Box&lt; Integer&gt;的父类。那么，原因是什么呢？</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericTest_5</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        Box&lt;Integer&gt; a = new Box&lt;Integer&gt;(<span class=\"number\">712</span>);</div><div class=\"line\">        Box&lt;Number&gt; b = a;  <span class=\"comment\">// 1</span></div><div class=\"line\">        Box&lt;<span class=\"built_in\">Float</span>&gt; f = new Box&lt;<span class=\"built_in\">Float</span>&gt;(<span class=\"number\">3.14</span>f);</div><div class=\"line\">        b.setData(f);        <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> static void getData(Box&lt;Number&gt; <span class=\"keyword\">data</span>) &#123;</div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"data :\"</span> + <span class=\"keyword\">data</span>.getData());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"type\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> T <span class=\"keyword\">data</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Box() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Box(T <span class=\"keyword\">data</span>) &#123;</div><div class=\"line\">        setData(<span class=\"keyword\">data</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> T getData() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> void setData(T <span class=\"keyword\">data</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">data</span> = <span class=\"keyword\">data</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子中，显然//1和//2处肯定会出现错误提示的。在此我们可以使用反证法来进行说明。</p>\n<p>假设Box&lt; Number&gt;在逻辑上可以视为Box&lt; Integer&gt;的父类，那么//1和//2处将不会有错误提示了，那么问题就出来了，通过getData()方法取出数据时到底是什么类型呢？Integer? Float? 还是Number？且由于在编程过程中的顺序不可控性，导致在必要的时候必须要进行类型判断，且进行强制类型转换。显然，这与泛型的理念矛盾，因此，<font color=\"#008080\"><strong>在逻辑上Box&lt; Number&gt;不能视为Box&lt; Integer&gt;的父类。</strong></font></p>\n<p>好，那我们回过头来继续看“类型通配符”中的第一个例子，我们知道其具体的错误提示的深层次原因了。那么如何解决呢？总不能再定义一个新的函数吧。这和Java中的多态理念显然是违背的，<font color=\"#008080\"><strong>因此，我们需要一个在逻辑上可以用来表示同时是Box&lt; Integer&gt;和Box&lt; Number&gt;的父类的一个引用类型，由此，类型通配符应运而生。</strong></font></p>\n<p>类型通配符一般是使用 ? 代替具体的类型实参。注意了，此处是类型实参，而不是类型形参！且Box&lt;?&gt;在逻辑上是Box&lt; Integer&gt;、Box&lt; Number&gt;…等所有Box&lt;具体类型实参&gt;的父类。由此，我们依然可以定义泛型方法，来完成此类需求。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenericTest_7 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> main(<span class=\"built_in\">String</span>[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        Box&lt;<span class=\"built_in\">String</span>&gt; name = <span class=\"keyword\">new</span> Box&lt;<span class=\"built_in\">String</span>&gt;(<span class=\"string\">\"core\"</span>);</div><div class=\"line\">        Box&lt;Integer&gt; age = <span class=\"keyword\">new</span> Box&lt;Integer&gt;(<span class=\"number\">712</span>);</div><div class=\"line\">        Box&lt;<span class=\"built_in\">Number</span>&gt; <span class=\"built_in\">number</span> = <span class=\"keyword\">new</span> Box&lt;<span class=\"built_in\">Number</span>&gt;(<span class=\"number\">314</span>);</div><div class=\"line\"></div><div class=\"line\">        getData(name);</div><div class=\"line\">        getData(age);</div><div class=\"line\">        getData(<span class=\"built_in\">number</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> getData(Box&lt;?&gt; data) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"data :\"</span> + data.getData());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有时候，<font color=\"#008080\"><strong>我们还可能听到类型通配符上限和类型通配符下限</strong>。具体有是怎么样的呢？</font></p>\n<p>在上面的例子中，如果需要定义一个功能类似于getData()的方法，但对类型实参又有进一步的限制：只能是Number类及其子类。此时，需要用到类型通配符上限。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">package CoreJava.day_5;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2016/12/15</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenericTest_8 &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> main(<span class=\"built_in\">String</span>[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        Box&lt;<span class=\"built_in\">String</span>&gt; name = <span class=\"keyword\">new</span> Box&lt;<span class=\"built_in\">String</span>&gt;(<span class=\"string\">\"core\"</span>);</div><div class=\"line\">        Box&lt;Integer&gt; age = <span class=\"keyword\">new</span> Box&lt;Integer&gt;(<span class=\"number\">712</span>);</div><div class=\"line\">        Box&lt;<span class=\"built_in\">Number</span>&gt; <span class=\"built_in\">number</span> = <span class=\"keyword\">new</span> Box&lt;<span class=\"built_in\">Number</span>&gt;(<span class=\"number\">314</span>);</div><div class=\"line\"></div><div class=\"line\">        getData(name);</div><div class=\"line\">        getData(age);</div><div class=\"line\">        getData(<span class=\"built_in\">number</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//getUpperNumberData(name); // 1</span></div><div class=\"line\">        getUpperNumberData(age);    <span class=\"comment\">// 2</span></div><div class=\"line\">        getUpperNumberData(<span class=\"built_in\">number</span>); <span class=\"comment\">// 3</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> getData(Box&lt;?&gt; data) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"data :\"</span> + data.getData());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> getUpperNumberData(Box&lt;? extends <span class=\"built_in\">Number</span>&gt; data) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"data :\"</span> + data.getData());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时，显然，在代码//1处调用将出现错误提示，而//2 //3处调用正常。</p>\n<font color=\"#008080\"><strong>类型通配符上限通过形如Box&lt; ? extends Number&gt;形式定义，相对应的，类型通配符下限为Box&lt; ? super Number&gt;形式，其含义与类型通配符上限正好相反</strong>，</font>在此不作过多阐述了。<br><br><br><br><strong>五.话外篇</strong><br><br>本文中的例子主要是为了阐述泛型中的一些思想而简单举出的，并不一定有着实际的可用性。另外，一提到泛型，相信大家用到最多的就是在集合中，其实，在实际的编程过程中，自己可以使用泛型去简化开发，且能很好的保证代码质量。并且还要注意的一点是，Java中没有所谓的泛型数组一说。<br><br><font color=\"red\"><strong>对于泛型，最主要的还是需要理解其背后的思想和目的。</strong></font>"},{"title":"Java的静态/动态绑定","date":"2017-02-18T12:57:05.000Z","_content":"今天看到《Java核心技术I》书上的动态绑定，意思就是当子类和父类存在同一个方法，子类重写了父类的方法，程序在运行时调用方法是调用父类的方法还是子类的重写方法呢？程序会在运行的时候自动选择调用某个方法（根据方法表）。\n看完这里不由自主的想到，有动态肯定也就有静态吧，于是去求助了下google，首先看了下什么是**绑定**: \n绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来。对java来说，绑定分为静态绑定和动态绑定；或者叫做前期绑定和后期绑定。\n<!--more-->\n然后我们分别看看两者之间含义以及差别<br>\n**动态绑定**：在运行时根据具体对象的类型进行绑定。若一种语言实现了后期绑定，同时必须提供一些机制，可在运行期间判断对象的类型，并分别调用适当的方法。也就是说，编译器此时依然不知道对象的类型，但方法调用机制能自己去调查，找到正确的方法主体。不同的语言对后期绑定的实现方法是有所区别的。但我们至少可以这样认为：它们都要在对象中安插某些特殊类型的信息。\n\n**动态绑定的过程**：<br>\n虚拟机提取对象的实际类型的方法表；-->\n虚拟机搜索方法签名；-->\n调用方法。\n\n**静态绑定**：在程序执行前方法已经被绑定（也就是说在编译过程中就已经知道这个方法到底是哪个类中的方法），此时由编译器或其它连接程序实现。针对java，可以简单的理解为程序编译期的绑定；这里要特别说明一点，java当中的方法只有final，static，private和构造方法是前期绑定。\n\n**差别**：其实上述解释可以看出很多东西了。<br>\n（1）静态绑定发生在编译时期，动态绑定发生在运行时<br>\n（2）使用private或static或final修饰的变量或者方法，使用静态绑定。而虚方法（可以被子类重写的方法）则会根据运行时的对象进行动态绑定。<br>\n（3）静态绑定使用类信息来完成，而动态绑定则需要使用对象信息来完成。<br>\n（4）重载(Overload)的方法使用静态绑定完成，而重写(Override)的方法则使用动态绑定完成。\n\n**下面开始代码测试**：\n\n```\npublic class Test {\n  public static void main(String[] args) {\n      String str = new String();\n      Lee lee = new Lee();\n      lee.say(str);\n  }\n  static class Lee {\n      public void say(Object obj) {\n          System.out.println(\"这是个Object\");\n      }   \n      public void say(String str) {\n          System.out.println(\"这是个String\");\n      }\n  }\n}\n```\n**执行结果**：\n```\n$ java Test\n这是个String\n```\n\n在上面的代码中，lee方法存在两个重载的实现，一个是接收Object类型的对象作为参数，另一个则是接收String类型的对象作为参数。而str是一个String对象，所有接收String类型参数的call方法会被调用。而这里的绑定就是在编译时期根据参数类型进行的静态绑定。\n\n**接着我们反编译验证一下**:\n\n```\njavap -c Test    \nCompiled from \"Test.java\"\npublic class CoreJava.day_2.Test {\n  public CoreJava.day_2.Test();\n    Code:\n       0: aload_0\n       1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n       4: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: new           #2                  // class java/lang/String\n       3: dup\n       4: invokespecial #3                  // Method java/lang/String.\"<init>\":()V\n       7: astore_1\n       8: new           #4                  // class CoreJava/day_2/Test$Lee\n      11: dup\n      12: invokespecial #5                  // Method CoreJava/day_2/Test$Lee.\"<init>\":()V\n      15: astore_2\n      16: aload_2\n      17: aload_1\n      18: invokevirtual #6                  // Method CoreJava/day_2/Test$Lee.call:(Ljava/lang/String;)V\n      21: return\n}\n\n```\n\n看到了这一行18: invokevirtual #6                  // Method CoreJava/day_2/Test$Lee.call:(Ljava/lang/String;)V确实是发生了静态绑定，确定了调用了接收String对象作为参数的say方法。\n\n\n**现在可以改写一下**：\n\n```\npublic class Test{\n  public static void main(String[] args) {\n      String str = new String();\n      Lee lee = new SecLee();\n      lee.say(str);\n  }\n  \n  static class Lee {\n      public void say(String str) {\n          System.out.println(\"这是个String\");\n      }\n  }\n  \n  static class SecLee extends Lee {\n      @Override\n      public void say(String str) {\n          System.out.println(\"这是第二李的String\");\n      }\n  }\n}\n```\n\n**结果为**：\n\n```\n$ java Test\n这是第二李的String\n```\n\n上面，用SecLee继承了Lee，并且重写了say方法。我们声明了一个Lee类型的变量lee，但是这个变量指向的是他的子类SecLee。根据结果可以看出，其调用了SecLee的say方法实现，而不是Lee的say方法。这一结果的产生的原因是因为在运行时发生了动态绑定，在绑定过程中需要确定调用哪个版本的say方法实现。\n\n**再看看反编译的结果**：\n\n```\njavap -c Test\n警告: 二进制文件Test包含CoreJava.day_2.Test\nCompiled from \"Test.java\"\npublic class CoreJava.day_2.Test {\n  public CoreJava.day_2.Test();\n    Code:\n       0: aload_0\n       1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n       4: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: new           #2                  // class java/lang/String\n       3: dup\n       4: invokespecial #3                  // Method java/lang/String.\"<init>\":()V\n       7: astore_1\n       8: new           #4                  // class CoreJava/day_2/Test$SecLee\n      11: dup\n      12: invokespecial #5                  // Method CoreJava/day_2/Test$SecLee.\"<init>\":()V\n      15: astore_2\n      16: aload_2\n      17: aload_1\n      18: invokevirtual #6                  // Method CoreJava/day_2/Test$Lee.say:(Ljava/lang/String;)V\n      21: return\n}\n```\n正如上面的结果，18: invokevirtual #6                  // Method CoreJava/day_2/Test Lee.say:(Ljava/lang/String;)V这里是TestLee.say而非Test$SecLee.say，因为编译期无法确定调用子类还是父类的实现，所以只能丢给运行时的动态绑定来处理。\n\n既然重写测试了，**那我们再试试重载**：\n\n下面的例子更复杂！Lee类中存在say方法的两种重载，更复杂的是SecLee集成Lee并且重写了这两个方法。其实这种情况是上面两种情况的复合情况。\n下面的代码首先会发生静态绑定，确定调用参数为String对象的say方法，然后在运行时进行动态绑定确定执行子类还是父类的say实现。\n\n```\npublic class Test {\n  public static void main(String[] args) {\n      String str = new String();\n      Lee lee = new SecLee();\n      lee.say(str);\n  }\n  \n  static class Lee {\n      public void say(Object obj) {\n          System.out.println(\"这是Object\");\n      }\n      \n      public void say(String str) {\n          System.out.println(\"这是String\");\n      }\n  }\n  \n  static class SecLee extends Lee {\n      @Override\n      public void say(Object obj) {\n          System.out.println(\"这是第二李的Object\");\n      }\n      \n      @Override\n      public void say(String str) {\n          System.out.println(\"这是第二李的String\");\n      }\n  }\n}\n```\n**结果**:\n\n```\n$ java Test\n这是第二李的String\n```\n结果在意料之中，就不多说了。\n\n那么问题来了，<font color=red>**非动态绑定不可么？**</font>\n其实某些方法的绑定也可以由静态绑定实现，比如说：\n\n```\npublic static void main(String[] args) {\n      String str = new String();\n      final Lee lee = new SecLee();\n      lee.say(str);\n}\n```\n可以看出，这里lee持有SecLee的对象并且lee变量为final，立即执行了say方法，编译器理论上通过足够的分析代码，是可以知道应该调用SecLee的say方法。\n\n**结论：**\n由于动态绑定需要在运行时确定执行哪个版本的方法实现或者变量，比起静态绑定起来要耗时，所以正如书上所说的，有些程序员认为，除非有足够的理由使用多态性，应该把所有的方法都声明为final，private或者static进行修饰。我觉得这个有点偏激了，具体使用仁者见仁，智者见智吧。","source":"_posts/Java的静态-动态绑定.md","raw":"---\ntitle: Java的静态/动态绑定\ndate: 2017-02-18 20:57:05\ncategories: Java二三事\ntags: \n\t- 静态动态绑定\n---\n今天看到《Java核心技术I》书上的动态绑定，意思就是当子类和父类存在同一个方法，子类重写了父类的方法，程序在运行时调用方法是调用父类的方法还是子类的重写方法呢？程序会在运行的时候自动选择调用某个方法（根据方法表）。\n看完这里不由自主的想到，有动态肯定也就有静态吧，于是去求助了下google，首先看了下什么是**绑定**: \n绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来。对java来说，绑定分为静态绑定和动态绑定；或者叫做前期绑定和后期绑定。\n<!--more-->\n然后我们分别看看两者之间含义以及差别<br>\n**动态绑定**：在运行时根据具体对象的类型进行绑定。若一种语言实现了后期绑定，同时必须提供一些机制，可在运行期间判断对象的类型，并分别调用适当的方法。也就是说，编译器此时依然不知道对象的类型，但方法调用机制能自己去调查，找到正确的方法主体。不同的语言对后期绑定的实现方法是有所区别的。但我们至少可以这样认为：它们都要在对象中安插某些特殊类型的信息。\n\n**动态绑定的过程**：<br>\n虚拟机提取对象的实际类型的方法表；-->\n虚拟机搜索方法签名；-->\n调用方法。\n\n**静态绑定**：在程序执行前方法已经被绑定（也就是说在编译过程中就已经知道这个方法到底是哪个类中的方法），此时由编译器或其它连接程序实现。针对java，可以简单的理解为程序编译期的绑定；这里要特别说明一点，java当中的方法只有final，static，private和构造方法是前期绑定。\n\n**差别**：其实上述解释可以看出很多东西了。<br>\n（1）静态绑定发生在编译时期，动态绑定发生在运行时<br>\n（2）使用private或static或final修饰的变量或者方法，使用静态绑定。而虚方法（可以被子类重写的方法）则会根据运行时的对象进行动态绑定。<br>\n（3）静态绑定使用类信息来完成，而动态绑定则需要使用对象信息来完成。<br>\n（4）重载(Overload)的方法使用静态绑定完成，而重写(Override)的方法则使用动态绑定完成。\n\n**下面开始代码测试**：\n\n```\npublic class Test {\n  public static void main(String[] args) {\n      String str = new String();\n      Lee lee = new Lee();\n      lee.say(str);\n  }\n  static class Lee {\n      public void say(Object obj) {\n          System.out.println(\"这是个Object\");\n      }   \n      public void say(String str) {\n          System.out.println(\"这是个String\");\n      }\n  }\n}\n```\n**执行结果**：\n```\n$ java Test\n这是个String\n```\n\n在上面的代码中，lee方法存在两个重载的实现，一个是接收Object类型的对象作为参数，另一个则是接收String类型的对象作为参数。而str是一个String对象，所有接收String类型参数的call方法会被调用。而这里的绑定就是在编译时期根据参数类型进行的静态绑定。\n\n**接着我们反编译验证一下**:\n\n```\njavap -c Test    \nCompiled from \"Test.java\"\npublic class CoreJava.day_2.Test {\n  public CoreJava.day_2.Test();\n    Code:\n       0: aload_0\n       1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n       4: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: new           #2                  // class java/lang/String\n       3: dup\n       4: invokespecial #3                  // Method java/lang/String.\"<init>\":()V\n       7: astore_1\n       8: new           #4                  // class CoreJava/day_2/Test$Lee\n      11: dup\n      12: invokespecial #5                  // Method CoreJava/day_2/Test$Lee.\"<init>\":()V\n      15: astore_2\n      16: aload_2\n      17: aload_1\n      18: invokevirtual #6                  // Method CoreJava/day_2/Test$Lee.call:(Ljava/lang/String;)V\n      21: return\n}\n\n```\n\n看到了这一行18: invokevirtual #6                  // Method CoreJava/day_2/Test$Lee.call:(Ljava/lang/String;)V确实是发生了静态绑定，确定了调用了接收String对象作为参数的say方法。\n\n\n**现在可以改写一下**：\n\n```\npublic class Test{\n  public static void main(String[] args) {\n      String str = new String();\n      Lee lee = new SecLee();\n      lee.say(str);\n  }\n  \n  static class Lee {\n      public void say(String str) {\n          System.out.println(\"这是个String\");\n      }\n  }\n  \n  static class SecLee extends Lee {\n      @Override\n      public void say(String str) {\n          System.out.println(\"这是第二李的String\");\n      }\n  }\n}\n```\n\n**结果为**：\n\n```\n$ java Test\n这是第二李的String\n```\n\n上面，用SecLee继承了Lee，并且重写了say方法。我们声明了一个Lee类型的变量lee，但是这个变量指向的是他的子类SecLee。根据结果可以看出，其调用了SecLee的say方法实现，而不是Lee的say方法。这一结果的产生的原因是因为在运行时发生了动态绑定，在绑定过程中需要确定调用哪个版本的say方法实现。\n\n**再看看反编译的结果**：\n\n```\njavap -c Test\n警告: 二进制文件Test包含CoreJava.day_2.Test\nCompiled from \"Test.java\"\npublic class CoreJava.day_2.Test {\n  public CoreJava.day_2.Test();\n    Code:\n       0: aload_0\n       1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n       4: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: new           #2                  // class java/lang/String\n       3: dup\n       4: invokespecial #3                  // Method java/lang/String.\"<init>\":()V\n       7: astore_1\n       8: new           #4                  // class CoreJava/day_2/Test$SecLee\n      11: dup\n      12: invokespecial #5                  // Method CoreJava/day_2/Test$SecLee.\"<init>\":()V\n      15: astore_2\n      16: aload_2\n      17: aload_1\n      18: invokevirtual #6                  // Method CoreJava/day_2/Test$Lee.say:(Ljava/lang/String;)V\n      21: return\n}\n```\n正如上面的结果，18: invokevirtual #6                  // Method CoreJava/day_2/Test Lee.say:(Ljava/lang/String;)V这里是TestLee.say而非Test$SecLee.say，因为编译期无法确定调用子类还是父类的实现，所以只能丢给运行时的动态绑定来处理。\n\n既然重写测试了，**那我们再试试重载**：\n\n下面的例子更复杂！Lee类中存在say方法的两种重载，更复杂的是SecLee集成Lee并且重写了这两个方法。其实这种情况是上面两种情况的复合情况。\n下面的代码首先会发生静态绑定，确定调用参数为String对象的say方法，然后在运行时进行动态绑定确定执行子类还是父类的say实现。\n\n```\npublic class Test {\n  public static void main(String[] args) {\n      String str = new String();\n      Lee lee = new SecLee();\n      lee.say(str);\n  }\n  \n  static class Lee {\n      public void say(Object obj) {\n          System.out.println(\"这是Object\");\n      }\n      \n      public void say(String str) {\n          System.out.println(\"这是String\");\n      }\n  }\n  \n  static class SecLee extends Lee {\n      @Override\n      public void say(Object obj) {\n          System.out.println(\"这是第二李的Object\");\n      }\n      \n      @Override\n      public void say(String str) {\n          System.out.println(\"这是第二李的String\");\n      }\n  }\n}\n```\n**结果**:\n\n```\n$ java Test\n这是第二李的String\n```\n结果在意料之中，就不多说了。\n\n那么问题来了，<font color=red>**非动态绑定不可么？**</font>\n其实某些方法的绑定也可以由静态绑定实现，比如说：\n\n```\npublic static void main(String[] args) {\n      String str = new String();\n      final Lee lee = new SecLee();\n      lee.say(str);\n}\n```\n可以看出，这里lee持有SecLee的对象并且lee变量为final，立即执行了say方法，编译器理论上通过足够的分析代码，是可以知道应该调用SecLee的say方法。\n\n**结论：**\n由于动态绑定需要在运行时确定执行哪个版本的方法实现或者变量，比起静态绑定起来要耗时，所以正如书上所说的，有些程序员认为，除非有足够的理由使用多态性，应该把所有的方法都声明为final，private或者static进行修饰。我觉得这个有点偏激了，具体使用仁者见仁，智者见智吧。","slug":"Java的静态-动态绑定","published":1,"updated":"2017-02-18T12:59:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kf5001orhsopkkycz1b","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>今天看到《Java核心技术I》书上的动态绑定，意思就是当子类和父类存在同一个方法，子类重写了父类的方法，程序在运行时调用方法是调用父类的方法还是子类的重写方法呢？程序会在运行的时候自动选择调用某个方法（根据方法表）。<br>看完这里不由自主的想到，有动态肯定也就有静态吧，于是去求助了下google，首先看了下什么是<strong>绑定</strong>:<br>绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来。对java来说，绑定分为静态绑定和动态绑定；或者叫做前期绑定和后期绑定。<br><a id=\"more\"></a><br>然后我们分别看看两者之间含义以及差别<br><br><strong>动态绑定</strong>：在运行时根据具体对象的类型进行绑定。若一种语言实现了后期绑定，同时必须提供一些机制，可在运行期间判断对象的类型，并分别调用适当的方法。也就是说，编译器此时依然不知道对象的类型，但方法调用机制能自己去调查，找到正确的方法主体。不同的语言对后期绑定的实现方法是有所区别的。但我们至少可以这样认为：它们都要在对象中安插某些特殊类型的信息。</p>\n<p><strong>动态绑定的过程</strong>：<br><br>虚拟机提取对象的实际类型的方法表；–&gt;<br>虚拟机搜索方法签名；–&gt;<br>调用方法。</p>\n<p><strong>静态绑定</strong>：在程序执行前方法已经被绑定（也就是说在编译过程中就已经知道这个方法到底是哪个类中的方法），此时由编译器或其它连接程序实现。针对java，可以简单的理解为程序编译期的绑定；这里要特别说明一点，java当中的方法只有final，static，private和构造方法是前期绑定。</p>\n<p><strong>差别</strong>：其实上述解释可以看出很多东西了。<br><br>（1）静态绑定发生在编译时期，动态绑定发生在运行时<br><br>（2）使用private或static或final修饰的变量或者方法，使用静态绑定。而虚方法（可以被子类重写的方法）则会根据运行时的对象进行动态绑定。<br><br>（3）静态绑定使用类信息来完成，而动态绑定则需要使用对象信息来完成。<br><br>（4）重载(Overload)的方法使用静态绑定完成，而重写(Override)的方法则使用动态绑定完成。</p>\n<p><strong>下面开始代码测试</strong>：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> class Test &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">      <span class=\"keyword\">String</span> <span class=\"built_in\">str</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>();</div><div class=\"line\">      Lee lee = <span class=\"keyword\">new</span> Lee();</div><div class=\"line\">      lee.say(<span class=\"built_in\">str</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">static</span> class Lee &#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> say(<span class=\"keyword\">Object</span> obj) &#123;</div><div class=\"line\">          System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"这是个Object\"</span>);</div><div class=\"line\">      &#125;   </div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> say(<span class=\"keyword\">String</span> <span class=\"built_in\">str</span>) &#123;</div><div class=\"line\">          System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"这是个String\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>执行结果</strong>：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java <span class=\"keyword\">Test</span></div><div class=\"line\">这是个<span class=\"built_in\">String</span></div></pre></td></tr></table></figure></p>\n<p>在上面的代码中，lee方法存在两个重载的实现，一个是接收Object类型的对象作为参数，另一个则是接收String类型的对象作为参数。而str是一个String对象，所有接收String类型参数的call方法会被调用。而这里的绑定就是在编译时期根据参数类型进行的静态绑定。</p>\n<p><strong>接着我们反编译验证一下</strong>:</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">javap -c Test    </div><div class=\"line\">Compiled from <span class=\"string\">\"Test.java\"</span></div><div class=\"line\">public class CoreJava.day_2.Test &#123;</div><div class=\"line\">  public CoreJava.day_2.Test();</div><div class=\"line\">    <span class=\"built_in\">Code</span>:</div><div class=\"line\">       <span class=\"number\">0</span>: aload_0</div><div class=\"line\">       <span class=\"number\">1</span>: invokespecial <span class=\"meta\">#1                  <span class=\"comment\">// Method java/lang/Object.\"&lt;init&gt;\":()V</span></span></div><div class=\"line\">       <span class=\"number\">4</span>: <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">  public static void main(java.lang.<span class=\"keyword\">String</span>[]);</div><div class=\"line\">    <span class=\"built_in\">Code</span>:</div><div class=\"line\">       <span class=\"number\">0</span>: <span class=\"keyword\">new</span>           <span class=\"meta\">#2                  <span class=\"comment\">// class java/lang/String</span></span></div><div class=\"line\">       <span class=\"number\">3</span>: dup</div><div class=\"line\">       <span class=\"number\">4</span>: invokespecial <span class=\"meta\">#3                  <span class=\"comment\">// Method java/lang/String.\"&lt;init&gt;\":()V</span></span></div><div class=\"line\">       <span class=\"number\">7</span>: astore_1</div><div class=\"line\">       <span class=\"number\">8</span>: <span class=\"keyword\">new</span>           <span class=\"meta\">#4                  <span class=\"comment\">// class CoreJava/day_2/Test$Lee</span></span></div><div class=\"line\">      <span class=\"number\">11</span>: dup</div><div class=\"line\">      <span class=\"number\">12</span>: invokespecial <span class=\"meta\">#5                  <span class=\"comment\">// Method CoreJava/day_2/Test$Lee.\"&lt;init&gt;\":()V</span></span></div><div class=\"line\">      <span class=\"number\">15</span>: astore_2</div><div class=\"line\">      <span class=\"number\">16</span>: aload_2</div><div class=\"line\">      <span class=\"number\">17</span>: aload_1</div><div class=\"line\">      <span class=\"number\">18</span>: invokevirtual <span class=\"meta\">#6                  <span class=\"comment\">// Method CoreJava/day_2/Test$Lee.call:(Ljava/lang/String;)V</span></span></div><div class=\"line\">      <span class=\"number\">21</span>: <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看到了这一行18: invokevirtual #6                  // Method CoreJava/day_2/Test$Lee.call:(Ljava/lang/String;)V确实是发生了静态绑定，确定了调用了接收String对象作为参数的say方法。</p>\n<p><strong>现在可以改写一下</strong>：</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">      String <span class=\"keyword\">str</span> = <span class=\"keyword\">new</span> String();</div><div class=\"line\">      Lee lee = <span class=\"keyword\">new</span> SecLee();</div><div class=\"line\">      lee.say(<span class=\"keyword\">str</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lee</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> say(String <span class=\"keyword\">str</span>) &#123;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"这是个String\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecLee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Lee</span> </span>&#123;</div><div class=\"line\">      @Override</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> say(String <span class=\"keyword\">str</span>) &#123;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"这是第二李的String\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>结果为</strong>：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java <span class=\"keyword\">Test</span></div><div class=\"line\">这是第二李的<span class=\"built_in\">String</span></div></pre></td></tr></table></figure>\n<p>上面，用SecLee继承了Lee，并且重写了say方法。我们声明了一个Lee类型的变量lee，但是这个变量指向的是他的子类SecLee。根据结果可以看出，其调用了SecLee的say方法实现，而不是Lee的say方法。这一结果的产生的原因是因为在运行时发生了动态绑定，在绑定过程中需要确定调用哪个版本的say方法实现。</p>\n<p><strong>再看看反编译的结果</strong>：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">javap -c Test</div><div class=\"line\">警告: 二进制文件Test包含CoreJava.day_2.Test</div><div class=\"line\">Compiled from <span class=\"string\">\"Test.java\"</span></div><div class=\"line\">public class CoreJava.day_2.Test &#123;</div><div class=\"line\">  public CoreJava.day_2.Test();</div><div class=\"line\">    <span class=\"built_in\">Code</span>:</div><div class=\"line\">       <span class=\"number\">0</span>: aload_0</div><div class=\"line\">       <span class=\"number\">1</span>: invokespecial <span class=\"meta\">#1                  <span class=\"comment\">// Method java/lang/Object.\"&lt;init&gt;\":()V</span></span></div><div class=\"line\">       <span class=\"number\">4</span>: <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">  public static void main(java.lang.<span class=\"keyword\">String</span>[]);</div><div class=\"line\">    <span class=\"built_in\">Code</span>:</div><div class=\"line\">       <span class=\"number\">0</span>: <span class=\"keyword\">new</span>           <span class=\"meta\">#2                  <span class=\"comment\">// class java/lang/String</span></span></div><div class=\"line\">       <span class=\"number\">3</span>: dup</div><div class=\"line\">       <span class=\"number\">4</span>: invokespecial <span class=\"meta\">#3                  <span class=\"comment\">// Method java/lang/String.\"&lt;init&gt;\":()V</span></span></div><div class=\"line\">       <span class=\"number\">7</span>: astore_1</div><div class=\"line\">       <span class=\"number\">8</span>: <span class=\"keyword\">new</span>           <span class=\"meta\">#4                  <span class=\"comment\">// class CoreJava/day_2/Test$SecLee</span></span></div><div class=\"line\">      <span class=\"number\">11</span>: dup</div><div class=\"line\">      <span class=\"number\">12</span>: invokespecial <span class=\"meta\">#5                  <span class=\"comment\">// Method CoreJava/day_2/Test$SecLee.\"&lt;init&gt;\":()V</span></span></div><div class=\"line\">      <span class=\"number\">15</span>: astore_2</div><div class=\"line\">      <span class=\"number\">16</span>: aload_2</div><div class=\"line\">      <span class=\"number\">17</span>: aload_1</div><div class=\"line\">      <span class=\"number\">18</span>: invokevirtual <span class=\"meta\">#6                  <span class=\"comment\">// Method CoreJava/day_2/Test$Lee.say:(Ljava/lang/String;)V</span></span></div><div class=\"line\">      <span class=\"number\">21</span>: <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>正如上面的结果，18: invokevirtual #6                  // Method CoreJava/day_2/Test Lee.say:(Ljava/lang/String;)V这里是TestLee.say而非Test$SecLee.say，因为编译期无法确定调用子类还是父类的实现，所以只能丢给运行时的动态绑定来处理。</p>\n<p>既然重写测试了，<strong>那我们再试试重载</strong>：</p>\n<p>下面的例子更复杂！Lee类中存在say方法的两种重载，更复杂的是SecLee集成Lee并且重写了这两个方法。其实这种情况是上面两种情况的复合情况。<br>下面的代码首先会发生静态绑定，确定调用参数为String对象的say方法，然后在运行时进行动态绑定确定执行子类还是父类的say实现。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test</span> &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">      String str = <span class=\"keyword\">new</span> String();</div><div class=\"line\">      Lee lee = <span class=\"keyword\">new</span> SecLee();</div><div class=\"line\">      lee.say(str);</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Lee</span> &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span>(<span class=\"params\">Object obj</span>) </span>&#123;</div><div class=\"line\">          System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"这是Object\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span>(<span class=\"params\">String str</span>) </span>&#123;</div><div class=\"line\">          System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"这是String\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SecLee</span> <span class=\"title\">extends</span> <span class=\"title\">Lee</span> &#123;</div><div class=\"line\">      @<span class=\"function\">Override</span></div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span>(<span class=\"params\">Object obj</span>) &#123;</div><div class=\"line\">          System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"这是第二李的Object\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">      @<span class=\"function\">Override</span></div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span>(<span class=\"params\">String str</span>) &#123;</div><div class=\"line\">          System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"这是第二李的String\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>结果</strong>:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java <span class=\"keyword\">Test</span></div><div class=\"line\">这是第二李的<span class=\"built_in\">String</span></div></pre></td></tr></table></figure>\n<p>结果在意料之中，就不多说了。</p>\n<p>那么问题来了，<font color=\"red\"><strong>非动态绑定不可么？</strong></font><br>其实某些方法的绑定也可以由静态绑定实现，比如说：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">      <span class=\"keyword\">String</span> <span class=\"built_in\">str</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>();</div><div class=\"line\">      <span class=\"keyword\">final</span> Lee lee = <span class=\"keyword\">new</span> SecLee();</div><div class=\"line\">      lee.say(<span class=\"built_in\">str</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，这里lee持有SecLee的对象并且lee变量为final，立即执行了say方法，编译器理论上通过足够的分析代码，是可以知道应该调用SecLee的say方法。</p>\n<p><strong>结论：</strong><br>由于动态绑定需要在运行时确定执行哪个版本的方法实现或者变量，比起静态绑定起来要耗时，所以正如书上所说的，有些程序员认为，除非有足够的理由使用多态性，应该把所有的方法都声明为final，private或者static进行修饰。我觉得这个有点偏激了，具体使用仁者见仁，智者见智吧。</p>\n","excerpt":"<p>今天看到《Java核心技术I》书上的动态绑定，意思就是当子类和父类存在同一个方法，子类重写了父类的方法，程序在运行时调用方法是调用父类的方法还是子类的重写方法呢？程序会在运行的时候自动选择调用某个方法（根据方法表）。<br>看完这里不由自主的想到，有动态肯定也就有静态吧，于是去求助了下google，首先看了下什么是<strong>绑定</strong>:<br>绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来。对java来说，绑定分为静态绑定和动态绑定；或者叫做前期绑定和后期绑定。<br></p>","more":"<br>然后我们分别看看两者之间含义以及差别<br><br><strong>动态绑定</strong>：在运行时根据具体对象的类型进行绑定。若一种语言实现了后期绑定，同时必须提供一些机制，可在运行期间判断对象的类型，并分别调用适当的方法。也就是说，编译器此时依然不知道对象的类型，但方法调用机制能自己去调查，找到正确的方法主体。不同的语言对后期绑定的实现方法是有所区别的。但我们至少可以这样认为：它们都要在对象中安插某些特殊类型的信息。<p></p>\n<p><strong>动态绑定的过程</strong>：<br><br>虚拟机提取对象的实际类型的方法表；–&gt;<br>虚拟机搜索方法签名；–&gt;<br>调用方法。</p>\n<p><strong>静态绑定</strong>：在程序执行前方法已经被绑定（也就是说在编译过程中就已经知道这个方法到底是哪个类中的方法），此时由编译器或其它连接程序实现。针对java，可以简单的理解为程序编译期的绑定；这里要特别说明一点，java当中的方法只有final，static，private和构造方法是前期绑定。</p>\n<p><strong>差别</strong>：其实上述解释可以看出很多东西了。<br><br>（1）静态绑定发生在编译时期，动态绑定发生在运行时<br><br>（2）使用private或static或final修饰的变量或者方法，使用静态绑定。而虚方法（可以被子类重写的方法）则会根据运行时的对象进行动态绑定。<br><br>（3）静态绑定使用类信息来完成，而动态绑定则需要使用对象信息来完成。<br><br>（4）重载(Overload)的方法使用静态绑定完成，而重写(Override)的方法则使用动态绑定完成。</p>\n<p><strong>下面开始代码测试</strong>：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> class Test &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">      <span class=\"keyword\">String</span> <span class=\"built_in\">str</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>();</div><div class=\"line\">      Lee lee = <span class=\"keyword\">new</span> Lee();</div><div class=\"line\">      lee.say(<span class=\"built_in\">str</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">static</span> class Lee &#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> say(<span class=\"keyword\">Object</span> obj) &#123;</div><div class=\"line\">          System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"这是个Object\"</span>);</div><div class=\"line\">      &#125;   </div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> say(<span class=\"keyword\">String</span> <span class=\"built_in\">str</span>) &#123;</div><div class=\"line\">          System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"这是个String\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>执行结果</strong>：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java <span class=\"keyword\">Test</span></div><div class=\"line\">这是个<span class=\"built_in\">String</span></div></pre></td></tr></table></figure></p>\n<p>在上面的代码中，lee方法存在两个重载的实现，一个是接收Object类型的对象作为参数，另一个则是接收String类型的对象作为参数。而str是一个String对象，所有接收String类型参数的call方法会被调用。而这里的绑定就是在编译时期根据参数类型进行的静态绑定。</p>\n<p><strong>接着我们反编译验证一下</strong>:</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">javap -c Test    </div><div class=\"line\">Compiled from <span class=\"string\">\"Test.java\"</span></div><div class=\"line\">public class CoreJava.day_2.Test &#123;</div><div class=\"line\">  public CoreJava.day_2.Test();</div><div class=\"line\">    <span class=\"built_in\">Code</span>:</div><div class=\"line\">       <span class=\"number\">0</span>: aload_0</div><div class=\"line\">       <span class=\"number\">1</span>: invokespecial <span class=\"meta\">#1                  <span class=\"comment\">// Method java/lang/Object.\"&lt;init&gt;\":()V</span></span></div><div class=\"line\">       <span class=\"number\">4</span>: <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">  public static void main(java.lang.<span class=\"keyword\">String</span>[]);</div><div class=\"line\">    <span class=\"built_in\">Code</span>:</div><div class=\"line\">       <span class=\"number\">0</span>: <span class=\"keyword\">new</span>           <span class=\"meta\">#2                  <span class=\"comment\">// class java/lang/String</span></span></div><div class=\"line\">       <span class=\"number\">3</span>: dup</div><div class=\"line\">       <span class=\"number\">4</span>: invokespecial <span class=\"meta\">#3                  <span class=\"comment\">// Method java/lang/String.\"&lt;init&gt;\":()V</span></span></div><div class=\"line\">       <span class=\"number\">7</span>: astore_1</div><div class=\"line\">       <span class=\"number\">8</span>: <span class=\"keyword\">new</span>           <span class=\"meta\">#4                  <span class=\"comment\">// class CoreJava/day_2/Test$Lee</span></span></div><div class=\"line\">      <span class=\"number\">11</span>: dup</div><div class=\"line\">      <span class=\"number\">12</span>: invokespecial <span class=\"meta\">#5                  <span class=\"comment\">// Method CoreJava/day_2/Test$Lee.\"&lt;init&gt;\":()V</span></span></div><div class=\"line\">      <span class=\"number\">15</span>: astore_2</div><div class=\"line\">      <span class=\"number\">16</span>: aload_2</div><div class=\"line\">      <span class=\"number\">17</span>: aload_1</div><div class=\"line\">      <span class=\"number\">18</span>: invokevirtual <span class=\"meta\">#6                  <span class=\"comment\">// Method CoreJava/day_2/Test$Lee.call:(Ljava/lang/String;)V</span></span></div><div class=\"line\">      <span class=\"number\">21</span>: <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看到了这一行18: invokevirtual #6                  // Method CoreJava/day_2/Test$Lee.call:(Ljava/lang/String;)V确实是发生了静态绑定，确定了调用了接收String对象作为参数的say方法。</p>\n<p><strong>现在可以改写一下</strong>：</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args) &#123;</div><div class=\"line\">      String <span class=\"keyword\">str</span> = <span class=\"keyword\">new</span> String();</div><div class=\"line\">      Lee lee = <span class=\"keyword\">new</span> SecLee();</div><div class=\"line\">      lee.say(<span class=\"keyword\">str</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lee</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> say(String <span class=\"keyword\">str</span>) &#123;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"这是个String\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecLee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Lee</span> </span>&#123;</div><div class=\"line\">      @Override</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> say(String <span class=\"keyword\">str</span>) &#123;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"这是第二李的String\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>结果为</strong>：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java <span class=\"keyword\">Test</span></div><div class=\"line\">这是第二李的<span class=\"built_in\">String</span></div></pre></td></tr></table></figure>\n<p>上面，用SecLee继承了Lee，并且重写了say方法。我们声明了一个Lee类型的变量lee，但是这个变量指向的是他的子类SecLee。根据结果可以看出，其调用了SecLee的say方法实现，而不是Lee的say方法。这一结果的产生的原因是因为在运行时发生了动态绑定，在绑定过程中需要确定调用哪个版本的say方法实现。</p>\n<p><strong>再看看反编译的结果</strong>：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">javap -c Test</div><div class=\"line\">警告: 二进制文件Test包含CoreJava.day_2.Test</div><div class=\"line\">Compiled from <span class=\"string\">\"Test.java\"</span></div><div class=\"line\">public class CoreJava.day_2.Test &#123;</div><div class=\"line\">  public CoreJava.day_2.Test();</div><div class=\"line\">    <span class=\"built_in\">Code</span>:</div><div class=\"line\">       <span class=\"number\">0</span>: aload_0</div><div class=\"line\">       <span class=\"number\">1</span>: invokespecial <span class=\"meta\">#1                  <span class=\"comment\">// Method java/lang/Object.\"&lt;init&gt;\":()V</span></span></div><div class=\"line\">       <span class=\"number\">4</span>: <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">  public static void main(java.lang.<span class=\"keyword\">String</span>[]);</div><div class=\"line\">    <span class=\"built_in\">Code</span>:</div><div class=\"line\">       <span class=\"number\">0</span>: <span class=\"keyword\">new</span>           <span class=\"meta\">#2                  <span class=\"comment\">// class java/lang/String</span></span></div><div class=\"line\">       <span class=\"number\">3</span>: dup</div><div class=\"line\">       <span class=\"number\">4</span>: invokespecial <span class=\"meta\">#3                  <span class=\"comment\">// Method java/lang/String.\"&lt;init&gt;\":()V</span></span></div><div class=\"line\">       <span class=\"number\">7</span>: astore_1</div><div class=\"line\">       <span class=\"number\">8</span>: <span class=\"keyword\">new</span>           <span class=\"meta\">#4                  <span class=\"comment\">// class CoreJava/day_2/Test$SecLee</span></span></div><div class=\"line\">      <span class=\"number\">11</span>: dup</div><div class=\"line\">      <span class=\"number\">12</span>: invokespecial <span class=\"meta\">#5                  <span class=\"comment\">// Method CoreJava/day_2/Test$SecLee.\"&lt;init&gt;\":()V</span></span></div><div class=\"line\">      <span class=\"number\">15</span>: astore_2</div><div class=\"line\">      <span class=\"number\">16</span>: aload_2</div><div class=\"line\">      <span class=\"number\">17</span>: aload_1</div><div class=\"line\">      <span class=\"number\">18</span>: invokevirtual <span class=\"meta\">#6                  <span class=\"comment\">// Method CoreJava/day_2/Test$Lee.say:(Ljava/lang/String;)V</span></span></div><div class=\"line\">      <span class=\"number\">21</span>: <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>正如上面的结果，18: invokevirtual #6                  // Method CoreJava/day_2/Test Lee.say:(Ljava/lang/String;)V这里是TestLee.say而非Test$SecLee.say，因为编译期无法确定调用子类还是父类的实现，所以只能丢给运行时的动态绑定来处理。</p>\n<p>既然重写测试了，<strong>那我们再试试重载</strong>：</p>\n<p>下面的例子更复杂！Lee类中存在say方法的两种重载，更复杂的是SecLee集成Lee并且重写了这两个方法。其实这种情况是上面两种情况的复合情况。<br>下面的代码首先会发生静态绑定，确定调用参数为String对象的say方法，然后在运行时进行动态绑定确定执行子类还是父类的say实现。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test</span> &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">      String str = <span class=\"keyword\">new</span> String();</div><div class=\"line\">      Lee lee = <span class=\"keyword\">new</span> SecLee();</div><div class=\"line\">      lee.say(str);</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Lee</span> &#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span>(<span class=\"params\">Object obj</span>) </span>&#123;</div><div class=\"line\">          System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"这是Object\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span>(<span class=\"params\">String str</span>) </span>&#123;</div><div class=\"line\">          System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"这是String\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SecLee</span> <span class=\"title\">extends</span> <span class=\"title\">Lee</span> &#123;</div><div class=\"line\">      @<span class=\"function\">Override</span></div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span>(<span class=\"params\">Object obj</span>) &#123;</div><div class=\"line\">          System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"这是第二李的Object\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">      @<span class=\"function\">Override</span></div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span>(<span class=\"params\">String str</span>) &#123;</div><div class=\"line\">          System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"这是第二李的String\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>结果</strong>:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java <span class=\"keyword\">Test</span></div><div class=\"line\">这是第二李的<span class=\"built_in\">String</span></div></pre></td></tr></table></figure>\n<p>结果在意料之中，就不多说了。</p>\n<p>那么问题来了，<font color=\"red\"><strong>非动态绑定不可么？</strong></font><br>其实某些方法的绑定也可以由静态绑定实现，比如说：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">      <span class=\"keyword\">String</span> <span class=\"built_in\">str</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>();</div><div class=\"line\">      <span class=\"keyword\">final</span> Lee lee = <span class=\"keyword\">new</span> SecLee();</div><div class=\"line\">      lee.say(<span class=\"built_in\">str</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，这里lee持有SecLee的对象并且lee变量为final，立即执行了say方法，编译器理论上通过足够的分析代码，是可以知道应该调用SecLee的say方法。</p>\n<p><strong>结论：</strong><br>由于动态绑定需要在运行时确定执行哪个版本的方法实现或者变量，比起静态绑定起来要耗时，所以正如书上所说的，有些程序员认为，除非有足够的理由使用多态性，应该把所有的方法都声明为final，private或者static进行修饰。我觉得这个有点偏激了，具体使用仁者见仁，智者见智吧。</p>"},{"title":"Java网易短信接入demo","date":"2017-03-23T02:19:30.000Z","_content":"由于最近使用云信添加短信接入功能，记录一下一些点避免时间久了忘记。<!--more-->\n\n>**发短信**\n\n\n```\npackage com.lincoln.Untils;\n\nimport com.alibaba.fastjson.JSON;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\n\npublic class Yunxin {\n    public static void main(String[] args) throws Exception {\n        System.out.println(sendMsg(\"158********\"));\n\n    }\n\n    private static final String SERVER_URL = \"https://api.netease.im/sms/sendcode.action\";//发送验证码的请求路径URL\n    private static final String APP_KEY = \"*******\";//网易云信分配的账号\n    private static final String APP_SECRET = \"*******\";//网易云信分配的密钥\n    private static final String NONCE = \"123456\";//随机数\n\n    public static String sendMsg(String phone) throws IOException {\n        CloseableHttpClient httpclient = HttpClients.createDefault();\n        HttpPost post = new HttpPost(SERVER_URL);\n\n        String curTime = String.valueOf((new Date().getTime() / 1000L));\n        String checkSum = CheckSumBuilder.getCheckSum(APP_SECRET, NONCE, curTime);\n\n        //设置请求的header\n        post.addHeader(\"AppKey\", APP_KEY);\n        post.addHeader(\"Nonce\", NONCE);\n        post.addHeader(\"CurTime\", curTime);\n        post.addHeader(\"CheckSum\", checkSum);\n        post.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded;charset=utf-8\");\n\n        //设置请求参数\n        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\n        nameValuePairs.add(new BasicNameValuePair(\"mobile\", phone));\n\n        post.setEntity(new UrlEncodedFormEntity(nameValuePairs, \"utf-8\"));\n\n        //执行请求\n        HttpResponse response = httpclient.execute(post);\n        String responseEntity = EntityUtils.toString(response.getEntity(), \"utf-8\");\n\n        //判断是否发送成功，发送成功返回true\n        String code = JSON.parseObject(responseEntity).getString(\"code\");\n        if (code.equals(\"200\")) {\n            return \"success\";\n        }\n        return \"error\";\n    }\n}\n\n```\n\n>**验证**\n\n```\npackage com.lincoln.Untils;\n\n/**\n * @author 李智\n * @date 2017/3/22\n */\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport com.alibaba.fastjson.JSON;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\n\n\n\n/**\n * 校验验证码工具类\n *\n * @author Administrator\n */\npublic class MobileMessageCheck {\n    public static void main(String[] args) throws Exception {\n        System.out.println(checkMsg(\"158********\",\"1234\"));\n\n    }\n\n    private static final String SERVER_URL = \"https://api.netease.im/sms/verifycode.action\";//校验验证码的请求路径URL\n    private static final String APP_KEY = \"*******\";//网易云信分配的账号\n    private static final String APP_SECRET = \"*******\";//网易云信分配的密钥\n    private static final String NONCE = \"123456\";//随机数\n\n    public static String checkMsg(String phone, String sum) throws IOException {\n        CloseableHttpClient httpclient = HttpClients.createDefault();\n        HttpPost post = new HttpPost(SERVER_URL);\n\n        String curTime = String.valueOf((new Date().getTime() / 1000L));\n        String checkSum = CheckSumBuilder.getCheckSum(APP_SECRET, NONCE, curTime);\n\n        //设置请求的header\n        post.addHeader(\"AppKey\", APP_KEY);\n        post.addHeader(\"Nonce\", NONCE);\n        post.addHeader(\"CurTime\", curTime);\n        post.addHeader(\"CheckSum\", checkSum);\n        post.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded;charset=utf-8\");\n\n        //设置请求参数\n        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\n        nameValuePairs.add(new BasicNameValuePair(\"mobile\", phone));\n        nameValuePairs.add(new BasicNameValuePair(\"code\", sum));\n\n        post.setEntity(new UrlEncodedFormEntity(nameValuePairs, \"utf-8\"));\n\n        //执行请求\n        HttpResponse response = httpclient.execute(post);\n        String responseEntity = EntityUtils.toString(response.getEntity(), \"utf-8\");\n\n        //判断是否发送成功，发送成功返回true\n        String code = JSON.parseObject(responseEntity).getString(\"code\");\n        if (code.equals(\"200\")) {\n           return \"success\";\n        }\n        return \"error\";\n    }\n}\n```\n\n>**获取计算checksum**\n\n```\npackage com.lincoln.Untils;\n\nimport java.security.MessageDigest;\n\n/**\n * @author 李智\n * @date 2017/3/22\n */\npublic class CheckSumBuilder {\n    // 计算并获取CheckSum\n    public static String getCheckSum(String appSecret, String nonce, String curTime) {\n        return encode(\"sha1\", appSecret + nonce + curTime);\n    }\n\n    // 计算并获取md5值\n    public static String getMD5(String requestBody) {\n        return encode(\"md5\", requestBody);\n    }\n\n    private static String encode(String algorithm, String value) {\n        if (value == null) {\n            return null;\n        }\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);\n            messageDigest.update(value.getBytes());\n            return getFormattedText(messageDigest.digest());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static String getFormattedText(byte[] bytes) {\n        int len = bytes.length;\n        StringBuilder buf = new StringBuilder(len * 2);\n        for (int j = 0; j < len; j++) {\n            buf.append(HEX_DIGITS[(bytes[j] >> 4) & 0x0f]);\n            buf.append(HEX_DIGITS[bytes[j] & 0x0f]);\n        }\n        return buf.toString();\n    }\n\n    private static final char[] HEX_DIGITS =\n            {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n}\n\n```\n\n亲测有效。\n\nps:这里用的是默认的短信模板，如果自定义了短信模板，传入参数的时候多加一个模板id就行了。\n","source":"_posts/Java网易短信接入demo.md","raw":"---\ntitle: Java网易短信接入demo\ndate: 2017-03-23 10:19:30\ncategories: Java二三事\ntags:\n\t- Java\n---\n由于最近使用云信添加短信接入功能，记录一下一些点避免时间久了忘记。<!--more-->\n\n>**发短信**\n\n\n```\npackage com.lincoln.Untils;\n\nimport com.alibaba.fastjson.JSON;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\n\npublic class Yunxin {\n    public static void main(String[] args) throws Exception {\n        System.out.println(sendMsg(\"158********\"));\n\n    }\n\n    private static final String SERVER_URL = \"https://api.netease.im/sms/sendcode.action\";//发送验证码的请求路径URL\n    private static final String APP_KEY = \"*******\";//网易云信分配的账号\n    private static final String APP_SECRET = \"*******\";//网易云信分配的密钥\n    private static final String NONCE = \"123456\";//随机数\n\n    public static String sendMsg(String phone) throws IOException {\n        CloseableHttpClient httpclient = HttpClients.createDefault();\n        HttpPost post = new HttpPost(SERVER_URL);\n\n        String curTime = String.valueOf((new Date().getTime() / 1000L));\n        String checkSum = CheckSumBuilder.getCheckSum(APP_SECRET, NONCE, curTime);\n\n        //设置请求的header\n        post.addHeader(\"AppKey\", APP_KEY);\n        post.addHeader(\"Nonce\", NONCE);\n        post.addHeader(\"CurTime\", curTime);\n        post.addHeader(\"CheckSum\", checkSum);\n        post.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded;charset=utf-8\");\n\n        //设置请求参数\n        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\n        nameValuePairs.add(new BasicNameValuePair(\"mobile\", phone));\n\n        post.setEntity(new UrlEncodedFormEntity(nameValuePairs, \"utf-8\"));\n\n        //执行请求\n        HttpResponse response = httpclient.execute(post);\n        String responseEntity = EntityUtils.toString(response.getEntity(), \"utf-8\");\n\n        //判断是否发送成功，发送成功返回true\n        String code = JSON.parseObject(responseEntity).getString(\"code\");\n        if (code.equals(\"200\")) {\n            return \"success\";\n        }\n        return \"error\";\n    }\n}\n\n```\n\n>**验证**\n\n```\npackage com.lincoln.Untils;\n\n/**\n * @author 李智\n * @date 2017/3/22\n */\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport com.alibaba.fastjson.JSON;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\n\n\n\n/**\n * 校验验证码工具类\n *\n * @author Administrator\n */\npublic class MobileMessageCheck {\n    public static void main(String[] args) throws Exception {\n        System.out.println(checkMsg(\"158********\",\"1234\"));\n\n    }\n\n    private static final String SERVER_URL = \"https://api.netease.im/sms/verifycode.action\";//校验验证码的请求路径URL\n    private static final String APP_KEY = \"*******\";//网易云信分配的账号\n    private static final String APP_SECRET = \"*******\";//网易云信分配的密钥\n    private static final String NONCE = \"123456\";//随机数\n\n    public static String checkMsg(String phone, String sum) throws IOException {\n        CloseableHttpClient httpclient = HttpClients.createDefault();\n        HttpPost post = new HttpPost(SERVER_URL);\n\n        String curTime = String.valueOf((new Date().getTime() / 1000L));\n        String checkSum = CheckSumBuilder.getCheckSum(APP_SECRET, NONCE, curTime);\n\n        //设置请求的header\n        post.addHeader(\"AppKey\", APP_KEY);\n        post.addHeader(\"Nonce\", NONCE);\n        post.addHeader(\"CurTime\", curTime);\n        post.addHeader(\"CheckSum\", checkSum);\n        post.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded;charset=utf-8\");\n\n        //设置请求参数\n        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\n        nameValuePairs.add(new BasicNameValuePair(\"mobile\", phone));\n        nameValuePairs.add(new BasicNameValuePair(\"code\", sum));\n\n        post.setEntity(new UrlEncodedFormEntity(nameValuePairs, \"utf-8\"));\n\n        //执行请求\n        HttpResponse response = httpclient.execute(post);\n        String responseEntity = EntityUtils.toString(response.getEntity(), \"utf-8\");\n\n        //判断是否发送成功，发送成功返回true\n        String code = JSON.parseObject(responseEntity).getString(\"code\");\n        if (code.equals(\"200\")) {\n           return \"success\";\n        }\n        return \"error\";\n    }\n}\n```\n\n>**获取计算checksum**\n\n```\npackage com.lincoln.Untils;\n\nimport java.security.MessageDigest;\n\n/**\n * @author 李智\n * @date 2017/3/22\n */\npublic class CheckSumBuilder {\n    // 计算并获取CheckSum\n    public static String getCheckSum(String appSecret, String nonce, String curTime) {\n        return encode(\"sha1\", appSecret + nonce + curTime);\n    }\n\n    // 计算并获取md5值\n    public static String getMD5(String requestBody) {\n        return encode(\"md5\", requestBody);\n    }\n\n    private static String encode(String algorithm, String value) {\n        if (value == null) {\n            return null;\n        }\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);\n            messageDigest.update(value.getBytes());\n            return getFormattedText(messageDigest.digest());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static String getFormattedText(byte[] bytes) {\n        int len = bytes.length;\n        StringBuilder buf = new StringBuilder(len * 2);\n        for (int j = 0; j < len; j++) {\n            buf.append(HEX_DIGITS[(bytes[j] >> 4) & 0x0f]);\n            buf.append(HEX_DIGITS[bytes[j] & 0x0f]);\n        }\n        return buf.toString();\n    }\n\n    private static final char[] HEX_DIGITS =\n            {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n}\n\n```\n\n亲测有效。\n\nps:这里用的是默认的短信模板，如果自定义了短信模板，传入参数的时候多加一个模板id就行了。\n","slug":"Java网易短信接入demo","published":1,"updated":"2017-03-23T02:20:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kf7001rrhsossvnklvn","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>由于最近使用云信添加短信接入功能，记录一下一些点避免时间久了忘记。<a id=\"more\"></a></p>\n<blockquote>\n<p><strong>发短信</strong></p>\n</blockquote>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.lincoln.Untils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpResponse;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.NameValuePair;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpPost;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.message.BasicNameValuePair;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> class Yunxin &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(sendMsg(<span class=\"string\">\"158********\"</span>));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> SERVER_URL = <span class=\"string\">\"https://api.netease.im/sms/sendcode.action\"</span>;<span class=\"comment\">//发送验证码的请求路径URL</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> APP_KEY = <span class=\"string\">\"*******\"</span>;<span class=\"comment\">//网易云信分配的账号</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> APP_SECRET = <span class=\"string\">\"*******\"</span>;<span class=\"comment\">//网易云信分配的密钥</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> NONCE = <span class=\"string\">\"123456\"</span>;<span class=\"comment\">//随机数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> sendMsg(<span class=\"keyword\">String</span> phone) <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">        CloseableHttpClient httpclient = HttpClients.createDefault();</div><div class=\"line\">        HttpPost post = <span class=\"keyword\">new</span> HttpPost(SERVER_URL);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">String</span> curTime = <span class=\"keyword\">String</span>.valueOf((<span class=\"keyword\">new</span> Date().getTime() / <span class=\"number\">1000</span>L));</div><div class=\"line\">        <span class=\"keyword\">String</span> checkSum = CheckSumBuilder.getCheckSum(APP_SECRET, NONCE, curTime);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//设置请求的header</span></div><div class=\"line\">        post.addHeader(<span class=\"string\">\"AppKey\"</span>, APP_KEY);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"Nonce\"</span>, NONCE);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"CurTime\"</span>, curTime);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"CheckSum\"</span>, checkSum);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded;charset=utf-8\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//设置请求参数</span></div><div class=\"line\">        List&lt;NameValuePair&gt; nameValuePairs = <span class=\"keyword\">new</span> ArrayList&lt;NameValuePair&gt;();</div><div class=\"line\">        nameValuePairs.<span class=\"built_in\">add</span>(<span class=\"keyword\">new</span> BasicNameValuePair(<span class=\"string\">\"mobile\"</span>, phone));</div><div class=\"line\"></div><div class=\"line\">        post.setEntity(<span class=\"keyword\">new</span> UrlEncodedFormEntity(nameValuePairs, <span class=\"string\">\"utf-8\"</span>));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//执行请求</span></div><div class=\"line\">        HttpResponse response = httpclient.execute(post);</div><div class=\"line\">        <span class=\"keyword\">String</span> responseEntity = EntityUtils.toString(response.getEntity(), <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//判断是否发送成功，发送成功返回true</span></div><div class=\"line\">        <span class=\"keyword\">String</span> code = JSON.parseObject(responseEntity).getString(<span class=\"string\">\"code\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (code.equals(<span class=\"string\">\"200\"</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>验证</strong></p>\n</blockquote>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.lincoln.Untils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2017/3/22</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpResponse;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.NameValuePair;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpPost;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.message.BasicNameValuePair;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 校验验证码工具类</div><div class=\"line\"> *</div><div class=\"line\"> * @author Administrator</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class MobileMessageCheck &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(checkMsg(<span class=\"string\">\"158********\"</span>,<span class=\"string\">\"1234\"</span>));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> SERVER_URL = <span class=\"string\">\"https://api.netease.im/sms/verifycode.action\"</span>;<span class=\"comment\">//校验验证码的请求路径URL</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> APP_KEY = <span class=\"string\">\"*******\"</span>;<span class=\"comment\">//网易云信分配的账号</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> APP_SECRET = <span class=\"string\">\"*******\"</span>;<span class=\"comment\">//网易云信分配的密钥</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> NONCE = <span class=\"string\">\"123456\"</span>;<span class=\"comment\">//随机数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> checkMsg(<span class=\"keyword\">String</span> phone, <span class=\"keyword\">String</span> sum) <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">        CloseableHttpClient httpclient = HttpClients.createDefault();</div><div class=\"line\">        HttpPost post = <span class=\"keyword\">new</span> HttpPost(SERVER_URL);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">String</span> curTime = <span class=\"keyword\">String</span>.valueOf((<span class=\"keyword\">new</span> Date().getTime() / <span class=\"number\">1000</span>L));</div><div class=\"line\">        <span class=\"keyword\">String</span> checkSum = CheckSumBuilder.getCheckSum(APP_SECRET, NONCE, curTime);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//设置请求的header</span></div><div class=\"line\">        post.addHeader(<span class=\"string\">\"AppKey\"</span>, APP_KEY);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"Nonce\"</span>, NONCE);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"CurTime\"</span>, curTime);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"CheckSum\"</span>, checkSum);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded;charset=utf-8\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//设置请求参数</span></div><div class=\"line\">        List&lt;NameValuePair&gt; nameValuePairs = <span class=\"keyword\">new</span> ArrayList&lt;NameValuePair&gt;();</div><div class=\"line\">        nameValuePairs.<span class=\"built_in\">add</span>(<span class=\"keyword\">new</span> BasicNameValuePair(<span class=\"string\">\"mobile\"</span>, phone));</div><div class=\"line\">        nameValuePairs.<span class=\"built_in\">add</span>(<span class=\"keyword\">new</span> BasicNameValuePair(<span class=\"string\">\"code\"</span>, sum));</div><div class=\"line\"></div><div class=\"line\">        post.setEntity(<span class=\"keyword\">new</span> UrlEncodedFormEntity(nameValuePairs, <span class=\"string\">\"utf-8\"</span>));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//执行请求</span></div><div class=\"line\">        HttpResponse response = httpclient.execute(post);</div><div class=\"line\">        <span class=\"keyword\">String</span> responseEntity = EntityUtils.toString(response.getEntity(), <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//判断是否发送成功，发送成功返回true</span></div><div class=\"line\">        <span class=\"keyword\">String</span> code = JSON.parseObject(responseEntity).getString(<span class=\"string\">\"code\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (code.equals(<span class=\"string\">\"200\"</span>)) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>获取计算checksum</strong></p>\n</blockquote>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.lincoln.Untils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.security.MessageDigest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2017/3/22</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class CheckSumBuilder &#123;</div><div class=\"line\">    <span class=\"comment\">// 计算并获取CheckSum</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getCheckSum(<span class=\"keyword\">String</span> appSecret, <span class=\"keyword\">String</span> nonce, <span class=\"keyword\">String</span> curTime) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> encode(<span class=\"string\">\"sha1\"</span>, appSecret + nonce + curTime);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 计算并获取md5值</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getMD5(<span class=\"keyword\">String</span> requestBody) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> encode(<span class=\"string\">\"md5\"</span>, requestBody);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> encode(<span class=\"keyword\">String</span> algorithm, <span class=\"keyword\">String</span> value) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);</div><div class=\"line\">            messageDigest.update(value.getBytes());</div><div class=\"line\">            <span class=\"keyword\">return</span> getFormattedText(messageDigest.digest());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getFormattedText(<span class=\"built_in\">byte</span>[] bytes) &#123;</div><div class=\"line\">        <span class=\"built_in\">int</span> len = bytes.length;</div><div class=\"line\">        StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder(len * <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j &lt; len; j++) &#123;</div><div class=\"line\">            buf.<span class=\"built_in\">append</span>(HEX_DIGITS[(bytes[j] &gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x0f</span>]);</div><div class=\"line\">            buf.<span class=\"built_in\">append</span>(HEX_DIGITS[bytes[j] &amp; <span class=\"number\">0x0f</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> buf.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">char</span>[] HEX_DIGITS =</div><div class=\"line\">            &#123;<span class=\"string\">'0'</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'6'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>亲测有效。</p>\n<p>ps:这里用的是默认的短信模板，如果自定义了短信模板，传入参数的时候多加一个模板id就行了。</p>\n","excerpt":"<p>由于最近使用云信添加短信接入功能，记录一下一些点避免时间久了忘记。</p>","more":"<p></p>\n<blockquote>\n<p><strong>发短信</strong></p>\n</blockquote>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.lincoln.Untils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpResponse;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.NameValuePair;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpPost;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.message.BasicNameValuePair;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> class Yunxin &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(sendMsg(<span class=\"string\">\"158********\"</span>));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> SERVER_URL = <span class=\"string\">\"https://api.netease.im/sms/sendcode.action\"</span>;<span class=\"comment\">//发送验证码的请求路径URL</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> APP_KEY = <span class=\"string\">\"*******\"</span>;<span class=\"comment\">//网易云信分配的账号</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> APP_SECRET = <span class=\"string\">\"*******\"</span>;<span class=\"comment\">//网易云信分配的密钥</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> NONCE = <span class=\"string\">\"123456\"</span>;<span class=\"comment\">//随机数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> sendMsg(<span class=\"keyword\">String</span> phone) <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">        CloseableHttpClient httpclient = HttpClients.createDefault();</div><div class=\"line\">        HttpPost post = <span class=\"keyword\">new</span> HttpPost(SERVER_URL);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">String</span> curTime = <span class=\"keyword\">String</span>.valueOf((<span class=\"keyword\">new</span> Date().getTime() / <span class=\"number\">1000</span>L));</div><div class=\"line\">        <span class=\"keyword\">String</span> checkSum = CheckSumBuilder.getCheckSum(APP_SECRET, NONCE, curTime);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//设置请求的header</span></div><div class=\"line\">        post.addHeader(<span class=\"string\">\"AppKey\"</span>, APP_KEY);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"Nonce\"</span>, NONCE);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"CurTime\"</span>, curTime);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"CheckSum\"</span>, checkSum);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded;charset=utf-8\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//设置请求参数</span></div><div class=\"line\">        List&lt;NameValuePair&gt; nameValuePairs = <span class=\"keyword\">new</span> ArrayList&lt;NameValuePair&gt;();</div><div class=\"line\">        nameValuePairs.<span class=\"built_in\">add</span>(<span class=\"keyword\">new</span> BasicNameValuePair(<span class=\"string\">\"mobile\"</span>, phone));</div><div class=\"line\"></div><div class=\"line\">        post.setEntity(<span class=\"keyword\">new</span> UrlEncodedFormEntity(nameValuePairs, <span class=\"string\">\"utf-8\"</span>));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//执行请求</span></div><div class=\"line\">        HttpResponse response = httpclient.execute(post);</div><div class=\"line\">        <span class=\"keyword\">String</span> responseEntity = EntityUtils.toString(response.getEntity(), <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//判断是否发送成功，发送成功返回true</span></div><div class=\"line\">        <span class=\"keyword\">String</span> code = JSON.parseObject(responseEntity).getString(<span class=\"string\">\"code\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (code.equals(<span class=\"string\">\"200\"</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>验证</strong></p>\n</blockquote>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.lincoln.Untils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2017/3/22</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpResponse;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.NameValuePair;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpPost;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.message.BasicNameValuePair;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 校验验证码工具类</div><div class=\"line\"> *</div><div class=\"line\"> * @author Administrator</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class MobileMessageCheck &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">        System.out.<span class=\"built_in\">println</span>(checkMsg(<span class=\"string\">\"158********\"</span>,<span class=\"string\">\"1234\"</span>));</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> SERVER_URL = <span class=\"string\">\"https://api.netease.im/sms/verifycode.action\"</span>;<span class=\"comment\">//校验验证码的请求路径URL</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> APP_KEY = <span class=\"string\">\"*******\"</span>;<span class=\"comment\">//网易云信分配的账号</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> APP_SECRET = <span class=\"string\">\"*******\"</span>;<span class=\"comment\">//网易云信分配的密钥</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> NONCE = <span class=\"string\">\"123456\"</span>;<span class=\"comment\">//随机数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> checkMsg(<span class=\"keyword\">String</span> phone, <span class=\"keyword\">String</span> sum) <span class=\"keyword\">throws</span> IOException &#123;</div><div class=\"line\">        CloseableHttpClient httpclient = HttpClients.createDefault();</div><div class=\"line\">        HttpPost post = <span class=\"keyword\">new</span> HttpPost(SERVER_URL);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">String</span> curTime = <span class=\"keyword\">String</span>.valueOf((<span class=\"keyword\">new</span> Date().getTime() / <span class=\"number\">1000</span>L));</div><div class=\"line\">        <span class=\"keyword\">String</span> checkSum = CheckSumBuilder.getCheckSum(APP_SECRET, NONCE, curTime);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//设置请求的header</span></div><div class=\"line\">        post.addHeader(<span class=\"string\">\"AppKey\"</span>, APP_KEY);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"Nonce\"</span>, NONCE);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"CurTime\"</span>, curTime);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"CheckSum\"</span>, checkSum);</div><div class=\"line\">        post.addHeader(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded;charset=utf-8\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//设置请求参数</span></div><div class=\"line\">        List&lt;NameValuePair&gt; nameValuePairs = <span class=\"keyword\">new</span> ArrayList&lt;NameValuePair&gt;();</div><div class=\"line\">        nameValuePairs.<span class=\"built_in\">add</span>(<span class=\"keyword\">new</span> BasicNameValuePair(<span class=\"string\">\"mobile\"</span>, phone));</div><div class=\"line\">        nameValuePairs.<span class=\"built_in\">add</span>(<span class=\"keyword\">new</span> BasicNameValuePair(<span class=\"string\">\"code\"</span>, sum));</div><div class=\"line\"></div><div class=\"line\">        post.setEntity(<span class=\"keyword\">new</span> UrlEncodedFormEntity(nameValuePairs, <span class=\"string\">\"utf-8\"</span>));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//执行请求</span></div><div class=\"line\">        HttpResponse response = httpclient.execute(post);</div><div class=\"line\">        <span class=\"keyword\">String</span> responseEntity = EntityUtils.toString(response.getEntity(), <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//判断是否发送成功，发送成功返回true</span></div><div class=\"line\">        <span class=\"keyword\">String</span> code = JSON.parseObject(responseEntity).getString(<span class=\"string\">\"code\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (code.equals(<span class=\"string\">\"200\"</span>)) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>获取计算checksum</strong></p>\n</blockquote>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.lincoln.Untils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.security.MessageDigest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2017/3/22</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class CheckSumBuilder &#123;</div><div class=\"line\">    <span class=\"comment\">// 计算并获取CheckSum</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getCheckSum(<span class=\"keyword\">String</span> appSecret, <span class=\"keyword\">String</span> nonce, <span class=\"keyword\">String</span> curTime) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> encode(<span class=\"string\">\"sha1\"</span>, appSecret + nonce + curTime);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 计算并获取md5值</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getMD5(<span class=\"keyword\">String</span> requestBody) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> encode(<span class=\"string\">\"md5\"</span>, requestBody);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> encode(<span class=\"keyword\">String</span> algorithm, <span class=\"keyword\">String</span> value) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);</div><div class=\"line\">            messageDigest.update(value.getBytes());</div><div class=\"line\">            <span class=\"keyword\">return</span> getFormattedText(messageDigest.digest());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getFormattedText(<span class=\"built_in\">byte</span>[] bytes) &#123;</div><div class=\"line\">        <span class=\"built_in\">int</span> len = bytes.length;</div><div class=\"line\">        StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder(len * <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j &lt; len; j++) &#123;</div><div class=\"line\">            buf.<span class=\"built_in\">append</span>(HEX_DIGITS[(bytes[j] &gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x0f</span>]);</div><div class=\"line\">            buf.<span class=\"built_in\">append</span>(HEX_DIGITS[bytes[j] &amp; <span class=\"number\">0x0f</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> buf.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">char</span>[] HEX_DIGITS =</div><div class=\"line\">            &#123;<span class=\"string\">'0'</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'6'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>亲测有效。</p>\n<p>ps:这里用的是默认的短信模板，如果自定义了短信模板，传入参数的时候多加一个模板id就行了。</p>"},{"title":"Logger级别","date":"2017-02-18T13:22:28.000Z","_content":"日志记录器(Logger)是日志处理的核心组件。log4j具有5种正常级别(Level)。日志记录器(Logger)的可用级别Level (不包括自定义级别 Level)， <!--more-->以下内容就是摘自log4j API (http://jakarta.apache.org/log4j/docs/api/index.html):<br>\n**static Level DEBUG**<br>\nDEBUG Level指出细粒度信息事件对调试应用程序是非常有帮助的。\n**static Level INFO**<br>\nINFO level表明 消息在粗粒度级别上突出强调应用程序的运行过程。\n**static Level WARN**<br>\nWARN level表明会出现潜在错误的情形。\n**static Level ERROR**<br>\nERROR level指出虽然发生错误事件，但仍然不影响系统的继续运行。\n**static Level FATAL**<br>\nFATAL level指出每个严重的错误事件将会导致应用程序的退出。\n另外，还有两个可用的特别的日志记录级别: (以下描述来自log4j API http://jakarta.apache.org/log4j/docs/api/index.html):<br>\n**static Level ALL**<br>\nALL Level是最低等级的，用于打开所有日志记录。\n**static Level OFF**<br>\nOFF Level是最高等级的，用于关闭所有日志记录。\n日志记录器（Logger）的行为是分等级的。如下表所示：\n分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。<font color=red>Log4j建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。</font>通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。<font color=red>比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来，也是说大于等于的级别的日志才输出。</font>\n \n<font color=red>日志记录的级别有继承性，子类会记录父类的所有的日志级别。</font>","source":"_posts/Logger级别.md","raw":"---\ntitle: Logger级别\ndate: 2017-02-18 21:22:28\ncategories: Java二三事\ntags: \n\t- Logger\n---\n日志记录器(Logger)是日志处理的核心组件。log4j具有5种正常级别(Level)。日志记录器(Logger)的可用级别Level (不包括自定义级别 Level)， <!--more-->以下内容就是摘自log4j API (http://jakarta.apache.org/log4j/docs/api/index.html):<br>\n**static Level DEBUG**<br>\nDEBUG Level指出细粒度信息事件对调试应用程序是非常有帮助的。\n**static Level INFO**<br>\nINFO level表明 消息在粗粒度级别上突出强调应用程序的运行过程。\n**static Level WARN**<br>\nWARN level表明会出现潜在错误的情形。\n**static Level ERROR**<br>\nERROR level指出虽然发生错误事件，但仍然不影响系统的继续运行。\n**static Level FATAL**<br>\nFATAL level指出每个严重的错误事件将会导致应用程序的退出。\n另外，还有两个可用的特别的日志记录级别: (以下描述来自log4j API http://jakarta.apache.org/log4j/docs/api/index.html):<br>\n**static Level ALL**<br>\nALL Level是最低等级的，用于打开所有日志记录。\n**static Level OFF**<br>\nOFF Level是最高等级的，用于关闭所有日志记录。\n日志记录器（Logger）的行为是分等级的。如下表所示：\n分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。<font color=red>Log4j建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。</font>通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。<font color=red>比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来，也是说大于等于的级别的日志才输出。</font>\n \n<font color=red>日志记录的级别有继承性，子类会记录父类的所有的日志级别。</font>","slug":"Logger级别","published":1,"updated":"2017-02-18T13:24:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kf9001trhsol6qo49vi","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>日志记录器(Logger)是日志处理的核心组件。log4j具有5种正常级别(Level)。日志记录器(Logger)的可用级别Level (不包括自定义级别 Level)， <a id=\"more\"></a>以下内容就是摘自log4j API (<a href=\"http://jakarta.apache.org/log4j/docs/api/index.html\" target=\"_blank\" rel=\"external\">http://jakarta.apache.org/log4j/docs/api/index.html</a>):<br><br><strong>static Level DEBUG</strong><br><br>DEBUG Level指出细粒度信息事件对调试应用程序是非常有帮助的。<br><strong>static Level INFO</strong><br><br>INFO level表明 消息在粗粒度级别上突出强调应用程序的运行过程。<br><strong>static Level WARN</strong><br><br>WARN level表明会出现潜在错误的情形。<br><strong>static Level ERROR</strong><br><br>ERROR level指出虽然发生错误事件，但仍然不影响系统的继续运行。<br><strong>static Level FATAL</strong><br><br>FATAL level指出每个严重的错误事件将会导致应用程序的退出。<br>另外，还有两个可用的特别的日志记录级别: (以下描述来自log4j API <a href=\"http://jakarta.apache.org/log4j/docs/api/index.html\" target=\"_blank\" rel=\"external\">http://jakarta.apache.org/log4j/docs/api/index.html</a>):<br><br><strong>static Level ALL</strong><br><br>ALL Level是最低等级的，用于打开所有日志记录。<br><strong>static Level OFF</strong><br><br>OFF Level是最高等级的，用于关闭所有日志记录。<br>日志记录器（Logger）的行为是分等级的。如下表所示：<br>分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。<font color=\"red\">Log4j建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。</font>通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。<font color=\"red\">比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来，也是说大于等于的级别的日志才输出。</font></p>\n<font color=\"red\">日志记录的级别有继承性，子类会记录父类的所有的日志级别。</font>","excerpt":"<p>日志记录器(Logger)是日志处理的核心组件。log4j具有5种正常级别(Level)。日志记录器(Logger)的可用级别Level (不包括自定义级别 Level)，</p>","more":"以下内容就是摘自log4j API (<a href=\"http://jakarta.apache.org/log4j/docs/api/index.html\">http://jakarta.apache.org/log4j/docs/api/index.html</a>):<br><br><strong>static Level DEBUG</strong><br><br>DEBUG Level指出细粒度信息事件对调试应用程序是非常有帮助的。<br><strong>static Level INFO</strong><br><br>INFO level表明 消息在粗粒度级别上突出强调应用程序的运行过程。<br><strong>static Level WARN</strong><br><br>WARN level表明会出现潜在错误的情形。<br><strong>static Level ERROR</strong><br><br>ERROR level指出虽然发生错误事件，但仍然不影响系统的继续运行。<br><strong>static Level FATAL</strong><br><br>FATAL level指出每个严重的错误事件将会导致应用程序的退出。<br>另外，还有两个可用的特别的日志记录级别: (以下描述来自log4j API <a href=\"http://jakarta.apache.org/log4j/docs/api/index.html\">http://jakarta.apache.org/log4j/docs/api/index.html</a>):<br><br><strong>static Level ALL</strong><br><br>ALL Level是最低等级的，用于打开所有日志记录。<br><strong>static Level OFF</strong><br><br>OFF Level是最高等级的，用于关闭所有日志记录。<br>日志记录器（Logger）的行为是分等级的。如下表所示：<br>分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。<font color=\"red\">Log4j建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。</font>通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。<font color=\"red\">比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来，也是说大于等于的级别的日志才输出。</font><p></p>\n<font color=\"red\">日志记录的级别有继承性，子类会记录父类的所有的日志级别。</font>"},{"title":"Mac下docker搭建hadoop集群","date":"2018-07-12T10:31:00.000Z","_content":"\n### 安装docker\n\n在Mac下，我是用Docker Toolbox 来安装 Docker，详情参考：https://github.com/widuu/chinese_docker/blob/master/installation/mac.md\n\n### docker基本指令\n\n指令可以直接通过输入docker来了解，下面列举几个常用的指令\n\n```dockerfile\n    docker ps: 查看启动的虚拟机进程\n    docker images: 查看所有的容器\n    docker pull: 下载\n    docker commit: 新建保存镜像\n    docker run: 启动虚拟机\n    这些命令在接下来可以使用到。\n```\n\n### 使用Docker创建ubuntu虚拟机\n\n这个会从docker hub的library/ububtu下载.当然你也可以选择其他的仓库，构成方式是：repository:tag的语法结构\n\n```shell\ndocker pull ubuntu\n```\n\n然后使用`docker images`可以查看本地的所有镜像：\n\n![image-1](Mac下docker搭建hadoop集群/1.png)\n\n显示的内容如下：\n\n```\nREPOSITORY：仓库名\nTAG：标记,例如hadoop\nIMAGE ID：镜像ID号，这是唯一的\nCREATED：创建时间\nSIZE：镜像大小\n那么，除此之外，还需要了解docker的一些常用操作。\n```\n\n### 启动Docker\n\n启动docker容器，就可以构建部署hadoop集群了。使用如下命令启动docker容器：\n\n```shell\ndocker run -ti ubuntu:14.04\n```\n\n![image-2](Mac下docker搭建hadoop集群/2.png)\n\n其中红色框内的一串字符是容器ID,可以在docker images 的 imageID列查看到，这个很有用处。到这里我们就已经搭建完ubuntu虚拟主机了。\n\n接下来我们在Ubuntu基础镜像的上，我们需要安装Hadoop需要的jvm环境，执行如下命令：\n\n```shell\n[1] apt-get update  //记得更新，不更新执行下面可能会出错\n[2] apt-get install software-properties-common python-software-properties\n[3] add-apt-repository ppa:webupd8team/java\n[4] apt-get install oracle-java8-installer\n[5] export JAVA_HOME=/usr/lib/jvm/java-8-oracle\n```\n\n### 安装&配置Hadoop\n\n","source":"_posts/Mac下docker搭建hadoop集群.md","raw":"---\ntitle: Mac下docker搭建hadoop集群\ndate: 2018-07-12 18:31:00\ncategories: 大数据\ntags: \n\t- Docker\n\t- Hadoop\n\t- 集群搭建\n---\n\n### 安装docker\n\n在Mac下，我是用Docker Toolbox 来安装 Docker，详情参考：https://github.com/widuu/chinese_docker/blob/master/installation/mac.md\n\n### docker基本指令\n\n指令可以直接通过输入docker来了解，下面列举几个常用的指令\n\n```dockerfile\n    docker ps: 查看启动的虚拟机进程\n    docker images: 查看所有的容器\n    docker pull: 下载\n    docker commit: 新建保存镜像\n    docker run: 启动虚拟机\n    这些命令在接下来可以使用到。\n```\n\n### 使用Docker创建ubuntu虚拟机\n\n这个会从docker hub的library/ububtu下载.当然你也可以选择其他的仓库，构成方式是：repository:tag的语法结构\n\n```shell\ndocker pull ubuntu\n```\n\n然后使用`docker images`可以查看本地的所有镜像：\n\n![image-1](Mac下docker搭建hadoop集群/1.png)\n\n显示的内容如下：\n\n```\nREPOSITORY：仓库名\nTAG：标记,例如hadoop\nIMAGE ID：镜像ID号，这是唯一的\nCREATED：创建时间\nSIZE：镜像大小\n那么，除此之外，还需要了解docker的一些常用操作。\n```\n\n### 启动Docker\n\n启动docker容器，就可以构建部署hadoop集群了。使用如下命令启动docker容器：\n\n```shell\ndocker run -ti ubuntu:14.04\n```\n\n![image-2](Mac下docker搭建hadoop集群/2.png)\n\n其中红色框内的一串字符是容器ID,可以在docker images 的 imageID列查看到，这个很有用处。到这里我们就已经搭建完ubuntu虚拟主机了。\n\n接下来我们在Ubuntu基础镜像的上，我们需要安装Hadoop需要的jvm环境，执行如下命令：\n\n```shell\n[1] apt-get update  //记得更新，不更新执行下面可能会出错\n[2] apt-get install software-properties-common python-software-properties\n[3] add-apt-repository ppa:webupd8team/java\n[4] apt-get install oracle-java8-installer\n[5] export JAVA_HOME=/usr/lib/jvm/java-8-oracle\n```\n\n### 安装&配置Hadoop\n\n","slug":"Mac下docker搭建hadoop集群","published":1,"updated":"2018-07-12T15:56:50.000Z","_id":"cjjiq3kfa001xrhsomzpj3ukf","comments":1,"layout":"post","photos":[],"link":"","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>在Mac下，我是用Docker Toolbox 来安装 Docker，详情参考：<a href=\"https://github.com/widuu/chinese_docker/blob/master/installation/mac.md\" target=\"_blank\" rel=\"external\">https://github.com/widuu/chinese_docker/blob/master/installation/mac.md</a></p>\n<h3 id=\"docker基本指令\"><a href=\"#docker基本指令\" class=\"headerlink\" title=\"docker基本指令\"></a>docker基本指令</h3><p>指令可以直接通过输入docker来了解，下面列举几个常用的指令</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker ps: 查看启动的虚拟机进程</div><div class=\"line\">docker images: 查看所有的容器</div><div class=\"line\">docker pull: 下载</div><div class=\"line\">docker commit: 新建保存镜像</div><div class=\"line\">docker <span class=\"keyword\">run</span><span class=\"bash\">: 启动虚拟机</span></div><div class=\"line\">这些命令在接下来可以使用到。</div></pre></td></tr></table></figure>\n<h3 id=\"使用Docker创建ubuntu虚拟机\"><a href=\"#使用Docker创建ubuntu虚拟机\" class=\"headerlink\" title=\"使用Docker创建ubuntu虚拟机\"></a>使用Docker创建ubuntu虚拟机</h3><p>这个会从docker hub的library/ububtu下载.当然你也可以选择其他的仓库，构成方式是：repository:tag的语法结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull ubuntu</div></pre></td></tr></table></figure>\n<p>然后使用<code>docker images</code>可以查看本地的所有镜像：</p>\n<p><img src=\"/2018/07/12/Mac下docker搭建hadoop集群/1.png\" alt=\"image-1\"></p>\n<p>显示的内容如下：</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">REPOSITORY：仓库名</div><div class=\"line\">TAG：标记,例如hadoop</div><div class=\"line\"><span class=\"built_in\">IMAGE</span> ID：镜像ID号，这是唯一的</div><div class=\"line\">CREATED：创建时间</div><div class=\"line\"><span class=\"built_in\">SIZE</span>：镜像大小</div><div class=\"line\">那么，除此之外，还需要了解docker的一些常用操作。</div></pre></td></tr></table></figure>\n<h3 id=\"启动Docker\"><a href=\"#启动Docker\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h3><p>启动docker容器，就可以构建部署hadoop集群了。使用如下命令启动docker容器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -ti ubuntu:14.04</div></pre></td></tr></table></figure>\n<p><img src=\"/2018/07/12/Mac下docker搭建hadoop集群/2.png\" alt=\"image-2\"></p>\n<p>其中红色框内的一串字符是容器ID,可以在docker images 的 imageID列查看到，这个很有用处。到这里我们就已经搭建完ubuntu虚拟主机了。</p>\n<p>接下来我们在Ubuntu基础镜像的上，我们需要安装Hadoop需要的jvm环境，执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1] apt-get update  //记得更新，不更新执行下面可能会出错</div><div class=\"line\">[2] apt-get install software-properties-common python-software-properties</div><div class=\"line\">[3] add-apt-repository ppa:webupd8team/java</div><div class=\"line\">[4] apt-get install oracle-java8-installer</div><div class=\"line\">[5] export JAVA_HOME=/usr/lib/jvm/java-8-oracle</div></pre></td></tr></table></figure>\n<h3 id=\"安装-amp-配置Hadoop\"><a href=\"#安装-amp-配置Hadoop\" class=\"headerlink\" title=\"安装&amp;配置Hadoop\"></a>安装&amp;配置Hadoop</h3>","excerpt":"","more":"<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>在Mac下，我是用Docker Toolbox 来安装 Docker，详情参考：<a href=\"https://github.com/widuu/chinese_docker/blob/master/installation/mac.md\">https://github.com/widuu/chinese_docker/blob/master/installation/mac.md</a></p>\n<h3 id=\"docker基本指令\"><a href=\"#docker基本指令\" class=\"headerlink\" title=\"docker基本指令\"></a>docker基本指令</h3><p>指令可以直接通过输入docker来了解，下面列举几个常用的指令</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker ps: 查看启动的虚拟机进程</div><div class=\"line\">docker images: 查看所有的容器</div><div class=\"line\">docker pull: 下载</div><div class=\"line\">docker commit: 新建保存镜像</div><div class=\"line\">docker <span class=\"keyword\">run</span><span class=\"bash\">: 启动虚拟机</span></div><div class=\"line\">这些命令在接下来可以使用到。</div></pre></td></tr></table></figure>\n<h3 id=\"使用Docker创建ubuntu虚拟机\"><a href=\"#使用Docker创建ubuntu虚拟机\" class=\"headerlink\" title=\"使用Docker创建ubuntu虚拟机\"></a>使用Docker创建ubuntu虚拟机</h3><p>这个会从docker hub的library/ububtu下载.当然你也可以选择其他的仓库，构成方式是：repository:tag的语法结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull ubuntu</div></pre></td></tr></table></figure>\n<p>然后使用<code>docker images</code>可以查看本地的所有镜像：</p>\n<p><img src=\"/2018/07/12/Mac下docker搭建hadoop集群/1.png\" alt=\"image-1\"></p>\n<p>显示的内容如下：</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">REPOSITORY：仓库名</div><div class=\"line\">TAG：标记,例如hadoop</div><div class=\"line\"><span class=\"built_in\">IMAGE</span> ID：镜像ID号，这是唯一的</div><div class=\"line\">CREATED：创建时间</div><div class=\"line\"><span class=\"built_in\">SIZE</span>：镜像大小</div><div class=\"line\">那么，除此之外，还需要了解docker的一些常用操作。</div></pre></td></tr></table></figure>\n<h3 id=\"启动Docker\"><a href=\"#启动Docker\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h3><p>启动docker容器，就可以构建部署hadoop集群了。使用如下命令启动docker容器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -ti ubuntu:14.04</div></pre></td></tr></table></figure>\n<p><img src=\"/2018/07/12/Mac下docker搭建hadoop集群/2.png\" alt=\"image-2\"></p>\n<p>其中红色框内的一串字符是容器ID,可以在docker images 的 imageID列查看到，这个很有用处。到这里我们就已经搭建完ubuntu虚拟主机了。</p>\n<p>接下来我们在Ubuntu基础镜像的上，我们需要安装Hadoop需要的jvm环境，执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1] apt-get update  //记得更新，不更新执行下面可能会出错</div><div class=\"line\">[2] apt-get install software-properties-common python-software-properties</div><div class=\"line\">[3] add-apt-repository ppa:webupd8team/java</div><div class=\"line\">[4] apt-get install oracle-java8-installer</div><div class=\"line\">[5] export JAVA_HOME=/usr/lib/jvm/java-8-oracle</div></pre></td></tr></table></figure>\n<h3 id=\"安装-amp-配置Hadoop\"><a href=\"#安装-amp-配置Hadoop\" class=\"headerlink\" title=\"安装&amp;配置Hadoop\"></a>安装&amp;配置Hadoop</h3>"},{"title":"Volatile小结","date":"2017-03-03T06:24:05.000Z","_content":">1）Java 中能创建 Volatile 数组吗？\n\n能，Java 中可以创建 volatile 类型数组，不过只是一个指向数组的引用，而不是整个数组。我的意思是，如果改变引用指向的数组，将会受到 volatile 的保护，但是如果多个线程同时改变数组的元素，volatile 标示符就不能起到之前的保护作用了。\n<!--more-->\n>2）volatile 能使得一个非原子操作变成原子操作吗？\n\n一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java 中读取 long 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 long 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 volatile 型的 long 或 double 变量的读写是原子。\n\n>3）volatile 修饰符有过什么实践？\n\n一种实践是用 volatile 修饰 long 和 double 变量，使其能按原子类型来读写。double 和 long 都是64位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的，但 Java 中 volatile 型的 long 或 double 变量的读写是原子的。volatile 修复符的另一个作用是提供内存屏障（memory barrier），例如在分布式框架中的应用。简单的说，就是当你写一个 volatile 变量之前，Java 内存模型会插入一个写屏障（write barrier），读一个 volatile 变量之前，会插入一个读屏障（read barrier）。意思就是说，在你写一个 volatile 域时，能保证任何线程都能看到你写的值，同时，在写之前，也能保证任何数值的更新对所有线程是可见的，因为内存屏障会将其他所有写的值更新到缓存。\n\n>4）volatile 类型变量提供什么保证？\n\nvolatile 变量提供顺序和可见性保证，例如，JVM 或者 JIT为了获得更好的性能会对语句重排序，但是 volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，volatile 还能提供原子性，如读 64 位数据类型，像 long 和 double 都不是原子的，但 volatile 类型的 double 和 long 就是原子的。\n\n","source":"_posts/Volatile小结.md","raw":"---\ntitle: Volatile小结\ndate: 2017-03-03 14:24:05\ncategories: Java二三事\ntags:\n\t- Java\n---\n>1）Java 中能创建 Volatile 数组吗？\n\n能，Java 中可以创建 volatile 类型数组，不过只是一个指向数组的引用，而不是整个数组。我的意思是，如果改变引用指向的数组，将会受到 volatile 的保护，但是如果多个线程同时改变数组的元素，volatile 标示符就不能起到之前的保护作用了。\n<!--more-->\n>2）volatile 能使得一个非原子操作变成原子操作吗？\n\n一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java 中读取 long 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 long 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 volatile 型的 long 或 double 变量的读写是原子。\n\n>3）volatile 修饰符有过什么实践？\n\n一种实践是用 volatile 修饰 long 和 double 变量，使其能按原子类型来读写。double 和 long 都是64位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的，但 Java 中 volatile 型的 long 或 double 变量的读写是原子的。volatile 修复符的另一个作用是提供内存屏障（memory barrier），例如在分布式框架中的应用。简单的说，就是当你写一个 volatile 变量之前，Java 内存模型会插入一个写屏障（write barrier），读一个 volatile 变量之前，会插入一个读屏障（read barrier）。意思就是说，在你写一个 volatile 域时，能保证任何线程都能看到你写的值，同时，在写之前，也能保证任何数值的更新对所有线程是可见的，因为内存屏障会将其他所有写的值更新到缓存。\n\n>4）volatile 类型变量提供什么保证？\n\nvolatile 变量提供顺序和可见性保证，例如，JVM 或者 JIT为了获得更好的性能会对语句重排序，但是 volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，volatile 还能提供原子性，如读 64 位数据类型，像 long 和 double 都不是原子的，但 volatile 类型的 double 和 long 就是原子的。\n\n","slug":"Volatile小结","published":1,"updated":"2017-03-03T06:35:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kfc001zrhso5z52fcn6","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><blockquote>\n<p>1）Java 中能创建 Volatile 数组吗？</p>\n</blockquote>\n<p>能，Java 中可以创建 volatile 类型数组，不过只是一个指向数组的引用，而不是整个数组。我的意思是，如果改变引用指向的数组，将会受到 volatile 的保护，但是如果多个线程同时改变数组的元素，volatile 标示符就不能起到之前的保护作用了。<br><a id=\"more\"></a></p>\n<blockquote>\n<p>2）volatile 能使得一个非原子操作变成原子操作吗？</p>\n</blockquote>\n<p>一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java 中读取 long 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 long 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 volatile 型的 long 或 double 变量的读写是原子。</p>\n<blockquote>\n<p>3）volatile 修饰符有过什么实践？</p>\n</blockquote>\n<p>一种实践是用 volatile 修饰 long 和 double 变量，使其能按原子类型来读写。double 和 long 都是64位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的，但 Java 中 volatile 型的 long 或 double 变量的读写是原子的。volatile 修复符的另一个作用是提供内存屏障（memory barrier），例如在分布式框架中的应用。简单的说，就是当你写一个 volatile 变量之前，Java 内存模型会插入一个写屏障（write barrier），读一个 volatile 变量之前，会插入一个读屏障（read barrier）。意思就是说，在你写一个 volatile 域时，能保证任何线程都能看到你写的值，同时，在写之前，也能保证任何数值的更新对所有线程是可见的，因为内存屏障会将其他所有写的值更新到缓存。</p>\n<blockquote>\n<p>4）volatile 类型变量提供什么保证？</p>\n</blockquote>\n<p>volatile 变量提供顺序和可见性保证，例如，JVM 或者 JIT为了获得更好的性能会对语句重排序，但是 volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，volatile 还能提供原子性，如读 64 位数据类型，像 long 和 double 都不是原子的，但 volatile 类型的 double 和 long 就是原子的。</p>\n","excerpt":"<blockquote>\n<p>1）Java 中能创建 Volatile 数组吗？</p>\n</blockquote>\n<p>能，Java 中可以创建 volatile 类型数组，不过只是一个指向数组的引用，而不是整个数组。我的意思是，如果改变引用指向的数组，将会受到 volatile 的保护，但是如果多个线程同时改变数组的元素，volatile 标示符就不能起到之前的保护作用了。<br></p>","more":"<p></p>\n<blockquote>\n<p>2）volatile 能使得一个非原子操作变成原子操作吗？</p>\n</blockquote>\n<p>一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java 中读取 long 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 long 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 volatile 型的 long 或 double 变量的读写是原子。</p>\n<blockquote>\n<p>3）volatile 修饰符有过什么实践？</p>\n</blockquote>\n<p>一种实践是用 volatile 修饰 long 和 double 变量，使其能按原子类型来读写。double 和 long 都是64位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的，但 Java 中 volatile 型的 long 或 double 变量的读写是原子的。volatile 修复符的另一个作用是提供内存屏障（memory barrier），例如在分布式框架中的应用。简单的说，就是当你写一个 volatile 变量之前，Java 内存模型会插入一个写屏障（write barrier），读一个 volatile 变量之前，会插入一个读屏障（read barrier）。意思就是说，在你写一个 volatile 域时，能保证任何线程都能看到你写的值，同时，在写之前，也能保证任何数值的更新对所有线程是可见的，因为内存屏障会将其他所有写的值更新到缓存。</p>\n<blockquote>\n<p>4）volatile 类型变量提供什么保证？</p>\n</blockquote>\n<p>volatile 变量提供顺序和可见性保证，例如，JVM 或者 JIT为了获得更好的性能会对语句重排序，但是 volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，volatile 还能提供原子性，如读 64 位数据类型，像 long 和 double 都不是原子的，但 volatile 类型的 double 和 long 就是原子的。</p>"},{"title":"Mybatis+Criteria简化查询","date":"2018-07-05T17:01:45.000Z","_content":"\n本文是通过mybatis+criteria来简化多条件查询，在使用常规的mybatis时，我们经常碰到的问题就是条件式查询。在一个查询界面，查询条件较多，并且运算符并不总是=时，在后台就需要拼装sql语句。这种处理方式肯定不是使用mybatis的初衷，对于使用了hibernate的我来说，如果mybatis也有一套criteria查询就好了。在具体实现中，我们只需要按照hibernate的处理方式定义好相应的criteria，最后传递给mybatis，其自身处理相应的条件和参数信息，最终返回相应的数据即可。如下一个示例代码所示:\n\n```java\nprivate Criteria buildCriteria(Coupon coupon) {\n        Criteria criteria = new Criteria();\n    \t//等于某个值\n        if (StringUtils.isNotEmpty(coupon.getCompanyId())) {\n            criteria.andFieldEqualTo(\"company_id\", coupon.getCompanyId());\n        }\n\t\t//少于某个值\n      \tcriteria.andFieldLessThan(\"rank_points\", coupon.getMaxRankPoints().toString()\n        return criteria;\n    }\n```\n\n如果使用这种方式，无疑会大大降低编写表单式查询的代码复杂度。同时，在内部处理中也不需要作任何判断，而直接将生成的sql交给mybatis去执行即可。当然，我们不希望生成的sql连我们自己都看不懂(想一想hibernate生成的sql),最终生成的sql像下面这样即可。\n\n```sql\nselect * from table where company_id = #{company_id} and rank_points <= #{rank_points}\n```\n\n这是标准的mybatis语句，在进行代码调试和处理时也方便进行查看并处理。那么整个处理逻辑即变成如何处理参数信息，分别处理 **字段名** **运算符** **参数名 字段类型 参数映射**即可。<!--more-->\n\n**模拟hibernate的Criteria类**\n\n```java\n/**\n * <pre>\n * 模拟hibernate的Criteria类\n * </pre>\n *\n * @author 李智\n * @version 1.00\n */\npublic class Criteria {\n    //条件集合\n    private List<Criterion> criteria;\n\n    public Criteria() {\n        criteria = new ArrayList<Criterion>();\n    }\n\n\n    public boolean isValid() {\n        return criteria.size() > 0;\n    }\n\n\n    /**\n     * 两表链接\n     *\n     * @param condition\n     * @return\n     */\n    public Criteria andFieldCondition(String condition) {\n        addCriterion(condition);\n        return this;\n    }\n\n\n    /**\n     * 字段为空\n     *\n     * @param field\n     * @return\n     */\n    public Criteria andFieldIsNull(String field) {\n        addCriterion(field + \" is null\");\n        return this;\n    }\n\n    /**\n     * 字段不为空\n     *\n     * @param field\n     * @return\n     */\n    public Criteria andFieldIsNotNull(String field) {\n        addCriterion(field + \" is not null\");\n        return this;\n    }\n\n    /**\n     * 字段等于\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldEqualTo(String field, String value) {\n        if (StringUtils.isNotBlank(value)) {\n            addCriterion(field + \" =\", value, field);\n        }\n        return this;\n    }\n\n    /**\n     * 字段不等于\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldNotEqualTo(String field, String value) {\n        addCriterion(field + \" <>\", value, field);\n        return this;\n    }\n\n    /**\n     * 字段值大于\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldGreaterThan(String field, String value) {\n        addCriterion(field + \" >\", value, field);\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值大于等于\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldGreaterThanOrEqualTo(String field, String value) {\n        if (StringUtils.isNotBlank(value)) {\n            addCriterion(field + \" >=\", value, field);\n        }\n        return (Criteria) this;\n    }\n\n    public Criteria andTimeFieldBetween(String field, String beginTime, String endTime) {\n        if (StringUtils.isNotBlank(beginTime)) {\n            addCriterion(field + \" >= \", DateUtils.toStoreStr14(beginTime, false), field);\n        }\n        if (StringUtils.isNotBlank(endTime)) {\n            addCriterion(field + \" < \", DateUtils.toStoreStr14(endTime, true), field);\n        }\n        return (Criteria) this;\n    }\n\n    public Criteria andDateFieldBetween(String field, String beginDate, String endDate) {\n        if (StringUtils.isNotBlank(beginDate)) {\n            addCriterion(field + \" >= \", beginDate, field);\n        }\n        if (StringUtils.isNotBlank(endDate)) {\n            addCriterion(field + \" < \", endDate, field);\n        }\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值小于\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldLessThan(String field, String value) {\n        if (StringUtils.isNotBlank(value)) {\n            addCriterion(field + \" <\", value, field);\n        }\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值小于等于\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldLessThanOrEqualTo(String field, String value) {\n        if (StringUtils.isNotBlank(value)) {\n            addCriterion(field + \" <=\", value, field);\n        }\n        return (Criteria) this;\n    }\n\n\n    /**\n     * 字段值like\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldLike(String field, String value) {\n        if (StringUtils.isNotBlank(value)) {\n            addCriterion(field + \" like\", \"%\" + value + \"%\", field);\n        }\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值不like\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldNotLike(String field, String value) {\n        if (StringUtils.isNotBlank(value)) {\n            addCriterion(field + \" not like\", value, field);\n        }\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值in\n     *\n     * @param field\n     * @param values\n     * @return\n     */\n    public Criteria andFieldIn(String field, List<String> values) {\n        addCriterion(field + \" in\", values, field);\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值不in\n     *\n     * @param field\n     * @param values\n     * @return\n     */\n    public Criteria andFieldNotIn(String field, List<String> values) {\n        addCriterion(field + \" not in\", values, field);\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值介于\n     *\n     * @param field\n     * @param value1\n     * @param value2\n     * @return\n     */\n    public Criteria andFieldBetween(String field, String value1, String value2) {\n        addCriterion(field + \" between\", value1, value2, field);\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值不介于\n     *\n     * @param field\n     * @param value1\n     * @param value2\n     * @return\n     */\n    public Criteria andFieldNotBetween(String field, String value1, String value2) {\n        addCriterion(field + \" not between\", value1, value2, field);\n        return (Criteria) this;\n    }\n\n\n    protected void addCriterion(String condition) {\n        if (condition == null) {\n            throw new RuntimeException(\"Value for condition cannot be null\");\n        }\n        criteria.add(new Criterion(condition));\n    }\n\n    protected void addCriterion(String condition, Object value, String property) {\n        if (value == null) {\n            throw new RuntimeException(\"Value for \" + property + \" cannot be null\");\n        }\n        criteria.add(new Criterion(condition, value));\n    }\n\n    protected void addCriterion(String condition, Object value1, Object value2, String property) {\n        if (value1 == null || value2 == null) {\n            throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");\n        }\n        criteria.add(new Criterion(condition, value1, value2));\n    }\n\n\n    public List<Criterion> getCriteria() {\n        return criteria;\n    }\n\n    public void setCriteria(List<Criterion> criteria) {\n        this.criteria = criteria;\n    }\n\n\n    public Criteria andFieldGreaterThanOrEqualTo(String field, Integer value) {\n        if (value != null) {\n            addCriterion(field + \" >= \", value, field);\n        }\n        return this;\n    }\n\n    public Criteria andFieldLessThanOrEqualTo(String field, Integer value) {\n        if (value != null) {\n            addCriterion(field + \" <= \", value, field);\n        }\n        return this;\n    }\n\n}\n```\n\n\n\n**构造criteria条件**\n\n```java\npublic Criteria buildCriteria(Member member) {\n    Criteria criteria = new Criteria();\n    if (LocalStringUtils.isNotEmpty(member.getUserName())) {\n        criteria.andFieldEqualTo(\"user_name\", member.getUserName());\n    }\n    if (LocalStringUtils.isNotEmpty(member.getRealName())) {\n        criteria.andFieldLike(\"real_name\", \"%\" + member.getRealName() + \"%\");\n    }\n    if (member.getMinRankPoints() != null) {\n        criteria.andFieldGreaterThan(\"rank_points\", member.getMinRankPoints().toString());\n    }\n    if (member.getRankId() != null) {\n        criteria.andFieldEqualTo(\"rank_id\", member.getRankId());\n    }\n    if (member.getMaxRankPoints() != null) {\n        criteria.andFieldLessThan(\"rank_points\", member.getMaxRankPoints().toString());\n    }\n    if (LocalStringUtils.isNotEmpty(member.getMemberSrc())) {\n        criteria.andFieldEqualTo(\"member_src\", member.getMemberSrc());\n    }\n    return criteria;\n}\n```\n\n\n\n**进行分页查询**\n\n```java\n  public Page<Member> queryAllCoupon(Member member, PageParam pageParam) {\n        Page<Member> pageResult = queryPageListByCriteria(buildCriteria(member), pageParam);\n        return pageResult;\n    }\n\n/**\n     * 根据Criteria方式查询结果集,包括传入分页参数\n     *\n     * @param criteria\n     * @param pageParam 若为Null的话，则不进行分页\n     * @return\n     */\n    public <E> List<E> queryPageListByCriteria(Criteria criteria, PageParam pageParam) {\n        Map<String, Object> filters = new HashMap<String, Object>();\n        if (criteria == null) {\n            criteria = createCriteria();\n        }\n        filters.put(\"criteria\", criteria);\n        if (pageParam != null) {\n            filters.put(\"pageFirst\", pageParam.getFirst());\n            filters.put(\"pageSize\", pageParam.getPageSize());\n            if (LocalStringUtils.isNotEmpty(pageParam.getSortFieldName())) {\n                filters.put(\"sortFieldName\", pageParam.getSortFieldName());\n            }\n            if (LocalStringUtils.isNotEmpty(pageParam.getSortType())) {\n                filters.put(\"sortType\", pageParam.getSortType());\n            }\n        }\n        String queryStatement = getMyBatisMapperNamespace() + \".queryListByCriteria\";\n        Object results = getSqlSessionTemplate().selectList(queryStatement, filters);\n        return (List<E>) results;\n\n    }\n\n \tprivate String getMyBatisMapperNamespace() {\n        return getMapperClass().getName();\n    }\n```\n\n\n\n**Mybatis生成criteria的动态条件查询sql**\n\n```sql\n<!--根据Criteria方式查询数量-->\n    <select id=\"countListByCriteria\" parameterType=\"map\" resultType=\"int\">\n        select count(*) from t_b2c_suit\n        <include refid=\"criteria_filters\"/>\n    </select>\n    \n<!--criteria的动态条件-->\n    <sql id=\"criteria_filters\">\n        <where>\n            <if test=\"criteria.valid\">\n                <trim prefix=\"(\" suffix=\")\" prefixOverrides=\"and\">\n                    <foreach collection=\"criteria.criteria\" item=\"criterion\">\n                        <choose>\n                            <when test=\"criterion.noValue\">\n                                and ${criterion.condition}\n                            </when>\n                            <when test=\"criterion.singleValue\">\n                                and ${criterion.condition} #{criterion.value}\n                            </when>\n                            <when test=\"criterion.betweenValue\">\n                                and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\n                            </when>\n                            <when test=\"criterion.listValue\">\n                                and ${criterion.condition}\n                                <foreach collection=\"criterion.value\" item=\"listItem\" open=\"(\" close=\")\"\n                                         separator=\",\">\n                                #{listItem}\n                                </foreach>\n                            </when>\n                        </choose>\n                    </foreach>\n                </trim>\n            </if>\n        </where>\n    </sql>\n```\n\n","source":"_posts/Mybatis-Criteria简化查询.md","raw":"---\ntitle: Mybatis+Criteria简化查询\ndate: 2018-07-06 01:01:45\ntags:\n---\n\n本文是通过mybatis+criteria来简化多条件查询，在使用常规的mybatis时，我们经常碰到的问题就是条件式查询。在一个查询界面，查询条件较多，并且运算符并不总是=时，在后台就需要拼装sql语句。这种处理方式肯定不是使用mybatis的初衷，对于使用了hibernate的我来说，如果mybatis也有一套criteria查询就好了。在具体实现中，我们只需要按照hibernate的处理方式定义好相应的criteria，最后传递给mybatis，其自身处理相应的条件和参数信息，最终返回相应的数据即可。如下一个示例代码所示:\n\n```java\nprivate Criteria buildCriteria(Coupon coupon) {\n        Criteria criteria = new Criteria();\n    \t//等于某个值\n        if (StringUtils.isNotEmpty(coupon.getCompanyId())) {\n            criteria.andFieldEqualTo(\"company_id\", coupon.getCompanyId());\n        }\n\t\t//少于某个值\n      \tcriteria.andFieldLessThan(\"rank_points\", coupon.getMaxRankPoints().toString()\n        return criteria;\n    }\n```\n\n如果使用这种方式，无疑会大大降低编写表单式查询的代码复杂度。同时，在内部处理中也不需要作任何判断，而直接将生成的sql交给mybatis去执行即可。当然，我们不希望生成的sql连我们自己都看不懂(想一想hibernate生成的sql),最终生成的sql像下面这样即可。\n\n```sql\nselect * from table where company_id = #{company_id} and rank_points <= #{rank_points}\n```\n\n这是标准的mybatis语句，在进行代码调试和处理时也方便进行查看并处理。那么整个处理逻辑即变成如何处理参数信息，分别处理 **字段名** **运算符** **参数名 字段类型 参数映射**即可。<!--more-->\n\n**模拟hibernate的Criteria类**\n\n```java\n/**\n * <pre>\n * 模拟hibernate的Criteria类\n * </pre>\n *\n * @author 李智\n * @version 1.00\n */\npublic class Criteria {\n    //条件集合\n    private List<Criterion> criteria;\n\n    public Criteria() {\n        criteria = new ArrayList<Criterion>();\n    }\n\n\n    public boolean isValid() {\n        return criteria.size() > 0;\n    }\n\n\n    /**\n     * 两表链接\n     *\n     * @param condition\n     * @return\n     */\n    public Criteria andFieldCondition(String condition) {\n        addCriterion(condition);\n        return this;\n    }\n\n\n    /**\n     * 字段为空\n     *\n     * @param field\n     * @return\n     */\n    public Criteria andFieldIsNull(String field) {\n        addCriterion(field + \" is null\");\n        return this;\n    }\n\n    /**\n     * 字段不为空\n     *\n     * @param field\n     * @return\n     */\n    public Criteria andFieldIsNotNull(String field) {\n        addCriterion(field + \" is not null\");\n        return this;\n    }\n\n    /**\n     * 字段等于\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldEqualTo(String field, String value) {\n        if (StringUtils.isNotBlank(value)) {\n            addCriterion(field + \" =\", value, field);\n        }\n        return this;\n    }\n\n    /**\n     * 字段不等于\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldNotEqualTo(String field, String value) {\n        addCriterion(field + \" <>\", value, field);\n        return this;\n    }\n\n    /**\n     * 字段值大于\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldGreaterThan(String field, String value) {\n        addCriterion(field + \" >\", value, field);\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值大于等于\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldGreaterThanOrEqualTo(String field, String value) {\n        if (StringUtils.isNotBlank(value)) {\n            addCriterion(field + \" >=\", value, field);\n        }\n        return (Criteria) this;\n    }\n\n    public Criteria andTimeFieldBetween(String field, String beginTime, String endTime) {\n        if (StringUtils.isNotBlank(beginTime)) {\n            addCriterion(field + \" >= \", DateUtils.toStoreStr14(beginTime, false), field);\n        }\n        if (StringUtils.isNotBlank(endTime)) {\n            addCriterion(field + \" < \", DateUtils.toStoreStr14(endTime, true), field);\n        }\n        return (Criteria) this;\n    }\n\n    public Criteria andDateFieldBetween(String field, String beginDate, String endDate) {\n        if (StringUtils.isNotBlank(beginDate)) {\n            addCriterion(field + \" >= \", beginDate, field);\n        }\n        if (StringUtils.isNotBlank(endDate)) {\n            addCriterion(field + \" < \", endDate, field);\n        }\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值小于\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldLessThan(String field, String value) {\n        if (StringUtils.isNotBlank(value)) {\n            addCriterion(field + \" <\", value, field);\n        }\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值小于等于\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldLessThanOrEqualTo(String field, String value) {\n        if (StringUtils.isNotBlank(value)) {\n            addCriterion(field + \" <=\", value, field);\n        }\n        return (Criteria) this;\n    }\n\n\n    /**\n     * 字段值like\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldLike(String field, String value) {\n        if (StringUtils.isNotBlank(value)) {\n            addCriterion(field + \" like\", \"%\" + value + \"%\", field);\n        }\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值不like\n     *\n     * @param field\n     * @param value\n     * @return\n     */\n    public Criteria andFieldNotLike(String field, String value) {\n        if (StringUtils.isNotBlank(value)) {\n            addCriterion(field + \" not like\", value, field);\n        }\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值in\n     *\n     * @param field\n     * @param values\n     * @return\n     */\n    public Criteria andFieldIn(String field, List<String> values) {\n        addCriterion(field + \" in\", values, field);\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值不in\n     *\n     * @param field\n     * @param values\n     * @return\n     */\n    public Criteria andFieldNotIn(String field, List<String> values) {\n        addCriterion(field + \" not in\", values, field);\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值介于\n     *\n     * @param field\n     * @param value1\n     * @param value2\n     * @return\n     */\n    public Criteria andFieldBetween(String field, String value1, String value2) {\n        addCriterion(field + \" between\", value1, value2, field);\n        return (Criteria) this;\n    }\n\n    /**\n     * 字段值不介于\n     *\n     * @param field\n     * @param value1\n     * @param value2\n     * @return\n     */\n    public Criteria andFieldNotBetween(String field, String value1, String value2) {\n        addCriterion(field + \" not between\", value1, value2, field);\n        return (Criteria) this;\n    }\n\n\n    protected void addCriterion(String condition) {\n        if (condition == null) {\n            throw new RuntimeException(\"Value for condition cannot be null\");\n        }\n        criteria.add(new Criterion(condition));\n    }\n\n    protected void addCriterion(String condition, Object value, String property) {\n        if (value == null) {\n            throw new RuntimeException(\"Value for \" + property + \" cannot be null\");\n        }\n        criteria.add(new Criterion(condition, value));\n    }\n\n    protected void addCriterion(String condition, Object value1, Object value2, String property) {\n        if (value1 == null || value2 == null) {\n            throw new RuntimeException(\"Between values for \" + property + \" cannot be null\");\n        }\n        criteria.add(new Criterion(condition, value1, value2));\n    }\n\n\n    public List<Criterion> getCriteria() {\n        return criteria;\n    }\n\n    public void setCriteria(List<Criterion> criteria) {\n        this.criteria = criteria;\n    }\n\n\n    public Criteria andFieldGreaterThanOrEqualTo(String field, Integer value) {\n        if (value != null) {\n            addCriterion(field + \" >= \", value, field);\n        }\n        return this;\n    }\n\n    public Criteria andFieldLessThanOrEqualTo(String field, Integer value) {\n        if (value != null) {\n            addCriterion(field + \" <= \", value, field);\n        }\n        return this;\n    }\n\n}\n```\n\n\n\n**构造criteria条件**\n\n```java\npublic Criteria buildCriteria(Member member) {\n    Criteria criteria = new Criteria();\n    if (LocalStringUtils.isNotEmpty(member.getUserName())) {\n        criteria.andFieldEqualTo(\"user_name\", member.getUserName());\n    }\n    if (LocalStringUtils.isNotEmpty(member.getRealName())) {\n        criteria.andFieldLike(\"real_name\", \"%\" + member.getRealName() + \"%\");\n    }\n    if (member.getMinRankPoints() != null) {\n        criteria.andFieldGreaterThan(\"rank_points\", member.getMinRankPoints().toString());\n    }\n    if (member.getRankId() != null) {\n        criteria.andFieldEqualTo(\"rank_id\", member.getRankId());\n    }\n    if (member.getMaxRankPoints() != null) {\n        criteria.andFieldLessThan(\"rank_points\", member.getMaxRankPoints().toString());\n    }\n    if (LocalStringUtils.isNotEmpty(member.getMemberSrc())) {\n        criteria.andFieldEqualTo(\"member_src\", member.getMemberSrc());\n    }\n    return criteria;\n}\n```\n\n\n\n**进行分页查询**\n\n```java\n  public Page<Member> queryAllCoupon(Member member, PageParam pageParam) {\n        Page<Member> pageResult = queryPageListByCriteria(buildCriteria(member), pageParam);\n        return pageResult;\n    }\n\n/**\n     * 根据Criteria方式查询结果集,包括传入分页参数\n     *\n     * @param criteria\n     * @param pageParam 若为Null的话，则不进行分页\n     * @return\n     */\n    public <E> List<E> queryPageListByCriteria(Criteria criteria, PageParam pageParam) {\n        Map<String, Object> filters = new HashMap<String, Object>();\n        if (criteria == null) {\n            criteria = createCriteria();\n        }\n        filters.put(\"criteria\", criteria);\n        if (pageParam != null) {\n            filters.put(\"pageFirst\", pageParam.getFirst());\n            filters.put(\"pageSize\", pageParam.getPageSize());\n            if (LocalStringUtils.isNotEmpty(pageParam.getSortFieldName())) {\n                filters.put(\"sortFieldName\", pageParam.getSortFieldName());\n            }\n            if (LocalStringUtils.isNotEmpty(pageParam.getSortType())) {\n                filters.put(\"sortType\", pageParam.getSortType());\n            }\n        }\n        String queryStatement = getMyBatisMapperNamespace() + \".queryListByCriteria\";\n        Object results = getSqlSessionTemplate().selectList(queryStatement, filters);\n        return (List<E>) results;\n\n    }\n\n \tprivate String getMyBatisMapperNamespace() {\n        return getMapperClass().getName();\n    }\n```\n\n\n\n**Mybatis生成criteria的动态条件查询sql**\n\n```sql\n<!--根据Criteria方式查询数量-->\n    <select id=\"countListByCriteria\" parameterType=\"map\" resultType=\"int\">\n        select count(*) from t_b2c_suit\n        <include refid=\"criteria_filters\"/>\n    </select>\n    \n<!--criteria的动态条件-->\n    <sql id=\"criteria_filters\">\n        <where>\n            <if test=\"criteria.valid\">\n                <trim prefix=\"(\" suffix=\")\" prefixOverrides=\"and\">\n                    <foreach collection=\"criteria.criteria\" item=\"criterion\">\n                        <choose>\n                            <when test=\"criterion.noValue\">\n                                and ${criterion.condition}\n                            </when>\n                            <when test=\"criterion.singleValue\">\n                                and ${criterion.condition} #{criterion.value}\n                            </when>\n                            <when test=\"criterion.betweenValue\">\n                                and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}\n                            </when>\n                            <when test=\"criterion.listValue\">\n                                and ${criterion.condition}\n                                <foreach collection=\"criterion.value\" item=\"listItem\" open=\"(\" close=\")\"\n                                         separator=\",\">\n                                #{listItem}\n                                </foreach>\n                            </when>\n                        </choose>\n                    </foreach>\n                </trim>\n            </if>\n        </where>\n    </sql>\n```\n\n","slug":"Mybatis-Criteria简化查询","published":1,"updated":"2018-07-08T15:25:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kfd0022rhso8a0xmuth","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>本文是通过mybatis+criteria来简化多条件查询，在使用常规的mybatis时，我们经常碰到的问题就是条件式查询。在一个查询界面，查询条件较多，并且运算符并不总是=时，在后台就需要拼装sql语句。这种处理方式肯定不是使用mybatis的初衷，对于使用了hibernate的我来说，如果mybatis也有一套criteria查询就好了。在具体实现中，我们只需要按照hibernate的处理方式定义好相应的criteria，最后传递给mybatis，其自身处理相应的条件和参数信息，最终返回相应的数据即可。如下一个示例代码所示:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Criteria <span class=\"title\">buildCriteria</span><span class=\"params\">(Coupon coupon)</span> </span>&#123;</div><div class=\"line\">        Criteria criteria = <span class=\"keyword\">new</span> Criteria();</div><div class=\"line\">    \t<span class=\"comment\">//等于某个值</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(coupon.getCompanyId())) &#123;</div><div class=\"line\">            criteria.andFieldEqualTo(<span class=\"string\">\"company_id\"</span>, coupon.getCompanyId());</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//少于某个值</span></div><div class=\"line\">      \tcriteria.andFieldLessThan(<span class=\"string\">\"rank_points\"</span>, coupon.getMaxRankPoints().toString()</div><div class=\"line\">        <span class=\"keyword\">return</span> criteria;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如果使用这种方式，无疑会大大降低编写表单式查询的代码复杂度。同时，在内部处理中也不需要作任何判断，而直接将生成的sql交给mybatis去执行即可。当然，我们不希望生成的sql连我们自己都看不懂(想一想hibernate生成的sql),最终生成的sql像下面这样即可。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> company_id = #&#123;company_id&#125; <span class=\"keyword\">and</span> rank_points &lt;= #&#123;rank_points&#125;</div></pre></td></tr></table></figure>\n<p>这是标准的mybatis语句，在进行代码调试和处理时也方便进行查看并处理。那么整个处理逻辑即变成如何处理参数信息，分别处理 <strong>字段名</strong> <strong>运算符</strong> <strong>参数名 字段类型 参数映射</strong>即可。<a id=\"more\"></a></p>\n<p><strong>模拟hibernate的Criteria类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;pre&gt;</div><div class=\"line\"> * 模拟hibernate的Criteria类</div><div class=\"line\"> * &lt;/pre&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@version</span> 1.00</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Criteria</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//条件集合</span></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Criterion&gt; criteria;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Criteria</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        criteria = <span class=\"keyword\">new</span> ArrayList&lt;Criterion&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> criteria.size() &gt; <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 两表链接</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> condition</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldCondition</span><span class=\"params\">(String condition)</span> </span>&#123;</div><div class=\"line\">        addCriterion(condition);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段为空</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldIsNull</span><span class=\"params\">(String field)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" is null\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段不为空</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldIsNotNull</span><span class=\"params\">(String field)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" is not null\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段等于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldEqualTo</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" =\"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段不等于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldNotEqualTo</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" &lt;&gt;\"</span>, value, field);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值大于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldGreaterThan</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" &gt;\"</span>, value, field);</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值大于等于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldGreaterThanOrEqualTo</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &gt;=\"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andTimeFieldBetween</span><span class=\"params\">(String field, String beginTime, String endTime)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(beginTime)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &gt;= \"</span>, DateUtils.toStoreStr14(beginTime, <span class=\"keyword\">false</span>), field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(endTime)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &lt; \"</span>, DateUtils.toStoreStr14(endTime, <span class=\"keyword\">true</span>), field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andDateFieldBetween</span><span class=\"params\">(String field, String beginDate, String endDate)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(beginDate)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &gt;= \"</span>, beginDate, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(endDate)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &lt; \"</span>, endDate, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值小于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldLessThan</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &lt;\"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值小于等于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldLessThanOrEqualTo</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &lt;=\"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值like</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldLike</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" like\"</span>, <span class=\"string\">\"%\"</span> + value + <span class=\"string\">\"%\"</span>, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值不like</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldNotLike</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" not like\"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值in</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> values</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldIn</span><span class=\"params\">(String field, List&lt;String&gt; values)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" in\"</span>, values, field);</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值不in</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> values</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldNotIn</span><span class=\"params\">(String field, List&lt;String&gt; values)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" not in\"</span>, values, field);</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值介于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value1</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value2</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldBetween</span><span class=\"params\">(String field, String value1, String value2)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" between\"</span>, value1, value2, field);</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值不介于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value1</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value2</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldNotBetween</span><span class=\"params\">(String field, String value1, String value2)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" not between\"</span>, value1, value2, field);</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addCriterion</span><span class=\"params\">(String condition)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (condition == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Value for condition cannot be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        criteria.add(<span class=\"keyword\">new</span> Criterion(condition));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addCriterion</span><span class=\"params\">(String condition, Object value, String property)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Value for \"</span> + property + <span class=\"string\">\" cannot be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        criteria.add(<span class=\"keyword\">new</span> Criterion(condition, value));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addCriterion</span><span class=\"params\">(String condition, Object value1, Object value2, String property)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value1 == <span class=\"keyword\">null</span> || value2 == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Between values for \"</span> + property + <span class=\"string\">\" cannot be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        criteria.add(<span class=\"keyword\">new</span> Criterion(condition, value1, value2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Criterion&gt; <span class=\"title\">getCriteria</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> criteria;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCriteria</span><span class=\"params\">(List&lt;Criterion&gt; criteria)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.criteria = criteria;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldGreaterThanOrEqualTo</span><span class=\"params\">(String field, Integer value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &gt;= \"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldLessThanOrEqualTo</span><span class=\"params\">(String field, Integer value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &lt;= \"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>构造criteria条件</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">buildCriteria</span><span class=\"params\">(Member member)</span> </span>&#123;</div><div class=\"line\">    Criteria criteria = <span class=\"keyword\">new</span> Criteria();</div><div class=\"line\">    <span class=\"keyword\">if</span> (LocalStringUtils.isNotEmpty(member.getUserName())) &#123;</div><div class=\"line\">        criteria.andFieldEqualTo(<span class=\"string\">\"user_name\"</span>, member.getUserName());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (LocalStringUtils.isNotEmpty(member.getRealName())) &#123;</div><div class=\"line\">        criteria.andFieldLike(<span class=\"string\">\"real_name\"</span>, <span class=\"string\">\"%\"</span> + member.getRealName() + <span class=\"string\">\"%\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (member.getMinRankPoints() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        criteria.andFieldGreaterThan(<span class=\"string\">\"rank_points\"</span>, member.getMinRankPoints().toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (member.getRankId() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        criteria.andFieldEqualTo(<span class=\"string\">\"rank_id\"</span>, member.getRankId());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (member.getMaxRankPoints() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        criteria.andFieldLessThan(<span class=\"string\">\"rank_points\"</span>, member.getMaxRankPoints().toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (LocalStringUtils.isNotEmpty(member.getMemberSrc())) &#123;</div><div class=\"line\">        criteria.andFieldEqualTo(<span class=\"string\">\"member_src\"</span>, member.getMemberSrc());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> criteria;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>进行分页查询</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Member&gt; <span class=\"title\">queryAllCoupon</span><span class=\"params\">(Member member, PageParam pageParam)</span> </span>&#123;</div><div class=\"line\">        Page&lt;Member&gt; pageResult = queryPageListByCriteria(buildCriteria(member), pageParam);</div><div class=\"line\">        <span class=\"keyword\">return</span> pageResult;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * 根据Criteria方式查询结果集,包括传入分页参数</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> criteria</div><div class=\"line\">     * <span class=\"doctag\">@param</span> pageParam 若为Null的话，则不进行分页</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> &lt;E&gt; <span class=\"function\">List&lt;E&gt; <span class=\"title\">queryPageListByCriteria</span><span class=\"params\">(Criteria criteria, PageParam pageParam)</span> </span>&#123;</div><div class=\"line\">        Map&lt;String, Object&gt; filters = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</div><div class=\"line\">        <span class=\"keyword\">if</span> (criteria == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            criteria = createCriteria();</div><div class=\"line\">        &#125;</div><div class=\"line\">        filters.put(<span class=\"string\">\"criteria\"</span>, criteria);</div><div class=\"line\">        <span class=\"keyword\">if</span> (pageParam != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            filters.put(<span class=\"string\">\"pageFirst\"</span>, pageParam.getFirst());</div><div class=\"line\">            filters.put(<span class=\"string\">\"pageSize\"</span>, pageParam.getPageSize());</div><div class=\"line\">            <span class=\"keyword\">if</span> (LocalStringUtils.isNotEmpty(pageParam.getSortFieldName())) &#123;</div><div class=\"line\">                filters.put(<span class=\"string\">\"sortFieldName\"</span>, pageParam.getSortFieldName());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (LocalStringUtils.isNotEmpty(pageParam.getSortType())) &#123;</div><div class=\"line\">                filters.put(<span class=\"string\">\"sortType\"</span>, pageParam.getSortType());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        String queryStatement = getMyBatisMapperNamespace() + <span class=\"string\">\".queryListByCriteria\"</span>;</div><div class=\"line\">        Object results = getSqlSessionTemplate().selectList(queryStatement, filters);</div><div class=\"line\">        <span class=\"keyword\">return</span> (List&lt;E&gt;) results;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> \t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getMyBatisMapperNamespace</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getMapperClass().getName();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>Mybatis生成criteria的动态条件查询sql</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--根据Criteria方式查询数量--&gt;</div><div class=\"line\">    &lt;select id=\"countListByCriteria\" parameterType=\"map\" resultType=\"int\"&gt;</div><div class=\"line\">        select count(*) from t_b2c_suit</div><div class=\"line\">        &lt;include refid=\"criteria_filters\"/&gt;</div><div class=\"line\">    &lt;/select&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;!--criteria的动态条件--&gt;</div><div class=\"line\">    &lt;sql id=\"criteria_filters\"&gt;</div><div class=\"line\">        &lt;where&gt;</div><div class=\"line\">            &lt;if test=\"criteria.valid\"&gt;</div><div class=\"line\">                &lt;trim prefix=\"(\" suffix=\")\" prefixOverrides=\"and\"&gt;</div><div class=\"line\">                    &lt;foreach collection=\"criteria.criteria\" item=\"criterion\"&gt;</div><div class=\"line\">                        &lt;choose&gt;</div><div class=\"line\">                            &lt;when test=\"criterion.noValue\"&gt;</div><div class=\"line\">                                and $&#123;criterion.condition&#125;</div><div class=\"line\">                            &lt;/when&gt;</div><div class=\"line\">                            &lt;when test=\"criterion.singleValue\"&gt;</div><div class=\"line\">                                and $&#123;criterion.condition&#125; #&#123;criterion.value&#125;</div><div class=\"line\">                            &lt;/when&gt;</div><div class=\"line\">                            &lt;when test=\"criterion.betweenValue\"&gt;</div><div class=\"line\">                                and $&#123;criterion.condition&#125; #&#123;criterion.value&#125; and #&#123;criterion.secondValue&#125;</div><div class=\"line\">                            &lt;/when&gt;</div><div class=\"line\">                            &lt;when test=\"criterion.listValue\"&gt;</div><div class=\"line\">                                and $&#123;criterion.condition&#125;</div><div class=\"line\">                                &lt;foreach collection=\"criterion.value\" item=\"listItem\" open=\"(\" close=\")\"</div><div class=\"line\">                                         separator=\",\"&gt;</div><div class=\"line\">                                #&#123;listItem&#125;</div><div class=\"line\">                                &lt;/foreach&gt;</div><div class=\"line\">                            &lt;/when&gt;</div><div class=\"line\">                        &lt;/choose&gt;</div><div class=\"line\">                    &lt;/foreach&gt;</div><div class=\"line\">                &lt;/trim&gt;</div><div class=\"line\">            &lt;/if&gt;</div><div class=\"line\">        &lt;/where&gt;</div><div class=\"line\">    &lt;/sql&gt;</div></pre></td></tr></table></figure>\n","excerpt":"<p>本文是通过mybatis+criteria来简化多条件查询，在使用常规的mybatis时，我们经常碰到的问题就是条件式查询。在一个查询界面，查询条件较多，并且运算符并不总是=时，在后台就需要拼装sql语句。这种处理方式肯定不是使用mybatis的初衷，对于使用了hibernate的我来说，如果mybatis也有一套criteria查询就好了。在具体实现中，我们只需要按照hibernate的处理方式定义好相应的criteria，最后传递给mybatis，其自身处理相应的条件和参数信息，最终返回相应的数据即可。如下一个示例代码所示:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Criteria <span class=\"title\">buildCriteria</span><span class=\"params\">(Coupon coupon)</span> </span>&#123;</div><div class=\"line\">        Criteria criteria = <span class=\"keyword\">new</span> Criteria();</div><div class=\"line\">    \t<span class=\"comment\">//等于某个值</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(coupon.getCompanyId())) &#123;</div><div class=\"line\">            criteria.andFieldEqualTo(<span class=\"string\">\"company_id\"</span>, coupon.getCompanyId());</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//少于某个值</span></div><div class=\"line\">      \tcriteria.andFieldLessThan(<span class=\"string\">\"rank_points\"</span>, coupon.getMaxRankPoints().toString()</div><div class=\"line\">        <span class=\"keyword\">return</span> criteria;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如果使用这种方式，无疑会大大降低编写表单式查询的代码复杂度。同时，在内部处理中也不需要作任何判断，而直接将生成的sql交给mybatis去执行即可。当然，我们不希望生成的sql连我们自己都看不懂(想一想hibernate生成的sql),最终生成的sql像下面这样即可。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> company_id = #&#123;company_id&#125; <span class=\"keyword\">and</span> rank_points &lt;= #&#123;rank_points&#125;</div></pre></td></tr></table></figure>\n<p>这是标准的mybatis语句，在进行代码调试和处理时也方便进行查看并处理。那么整个处理逻辑即变成如何处理参数信息，分别处理 <strong>字段名</strong> <strong>运算符</strong> <strong>参数名 字段类型 参数映射</strong>即可。</p>","more":"<p></p>\n<p><strong>模拟hibernate的Criteria类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;pre&gt;</div><div class=\"line\"> * 模拟hibernate的Criteria类</div><div class=\"line\"> * &lt;/pre&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@version</span> 1.00</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Criteria</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//条件集合</span></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Criterion&gt; criteria;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Criteria</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        criteria = <span class=\"keyword\">new</span> ArrayList&lt;Criterion&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> criteria.size() &gt; <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 两表链接</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> condition</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldCondition</span><span class=\"params\">(String condition)</span> </span>&#123;</div><div class=\"line\">        addCriterion(condition);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段为空</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldIsNull</span><span class=\"params\">(String field)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" is null\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段不为空</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldIsNotNull</span><span class=\"params\">(String field)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" is not null\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段等于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldEqualTo</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" =\"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段不等于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldNotEqualTo</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" &lt;&gt;\"</span>, value, field);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值大于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldGreaterThan</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" &gt;\"</span>, value, field);</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值大于等于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldGreaterThanOrEqualTo</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &gt;=\"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andTimeFieldBetween</span><span class=\"params\">(String field, String beginTime, String endTime)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(beginTime)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &gt;= \"</span>, DateUtils.toStoreStr14(beginTime, <span class=\"keyword\">false</span>), field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(endTime)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &lt; \"</span>, DateUtils.toStoreStr14(endTime, <span class=\"keyword\">true</span>), field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andDateFieldBetween</span><span class=\"params\">(String field, String beginDate, String endDate)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(beginDate)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &gt;= \"</span>, beginDate, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(endDate)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &lt; \"</span>, endDate, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值小于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldLessThan</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &lt;\"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值小于等于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldLessThanOrEqualTo</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &lt;=\"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值like</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldLike</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" like\"</span>, <span class=\"string\">\"%\"</span> + value + <span class=\"string\">\"%\"</span>, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值不like</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldNotLike</span><span class=\"params\">(String field, String value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" not like\"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值in</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> values</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldIn</span><span class=\"params\">(String field, List&lt;String&gt; values)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" in\"</span>, values, field);</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值不in</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> values</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldNotIn</span><span class=\"params\">(String field, List&lt;String&gt; values)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" not in\"</span>, values, field);</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值介于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value1</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value2</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldBetween</span><span class=\"params\">(String field, String value1, String value2)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" between\"</span>, value1, value2, field);</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字段值不介于</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> field</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value1</div><div class=\"line\">     * <span class=\"doctag\">@param</span> value2</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldNotBetween</span><span class=\"params\">(String field, String value1, String value2)</span> </span>&#123;</div><div class=\"line\">        addCriterion(field + <span class=\"string\">\" not between\"</span>, value1, value2, field);</div><div class=\"line\">        <span class=\"keyword\">return</span> (Criteria) <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addCriterion</span><span class=\"params\">(String condition)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (condition == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Value for condition cannot be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        criteria.add(<span class=\"keyword\">new</span> Criterion(condition));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addCriterion</span><span class=\"params\">(String condition, Object value, String property)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Value for \"</span> + property + <span class=\"string\">\" cannot be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        criteria.add(<span class=\"keyword\">new</span> Criterion(condition, value));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addCriterion</span><span class=\"params\">(String condition, Object value1, Object value2, String property)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value1 == <span class=\"keyword\">null</span> || value2 == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Between values for \"</span> + property + <span class=\"string\">\" cannot be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        criteria.add(<span class=\"keyword\">new</span> Criterion(condition, value1, value2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Criterion&gt; <span class=\"title\">getCriteria</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> criteria;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCriteria</span><span class=\"params\">(List&lt;Criterion&gt; criteria)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.criteria = criteria;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldGreaterThanOrEqualTo</span><span class=\"params\">(String field, Integer value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &gt;= \"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">andFieldLessThanOrEqualTo</span><span class=\"params\">(String field, Integer value)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            addCriterion(field + <span class=\"string\">\" &lt;= \"</span>, value, field);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>构造criteria条件</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Criteria <span class=\"title\">buildCriteria</span><span class=\"params\">(Member member)</span> </span>&#123;</div><div class=\"line\">    Criteria criteria = <span class=\"keyword\">new</span> Criteria();</div><div class=\"line\">    <span class=\"keyword\">if</span> (LocalStringUtils.isNotEmpty(member.getUserName())) &#123;</div><div class=\"line\">        criteria.andFieldEqualTo(<span class=\"string\">\"user_name\"</span>, member.getUserName());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (LocalStringUtils.isNotEmpty(member.getRealName())) &#123;</div><div class=\"line\">        criteria.andFieldLike(<span class=\"string\">\"real_name\"</span>, <span class=\"string\">\"%\"</span> + member.getRealName() + <span class=\"string\">\"%\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (member.getMinRankPoints() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        criteria.andFieldGreaterThan(<span class=\"string\">\"rank_points\"</span>, member.getMinRankPoints().toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (member.getRankId() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        criteria.andFieldEqualTo(<span class=\"string\">\"rank_id\"</span>, member.getRankId());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (member.getMaxRankPoints() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        criteria.andFieldLessThan(<span class=\"string\">\"rank_points\"</span>, member.getMaxRankPoints().toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (LocalStringUtils.isNotEmpty(member.getMemberSrc())) &#123;</div><div class=\"line\">        criteria.andFieldEqualTo(<span class=\"string\">\"member_src\"</span>, member.getMemberSrc());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> criteria;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>进行分页查询</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Member&gt; <span class=\"title\">queryAllCoupon</span><span class=\"params\">(Member member, PageParam pageParam)</span> </span>&#123;</div><div class=\"line\">        Page&lt;Member&gt; pageResult = queryPageListByCriteria(buildCriteria(member), pageParam);</div><div class=\"line\">        <span class=\"keyword\">return</span> pageResult;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * 根据Criteria方式查询结果集,包括传入分页参数</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> criteria</div><div class=\"line\">     * <span class=\"doctag\">@param</span> pageParam 若为Null的话，则不进行分页</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> &lt;E&gt; <span class=\"function\">List&lt;E&gt; <span class=\"title\">queryPageListByCriteria</span><span class=\"params\">(Criteria criteria, PageParam pageParam)</span> </span>&#123;</div><div class=\"line\">        Map&lt;String, Object&gt; filters = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</div><div class=\"line\">        <span class=\"keyword\">if</span> (criteria == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            criteria = createCriteria();</div><div class=\"line\">        &#125;</div><div class=\"line\">        filters.put(<span class=\"string\">\"criteria\"</span>, criteria);</div><div class=\"line\">        <span class=\"keyword\">if</span> (pageParam != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            filters.put(<span class=\"string\">\"pageFirst\"</span>, pageParam.getFirst());</div><div class=\"line\">            filters.put(<span class=\"string\">\"pageSize\"</span>, pageParam.getPageSize());</div><div class=\"line\">            <span class=\"keyword\">if</span> (LocalStringUtils.isNotEmpty(pageParam.getSortFieldName())) &#123;</div><div class=\"line\">                filters.put(<span class=\"string\">\"sortFieldName\"</span>, pageParam.getSortFieldName());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (LocalStringUtils.isNotEmpty(pageParam.getSortType())) &#123;</div><div class=\"line\">                filters.put(<span class=\"string\">\"sortType\"</span>, pageParam.getSortType());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        String queryStatement = getMyBatisMapperNamespace() + <span class=\"string\">\".queryListByCriteria\"</span>;</div><div class=\"line\">        Object results = getSqlSessionTemplate().selectList(queryStatement, filters);</div><div class=\"line\">        <span class=\"keyword\">return</span> (List&lt;E&gt;) results;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> \t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getMyBatisMapperNamespace</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getMapperClass().getName();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>Mybatis生成criteria的动态条件查询sql</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--根据Criteria方式查询数量--&gt;</div><div class=\"line\">    &lt;select id=\"countListByCriteria\" parameterType=\"map\" resultType=\"int\"&gt;</div><div class=\"line\">        select count(*) from t_b2c_suit</div><div class=\"line\">        &lt;include refid=\"criteria_filters\"/&gt;</div><div class=\"line\">    &lt;/select&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;!--criteria的动态条件--&gt;</div><div class=\"line\">    &lt;sql id=\"criteria_filters\"&gt;</div><div class=\"line\">        &lt;where&gt;</div><div class=\"line\">            &lt;if test=\"criteria.valid\"&gt;</div><div class=\"line\">                &lt;trim prefix=\"(\" suffix=\")\" prefixOverrides=\"and\"&gt;</div><div class=\"line\">                    &lt;foreach collection=\"criteria.criteria\" item=\"criterion\"&gt;</div><div class=\"line\">                        &lt;choose&gt;</div><div class=\"line\">                            &lt;when test=\"criterion.noValue\"&gt;</div><div class=\"line\">                                and $&#123;criterion.condition&#125;</div><div class=\"line\">                            &lt;/when&gt;</div><div class=\"line\">                            &lt;when test=\"criterion.singleValue\"&gt;</div><div class=\"line\">                                and $&#123;criterion.condition&#125; #&#123;criterion.value&#125;</div><div class=\"line\">                            &lt;/when&gt;</div><div class=\"line\">                            &lt;when test=\"criterion.betweenValue\"&gt;</div><div class=\"line\">                                and $&#123;criterion.condition&#125; #&#123;criterion.value&#125; and #&#123;criterion.secondValue&#125;</div><div class=\"line\">                            &lt;/when&gt;</div><div class=\"line\">                            &lt;when test=\"criterion.listValue\"&gt;</div><div class=\"line\">                                and $&#123;criterion.condition&#125;</div><div class=\"line\">                                &lt;foreach collection=\"criterion.value\" item=\"listItem\" open=\"(\" close=\")\"</div><div class=\"line\">                                         separator=\",\"&gt;</div><div class=\"line\">                                #&#123;listItem&#125;</div><div class=\"line\">                                &lt;/foreach&gt;</div><div class=\"line\">                            &lt;/when&gt;</div><div class=\"line\">                        &lt;/choose&gt;</div><div class=\"line\">                    &lt;/foreach&gt;</div><div class=\"line\">                &lt;/trim&gt;</div><div class=\"line\">            &lt;/if&gt;</div><div class=\"line\">        &lt;/where&gt;</div><div class=\"line\">    &lt;/sql&gt;</div></pre></td></tr></table></figure>"},{"title":"系统学习Spring（一）","date":"2017-05-09T08:57:59.000Z","_content":"对于Java开发者来说，这是一个好的时代。<!--more-->\n\n在过去的20年中，Java经历了好的时候，也经历了坏的时候。尽管有一些粗糙的地方，比如：Applets、 \nEJB、JDO和无数的日志框架，Java有丰富多样的历史，有很多企业已经建立的平台。其中，spring一直 \n都是其中最重要的组成部分。\n\n在早期，Spring被创建用于替代笨重的Java企业技术，比如EJB。相比于EJB，Spring提供了一个更加精 \n简的编程模型。它提供了简单Java对象（POJO）更大的权力，相对于EJB及其他Java企业规范。\n\n随着时间的推移，EJB及Java企业规范2.0版本本身也提供了一个简单的POJO模型。现在，EJB的一些概 \n念，如DI和AOP都来自于Spring。\n\n尽管现在J2EE（即总所周知的JEE）能够赶上Spring，但是Spring从未停止演进。即使是现在，Spring开始进步的时候， \nJ2EE都是开始在探索，而不是创新。移动开发、社交API的集成、NoSql数据库、云计算和大数据，仅仅是Spring创新 \n的一些方面。而且未来，Spring会继续发展。\n\n就像我说的，对于Java程序员来说，这是一个好的时代。 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n**摘自《Spring实战》**\n\n顾名思义，Spring就是为了简化我们Java开发而来的，而Spring主要还是围绕着两个点：一个DI（依赖注入），一个AOP（面向切面），或者说IOC（控制反转）和AOP（面向切面）。\n\n>IOC主要的实现方式有两种：依赖查找，依赖注入\n依赖注入是一种更可取的方式\n\n<h2>依赖注入——Injecting Dependencies</h2>\n刚接触时，DI这个词刚听起来觉得是害怕的，它可能是相当复杂的编程技术或者设计模式。但事实证明，DI一点都不像 ，它听起来那么难。通过在应用中使用DI，你会发现你的应用程序变淡简单、容易理解并且易于测试。\n那么DI是怎么工作的呢？一个正常的应用程序都是有两个或者更多个相互协作的类组合起来的。传统上，每个对象都会保存它所以来的对象的引用。这个会导致高度耦合并且难于测试。\n\n例如：\n```\npackage knights;\n\npublic class DamselRescuingKnight implements Knight{\n    private RescueDamselQuest quest;\n\n    public DamselRescuingKnight(){\n        this.quest = new RescueDamselQuest();\n    }\n    public void embarkOnQuest(){\n        quest.embark();\n    }\n}\n```\n如上所示，骑士创建了一个少女需要营救的请求（RescueDamselQuest）在它自己的构造函数中。这个会使骑士与少女请求绑定到一起，这严重限制了骑士的能力。如果一个少女需要营救，那没有问题。但是如果一头巨龙需要被杀死，那么骑士什么都做不了，只能坐在旁边观看。\n\n所以耦合是一个特别难以拓展的问题，一方面，耦合的代码难于测试、难于重用、难以理解并且他经常导致“打地鼠”的Bug行为（一种修改一个Bug通常会引起其他新的一个甚至更多的新bug的行为）。另一方面，一定数量的耦合代码是必须的，完全不耦合的代码将什么事情都不做。为了去做一些有用的事情，类需要知道彼此。耦合是必须的，但是必须被小心的管理。\n\n因此使用DI，对象在创建的时候被一些确定系统对象坐标的第三方去给予出其依赖，对象不需要去创建或者获取其依赖，像下图描述的那样，依赖被注入进了需要他们的对象。\n\n所以针对上面的问题，我们修改了代码：\n```\n//一个灵活的骑士\n\npackage knights;\n\npublic class BraveKnight implements Knight {\n    private Quest quest;\n\n    public BraveKnight(Quest quest) {\n        this.quest = quest;\n    }\n\n    @Override\n    public void embarkOnQuest() {\n        quest.embark();\n    }\n}\n```\n就像在上面看到的一样，BraveKnight不像DamselRescuingKnight 一样创建自己的Quest，而是在构造函数的参数中传入Quest，这样的DI就是著名的构造函数注入（Constructor injection）。\n\n更重要的是，那个Quest只是一个接口，所有实现该接口的实现都可以传入。所以BraveKnight可以处理不同的 需求。\n\n关键点就是BraveKnight没有跟任何特定的Quest进行绑定。它不在乎是什么样的请求，只要该请求实现了Quest接口就可以。这个就是DI的好处–松耦合。如果一个对象的依赖只是一个接口，那么你可以将他的实 现从一个换成另外一个。\n\n既然你BraveKnight对象可以处理任何你想传递给他的Quest对象，假设你想传递一个杀死巨龙的Quest，那么 你可以传递一个SlayDragonQuest给他是合适的。\n```\npublic class SlayDragonQuest implements Quest {\n    private PrintStream stream;\n\n    public SlayDragonQuest(PrintStream stream) {\n        this.stream = stream;\n    }\n\n    @Override\n    public void embark() {\n        stream.println(\"Embarking on quest to slay the dragon\");\n    }\n}\n```\n\n就像你所看到的一样，SlayDragonQuest实现了Quest接口，使得它适合BraveKnight。\n\n应用组件之间创建关联的行为通常称为布线或者装配（wiring）。在Spring中，组件之间的装配方式有很多种，但是一个通常的方式是使用XML。接下来的清单展示了一个简单的Spring配置文件–knights.xml，它将一个SlayDragonQuest、BraveKnight和一个PrintStream装配起来。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"knight\" class=\"com.springinaction.knights.BraveKnight\">\n        <!--quest注入quest的Bean-->\n        <constructor-arg ref=\"quest\"/>\n    </bean>\n    <!--创建Quest-->\n    <bean id=\"quest\" class=\"com.springinaction.knights.SlayDragonQuest\">\n        <constructor-arg value=\"#{$(System).out}\"/>\n    </bean>\n</beans>\n```\n\n这里，BraveKnight和SlayDragonQuest被声明为Bean，在BraveKnight Bean中，通过传递一个Quest的引用作为构造函数的参数。同时，SlayDragonQuest使用Spring表达式语言传递一个System.out的构造函数参数给SlayDragonQuest对象。如果XML配置文件不适合你的口味，你可以使用Java方式进行配置。如下：\n```\n@Configuration\npublic class KnightConfig {\n    @Bean\n    public Knight knight() {\n        return new BraveKnight(quest());\n    }\n\n    @Bean\n    public Quest quest() {\n        return new SlayDragonQuest(System.out);\n    }\n}\n```\n\n不管使用xml还是java，依赖注入的好处都是一样的。尽管BraveKnight依赖Quest，但是它不需要知道具体是什么Quest，同样的SlayDragonQuest也不需要知道具体的PrintStream类型。在Spring中，仅仅通过配置使得所有的片段组装在一起。这个就使得可以去改变他们之间的依赖关系而不需要去修改类的实现。\n\n<h2>AOP——Aspect-OrientedProgramming</h2>\n虽然DI可以使得你的应用程序组件之间是松耦合的，但是AOP可以使得你可以在你应用程序中去捕获Bean的功能。\n\nAOP通常被定义为分离软件关注点的一种技术。系统通常由一些具有特定功能的组件组成。但是，通常这些组件也附带一些除了核心功能之外的一些功能。系统服务，如日志记录、事务管理和安全性，通常会在每个组件中都是需要的。这些系统服务通常被称为横切关注点（cross-cutting concerns），因为他们会在系统中切割多个组件。\n\n通过传递这些横切关注点，你会提供你应用程序的复杂性：\n\n<li>代码重复。这就意味着你如果修改其中一个功能，你修改需要许多的组件。即使你把关注点抽象为一个单独的模块，这样对你组件的影响是一个单一的方法，该方法调用也会在多个地方重复。\n<li>你的组件中充斥这与它核心功能不一致的代码。如添加一个条目到一个地址簿中，我们应该只关心如何添加地址，而不是关心是否安全或者是否具有事务一致性。\n\nAOP可以模块化这些服务，并且通过声明式的方式应用这些服务，这将导致组件更加具有凝聚力，并且组件专注于自己特定的功能，对可能涉及的系统服务完全不知情。简单来说，就是让POJO始终保持扁平。\n\n下面一个例子来演示分离核心功能与系统服务：\n```\npublic class Minstrel {\n    private PrintStream stream;\n\n    public Minstrel(PrintStream stream) {\n        this.stream = stream;\n    }\n\n    //called before quest\n    public void singleBeforeQuest() {\n        stream.println(\"Fa la la, the knight is so brave\");\n    }\n\n    //called after quest\n    public void singleAfterQuest() {\n        stream.println(\"Tee hee hee, the brave knight did embark on a quest\");\n    }\n}\n```\n\n就像你看到的一样，Minstrel是一个包含两个方法的简单对象，这是简单的，将这个注入进我们之前的代码，如下所示：\n```\npublic class BraveKnight implements Knight {\n    private Quest quest;\n    private Minstrel minstrel;\n\n    public BraveKnight(Quest quest, Minstrel minstrel) {\n        this.quest = quest;\n        this.minstrel = minstrel;\n    }\n\n    public void embarkOnQuest() {\n        minstrel.singleBeforeQuest();\n        quest.embark();\n        minstrel.singleAfterQuest();\n    }\n}\n```\n\n现在，你需要做的就是在Spring的配置文件中加入Ministrel的构造函数参数。但是，等等….\n\n好像看起来不对，这个真的是骑士本身关注的吗？骑士应该不必要做这个工作。毕竟，这是一个歌手的工作，歌颂骑士的努力，为什么其实一直在提醒歌手呢？\n\n另外，由于骑士必须知道歌手，你被迫传递歌手给骑士，这个不仅使骑士的代码复杂，而且让我很困惑，当我需要一个骑士而没有一个歌手的时候，如果Ministrel为null，在代码中还得进行非空判断，简单的BraveKnight代码开始变得复杂。但是使用AOP，你可以宣布歌手必须歌唱骑士的任务，并且，释放骑士，直接处理歌手的方法。\n\n在Spring配置文件中，你需要做的就是将歌手声明为一个切面。如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/aop\n       http://www.springframework.org/schema/aop/spring-aop.xsd\">\n    <bean id=\"knight\" class=\"com.springinaction.knights.BraveKnight\">\n        <!--quest注入quest的Bean-->\n        <constructor-arg ref=\"quest\"/>\n    </bean>\n    <!--创建Quest-->\n    <bean id=\"quest\" class=\"com.springinaction.knights.SlayDragonQuest\">\n        <constructor-arg value=\"#{T(System).out}\"/>\n    </bean>\n\n    <!--定义歌手的Bean-->\n    <bean id=\"ministrel\" class=\"com.springinaction.knights.Minstrel\">\n        <constructor-arg value=\"#{T(System).out}\"/>\n    </bean>\n\n    <aop:config>\n        <aop:aspect ref=\"ministrel\">\n            <!--定义切点-->\n            <aop:pointcut id=\"embark\" expression=\"execution(* *.embarkOnQuest(..))\"/>\n            <!--定义前置通知-->\n            <aop:before pointcut-ref=\"embark\" method=\"singleBeforeQuest\"/>\n            <!--定义后置通知-->\n            <aop:after method=\"singleAfterQuest\" pointcut-ref=\"embark\"/>\n        </aop:aspect>\n    </aop:config>\n</beans>\n```\n\n使用Spring的AOP配置一个Ministrel作为切面，在切面里面，定义一个切点，然后定义前置通知（before advice）和后置通知（after advice）。在两个例子中，pointcut-ref属性都使用了一个embark的引用，这个切点是通过pointcut元素定义的，它表明通知应该应用在什么地方，表达式的语法遵循AspectJ的切点表达式语法。\n\n首先，Ministrel始终是一个POJO，没有任何说明他是用来作为切面的。作为一个切面是通过Spring配置文件实现的。其次，也是最重要的，Ministrel可以应用到BraveKnight而不需要BraveKnight直接调用它，实际上，BraveKnight根本不知道Ministrel的存在。\n\n需要指出的是，你可以使用Spring的魔法使得Ministrel作为一个切面，但是Ministrel必须首先是一个Spring的Bean，关键的就是你可以使用任何Spring Bean作为切面，而且可以将其注入其他的Bean中。\n\n**这些基础的理论都是从《Spring实战第四版》一书中记录下来的，以后的学习中，将会掺杂以自己视角来写。**\n\n**ps:其实之前有写过Spring的一些理解，但是开发过程中还是发现很多细节都不理解不明白，因为之前Spring的学习都是基于开发过程中边做边学，所以决定从头开始系统的学习。**\n\n\n\n\n\n\n\n","source":"_posts/Spring初探（一）.md","raw":"---\ntitle: 系统学习Spring（一）\ndate: 2017-05-09 16:57:59\ncategories: Java二三事\ntags:\n\t- Spring\n\t- 框架\n---\n对于Java开发者来说，这是一个好的时代。<!--more-->\n\n在过去的20年中，Java经历了好的时候，也经历了坏的时候。尽管有一些粗糙的地方，比如：Applets、 \nEJB、JDO和无数的日志框架，Java有丰富多样的历史，有很多企业已经建立的平台。其中，spring一直 \n都是其中最重要的组成部分。\n\n在早期，Spring被创建用于替代笨重的Java企业技术，比如EJB。相比于EJB，Spring提供了一个更加精 \n简的编程模型。它提供了简单Java对象（POJO）更大的权力，相对于EJB及其他Java企业规范。\n\n随着时间的推移，EJB及Java企业规范2.0版本本身也提供了一个简单的POJO模型。现在，EJB的一些概 \n念，如DI和AOP都来自于Spring。\n\n尽管现在J2EE（即总所周知的JEE）能够赶上Spring，但是Spring从未停止演进。即使是现在，Spring开始进步的时候， \nJ2EE都是开始在探索，而不是创新。移动开发、社交API的集成、NoSql数据库、云计算和大数据，仅仅是Spring创新 \n的一些方面。而且未来，Spring会继续发展。\n\n就像我说的，对于Java程序员来说，这是一个好的时代。 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n**摘自《Spring实战》**\n\n顾名思义，Spring就是为了简化我们Java开发而来的，而Spring主要还是围绕着两个点：一个DI（依赖注入），一个AOP（面向切面），或者说IOC（控制反转）和AOP（面向切面）。\n\n>IOC主要的实现方式有两种：依赖查找，依赖注入\n依赖注入是一种更可取的方式\n\n<h2>依赖注入——Injecting Dependencies</h2>\n刚接触时，DI这个词刚听起来觉得是害怕的，它可能是相当复杂的编程技术或者设计模式。但事实证明，DI一点都不像 ，它听起来那么难。通过在应用中使用DI，你会发现你的应用程序变淡简单、容易理解并且易于测试。\n那么DI是怎么工作的呢？一个正常的应用程序都是有两个或者更多个相互协作的类组合起来的。传统上，每个对象都会保存它所以来的对象的引用。这个会导致高度耦合并且难于测试。\n\n例如：\n```\npackage knights;\n\npublic class DamselRescuingKnight implements Knight{\n    private RescueDamselQuest quest;\n\n    public DamselRescuingKnight(){\n        this.quest = new RescueDamselQuest();\n    }\n    public void embarkOnQuest(){\n        quest.embark();\n    }\n}\n```\n如上所示，骑士创建了一个少女需要营救的请求（RescueDamselQuest）在它自己的构造函数中。这个会使骑士与少女请求绑定到一起，这严重限制了骑士的能力。如果一个少女需要营救，那没有问题。但是如果一头巨龙需要被杀死，那么骑士什么都做不了，只能坐在旁边观看。\n\n所以耦合是一个特别难以拓展的问题，一方面，耦合的代码难于测试、难于重用、难以理解并且他经常导致“打地鼠”的Bug行为（一种修改一个Bug通常会引起其他新的一个甚至更多的新bug的行为）。另一方面，一定数量的耦合代码是必须的，完全不耦合的代码将什么事情都不做。为了去做一些有用的事情，类需要知道彼此。耦合是必须的，但是必须被小心的管理。\n\n因此使用DI，对象在创建的时候被一些确定系统对象坐标的第三方去给予出其依赖，对象不需要去创建或者获取其依赖，像下图描述的那样，依赖被注入进了需要他们的对象。\n\n所以针对上面的问题，我们修改了代码：\n```\n//一个灵活的骑士\n\npackage knights;\n\npublic class BraveKnight implements Knight {\n    private Quest quest;\n\n    public BraveKnight(Quest quest) {\n        this.quest = quest;\n    }\n\n    @Override\n    public void embarkOnQuest() {\n        quest.embark();\n    }\n}\n```\n就像在上面看到的一样，BraveKnight不像DamselRescuingKnight 一样创建自己的Quest，而是在构造函数的参数中传入Quest，这样的DI就是著名的构造函数注入（Constructor injection）。\n\n更重要的是，那个Quest只是一个接口，所有实现该接口的实现都可以传入。所以BraveKnight可以处理不同的 需求。\n\n关键点就是BraveKnight没有跟任何特定的Quest进行绑定。它不在乎是什么样的请求，只要该请求实现了Quest接口就可以。这个就是DI的好处–松耦合。如果一个对象的依赖只是一个接口，那么你可以将他的实 现从一个换成另外一个。\n\n既然你BraveKnight对象可以处理任何你想传递给他的Quest对象，假设你想传递一个杀死巨龙的Quest，那么 你可以传递一个SlayDragonQuest给他是合适的。\n```\npublic class SlayDragonQuest implements Quest {\n    private PrintStream stream;\n\n    public SlayDragonQuest(PrintStream stream) {\n        this.stream = stream;\n    }\n\n    @Override\n    public void embark() {\n        stream.println(\"Embarking on quest to slay the dragon\");\n    }\n}\n```\n\n就像你所看到的一样，SlayDragonQuest实现了Quest接口，使得它适合BraveKnight。\n\n应用组件之间创建关联的行为通常称为布线或者装配（wiring）。在Spring中，组件之间的装配方式有很多种，但是一个通常的方式是使用XML。接下来的清单展示了一个简单的Spring配置文件–knights.xml，它将一个SlayDragonQuest、BraveKnight和一个PrintStream装配起来。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"knight\" class=\"com.springinaction.knights.BraveKnight\">\n        <!--quest注入quest的Bean-->\n        <constructor-arg ref=\"quest\"/>\n    </bean>\n    <!--创建Quest-->\n    <bean id=\"quest\" class=\"com.springinaction.knights.SlayDragonQuest\">\n        <constructor-arg value=\"#{$(System).out}\"/>\n    </bean>\n</beans>\n```\n\n这里，BraveKnight和SlayDragonQuest被声明为Bean，在BraveKnight Bean中，通过传递一个Quest的引用作为构造函数的参数。同时，SlayDragonQuest使用Spring表达式语言传递一个System.out的构造函数参数给SlayDragonQuest对象。如果XML配置文件不适合你的口味，你可以使用Java方式进行配置。如下：\n```\n@Configuration\npublic class KnightConfig {\n    @Bean\n    public Knight knight() {\n        return new BraveKnight(quest());\n    }\n\n    @Bean\n    public Quest quest() {\n        return new SlayDragonQuest(System.out);\n    }\n}\n```\n\n不管使用xml还是java，依赖注入的好处都是一样的。尽管BraveKnight依赖Quest，但是它不需要知道具体是什么Quest，同样的SlayDragonQuest也不需要知道具体的PrintStream类型。在Spring中，仅仅通过配置使得所有的片段组装在一起。这个就使得可以去改变他们之间的依赖关系而不需要去修改类的实现。\n\n<h2>AOP——Aspect-OrientedProgramming</h2>\n虽然DI可以使得你的应用程序组件之间是松耦合的，但是AOP可以使得你可以在你应用程序中去捕获Bean的功能。\n\nAOP通常被定义为分离软件关注点的一种技术。系统通常由一些具有特定功能的组件组成。但是，通常这些组件也附带一些除了核心功能之外的一些功能。系统服务，如日志记录、事务管理和安全性，通常会在每个组件中都是需要的。这些系统服务通常被称为横切关注点（cross-cutting concerns），因为他们会在系统中切割多个组件。\n\n通过传递这些横切关注点，你会提供你应用程序的复杂性：\n\n<li>代码重复。这就意味着你如果修改其中一个功能，你修改需要许多的组件。即使你把关注点抽象为一个单独的模块，这样对你组件的影响是一个单一的方法，该方法调用也会在多个地方重复。\n<li>你的组件中充斥这与它核心功能不一致的代码。如添加一个条目到一个地址簿中，我们应该只关心如何添加地址，而不是关心是否安全或者是否具有事务一致性。\n\nAOP可以模块化这些服务，并且通过声明式的方式应用这些服务，这将导致组件更加具有凝聚力，并且组件专注于自己特定的功能，对可能涉及的系统服务完全不知情。简单来说，就是让POJO始终保持扁平。\n\n下面一个例子来演示分离核心功能与系统服务：\n```\npublic class Minstrel {\n    private PrintStream stream;\n\n    public Minstrel(PrintStream stream) {\n        this.stream = stream;\n    }\n\n    //called before quest\n    public void singleBeforeQuest() {\n        stream.println(\"Fa la la, the knight is so brave\");\n    }\n\n    //called after quest\n    public void singleAfterQuest() {\n        stream.println(\"Tee hee hee, the brave knight did embark on a quest\");\n    }\n}\n```\n\n就像你看到的一样，Minstrel是一个包含两个方法的简单对象，这是简单的，将这个注入进我们之前的代码，如下所示：\n```\npublic class BraveKnight implements Knight {\n    private Quest quest;\n    private Minstrel minstrel;\n\n    public BraveKnight(Quest quest, Minstrel minstrel) {\n        this.quest = quest;\n        this.minstrel = minstrel;\n    }\n\n    public void embarkOnQuest() {\n        minstrel.singleBeforeQuest();\n        quest.embark();\n        minstrel.singleAfterQuest();\n    }\n}\n```\n\n现在，你需要做的就是在Spring的配置文件中加入Ministrel的构造函数参数。但是，等等….\n\n好像看起来不对，这个真的是骑士本身关注的吗？骑士应该不必要做这个工作。毕竟，这是一个歌手的工作，歌颂骑士的努力，为什么其实一直在提醒歌手呢？\n\n另外，由于骑士必须知道歌手，你被迫传递歌手给骑士，这个不仅使骑士的代码复杂，而且让我很困惑，当我需要一个骑士而没有一个歌手的时候，如果Ministrel为null，在代码中还得进行非空判断，简单的BraveKnight代码开始变得复杂。但是使用AOP，你可以宣布歌手必须歌唱骑士的任务，并且，释放骑士，直接处理歌手的方法。\n\n在Spring配置文件中，你需要做的就是将歌手声明为一个切面。如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/aop\n       http://www.springframework.org/schema/aop/spring-aop.xsd\">\n    <bean id=\"knight\" class=\"com.springinaction.knights.BraveKnight\">\n        <!--quest注入quest的Bean-->\n        <constructor-arg ref=\"quest\"/>\n    </bean>\n    <!--创建Quest-->\n    <bean id=\"quest\" class=\"com.springinaction.knights.SlayDragonQuest\">\n        <constructor-arg value=\"#{T(System).out}\"/>\n    </bean>\n\n    <!--定义歌手的Bean-->\n    <bean id=\"ministrel\" class=\"com.springinaction.knights.Minstrel\">\n        <constructor-arg value=\"#{T(System).out}\"/>\n    </bean>\n\n    <aop:config>\n        <aop:aspect ref=\"ministrel\">\n            <!--定义切点-->\n            <aop:pointcut id=\"embark\" expression=\"execution(* *.embarkOnQuest(..))\"/>\n            <!--定义前置通知-->\n            <aop:before pointcut-ref=\"embark\" method=\"singleBeforeQuest\"/>\n            <!--定义后置通知-->\n            <aop:after method=\"singleAfterQuest\" pointcut-ref=\"embark\"/>\n        </aop:aspect>\n    </aop:config>\n</beans>\n```\n\n使用Spring的AOP配置一个Ministrel作为切面，在切面里面，定义一个切点，然后定义前置通知（before advice）和后置通知（after advice）。在两个例子中，pointcut-ref属性都使用了一个embark的引用，这个切点是通过pointcut元素定义的，它表明通知应该应用在什么地方，表达式的语法遵循AspectJ的切点表达式语法。\n\n首先，Ministrel始终是一个POJO，没有任何说明他是用来作为切面的。作为一个切面是通过Spring配置文件实现的。其次，也是最重要的，Ministrel可以应用到BraveKnight而不需要BraveKnight直接调用它，实际上，BraveKnight根本不知道Ministrel的存在。\n\n需要指出的是，你可以使用Spring的魔法使得Ministrel作为一个切面，但是Ministrel必须首先是一个Spring的Bean，关键的就是你可以使用任何Spring Bean作为切面，而且可以将其注入其他的Bean中。\n\n**这些基础的理论都是从《Spring实战第四版》一书中记录下来的，以后的学习中，将会掺杂以自己视角来写。**\n\n**ps:其实之前有写过Spring的一些理解，但是开发过程中还是发现很多细节都不理解不明白，因为之前Spring的学习都是基于开发过程中边做边学，所以决定从头开始系统的学习。**\n\n\n\n\n\n\n\n","slug":"Spring初探（一）","published":1,"updated":"2017-05-09T09:08:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kfg0026rhsomjoel2lr","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>对于Java开发者来说，这是一个好的时代。<a id=\"more\"></a></p>\n<p>在过去的20年中，Java经历了好的时候，也经历了坏的时候。尽管有一些粗糙的地方，比如：Applets、<br>EJB、JDO和无数的日志框架，Java有丰富多样的历史，有很多企业已经建立的平台。其中，spring一直<br>都是其中最重要的组成部分。</p>\n<p>在早期，Spring被创建用于替代笨重的Java企业技术，比如EJB。相比于EJB，Spring提供了一个更加精<br>简的编程模型。它提供了简单Java对象（POJO）更大的权力，相对于EJB及其他Java企业规范。</p>\n<p>随着时间的推移，EJB及Java企业规范2.0版本本身也提供了一个简单的POJO模型。现在，EJB的一些概<br>念，如DI和AOP都来自于Spring。</p>\n<p>尽管现在J2EE（即总所周知的JEE）能够赶上Spring，但是Spring从未停止演进。即使是现在，Spring开始进步的时候，<br>J2EE都是开始在探索，而不是创新。移动开发、社交API的集成、NoSql数据库、云计算和大数据，仅仅是Spring创新<br>的一些方面。而且未来，Spring会继续发展。</p>\n<p>就像我说的，对于Java程序员来说，这是一个好的时代。 </p>\n<p><strong>摘自《Spring实战》</strong></p>\n<p>顾名思义，Spring就是为了简化我们Java开发而来的，而Spring主要还是围绕着两个点：一个DI（依赖注入），一个AOP（面向切面），或者说IOC（控制反转）和AOP（面向切面）。</p>\n<blockquote>\n<p>IOC主要的实现方式有两种：依赖查找，依赖注入<br>依赖注入是一种更可取的方式</p>\n</blockquote>\n<p></p><h2>依赖注入——Injecting Dependencies</h2><br>刚接触时，DI这个词刚听起来觉得是害怕的，它可能是相当复杂的编程技术或者设计模式。但事实证明，DI一点都不像 ，它听起来那么难。通过在应用中使用DI，你会发现你的应用程序变淡简单、容易理解并且易于测试。<br>那么DI是怎么工作的呢？一个正常的应用程序都是有两个或者更多个相互协作的类组合起来的。传统上，每个对象都会保存它所以来的对象的引用。这个会导致高度耦合并且难于测试。<p></p>\n<p>例如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> knights;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DamselRescuingKnight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Knight</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> RescueDamselQuest quest;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DamselRescuingKnight</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.quest = <span class=\"keyword\">new</span> RescueDamselQuest();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">embarkOnQuest</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        quest.embark();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如上所示，骑士创建了一个少女需要营救的请求（RescueDamselQuest）在它自己的构造函数中。这个会使骑士与少女请求绑定到一起，这严重限制了骑士的能力。如果一个少女需要营救，那没有问题。但是如果一头巨龙需要被杀死，那么骑士什么都做不了，只能坐在旁边观看。</p>\n<p>所以耦合是一个特别难以拓展的问题，一方面，耦合的代码难于测试、难于重用、难以理解并且他经常导致“打地鼠”的Bug行为（一种修改一个Bug通常会引起其他新的一个甚至更多的新bug的行为）。另一方面，一定数量的耦合代码是必须的，完全不耦合的代码将什么事情都不做。为了去做一些有用的事情，类需要知道彼此。耦合是必须的，但是必须被小心的管理。</p>\n<p>因此使用DI，对象在创建的时候被一些确定系统对象坐标的第三方去给予出其依赖，对象不需要去创建或者获取其依赖，像下图描述的那样，依赖被注入进了需要他们的对象。</p>\n<p>所以针对上面的问题，我们修改了代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一个灵活的骑士</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> knights;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BraveKnight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Knight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Quest quest;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BraveKnight</span><span class=\"params\">(Quest quest)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.quest = quest;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">embarkOnQuest</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        quest.embark();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>就像在上面看到的一样，BraveKnight不像DamselRescuingKnight 一样创建自己的Quest，而是在构造函数的参数中传入Quest，这样的DI就是著名的构造函数注入（Constructor injection）。</p>\n<p>更重要的是，那个Quest只是一个接口，所有实现该接口的实现都可以传入。所以BraveKnight可以处理不同的 需求。</p>\n<p>关键点就是BraveKnight没有跟任何特定的Quest进行绑定。它不在乎是什么样的请求，只要该请求实现了Quest接口就可以。这个就是DI的好处–松耦合。如果一个对象的依赖只是一个接口，那么你可以将他的实 现从一个换成另外一个。</p>\n<p>既然你BraveKnight对象可以处理任何你想传递给他的Quest对象，假设你想传递一个杀死巨龙的Quest，那么 你可以传递一个SlayDragonQuest给他是合适的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SlayDragonQuest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Quest</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> PrintStream stream;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SlayDragonQuest</span><span class=\"params\">(PrintStream stream)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.stream = stream;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">embark</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        stream.println(<span class=\"string\">\"Embarking on quest to slay the dragon\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>就像你所看到的一样，SlayDragonQuest实现了Quest接口，使得它适合BraveKnight。</p>\n<p>应用组件之间创建关联的行为通常称为布线或者装配（wiring）。在Spring中，组件之间的装配方式有很多种，但是一个通常的方式是使用XML。接下来的清单展示了一个简单的Spring配置文件–knights.xml，它将一个SlayDragonQuest、BraveKnight和一个PrintStream装配起来。</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"knight\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.springinaction.knights.BraveKnight\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--quest注入quest的Bean--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"quest\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--创建Quest--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"quest\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.springinaction.knights.SlayDragonQuest\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"#</span></span><span class=\"template-variable\">&#123;$(System).out&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>/&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这里，BraveKnight和SlayDragonQuest被声明为Bean，在BraveKnight Bean中，通过传递一个Quest的引用作为构造函数的参数。同时，SlayDragonQuest使用Spring表达式语言传递一个System.out的构造函数参数给SlayDragonQuest对象。如果XML配置文件不适合你的口味，你可以使用Java方式进行配置。如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KnightConfig</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Knight <span class=\"title\">knight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BraveKnight(quest());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Quest <span class=\"title\">quest</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SlayDragonQuest(System.out);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不管使用xml还是java，依赖注入的好处都是一样的。尽管BraveKnight依赖Quest，但是它不需要知道具体是什么Quest，同样的SlayDragonQuest也不需要知道具体的PrintStream类型。在Spring中，仅仅通过配置使得所有的片段组装在一起。这个就使得可以去改变他们之间的依赖关系而不需要去修改类的实现。</p>\n<p></p><h2>AOP——Aspect-OrientedProgramming</h2><br>虽然DI可以使得你的应用程序组件之间是松耦合的，但是AOP可以使得你可以在你应用程序中去捕获Bean的功能。<p></p>\n<p>AOP通常被定义为分离软件关注点的一种技术。系统通常由一些具有特定功能的组件组成。但是，通常这些组件也附带一些除了核心功能之外的一些功能。系统服务，如日志记录、事务管理和安全性，通常会在每个组件中都是需要的。这些系统服务通常被称为横切关注点（cross-cutting concerns），因为他们会在系统中切割多个组件。</p>\n<p>通过传递这些横切关注点，你会提供你应用程序的复杂性：</p>\n<p><li>代码重复。这就意味着你如果修改其中一个功能，你修改需要许多的组件。即使你把关注点抽象为一个单独的模块，这样对你组件的影响是一个单一的方法，该方法调用也会在多个地方重复。</li></p>\n<p><li>你的组件中充斥这与它核心功能不一致的代码。如添加一个条目到一个地址簿中，我们应该只关心如何添加地址，而不是关心是否安全或者是否具有事务一致性。</li></p>\n<p>AOP可以模块化这些服务，并且通过声明式的方式应用这些服务，这将导致组件更加具有凝聚力，并且组件专注于自己特定的功能，对可能涉及的系统服务完全不知情。简单来说，就是让POJO始终保持扁平。</p>\n<p>下面一个例子来演示分离核心功能与系统服务：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Minstrel</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> PrintStream stream;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Minstrel</span>(<span class=\"params\">PrintStream stream</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.stream = stream;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//called before quest</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">singleBeforeQuest</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        stream.println(<span class=\"string\">\"Fa la la, the knight is so brave\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//called after quest</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">singleAfterQuest</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        stream.println(<span class=\"string\">\"Tee hee hee, the brave knight did embark on a quest\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>就像你看到的一样，Minstrel是一个包含两个方法的简单对象，这是简单的，将这个注入进我们之前的代码，如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BraveKnight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Knight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Quest quest;</div><div class=\"line\">    <span class=\"keyword\">private</span> Minstrel minstrel;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BraveKnight</span><span class=\"params\">(Quest quest, Minstrel minstrel)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.quest = quest;</div><div class=\"line\">        <span class=\"keyword\">this</span>.minstrel = minstrel;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">embarkOnQuest</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        minstrel.singleBeforeQuest();</div><div class=\"line\">        quest.embark();</div><div class=\"line\">        minstrel.singleAfterQuest();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在，你需要做的就是在Spring的配置文件中加入Ministrel的构造函数参数。但是，等等….</p>\n<p>好像看起来不对，这个真的是骑士本身关注的吗？骑士应该不必要做这个工作。毕竟，这是一个歌手的工作，歌颂骑士的努力，为什么其实一直在提醒歌手呢？</p>\n<p>另外，由于骑士必须知道歌手，你被迫传递歌手给骑士，这个不仅使骑士的代码复杂，而且让我很困惑，当我需要一个骑士而没有一个歌手的时候，如果Ministrel为null，在代码中还得进行非空判断，简单的BraveKnight代码开始变得复杂。但是使用AOP，你可以宣布歌手必须歌唱骑士的任务，并且，释放骑士，直接处理歌手的方法。</p>\n<p>在Spring配置文件中，你需要做的就是将歌手声明为一个切面。如下：<br><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></div><div class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">       http://www.springframework.org/schema/aop</div><div class=\"line\">       http://www.springframework.org/schema/aop/spring-aop.xsd\"&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"knight\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.springinaction.knights.BraveKnight\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--quest注入quest的Bean--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"quest\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--创建Quest--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"quest\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.springinaction.knights.SlayDragonQuest\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"#</span></span><span class=\"template-variable\">&#123;T(System).out&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>/&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!--定义歌手的Bean--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ministrel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.springinaction.knights.Minstrel\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"#</span></span><span class=\"template-variable\">&#123;T(System).out&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>/&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ministrel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--定义切点--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"embark\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* *.embarkOnQuest(..))\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--定义前置通知--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"embark\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"singleBeforeQuest\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--定义后置通知--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">\"singleAfterQuest\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"embark\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>使用Spring的AOP配置一个Ministrel作为切面，在切面里面，定义一个切点，然后定义前置通知（before advice）和后置通知（after advice）。在两个例子中，pointcut-ref属性都使用了一个embark的引用，这个切点是通过pointcut元素定义的，它表明通知应该应用在什么地方，表达式的语法遵循AspectJ的切点表达式语法。</p>\n<p>首先，Ministrel始终是一个POJO，没有任何说明他是用来作为切面的。作为一个切面是通过Spring配置文件实现的。其次，也是最重要的，Ministrel可以应用到BraveKnight而不需要BraveKnight直接调用它，实际上，BraveKnight根本不知道Ministrel的存在。</p>\n<p>需要指出的是，你可以使用Spring的魔法使得Ministrel作为一个切面，但是Ministrel必须首先是一个Spring的Bean，关键的就是你可以使用任何Spring Bean作为切面，而且可以将其注入其他的Bean中。</p>\n<p><strong>这些基础的理论都是从《Spring实战第四版》一书中记录下来的，以后的学习中，将会掺杂以自己视角来写。</strong></p>\n<p><strong>ps:其实之前有写过Spring的一些理解，但是开发过程中还是发现很多细节都不理解不明白，因为之前Spring的学习都是基于开发过程中边做边学，所以决定从头开始系统的学习。</strong></p>\n","excerpt":"<p>对于Java开发者来说，这是一个好的时代。</p>","more":"<p></p>\n<p>在过去的20年中，Java经历了好的时候，也经历了坏的时候。尽管有一些粗糙的地方，比如：Applets、<br>EJB、JDO和无数的日志框架，Java有丰富多样的历史，有很多企业已经建立的平台。其中，spring一直<br>都是其中最重要的组成部分。</p>\n<p>在早期，Spring被创建用于替代笨重的Java企业技术，比如EJB。相比于EJB，Spring提供了一个更加精<br>简的编程模型。它提供了简单Java对象（POJO）更大的权力，相对于EJB及其他Java企业规范。</p>\n<p>随着时间的推移，EJB及Java企业规范2.0版本本身也提供了一个简单的POJO模型。现在，EJB的一些概<br>念，如DI和AOP都来自于Spring。</p>\n<p>尽管现在J2EE（即总所周知的JEE）能够赶上Spring，但是Spring从未停止演进。即使是现在，Spring开始进步的时候，<br>J2EE都是开始在探索，而不是创新。移动开发、社交API的集成、NoSql数据库、云计算和大数据，仅仅是Spring创新<br>的一些方面。而且未来，Spring会继续发展。</p>\n<p>就像我说的，对于Java程序员来说，这是一个好的时代。 </p>\n<p><strong>摘自《Spring实战》</strong></p>\n<p>顾名思义，Spring就是为了简化我们Java开发而来的，而Spring主要还是围绕着两个点：一个DI（依赖注入），一个AOP（面向切面），或者说IOC（控制反转）和AOP（面向切面）。</p>\n<blockquote>\n<p>IOC主要的实现方式有两种：依赖查找，依赖注入<br>依赖注入是一种更可取的方式</p>\n</blockquote>\n<p></p><h2>依赖注入——Injecting Dependencies</h2><br>刚接触时，DI这个词刚听起来觉得是害怕的，它可能是相当复杂的编程技术或者设计模式。但事实证明，DI一点都不像 ，它听起来那么难。通过在应用中使用DI，你会发现你的应用程序变淡简单、容易理解并且易于测试。<br>那么DI是怎么工作的呢？一个正常的应用程序都是有两个或者更多个相互协作的类组合起来的。传统上，每个对象都会保存它所以来的对象的引用。这个会导致高度耦合并且难于测试。<p></p>\n<p>例如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> knights;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DamselRescuingKnight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Knight</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> RescueDamselQuest quest;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DamselRescuingKnight</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.quest = <span class=\"keyword\">new</span> RescueDamselQuest();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">embarkOnQuest</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        quest.embark();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如上所示，骑士创建了一个少女需要营救的请求（RescueDamselQuest）在它自己的构造函数中。这个会使骑士与少女请求绑定到一起，这严重限制了骑士的能力。如果一个少女需要营救，那没有问题。但是如果一头巨龙需要被杀死，那么骑士什么都做不了，只能坐在旁边观看。</p>\n<p>所以耦合是一个特别难以拓展的问题，一方面，耦合的代码难于测试、难于重用、难以理解并且他经常导致“打地鼠”的Bug行为（一种修改一个Bug通常会引起其他新的一个甚至更多的新bug的行为）。另一方面，一定数量的耦合代码是必须的，完全不耦合的代码将什么事情都不做。为了去做一些有用的事情，类需要知道彼此。耦合是必须的，但是必须被小心的管理。</p>\n<p>因此使用DI，对象在创建的时候被一些确定系统对象坐标的第三方去给予出其依赖，对象不需要去创建或者获取其依赖，像下图描述的那样，依赖被注入进了需要他们的对象。</p>\n<p>所以针对上面的问题，我们修改了代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一个灵活的骑士</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> knights;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BraveKnight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Knight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Quest quest;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BraveKnight</span><span class=\"params\">(Quest quest)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.quest = quest;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">embarkOnQuest</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        quest.embark();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>就像在上面看到的一样，BraveKnight不像DamselRescuingKnight 一样创建自己的Quest，而是在构造函数的参数中传入Quest，这样的DI就是著名的构造函数注入（Constructor injection）。</p>\n<p>更重要的是，那个Quest只是一个接口，所有实现该接口的实现都可以传入。所以BraveKnight可以处理不同的 需求。</p>\n<p>关键点就是BraveKnight没有跟任何特定的Quest进行绑定。它不在乎是什么样的请求，只要该请求实现了Quest接口就可以。这个就是DI的好处–松耦合。如果一个对象的依赖只是一个接口，那么你可以将他的实 现从一个换成另外一个。</p>\n<p>既然你BraveKnight对象可以处理任何你想传递给他的Quest对象，假设你想传递一个杀死巨龙的Quest，那么 你可以传递一个SlayDragonQuest给他是合适的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SlayDragonQuest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Quest</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> PrintStream stream;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SlayDragonQuest</span><span class=\"params\">(PrintStream stream)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.stream = stream;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">embark</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        stream.println(<span class=\"string\">\"Embarking on quest to slay the dragon\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>就像你所看到的一样，SlayDragonQuest实现了Quest接口，使得它适合BraveKnight。</p>\n<p>应用组件之间创建关联的行为通常称为布线或者装配（wiring）。在Spring中，组件之间的装配方式有很多种，但是一个通常的方式是使用XML。接下来的清单展示了一个简单的Spring配置文件–knights.xml，它将一个SlayDragonQuest、BraveKnight和一个PrintStream装配起来。</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"knight\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.springinaction.knights.BraveKnight\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--quest注入quest的Bean--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"quest\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--创建Quest--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"quest\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.springinaction.knights.SlayDragonQuest\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"#</span></span><span class=\"template-variable\">&#123;$(System).out&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>/&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这里，BraveKnight和SlayDragonQuest被声明为Bean，在BraveKnight Bean中，通过传递一个Quest的引用作为构造函数的参数。同时，SlayDragonQuest使用Spring表达式语言传递一个System.out的构造函数参数给SlayDragonQuest对象。如果XML配置文件不适合你的口味，你可以使用Java方式进行配置。如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KnightConfig</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Knight <span class=\"title\">knight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BraveKnight(quest());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Quest <span class=\"title\">quest</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SlayDragonQuest(System.out);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不管使用xml还是java，依赖注入的好处都是一样的。尽管BraveKnight依赖Quest，但是它不需要知道具体是什么Quest，同样的SlayDragonQuest也不需要知道具体的PrintStream类型。在Spring中，仅仅通过配置使得所有的片段组装在一起。这个就使得可以去改变他们之间的依赖关系而不需要去修改类的实现。</p>\n<p></p><h2>AOP——Aspect-OrientedProgramming</h2><br>虽然DI可以使得你的应用程序组件之间是松耦合的，但是AOP可以使得你可以在你应用程序中去捕获Bean的功能。<p></p>\n<p>AOP通常被定义为分离软件关注点的一种技术。系统通常由一些具有特定功能的组件组成。但是，通常这些组件也附带一些除了核心功能之外的一些功能。系统服务，如日志记录、事务管理和安全性，通常会在每个组件中都是需要的。这些系统服务通常被称为横切关注点（cross-cutting concerns），因为他们会在系统中切割多个组件。</p>\n<p>通过传递这些横切关注点，你会提供你应用程序的复杂性：</p>\n<p><li>代码重复。这就意味着你如果修改其中一个功能，你修改需要许多的组件。即使你把关注点抽象为一个单独的模块，这样对你组件的影响是一个单一的方法，该方法调用也会在多个地方重复。</li></p>\n<p><li>你的组件中充斥这与它核心功能不一致的代码。如添加一个条目到一个地址簿中，我们应该只关心如何添加地址，而不是关心是否安全或者是否具有事务一致性。</li></p>\n<p>AOP可以模块化这些服务，并且通过声明式的方式应用这些服务，这将导致组件更加具有凝聚力，并且组件专注于自己特定的功能，对可能涉及的系统服务完全不知情。简单来说，就是让POJO始终保持扁平。</p>\n<p>下面一个例子来演示分离核心功能与系统服务：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Minstrel</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> PrintStream stream;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Minstrel</span>(<span class=\"params\">PrintStream stream</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.stream = stream;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//called before quest</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">singleBeforeQuest</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        stream.println(<span class=\"string\">\"Fa la la, the knight is so brave\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//called after quest</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">singleAfterQuest</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        stream.println(<span class=\"string\">\"Tee hee hee, the brave knight did embark on a quest\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>就像你看到的一样，Minstrel是一个包含两个方法的简单对象，这是简单的，将这个注入进我们之前的代码，如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BraveKnight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Knight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Quest quest;</div><div class=\"line\">    <span class=\"keyword\">private</span> Minstrel minstrel;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BraveKnight</span><span class=\"params\">(Quest quest, Minstrel minstrel)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.quest = quest;</div><div class=\"line\">        <span class=\"keyword\">this</span>.minstrel = minstrel;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">embarkOnQuest</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        minstrel.singleBeforeQuest();</div><div class=\"line\">        quest.embark();</div><div class=\"line\">        minstrel.singleAfterQuest();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在，你需要做的就是在Spring的配置文件中加入Ministrel的构造函数参数。但是，等等….</p>\n<p>好像看起来不对，这个真的是骑士本身关注的吗？骑士应该不必要做这个工作。毕竟，这是一个歌手的工作，歌颂骑士的努力，为什么其实一直在提醒歌手呢？</p>\n<p>另外，由于骑士必须知道歌手，你被迫传递歌手给骑士，这个不仅使骑士的代码复杂，而且让我很困惑，当我需要一个骑士而没有一个歌手的时候，如果Ministrel为null，在代码中还得进行非空判断，简单的BraveKnight代码开始变得复杂。但是使用AOP，你可以宣布歌手必须歌唱骑士的任务，并且，释放骑士，直接处理歌手的方法。</p>\n<p>在Spring配置文件中，你需要做的就是将歌手声明为一个切面。如下：<br><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></div><div class=\"line\">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">       http://www.springframework.org/schema/aop</div><div class=\"line\">       http://www.springframework.org/schema/aop/spring-aop.xsd\"&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"knight\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.springinaction.knights.BraveKnight\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--quest注入quest的Bean--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"quest\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--创建Quest--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"quest\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.springinaction.knights.SlayDragonQuest\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"#</span></span><span class=\"template-variable\">&#123;T(System).out&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>/&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!--定义歌手的Bean--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ministrel\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.springinaction.knights.Minstrel\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"#</span></span><span class=\"template-variable\">&#123;T(System).out&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>/&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ministrel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--定义切点--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"embark\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* *.embarkOnQuest(..))\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--定义前置通知--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"embark\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"singleBeforeQuest\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--定义后置通知--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">\"singleAfterQuest\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"embark\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>使用Spring的AOP配置一个Ministrel作为切面，在切面里面，定义一个切点，然后定义前置通知（before advice）和后置通知（after advice）。在两个例子中，pointcut-ref属性都使用了一个embark的引用，这个切点是通过pointcut元素定义的，它表明通知应该应用在什么地方，表达式的语法遵循AspectJ的切点表达式语法。</p>\n<p>首先，Ministrel始终是一个POJO，没有任何说明他是用来作为切面的。作为一个切面是通过Spring配置文件实现的。其次，也是最重要的，Ministrel可以应用到BraveKnight而不需要BraveKnight直接调用它，实际上，BraveKnight根本不知道Ministrel的存在。</p>\n<p>需要指出的是，你可以使用Spring的魔法使得Ministrel作为一个切面，但是Ministrel必须首先是一个Spring的Bean，关键的就是你可以使用任何Spring Bean作为切面，而且可以将其注入其他的Bean中。</p>\n<p><strong>这些基础的理论都是从《Spring实战第四版》一书中记录下来的，以后的学习中，将会掺杂以自己视角来写。</strong></p>\n<p><strong>ps:其实之前有写过Spring的一些理解，但是开发过程中还是发现很多细节都不理解不明白，因为之前Spring的学习都是基于开发过程中边做边学，所以决定从头开始系统的学习。</strong></p>"},{"title":"apache poi操作(适用于word 2007)","date":"2017-02-18T14:08:03.000Z","_content":"适用于word 2007 poi 版本 3.7\n<!--more-->\n```\nimport java.io.FileOutputStream;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.apache.poi.POIXMLDocument;\nimport org.apache.poi.openxml4j.opc.OPCPackage;\nimport org.apache.poi.xwpf.usermodel.XWPFDocument;\nimport org.apache.poi.xwpf.usermodel.XWPFParagraph;\nimport org.apache.poi.xwpf.usermodel.XWPFRun;\nimport org.apache.poi.xwpf.usermodel.XWPFTable;\nimport org.apache.poi.xwpf.usermodel.XWPFTableCell;\nimport org.apache.poi.xwpf.usermodel.XWPFTableRow;\n\n/**\n * 适用于word 2007 poi 版本 3.7\n */\npublic class WordPoiUtil {\n\n    /**\n     * 根据指定的参数值、模板，生成 word 文档\n     * \n     * @param param\n     *            需要替换的变量\n     * @param template\n     *            模板\n     */\n    public static XWPFDocument generateWord(Map<String, Object> param,\n            String template) {\n        XWPFDocument doc = null;\n        try {\n            OPCPackage pack = POIXMLDocument.openPackage(template);\n            doc = new XWPFDocument(pack);\n            if (param != null && param.size() > 0) {\n\n                // 处理段落\n                List<XWPFParagraph> paragraphList = doc.getParagraphs();\n                processParagraphs(paragraphList, param, doc);\n\n                // 处理表格\n                Iterator<XWPFTable> it = doc.getTablesIterator();\n                while (it.hasNext()) {\n                    XWPFTable table = it.next();\n                    List<XWPFTableRow> rows = table.getRows();\n                    for (XWPFTableRow row : rows) {\n                        List<XWPFTableCell> cells = row.getTableCells();\n                        for (XWPFTableCell cell : cells) {\n                            List<XWPFParagraph> paragraphListTable = cell\n                                    .getParagraphs();\n                            processParagraphs(paragraphListTable, param, doc);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return doc;\n    }\n\n    /**\n     * 处理段落\n     * \n     * @param paragraphList\n     */\n    public static void processParagraphs(List<XWPFParagraph> paragraphList,\n            Map<String, Object> param, XWPFDocument doc) {\n        if (paragraphList != null && paragraphList.size() > 0) {\n            for (XWPFParagraph paragraph : paragraphList) {\n                boolean addReplace = false;\n                List<XWPFRun> runs = paragraph.getRuns();\n                //每个需要替换的key的run的位置的集合\n                List<Integer> replaceRuns = new ArrayList<Integer>();\n                //每个段落的所有的key run的集合\n                List<List<Integer>> perReplaceRunList = new ArrayList<List<Integer>>();\n                for (int i = 0; i< runs.size();i++){\n                    String text = runs.get(i).getText(0);\n                    if(addReplace){\n                        replaceRuns.add(i);\n                    }\n                    if(text != null && text.contains(\"#\")){\n                        addReplace = true;\n                        replaceRuns.add(i);\n                    }\n                    if(text != null && text.contains(\"}\")){\n                        addReplace = false;\n                        perReplaceRunList.add(replaceRuns);\n                        replaceRuns = new ArrayList<Integer>();\n                    }\n                }\n\n                for(int i=0;i<perReplaceRunList.size();i++){\n                    List<Integer> runsList = perReplaceRunList.get(i);\n                    System.out.println(\"==========================\");\n                    StringBuffer textSb = new StringBuffer();\n                    for(int j = 0;j<runsList.size();j++){\n                        System.out.println(\"============replace_runs\"+runs.get(runsList.get(j)).getText(0));\n                        textSb.append(runs.get(runsList.get(j)).getText(0));\n                    }\n                    String replaceStr = textSb.toString();\n                    for(int j = 0; j<runsList.size();j++){\n                        for (Entry<String, Object> entry : param.entrySet()) {\n                            String key = entry.getKey();\n                            if (replaceStr.indexOf(key) != -1) {\n                                Object value = entry.getValue();\n                                if (value instanceof String) {// 文本替换\n                                    replaceStr = replaceStr.replace(key, value.toString());\n                                }\n                            }\n                        }\n                    }\n                    System.out.println(\"===========\"+replaceStr);\n                    for(int j = 0;j<runsList.size();j++){\n                        if(j == 0){\n                            runs.get(runsList.get(j)).setText(replaceStr, 0);\n                        }else{\n                            runs.get(runsList.get(j)).setText(\"\", 0);\n                        }\n                    }\n                    for(int j = 0;j<runsList.size();j++){\n                        System.out.println(\"============转换后\"+runs.get(runsList.get(j)).getText(0));\n                    }\n\n                }\n\n            }\n        }\n    }\n\n    public static List<String> getReplaceFields(String template){\n        List<String> replaceFields = new ArrayList<String>();\n        XWPFDocument doc = null;\n        try {\n            OPCPackage pack = POIXMLDocument.openPackage(template);\n            doc = new XWPFDocument(pack);\n            // 处理段落\n            List<XWPFParagraph> paragraphList = doc.getParagraphs();\n            replaceFields.addAll(getFields(paragraphList));\n\n            // 处理表格\n            Iterator<XWPFTable> it = doc.getTablesIterator();\n            while (it.hasNext()) {\n                XWPFTable table = it.next();\n                List<XWPFTableRow> rows = table.getRows();\n                for (XWPFTableRow row : rows) {\n                    List<XWPFTableCell> cells = row.getTableCells();\n                    for (XWPFTableCell cell : cells) {\n                        List<XWPFParagraph> paragraphListTable = cell\n                                .getParagraphs();\n                        replaceFields.addAll(getFields(paragraphListTable));\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return replaceFields;\n    }\n\n    /**\n     * 获取段落的需要替换的字段\n     * @param paragraphList\n     * @return\n     */\n    public static List<String> getFields(List<XWPFParagraph> paragraphList) {\n        List<String> fieldList = new ArrayList<String>();\n        if (paragraphList != null && paragraphList.size() > 0) {\n            for (XWPFParagraph paragraph : paragraphList) {\n                boolean addReplace = false;\n                List<XWPFRun> runs = paragraph.getRuns();\n                //每个需要替换的key的run的位置的集合\n                List<Integer> replaceRuns = new ArrayList<Integer>();\n                //每个段落的所有的key run的集合\n                List<List<Integer>> perReplaceRunList = new ArrayList<List<Integer>>();\n                for (int i = 0; i< runs.size();i++){\n                    String text = runs.get(i).getText(0);\n                    if(addReplace){\n                        replaceRuns.add(i);\n                    }\n                    if(text != null && text.contains(\"#\")){\n                        addReplace = true;\n                        replaceRuns.add(i);\n                    }\n                    if(text != null && text.contains(\"}\")){\n                        addReplace = false;\n                        perReplaceRunList.add(replaceRuns);\n                        replaceRuns = new ArrayList<Integer>();\n                    }\n                }\n\n                for(int i=0;i<perReplaceRunList.size();i++){\n                    List<Integer> runsList = perReplaceRunList.get(i);\n                    System.out.println(\"==========================\");\n                    StringBuffer textSb = new StringBuffer();\n                    for(int j = 0;j<runsList.size();j++){\n                        System.out.println(\"============replace_runs\"+runs.get(runsList.get(j)).getText(0));\n                        textSb.append(runs.get(runsList.get(j)).getText(0));\n                    }\n                    String replaceStr = textSb.toString().trim();\n                    System.out.println(\"====replaceStr=\" + replaceStr.substring(replaceStr.indexOf(\"#\")+2,replaceStr.length()-1));\n//                  System.out.println(replaceStr.substring(2,replaceStr.length()-1));\n                    fieldList.add(replaceStr.substring(replaceStr.indexOf(\"#\")+2,replaceStr.length()-1));\n\n                }\n\n            }\n        }\n        return fieldList;\n    }\n}\n```","source":"_posts/apache-poi操作-适用于word-2007.md","raw":"---\ntitle: apache poi操作(适用于word 2007)\ndate: 2017-02-18 22:08:03\ncategories: Java二三事\ntags:\n\t- Java\n---\n适用于word 2007 poi 版本 3.7\n<!--more-->\n```\nimport java.io.FileOutputStream;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.apache.poi.POIXMLDocument;\nimport org.apache.poi.openxml4j.opc.OPCPackage;\nimport org.apache.poi.xwpf.usermodel.XWPFDocument;\nimport org.apache.poi.xwpf.usermodel.XWPFParagraph;\nimport org.apache.poi.xwpf.usermodel.XWPFRun;\nimport org.apache.poi.xwpf.usermodel.XWPFTable;\nimport org.apache.poi.xwpf.usermodel.XWPFTableCell;\nimport org.apache.poi.xwpf.usermodel.XWPFTableRow;\n\n/**\n * 适用于word 2007 poi 版本 3.7\n */\npublic class WordPoiUtil {\n\n    /**\n     * 根据指定的参数值、模板，生成 word 文档\n     * \n     * @param param\n     *            需要替换的变量\n     * @param template\n     *            模板\n     */\n    public static XWPFDocument generateWord(Map<String, Object> param,\n            String template) {\n        XWPFDocument doc = null;\n        try {\n            OPCPackage pack = POIXMLDocument.openPackage(template);\n            doc = new XWPFDocument(pack);\n            if (param != null && param.size() > 0) {\n\n                // 处理段落\n                List<XWPFParagraph> paragraphList = doc.getParagraphs();\n                processParagraphs(paragraphList, param, doc);\n\n                // 处理表格\n                Iterator<XWPFTable> it = doc.getTablesIterator();\n                while (it.hasNext()) {\n                    XWPFTable table = it.next();\n                    List<XWPFTableRow> rows = table.getRows();\n                    for (XWPFTableRow row : rows) {\n                        List<XWPFTableCell> cells = row.getTableCells();\n                        for (XWPFTableCell cell : cells) {\n                            List<XWPFParagraph> paragraphListTable = cell\n                                    .getParagraphs();\n                            processParagraphs(paragraphListTable, param, doc);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return doc;\n    }\n\n    /**\n     * 处理段落\n     * \n     * @param paragraphList\n     */\n    public static void processParagraphs(List<XWPFParagraph> paragraphList,\n            Map<String, Object> param, XWPFDocument doc) {\n        if (paragraphList != null && paragraphList.size() > 0) {\n            for (XWPFParagraph paragraph : paragraphList) {\n                boolean addReplace = false;\n                List<XWPFRun> runs = paragraph.getRuns();\n                //每个需要替换的key的run的位置的集合\n                List<Integer> replaceRuns = new ArrayList<Integer>();\n                //每个段落的所有的key run的集合\n                List<List<Integer>> perReplaceRunList = new ArrayList<List<Integer>>();\n                for (int i = 0; i< runs.size();i++){\n                    String text = runs.get(i).getText(0);\n                    if(addReplace){\n                        replaceRuns.add(i);\n                    }\n                    if(text != null && text.contains(\"#\")){\n                        addReplace = true;\n                        replaceRuns.add(i);\n                    }\n                    if(text != null && text.contains(\"}\")){\n                        addReplace = false;\n                        perReplaceRunList.add(replaceRuns);\n                        replaceRuns = new ArrayList<Integer>();\n                    }\n                }\n\n                for(int i=0;i<perReplaceRunList.size();i++){\n                    List<Integer> runsList = perReplaceRunList.get(i);\n                    System.out.println(\"==========================\");\n                    StringBuffer textSb = new StringBuffer();\n                    for(int j = 0;j<runsList.size();j++){\n                        System.out.println(\"============replace_runs\"+runs.get(runsList.get(j)).getText(0));\n                        textSb.append(runs.get(runsList.get(j)).getText(0));\n                    }\n                    String replaceStr = textSb.toString();\n                    for(int j = 0; j<runsList.size();j++){\n                        for (Entry<String, Object> entry : param.entrySet()) {\n                            String key = entry.getKey();\n                            if (replaceStr.indexOf(key) != -1) {\n                                Object value = entry.getValue();\n                                if (value instanceof String) {// 文本替换\n                                    replaceStr = replaceStr.replace(key, value.toString());\n                                }\n                            }\n                        }\n                    }\n                    System.out.println(\"===========\"+replaceStr);\n                    for(int j = 0;j<runsList.size();j++){\n                        if(j == 0){\n                            runs.get(runsList.get(j)).setText(replaceStr, 0);\n                        }else{\n                            runs.get(runsList.get(j)).setText(\"\", 0);\n                        }\n                    }\n                    for(int j = 0;j<runsList.size();j++){\n                        System.out.println(\"============转换后\"+runs.get(runsList.get(j)).getText(0));\n                    }\n\n                }\n\n            }\n        }\n    }\n\n    public static List<String> getReplaceFields(String template){\n        List<String> replaceFields = new ArrayList<String>();\n        XWPFDocument doc = null;\n        try {\n            OPCPackage pack = POIXMLDocument.openPackage(template);\n            doc = new XWPFDocument(pack);\n            // 处理段落\n            List<XWPFParagraph> paragraphList = doc.getParagraphs();\n            replaceFields.addAll(getFields(paragraphList));\n\n            // 处理表格\n            Iterator<XWPFTable> it = doc.getTablesIterator();\n            while (it.hasNext()) {\n                XWPFTable table = it.next();\n                List<XWPFTableRow> rows = table.getRows();\n                for (XWPFTableRow row : rows) {\n                    List<XWPFTableCell> cells = row.getTableCells();\n                    for (XWPFTableCell cell : cells) {\n                        List<XWPFParagraph> paragraphListTable = cell\n                                .getParagraphs();\n                        replaceFields.addAll(getFields(paragraphListTable));\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return replaceFields;\n    }\n\n    /**\n     * 获取段落的需要替换的字段\n     * @param paragraphList\n     * @return\n     */\n    public static List<String> getFields(List<XWPFParagraph> paragraphList) {\n        List<String> fieldList = new ArrayList<String>();\n        if (paragraphList != null && paragraphList.size() > 0) {\n            for (XWPFParagraph paragraph : paragraphList) {\n                boolean addReplace = false;\n                List<XWPFRun> runs = paragraph.getRuns();\n                //每个需要替换的key的run的位置的集合\n                List<Integer> replaceRuns = new ArrayList<Integer>();\n                //每个段落的所有的key run的集合\n                List<List<Integer>> perReplaceRunList = new ArrayList<List<Integer>>();\n                for (int i = 0; i< runs.size();i++){\n                    String text = runs.get(i).getText(0);\n                    if(addReplace){\n                        replaceRuns.add(i);\n                    }\n                    if(text != null && text.contains(\"#\")){\n                        addReplace = true;\n                        replaceRuns.add(i);\n                    }\n                    if(text != null && text.contains(\"}\")){\n                        addReplace = false;\n                        perReplaceRunList.add(replaceRuns);\n                        replaceRuns = new ArrayList<Integer>();\n                    }\n                }\n\n                for(int i=0;i<perReplaceRunList.size();i++){\n                    List<Integer> runsList = perReplaceRunList.get(i);\n                    System.out.println(\"==========================\");\n                    StringBuffer textSb = new StringBuffer();\n                    for(int j = 0;j<runsList.size();j++){\n                        System.out.println(\"============replace_runs\"+runs.get(runsList.get(j)).getText(0));\n                        textSb.append(runs.get(runsList.get(j)).getText(0));\n                    }\n                    String replaceStr = textSb.toString().trim();\n                    System.out.println(\"====replaceStr=\" + replaceStr.substring(replaceStr.indexOf(\"#\")+2,replaceStr.length()-1));\n//                  System.out.println(replaceStr.substring(2,replaceStr.length()-1));\n                    fieldList.add(replaceStr.substring(replaceStr.indexOf(\"#\")+2,replaceStr.length()-1));\n\n                }\n\n            }\n        }\n        return fieldList;\n    }\n}\n```","slug":"apache-poi操作-适用于word-2007","published":1,"updated":"2017-02-18T14:09:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kfj0029rhsoy8j3bm6q","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>适用于word 2007 poi 版本 3.7<br><a id=\"more\"></a><br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"keyword\">HashMap</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map.Entry;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.POIXMLDocument;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.openxml4j.opc.OPCPackage;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xwpf.usermodel.XWPFDocument;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xwpf.usermodel.XWPFParagraph;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xwpf.usermodel.XWPFRun;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xwpf.usermodel.XWPFTable;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xwpf.usermodel.XWPFTableCell;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xwpf.usermodel.XWPFTableRow;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 适用于word 2007 poi 版本 3.7</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class WordPoiUtil &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 根据指定的参数值、模板，生成 word 文档</div><div class=\"line\">     * </div><div class=\"line\">     * @param param</div><div class=\"line\">     *            需要替换的变量</div><div class=\"line\">     * @param template</div><div class=\"line\">     *            模板</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> XWPFDocument generateWord(Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt; param,</div><div class=\"line\">            <span class=\"keyword\">String</span> template) &#123;</div><div class=\"line\">        XWPFDocument doc = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            OPCPackage pack = POIXMLDocument.openPackage(template);</div><div class=\"line\">            doc = <span class=\"keyword\">new</span> XWPFDocument(pack);</div><div class=\"line\">            <span class=\"keyword\">if</span> (param != <span class=\"keyword\">null</span> &amp;&amp; param.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 处理段落</span></div><div class=\"line\">                List&lt;XWPFParagraph&gt; paragraphList = doc.getParagraphs();</div><div class=\"line\">                processParagraphs(paragraphList, param, doc);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 处理表格</span></div><div class=\"line\">                Iterator&lt;XWPFTable&gt; it = doc.getTablesIterator();</div><div class=\"line\">                <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">                    XWPFTable table = it.next();</div><div class=\"line\">                    List&lt;XWPFTableRow&gt; rows = table.getRows();</div><div class=\"line\">                    <span class=\"keyword\">for</span> (XWPFTableRow row : rows) &#123;</div><div class=\"line\">                        List&lt;XWPFTableCell&gt; cells = row.getTableCells();</div><div class=\"line\">                        <span class=\"keyword\">for</span> (XWPFTableCell cell : cells) &#123;</div><div class=\"line\">                            List&lt;XWPFParagraph&gt; paragraphListTable = cell</div><div class=\"line\">                                    .getParagraphs();</div><div class=\"line\">                            processParagraphs(paragraphListTable, param, doc);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> doc;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 处理段落</div><div class=\"line\">     * </div><div class=\"line\">     * @param paragraphList</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> processParagraphs(List&lt;XWPFParagraph&gt; paragraphList,</div><div class=\"line\">            Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt; param, XWPFDocument doc) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (paragraphList != <span class=\"keyword\">null</span> &amp;&amp; paragraphList.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (XWPFParagraph paragraph : paragraphList) &#123;</div><div class=\"line\">                <span class=\"built_in\">boolean</span> addReplace = <span class=\"keyword\">false</span>;</div><div class=\"line\">                List&lt;XWPFRun&gt; runs = paragraph.getRuns();</div><div class=\"line\">                <span class=\"comment\">//每个需要替换的key的run的位置的集合</span></div><div class=\"line\">                List&lt;Integer&gt; replaceRuns = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">                <span class=\"comment\">//每个段落的所有的key run的集合</span></div><div class=\"line\">                List&lt;List&lt;Integer&gt;&gt; perReplaceRunList = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i&lt; runs.<span class=\"built_in\">size</span>();i++)&#123;</div><div class=\"line\">                    <span class=\"keyword\">String</span> <span class=\"built_in\">text</span> = runs.<span class=\"built_in\">get</span>(i).getText(<span class=\"number\">0</span>);</div><div class=\"line\">                    <span class=\"keyword\">if</span>(addReplace)&#123;</div><div class=\"line\">                        replaceRuns.<span class=\"built_in\">add</span>(i);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">text</span> != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"built_in\">text</span>.contains(<span class=\"string\">\"#\"</span>))&#123;</div><div class=\"line\">                        addReplace = <span class=\"keyword\">true</span>;</div><div class=\"line\">                        replaceRuns.<span class=\"built_in\">add</span>(i);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">text</span> != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"built_in\">text</span>.contains(<span class=\"string\">\"&#125;\"</span>))&#123;</div><div class=\"line\">                        addReplace = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        perReplaceRunList.<span class=\"built_in\">add</span>(replaceRuns);</div><div class=\"line\">                        replaceRuns = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i=<span class=\"number\">0</span>;i&lt;perReplaceRunList.<span class=\"built_in\">size</span>();i++)&#123;</div><div class=\"line\">                    List&lt;Integer&gt; runsList = perReplaceRunList.<span class=\"built_in\">get</span>(i);</div><div class=\"line\">                    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"==========================\"</span>);</div><div class=\"line\">                    StringBuffer textSb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>;j&lt;runsList.<span class=\"built_in\">size</span>();j++)&#123;</div><div class=\"line\">                        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"============replace_runs\"</span>+runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).getText(<span class=\"number\">0</span>));</div><div class=\"line\">                        textSb.<span class=\"built_in\">append</span>(runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).getText(<span class=\"number\">0</span>));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">String</span> replaceStr = textSb.toString();</div><div class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j&lt;runsList.<span class=\"built_in\">size</span>();j++)&#123;</div><div class=\"line\">                        <span class=\"keyword\">for</span> (Entry&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt; entry : param.entrySet()) &#123;</div><div class=\"line\">                            <span class=\"keyword\">String</span> <span class=\"built_in\">key</span> = entry.getKey();</div><div class=\"line\">                            <span class=\"keyword\">if</span> (replaceStr.indexOf(<span class=\"built_in\">key</span>) != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">                                <span class=\"keyword\">Object</span> value = entry.getValue();</div><div class=\"line\">                                <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"keyword\">String</span>) &#123;<span class=\"comment\">// 文本替换</span></div><div class=\"line\">                                    replaceStr = replaceStr.replace(<span class=\"built_in\">key</span>, value.toString());</div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"===========\"</span>+replaceStr);</div><div class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>;j&lt;runsList.<span class=\"built_in\">size</span>();j++)&#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                            runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).setText(replaceStr, <span class=\"number\">0</span>);</div><div class=\"line\">                        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                            runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).setText(<span class=\"string\">\"\"</span>, <span class=\"number\">0</span>);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>;j&lt;runsList.<span class=\"built_in\">size</span>();j++)&#123;</div><div class=\"line\">                        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"============转换后\"</span>+runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).getText(<span class=\"number\">0</span>));</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;<span class=\"keyword\">String</span>&gt; getReplaceFields(<span class=\"keyword\">String</span> template)&#123;</div><div class=\"line\">        List&lt;<span class=\"keyword\">String</span>&gt; replaceFields = <span class=\"keyword\">new</span> ArrayList&lt;<span class=\"keyword\">String</span>&gt;();</div><div class=\"line\">        XWPFDocument doc = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            OPCPackage pack = POIXMLDocument.openPackage(template);</div><div class=\"line\">            doc = <span class=\"keyword\">new</span> XWPFDocument(pack);</div><div class=\"line\">            <span class=\"comment\">// 处理段落</span></div><div class=\"line\">            List&lt;XWPFParagraph&gt; paragraphList = doc.getParagraphs();</div><div class=\"line\">            replaceFields.addAll(getFields(paragraphList));</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 处理表格</span></div><div class=\"line\">            Iterator&lt;XWPFTable&gt; it = doc.getTablesIterator();</div><div class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">                XWPFTable table = it.next();</div><div class=\"line\">                List&lt;XWPFTableRow&gt; rows = table.getRows();</div><div class=\"line\">                <span class=\"keyword\">for</span> (XWPFTableRow row : rows) &#123;</div><div class=\"line\">                    List&lt;XWPFTableCell&gt; cells = row.getTableCells();</div><div class=\"line\">                    <span class=\"keyword\">for</span> (XWPFTableCell cell : cells) &#123;</div><div class=\"line\">                        List&lt;XWPFParagraph&gt; paragraphListTable = cell</div><div class=\"line\">                                .getParagraphs();</div><div class=\"line\">                        replaceFields.addAll(getFields(paragraphListTable));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> replaceFields;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取段落的需要替换的字段</div><div class=\"line\">     * @param paragraphList</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;<span class=\"keyword\">String</span>&gt; getFields(List&lt;XWPFParagraph&gt; paragraphList) &#123;</div><div class=\"line\">        List&lt;<span class=\"keyword\">String</span>&gt; fieldList = <span class=\"keyword\">new</span> ArrayList&lt;<span class=\"keyword\">String</span>&gt;();</div><div class=\"line\">        <span class=\"keyword\">if</span> (paragraphList != <span class=\"keyword\">null</span> &amp;&amp; paragraphList.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (XWPFParagraph paragraph : paragraphList) &#123;</div><div class=\"line\">                <span class=\"built_in\">boolean</span> addReplace = <span class=\"keyword\">false</span>;</div><div class=\"line\">                List&lt;XWPFRun&gt; runs = paragraph.getRuns();</div><div class=\"line\">                <span class=\"comment\">//每个需要替换的key的run的位置的集合</span></div><div class=\"line\">                List&lt;Integer&gt; replaceRuns = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">                <span class=\"comment\">//每个段落的所有的key run的集合</span></div><div class=\"line\">                List&lt;List&lt;Integer&gt;&gt; perReplaceRunList = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i&lt; runs.<span class=\"built_in\">size</span>();i++)&#123;</div><div class=\"line\">                    <span class=\"keyword\">String</span> <span class=\"built_in\">text</span> = runs.<span class=\"built_in\">get</span>(i).getText(<span class=\"number\">0</span>);</div><div class=\"line\">                    <span class=\"keyword\">if</span>(addReplace)&#123;</div><div class=\"line\">                        replaceRuns.<span class=\"built_in\">add</span>(i);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">text</span> != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"built_in\">text</span>.contains(<span class=\"string\">\"#\"</span>))&#123;</div><div class=\"line\">                        addReplace = <span class=\"keyword\">true</span>;</div><div class=\"line\">                        replaceRuns.<span class=\"built_in\">add</span>(i);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">text</span> != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"built_in\">text</span>.contains(<span class=\"string\">\"&#125;\"</span>))&#123;</div><div class=\"line\">                        addReplace = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        perReplaceRunList.<span class=\"built_in\">add</span>(replaceRuns);</div><div class=\"line\">                        replaceRuns = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i=<span class=\"number\">0</span>;i&lt;perReplaceRunList.<span class=\"built_in\">size</span>();i++)&#123;</div><div class=\"line\">                    List&lt;Integer&gt; runsList = perReplaceRunList.<span class=\"built_in\">get</span>(i);</div><div class=\"line\">                    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"==========================\"</span>);</div><div class=\"line\">                    StringBuffer textSb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>;j&lt;runsList.<span class=\"built_in\">size</span>();j++)&#123;</div><div class=\"line\">                        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"============replace_runs\"</span>+runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).getText(<span class=\"number\">0</span>));</div><div class=\"line\">                        textSb.<span class=\"built_in\">append</span>(runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).getText(<span class=\"number\">0</span>));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">String</span> replaceStr = textSb.toString().<span class=\"built_in\">trim</span>();</div><div class=\"line\">                    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"====replaceStr=\"</span> + replaceStr.substring(replaceStr.indexOf(<span class=\"string\">\"#\"</span>)+<span class=\"number\">2</span>,replaceStr.length()<span class=\"number\">-1</span>));</div><div class=\"line\"><span class=\"comment\">//                  System.out.println(replaceStr.substring(2,replaceStr.length()-1));</span></div><div class=\"line\">                    fieldList.<span class=\"built_in\">add</span>(replaceStr.substring(replaceStr.indexOf(<span class=\"string\">\"#\"</span>)+<span class=\"number\">2</span>,replaceStr.length()<span class=\"number\">-1</span>));</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> fieldList;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>适用于word 2007 poi 版本 3.7<br></p>","more":"<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"keyword\">HashMap</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map.Entry;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.POIXMLDocument;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.openxml4j.opc.OPCPackage;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xwpf.usermodel.XWPFDocument;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xwpf.usermodel.XWPFParagraph;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xwpf.usermodel.XWPFRun;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xwpf.usermodel.XWPFTable;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xwpf.usermodel.XWPFTableCell;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xwpf.usermodel.XWPFTableRow;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 适用于word 2007 poi 版本 3.7</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> class WordPoiUtil &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 根据指定的参数值、模板，生成 word 文档</div><div class=\"line\">     * </div><div class=\"line\">     * @param param</div><div class=\"line\">     *            需要替换的变量</div><div class=\"line\">     * @param template</div><div class=\"line\">     *            模板</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> XWPFDocument generateWord(Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt; param,</div><div class=\"line\">            <span class=\"keyword\">String</span> template) &#123;</div><div class=\"line\">        XWPFDocument doc = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            OPCPackage pack = POIXMLDocument.openPackage(template);</div><div class=\"line\">            doc = <span class=\"keyword\">new</span> XWPFDocument(pack);</div><div class=\"line\">            <span class=\"keyword\">if</span> (param != <span class=\"keyword\">null</span> &amp;&amp; param.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 处理段落</span></div><div class=\"line\">                List&lt;XWPFParagraph&gt; paragraphList = doc.getParagraphs();</div><div class=\"line\">                processParagraphs(paragraphList, param, doc);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 处理表格</span></div><div class=\"line\">                Iterator&lt;XWPFTable&gt; it = doc.getTablesIterator();</div><div class=\"line\">                <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">                    XWPFTable table = it.next();</div><div class=\"line\">                    List&lt;XWPFTableRow&gt; rows = table.getRows();</div><div class=\"line\">                    <span class=\"keyword\">for</span> (XWPFTableRow row : rows) &#123;</div><div class=\"line\">                        List&lt;XWPFTableCell&gt; cells = row.getTableCells();</div><div class=\"line\">                        <span class=\"keyword\">for</span> (XWPFTableCell cell : cells) &#123;</div><div class=\"line\">                            List&lt;XWPFParagraph&gt; paragraphListTable = cell</div><div class=\"line\">                                    .getParagraphs();</div><div class=\"line\">                            processParagraphs(paragraphListTable, param, doc);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> doc;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 处理段落</div><div class=\"line\">     * </div><div class=\"line\">     * @param paragraphList</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> processParagraphs(List&lt;XWPFParagraph&gt; paragraphList,</div><div class=\"line\">            Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt; param, XWPFDocument doc) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (paragraphList != <span class=\"keyword\">null</span> &amp;&amp; paragraphList.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (XWPFParagraph paragraph : paragraphList) &#123;</div><div class=\"line\">                <span class=\"built_in\">boolean</span> addReplace = <span class=\"keyword\">false</span>;</div><div class=\"line\">                List&lt;XWPFRun&gt; runs = paragraph.getRuns();</div><div class=\"line\">                <span class=\"comment\">//每个需要替换的key的run的位置的集合</span></div><div class=\"line\">                List&lt;Integer&gt; replaceRuns = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">                <span class=\"comment\">//每个段落的所有的key run的集合</span></div><div class=\"line\">                List&lt;List&lt;Integer&gt;&gt; perReplaceRunList = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i&lt; runs.<span class=\"built_in\">size</span>();i++)&#123;</div><div class=\"line\">                    <span class=\"keyword\">String</span> <span class=\"built_in\">text</span> = runs.<span class=\"built_in\">get</span>(i).getText(<span class=\"number\">0</span>);</div><div class=\"line\">                    <span class=\"keyword\">if</span>(addReplace)&#123;</div><div class=\"line\">                        replaceRuns.<span class=\"built_in\">add</span>(i);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">text</span> != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"built_in\">text</span>.contains(<span class=\"string\">\"#\"</span>))&#123;</div><div class=\"line\">                        addReplace = <span class=\"keyword\">true</span>;</div><div class=\"line\">                        replaceRuns.<span class=\"built_in\">add</span>(i);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">text</span> != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"built_in\">text</span>.contains(<span class=\"string\">\"&#125;\"</span>))&#123;</div><div class=\"line\">                        addReplace = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        perReplaceRunList.<span class=\"built_in\">add</span>(replaceRuns);</div><div class=\"line\">                        replaceRuns = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i=<span class=\"number\">0</span>;i&lt;perReplaceRunList.<span class=\"built_in\">size</span>();i++)&#123;</div><div class=\"line\">                    List&lt;Integer&gt; runsList = perReplaceRunList.<span class=\"built_in\">get</span>(i);</div><div class=\"line\">                    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"==========================\"</span>);</div><div class=\"line\">                    StringBuffer textSb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>;j&lt;runsList.<span class=\"built_in\">size</span>();j++)&#123;</div><div class=\"line\">                        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"============replace_runs\"</span>+runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).getText(<span class=\"number\">0</span>));</div><div class=\"line\">                        textSb.<span class=\"built_in\">append</span>(runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).getText(<span class=\"number\">0</span>));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">String</span> replaceStr = textSb.toString();</div><div class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; j&lt;runsList.<span class=\"built_in\">size</span>();j++)&#123;</div><div class=\"line\">                        <span class=\"keyword\">for</span> (Entry&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt; entry : param.entrySet()) &#123;</div><div class=\"line\">                            <span class=\"keyword\">String</span> <span class=\"built_in\">key</span> = entry.getKey();</div><div class=\"line\">                            <span class=\"keyword\">if</span> (replaceStr.indexOf(<span class=\"built_in\">key</span>) != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">                                <span class=\"keyword\">Object</span> value = entry.getValue();</div><div class=\"line\">                                <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"keyword\">String</span>) &#123;<span class=\"comment\">// 文本替换</span></div><div class=\"line\">                                    replaceStr = replaceStr.replace(<span class=\"built_in\">key</span>, value.toString());</div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"===========\"</span>+replaceStr);</div><div class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>;j&lt;runsList.<span class=\"built_in\">size</span>();j++)&#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                            runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).setText(replaceStr, <span class=\"number\">0</span>);</div><div class=\"line\">                        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                            runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).setText(<span class=\"string\">\"\"</span>, <span class=\"number\">0</span>);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>;j&lt;runsList.<span class=\"built_in\">size</span>();j++)&#123;</div><div class=\"line\">                        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"============转换后\"</span>+runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).getText(<span class=\"number\">0</span>));</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;<span class=\"keyword\">String</span>&gt; getReplaceFields(<span class=\"keyword\">String</span> template)&#123;</div><div class=\"line\">        List&lt;<span class=\"keyword\">String</span>&gt; replaceFields = <span class=\"keyword\">new</span> ArrayList&lt;<span class=\"keyword\">String</span>&gt;();</div><div class=\"line\">        XWPFDocument doc = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            OPCPackage pack = POIXMLDocument.openPackage(template);</div><div class=\"line\">            doc = <span class=\"keyword\">new</span> XWPFDocument(pack);</div><div class=\"line\">            <span class=\"comment\">// 处理段落</span></div><div class=\"line\">            List&lt;XWPFParagraph&gt; paragraphList = doc.getParagraphs();</div><div class=\"line\">            replaceFields.addAll(getFields(paragraphList));</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 处理表格</span></div><div class=\"line\">            Iterator&lt;XWPFTable&gt; it = doc.getTablesIterator();</div><div class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">                XWPFTable table = it.next();</div><div class=\"line\">                List&lt;XWPFTableRow&gt; rows = table.getRows();</div><div class=\"line\">                <span class=\"keyword\">for</span> (XWPFTableRow row : rows) &#123;</div><div class=\"line\">                    List&lt;XWPFTableCell&gt; cells = row.getTableCells();</div><div class=\"line\">                    <span class=\"keyword\">for</span> (XWPFTableCell cell : cells) &#123;</div><div class=\"line\">                        List&lt;XWPFParagraph&gt; paragraphListTable = cell</div><div class=\"line\">                                .getParagraphs();</div><div class=\"line\">                        replaceFields.addAll(getFields(paragraphListTable));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> replaceFields;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取段落的需要替换的字段</div><div class=\"line\">     * @param paragraphList</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;<span class=\"keyword\">String</span>&gt; getFields(List&lt;XWPFParagraph&gt; paragraphList) &#123;</div><div class=\"line\">        List&lt;<span class=\"keyword\">String</span>&gt; fieldList = <span class=\"keyword\">new</span> ArrayList&lt;<span class=\"keyword\">String</span>&gt;();</div><div class=\"line\">        <span class=\"keyword\">if</span> (paragraphList != <span class=\"keyword\">null</span> &amp;&amp; paragraphList.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (XWPFParagraph paragraph : paragraphList) &#123;</div><div class=\"line\">                <span class=\"built_in\">boolean</span> addReplace = <span class=\"keyword\">false</span>;</div><div class=\"line\">                List&lt;XWPFRun&gt; runs = paragraph.getRuns();</div><div class=\"line\">                <span class=\"comment\">//每个需要替换的key的run的位置的集合</span></div><div class=\"line\">                List&lt;Integer&gt; replaceRuns = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">                <span class=\"comment\">//每个段落的所有的key run的集合</span></div><div class=\"line\">                List&lt;List&lt;Integer&gt;&gt; perReplaceRunList = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i&lt; runs.<span class=\"built_in\">size</span>();i++)&#123;</div><div class=\"line\">                    <span class=\"keyword\">String</span> <span class=\"built_in\">text</span> = runs.<span class=\"built_in\">get</span>(i).getText(<span class=\"number\">0</span>);</div><div class=\"line\">                    <span class=\"keyword\">if</span>(addReplace)&#123;</div><div class=\"line\">                        replaceRuns.<span class=\"built_in\">add</span>(i);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">text</span> != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"built_in\">text</span>.contains(<span class=\"string\">\"#\"</span>))&#123;</div><div class=\"line\">                        addReplace = <span class=\"keyword\">true</span>;</div><div class=\"line\">                        replaceRuns.<span class=\"built_in\">add</span>(i);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"built_in\">text</span> != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"built_in\">text</span>.contains(<span class=\"string\">\"&#125;\"</span>))&#123;</div><div class=\"line\">                        addReplace = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        perReplaceRunList.<span class=\"built_in\">add</span>(replaceRuns);</div><div class=\"line\">                        replaceRuns = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i=<span class=\"number\">0</span>;i&lt;perReplaceRunList.<span class=\"built_in\">size</span>();i++)&#123;</div><div class=\"line\">                    List&lt;Integer&gt; runsList = perReplaceRunList.<span class=\"built_in\">get</span>(i);</div><div class=\"line\">                    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"==========================\"</span>);</div><div class=\"line\">                    StringBuffer textSb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j = <span class=\"number\">0</span>;j&lt;runsList.<span class=\"built_in\">size</span>();j++)&#123;</div><div class=\"line\">                        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"============replace_runs\"</span>+runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).getText(<span class=\"number\">0</span>));</div><div class=\"line\">                        textSb.<span class=\"built_in\">append</span>(runs.<span class=\"built_in\">get</span>(runsList.<span class=\"built_in\">get</span>(j)).getText(<span class=\"number\">0</span>));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">String</span> replaceStr = textSb.toString().<span class=\"built_in\">trim</span>();</div><div class=\"line\">                    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"====replaceStr=\"</span> + replaceStr.substring(replaceStr.indexOf(<span class=\"string\">\"#\"</span>)+<span class=\"number\">2</span>,replaceStr.length()<span class=\"number\">-1</span>));</div><div class=\"line\"><span class=\"comment\">//                  System.out.println(replaceStr.substring(2,replaceStr.length()-1));</span></div><div class=\"line\">                    fieldList.<span class=\"built_in\">add</span>(replaceStr.substring(replaceStr.indexOf(<span class=\"string\">\"#\"</span>)+<span class=\"number\">2</span>,replaceStr.length()<span class=\"number\">-1</span>));</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> fieldList;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p>"},{"title":"jdk1.8的HashMap和ConcurrentHashMap","date":"2017-02-18T13:55:33.000Z","_content":"本文针对jdk1.8的ConcurrentHashMap\n\n<h1>1.8的HashMap设计</h1>\n\n<h2>1.1 整体概览</h2>\n\nHashMap采用的是**数组+链表+红黑树**的形式。\n\n数组是可以扩容的，链表也是转化为红黑树的，这2种方式都可以承载更多的数据。\n\n用户可以设置的参数：初始总容量默认16，默认的加载因子0.75\n\n初始的数组个数默认是16（用户不能设置的）\n\n容量X加载因子=阈值\n\n一旦目前容量超过该阈值，则执行扩容操作。<!--more-->\n\n**什么时候扩容？**\n\n<li>当前容量超过阈值\n<li>当链表中元素个数超过默认设定（8个），当数组的大小还未超过64的时候，此时进行数组的扩容，如果超过则将链表转化成红黑树\n\n**什么时候链表转化为红黑树？（上面已经提到了）**\n\n<li>当数组大小已经超过64并且链表中的元素个数超过默认设定（8个）时，将链表转化为红黑树\n\n目前形象的表示数组中的一个元素称为一个桶\n\n<h2>1.2 put过程</h2>\n\n<li>根据key计算出hash值\n<li>hash值&（数组长度-1）得到所在数组的index\n\n\t如果该index位置的Node元素不存在，则直接创建一个新的Node\n\t如果该index位置的Node元素是TreeNode类型即红黑树类型了，则直接按照红黑树的插入方式进行插入\n\t如果该index位置的Node元素是非TreeNode类型则，则按照链表的形式进行插入操作\n\n链表插入操作完成后，判断是否超过阈值TREEIFY_THRESHOLD（默认是8），超过则要么数组扩容要么链表转化成红黑树\n\n<li>判断当前总容量是否超出阈值，如果超出则执行扩容\n\n源码如下：\n\n\n![这里写图片描述](http://img.blog.csdn.net/20170107004609227)\n\n下面来说说这个扩容的过程\n\n<h2>1.3 扩容过程</h2>\n\n按照2倍扩容的方式，那么就需要将之前的所有元素全部重新按照2倍桶的长度重新计算所在桶。这里为啥是2倍？\n\n因为2倍的话，更加容易计算他们所在的桶，并且各自不会相互干扰。如原桶长度是4，现在桶长度是8，那么\n\n\t桶0中的元素会被分到桶0和桶4中\n\t桶1中的元素会被分到桶1和桶5中\n\t桶2中的元素会被分到桶2和桶6中\n\t桶3中的元素会被分到桶3和桶7中\n\n为啥是这样呢？\n\n桶0中的元素的hash值后2位必然是00，这些hash值可以根据后3位000或者100分成2类数据。他们分别&（8-1）即&111,则后3位为000的在桶0中，后3位为100的必然在桶4中。其他同理，也就是说桶4和桶0重新瓜分了原来桶0中的元素。\n\n如果换成其他倍数，那么瓜分就比较混乱了。\n\n这样在瓜分这些数据的时候，只需要先把这些数据分类，如上述桶0中分成000和100 2类，然后直接构成新的链表，分类完毕后，直接将新的链表挂在对应的桶下即可，源码如下：\n\n\n![这里写图片描述](http://img.blog.csdn.net/20170107004911697)\n\n上述 (e.hash & oldCap) == 0 即可将原桶中的数据分成2类\n\n上述是对于链表情况下的重新移动，而针对红黑树情况下：\n\n则需要考虑分类之后是否还需要依然保持红黑树，如果个数少则直接使用链表即可。\n\n<h2>1.4 get过程</h2>\n\nget过程比较简单\n\n<li>根据key计算出hash值\n\n<li>hash值&（数组长度-1）得到所在数组的index\t\t\n\n\t如果要找的key就是上述数组index位置的元素，直接返回该元素的值\n\t如果该数组index位置元素是TreeNode类型，则按照红黑树的查询方式来进行查找\n\t如果该数组index位置元素非TreeNode类型，则按照链表的方式来进行遍历查询\n\n源码如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107005249311)\n\n<h1>1.7的ConcurrentHashMap设计</h1>\n\nConcurrentHashMap是线程安全，通过分段锁的方式提高了并发度。分段是一开始就确定的了，后期不能再进行扩容的。\n\n其中的段Segment继承了重入锁ReentrantLock，有了锁的功能，同时含有类似HashMap中的数组加链表结构（这里没有使用红黑树）\n\n虽然Segment的个数是不能扩容的，但是单个Segment里面的数组是可以扩容的。\n\n<h2>2.1 整体概览</h2>\n\nConcurrentHashMap有3个参数：\n\n\tinitialCapacity：初始总容量，默认16\n\tloadFactor：加载因子，默认0.75\n\tconcurrencyLevel：并发级别，默认16\n\n然后我们需要知道的是：\n\n<li>segment的个数即ssize\n\n取大于等于并发级别的最小的2的幂次。如concurrencyLevel=16，那么sszie=16,如concurrencyLevel=10，那么ssize=16\n\n<li>单个segment的初始容量cap\n\nc=initialCapacity/ssize,并且可能需要+1。如15/7=2，那么c要取3，如16/8=2，那么c取2\n\nc可能是一个任意值，那么同上述一样，cap取的值就是大于等于c的最下2的幂次。最小值要求是2\n\n<li>单个segment的阈值threshold\n\ncap*loadFactor\n\n所以默认情况下，segment的个数sszie=16,每个segment的初始容量cap=2，单个segment的阈值threshold=1\n\n\n<h2>2.2 put过程</h2>\n\n<li>首先根据key计算出一个hash值，找到对应的Segment\n<li>调用Segment的lock方法，为后面的put操作加锁\n<li>根据key计算出hash值，找到Segment中数组中对应index的链表，并将该数据放置到该链表中\n<li>判断当前Segment包含元素的数量大于阈值，则Segment进行扩容\n\n整体代码逻辑见如下源码：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107005617154)\n\n其中上述Segment的put过程源码如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107005641091)\n\n<h2>2.3 扩容过程</h2>\n\n这个扩容是在Segment的锁的保护下进行扩容的，不需要关注并发问题。\n\n![这里写图片描述](http://img.blog.csdn.net/20170107005716473)\n\n这里的重点就是：\n\n首先找到一个lastRun，lastRun之后的元素和lastRun是在同一个桶中，所以后面的不需要进行变动。\n\n然后对开始到lastRun部分的元素，重新计算下设置到newTable中，每次都是将当前元素作为newTable的首元素，之前老的链表作为该首元素的next部分。\n\n<h2>2.4 get过程</h2>\n\n<li>根据key计算出对应的segment\n<li>再根据key计算出对应segment中数组的index\n<li>最终遍历上述index位置的链表，查找出对应的key的value\n\n源码如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107005803333)\n\n<h1>1.8的ConcurrentHashMap设计</h1>\n\n1.8的ConcurrentHashMap摒弃了1.7的segment设计，而是在1.8HashMap的基础上实现了线程安全的版本，即也是采用**数组+链表+红黑树**的形式。\n\n数组可以扩容，链表可以转化为红黑树\n\n<h2>3.1 整体概览</h2>\n\n有一个重要的参数sizeCtl，代表数组的大小（但是还有其他取值及其含义，后面再详细说到）\n\n用户可以设置一个初始容量initialCapacity给ConcurrentHashMap\n\nsizeCtl=大于（1.5倍initialCapacity+1）的最小的2的幂次。\n\n即initialCapacity=20，则sizeCtl=32,如initialCapacity=24，则sizeCtl=64。\n\n初始化的时候，会按照sizeCtl的大小创建出对应大小的数组\n\n<h2>3.2 put过程</h2>\n\n源码如下所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107005911460)\n\n<li>如果数组还未初始化，那么进行初始化，这里会通过一个CAS操作将sizeCtl设置为-1，设置成功的，可以进行初始化操作\n<li>根据key的hash值找到对应的桶，如果桶还不存在，那么通过一个CAS操作来设置桶的第一个元素，失败的继续执行下面的逻辑即向桶中插入或更新\n<li>如果找到的桶存在，但是桶中第一个元素的hash值是-1，说明此时该桶正在进行迁移操作，这一块会在下面的扩容中详细谈及。\n<li>如果找到的桶存在，那么要么是链表结构要么是红黑树结构，此时需要获取该桶的锁，在锁定的情况下执行链表或者红黑树的插入或更新\n\n\t如果桶中第一个元素的hash值大于0，说明是链表结构，则对链表插入或者更新\n\t如果桶中的第一个元素类型是TreeBin，说明是红黑树结构，则按照红黑树的方式进行插入或者更新\n<li>在锁的保护下插入或者更新完毕后，如果是链表结构，需要判断链表中元素的数量是否超过8（默认），一旦超过就要考虑进行数组扩容或者是链表转红黑树\n\n**下面就来重点看看这个扩容过程**\n\n<h2>3.3 扩容过程</h2>\n\n一旦链表中的元素个数超过了8个，那么可以执行数组扩容或者链表转为红黑树，这里依据的策略跟HashMap依据的策略是一致的。\n\n当数组长度还未达到64个时，优先数组的扩容，否则选择链表转为红黑树。\n\n源码如下所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010024665)\n\n重点来看看这个扩容过程，即看下上述tryPresize方法，也可以看到上述是2倍扩容的方式\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010051374)\n\n第一个执行的线程会首先设置sizeCtl属性为一个负值，然后执行transfer(tab, null)，其他晚进来的线程会检查当前扩容是否已经完成，没完成则帮助进行扩容，完成了则直接退出。\n\n该ConcurrentHashMap的扩容操作可以允许多个线程并发执行，那么就要处理好任务的分配工作。每个线程获取一部分桶的迁移任务，如果当前线程的任务完成，查看是否还有未迁移的桶，若有则继续领取任务执行，若没有则退出。在退出时需要检查是否还有其他线程在参与迁移工作，如果有则自己什么也不做直接退出，如果没有了则执行最终的收尾工作。\n\n**问题1：当前线程如何感知其他线程也在参与迁移工作？**\n\n靠sizeCtl的值，它初始值是一个负值=(rs << RESIZE_STAMP_SHIFT) + 2)，每当一个线程参与进来执行迁移工作，则该值进行CAS自增，该线程的任务执行完毕要退出时对该值进行CAS自减操作，所以当sizeCtl的值等于上述初值则说明了此时未有其他线程还在执行迁移工作，可以去执行收尾工作了。见如下代码\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010125312)\n\n**问题2：任务按照何规则进行分片？**\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010151062)\n\n上述stride即是每个分片的大小，目前有最低要求16，即每个分片至少需要16个桶。stride的计算依赖于CPU的核数，如果只有1个核，那么此时就不用分片，即stride=n。其他情况就是 (n >>> 3) / NCPU。\n\n**问题3：如何记录目前已经分出去的任务？**\n\nConcurrentHashMap含有一个属性transferIndex（初值为最后一个桶），表示从transferIndex开始到后面所有的桶的迁移任务已经被分配出去了。所以每次线程领取扩容任务，则需要对该属性进行CAS的减操作，即一般是transferIndex-stride。\n\n**问题4：每个线程如何处理分到的部分桶的迁移工作**\n\n第一个获取到分片的线程会创建一个新的数组，容量是之前的2倍。\n\n遍历自己所分到的桶：\n\n\t桶中元素不存在，则通过CAS操作设置桶中第一个元素为ForwardingNode，其Hash值为MOVED（-1）,同时该元素含有新的数组引用\n\t\n\t此时若其他线程进行put操作，发现第一个元素的hash值为-1则代表正在进行扩容操作（并且表明该桶已经完成扩容操作了，可以直接在新的数组中重新进行hash和插入操作），该线程就可以去参与进去，或者没有任务则不用参与，此时可以去直接操作新的数组了\n\t\n\t桶中元素存在且hash值为-1，则说明该桶已经被处理了（本不会出现多个线程任务重叠的情况，这里主要是该线程在执行完所有的任务后会再次进行检查，再次核对）\n\t\n\t桶中为链表或者红黑树结构，则需要获取桶锁，防止其他线程对该桶进行put操作，然后处理方式同HashMap的处理方式一样，对桶中元素分为2类，分别代表当前桶中和要迁移到新桶中的元素。设置完毕后代表桶迁移工作已经完成，旧数组中该桶可以设置成ForwardingNode了\n\n\n下面来看下详细的代码：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010302919)\n\n<h2>3.4 get过程</h2>\n\n<li>根据k计算出hash值，找到对应的数组index\n<li>如果该index位置无元素则直接返回null\n<li>如果该index位置有元素\n\n\t如果第一个元素的hash值小于0，则该节点可能为ForwardingNode或者红黑树节点TreeBin\n\t\n\t如果是ForwardingNode（表示当前正在进行扩容），使用新的数组来进行查找\n\t\n\t如果是红黑树节点TreeBin，使用红黑树的查找方式来进行查找\n\t\n\t如果第一个元素的hash大于等于0，则为链表结构，依次遍历即可找到对应的元素\n\n详细代码如下\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010356702)\n\n至此，ConcurrentHashMap主要的操作都粗略的介绍完毕了，其他一些操作靠各位自行去看了。\n\n下面针对一些问题来进行解答\n\n<h1>问题分析<h1>\n\n<h2>4.1 ConcurrentHashMap读为什么不需要锁？</h2>\n\n我们通常使用读写锁来保护对一堆数据的读写操作。读时加读锁，写时加写锁。在什么样的情况下可以不需要读锁呢？\n\n如果对数据的读写是一个原子操作，那么此时是可以不需要读锁的。如ConcurrentHashMap对数据的读写，写操作是不需要分2次写的（没有中间状态），读操作也是不需要2次读取的。假如一个写操作需要分多次写，必然会有中间状态，如果读不加锁，那么可能就会读到中间状态，那就不对了。\n\n假如ConcurrentHashMap提供put(key1,value1,key2,value2)，写入的时候必然会存在中间状态即key1写完成，但是key2还未写，此时如果读不加锁，那么就可能读到key1是新数据而key2是老数据的中间状态。\n\n虽然ConcurrentHashMap的读不需要锁，但是需要保证能读到最新数据，所以必须加volatile。即数组的引用需要加volatile，同时一个Node节点中的val和next属性也必须要加volatile。\n\n<h2>4.2 ConcurrentHashMap是否可以在无锁的情况下进行迁移？</h2>\n\n目前1.8的ConcurrentHashMap迁移是在锁定旧桶的前提下进行迁移的，然而并没有去锁定新桶。那么就可能提出如下问题：\n\n<li>在某个桶的迁移过程中，别的线程想要对该桶进行put操作怎么办？\n\n一旦某个桶在迁移过程中了，必然要获取该桶的锁，所以其他线程的put操作要被阻塞，一旦迁移完毕，该桶中第一个元素就会被设置成ForwardingNode节点，所以其他线程put时需要重新判断下桶中第一个元素是否被更改了，如果被改了重新获取重新执行逻辑，如下代码\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010526876)\n\n<li>某个桶已经迁移完成（其他桶还未完成），别的线程想要对该桶进行put操作怎么办？\n\n该线程会首先检查是否还有未分配的迁移任务，如果有则先去执行迁移任务，如果没有即全部任务已经分发出去了，那么此时该线程可以直接对新的桶进行插入操作（映射到的新桶必然已经完成了迁移，所以可以放心执行操作）\n\n从上面看到我们在迁移的时候还是需要对旧桶锁定的，能否在无锁的情况下实现迁移？\n\n可以参考参考这篇论文Split-Ordered Lists: Lock-Free Extensible Hash Tables\n\n一旦扩容就涉及到迁移桶中元素的操作，将一个桶中的元素迁移到另一个桶中的操作不是一个原子操作，所以需要在锁的保护下进行迁移。如果扩容操作是移动桶的指向，那么就可以通过一个CAS操作来完成扩容操作。上述Split-Ordered Lists就是把所有元素按照一定的顺序进行排列。该list被分成一段一段的，每一段都代表某个桶中的所有元素。每个桶中都有一个指向第一个元素的指针，如下图结构所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010603392)\n\n每一段其实也是分成2类的，如同前面所说的HashMap在扩容是分成2类的情况是一样的，此时Split-Ordered Lists在扩容时就只需要将新桶的指针指向这2类的分界点即可。\n\n这一块之后再详细说明吧。\n\n<h2>4.3 ConcurrentHashMap曾经的弱一致性</h2>\n\n具体详见这篇针对老版本的ConcurrentHashMap的说明文章[为什么ConcurrentHashMap是弱一致的](http://ifeve.com/concurrenthashmap-weakly-consistent/)\n\n文中已经解释到：对数组的引用是volatile来修饰的，但是数组中的元素并不是。即读取数组的引用总是能读取到最新的值，但是读取数组中某一个元素的时候并不一定能读到最新的值。所以说是弱一致性的。\n\n我觉得这个只需要稍微改动下就可以实现强一致性：\n\n<li>对于新加的key，通过写入到链表的末尾即可。因为一个元素的next属性是volatile的，可以保证写入后立马看的到，如下1.8的方式\n\n<li>或者对数组中元素的更新采用volatile写的方式，如下1.7的形式\n\n但是现在1.7版本的ConcurrentHashMap对于数组中元素的写也是加了volatile的，如下代码\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010723393)\n\n1.8的方式就是：直接将新加入的元素写入next属性（含有volatile修饰）中而不是修改桶中的第一个元素。\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010744786)\n\n所以在1.7和1.8版本的ConcurrentHashMap中不再是弱一致性，写入的数据是可以立马本读到的。\n\n\n","source":"_posts/jdk1-8的HashMap和ConcurrentHashMap.md","raw":"---\ntitle: jdk1.8的HashMap和ConcurrentHashMap\ndate: 2017-02-18 21:55:33\ncategories: Java二三事\ntags:\n\t- Java\n---\n本文针对jdk1.8的ConcurrentHashMap\n\n<h1>1.8的HashMap设计</h1>\n\n<h2>1.1 整体概览</h2>\n\nHashMap采用的是**数组+链表+红黑树**的形式。\n\n数组是可以扩容的，链表也是转化为红黑树的，这2种方式都可以承载更多的数据。\n\n用户可以设置的参数：初始总容量默认16，默认的加载因子0.75\n\n初始的数组个数默认是16（用户不能设置的）\n\n容量X加载因子=阈值\n\n一旦目前容量超过该阈值，则执行扩容操作。<!--more-->\n\n**什么时候扩容？**\n\n<li>当前容量超过阈值\n<li>当链表中元素个数超过默认设定（8个），当数组的大小还未超过64的时候，此时进行数组的扩容，如果超过则将链表转化成红黑树\n\n**什么时候链表转化为红黑树？（上面已经提到了）**\n\n<li>当数组大小已经超过64并且链表中的元素个数超过默认设定（8个）时，将链表转化为红黑树\n\n目前形象的表示数组中的一个元素称为一个桶\n\n<h2>1.2 put过程</h2>\n\n<li>根据key计算出hash值\n<li>hash值&（数组长度-1）得到所在数组的index\n\n\t如果该index位置的Node元素不存在，则直接创建一个新的Node\n\t如果该index位置的Node元素是TreeNode类型即红黑树类型了，则直接按照红黑树的插入方式进行插入\n\t如果该index位置的Node元素是非TreeNode类型则，则按照链表的形式进行插入操作\n\n链表插入操作完成后，判断是否超过阈值TREEIFY_THRESHOLD（默认是8），超过则要么数组扩容要么链表转化成红黑树\n\n<li>判断当前总容量是否超出阈值，如果超出则执行扩容\n\n源码如下：\n\n\n![这里写图片描述](http://img.blog.csdn.net/20170107004609227)\n\n下面来说说这个扩容的过程\n\n<h2>1.3 扩容过程</h2>\n\n按照2倍扩容的方式，那么就需要将之前的所有元素全部重新按照2倍桶的长度重新计算所在桶。这里为啥是2倍？\n\n因为2倍的话，更加容易计算他们所在的桶，并且各自不会相互干扰。如原桶长度是4，现在桶长度是8，那么\n\n\t桶0中的元素会被分到桶0和桶4中\n\t桶1中的元素会被分到桶1和桶5中\n\t桶2中的元素会被分到桶2和桶6中\n\t桶3中的元素会被分到桶3和桶7中\n\n为啥是这样呢？\n\n桶0中的元素的hash值后2位必然是00，这些hash值可以根据后3位000或者100分成2类数据。他们分别&（8-1）即&111,则后3位为000的在桶0中，后3位为100的必然在桶4中。其他同理，也就是说桶4和桶0重新瓜分了原来桶0中的元素。\n\n如果换成其他倍数，那么瓜分就比较混乱了。\n\n这样在瓜分这些数据的时候，只需要先把这些数据分类，如上述桶0中分成000和100 2类，然后直接构成新的链表，分类完毕后，直接将新的链表挂在对应的桶下即可，源码如下：\n\n\n![这里写图片描述](http://img.blog.csdn.net/20170107004911697)\n\n上述 (e.hash & oldCap) == 0 即可将原桶中的数据分成2类\n\n上述是对于链表情况下的重新移动，而针对红黑树情况下：\n\n则需要考虑分类之后是否还需要依然保持红黑树，如果个数少则直接使用链表即可。\n\n<h2>1.4 get过程</h2>\n\nget过程比较简单\n\n<li>根据key计算出hash值\n\n<li>hash值&（数组长度-1）得到所在数组的index\t\t\n\n\t如果要找的key就是上述数组index位置的元素，直接返回该元素的值\n\t如果该数组index位置元素是TreeNode类型，则按照红黑树的查询方式来进行查找\n\t如果该数组index位置元素非TreeNode类型，则按照链表的方式来进行遍历查询\n\n源码如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107005249311)\n\n<h1>1.7的ConcurrentHashMap设计</h1>\n\nConcurrentHashMap是线程安全，通过分段锁的方式提高了并发度。分段是一开始就确定的了，后期不能再进行扩容的。\n\n其中的段Segment继承了重入锁ReentrantLock，有了锁的功能，同时含有类似HashMap中的数组加链表结构（这里没有使用红黑树）\n\n虽然Segment的个数是不能扩容的，但是单个Segment里面的数组是可以扩容的。\n\n<h2>2.1 整体概览</h2>\n\nConcurrentHashMap有3个参数：\n\n\tinitialCapacity：初始总容量，默认16\n\tloadFactor：加载因子，默认0.75\n\tconcurrencyLevel：并发级别，默认16\n\n然后我们需要知道的是：\n\n<li>segment的个数即ssize\n\n取大于等于并发级别的最小的2的幂次。如concurrencyLevel=16，那么sszie=16,如concurrencyLevel=10，那么ssize=16\n\n<li>单个segment的初始容量cap\n\nc=initialCapacity/ssize,并且可能需要+1。如15/7=2，那么c要取3，如16/8=2，那么c取2\n\nc可能是一个任意值，那么同上述一样，cap取的值就是大于等于c的最下2的幂次。最小值要求是2\n\n<li>单个segment的阈值threshold\n\ncap*loadFactor\n\n所以默认情况下，segment的个数sszie=16,每个segment的初始容量cap=2，单个segment的阈值threshold=1\n\n\n<h2>2.2 put过程</h2>\n\n<li>首先根据key计算出一个hash值，找到对应的Segment\n<li>调用Segment的lock方法，为后面的put操作加锁\n<li>根据key计算出hash值，找到Segment中数组中对应index的链表，并将该数据放置到该链表中\n<li>判断当前Segment包含元素的数量大于阈值，则Segment进行扩容\n\n整体代码逻辑见如下源码：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107005617154)\n\n其中上述Segment的put过程源码如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107005641091)\n\n<h2>2.3 扩容过程</h2>\n\n这个扩容是在Segment的锁的保护下进行扩容的，不需要关注并发问题。\n\n![这里写图片描述](http://img.blog.csdn.net/20170107005716473)\n\n这里的重点就是：\n\n首先找到一个lastRun，lastRun之后的元素和lastRun是在同一个桶中，所以后面的不需要进行变动。\n\n然后对开始到lastRun部分的元素，重新计算下设置到newTable中，每次都是将当前元素作为newTable的首元素，之前老的链表作为该首元素的next部分。\n\n<h2>2.4 get过程</h2>\n\n<li>根据key计算出对应的segment\n<li>再根据key计算出对应segment中数组的index\n<li>最终遍历上述index位置的链表，查找出对应的key的value\n\n源码如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107005803333)\n\n<h1>1.8的ConcurrentHashMap设计</h1>\n\n1.8的ConcurrentHashMap摒弃了1.7的segment设计，而是在1.8HashMap的基础上实现了线程安全的版本，即也是采用**数组+链表+红黑树**的形式。\n\n数组可以扩容，链表可以转化为红黑树\n\n<h2>3.1 整体概览</h2>\n\n有一个重要的参数sizeCtl，代表数组的大小（但是还有其他取值及其含义，后面再详细说到）\n\n用户可以设置一个初始容量initialCapacity给ConcurrentHashMap\n\nsizeCtl=大于（1.5倍initialCapacity+1）的最小的2的幂次。\n\n即initialCapacity=20，则sizeCtl=32,如initialCapacity=24，则sizeCtl=64。\n\n初始化的时候，会按照sizeCtl的大小创建出对应大小的数组\n\n<h2>3.2 put过程</h2>\n\n源码如下所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107005911460)\n\n<li>如果数组还未初始化，那么进行初始化，这里会通过一个CAS操作将sizeCtl设置为-1，设置成功的，可以进行初始化操作\n<li>根据key的hash值找到对应的桶，如果桶还不存在，那么通过一个CAS操作来设置桶的第一个元素，失败的继续执行下面的逻辑即向桶中插入或更新\n<li>如果找到的桶存在，但是桶中第一个元素的hash值是-1，说明此时该桶正在进行迁移操作，这一块会在下面的扩容中详细谈及。\n<li>如果找到的桶存在，那么要么是链表结构要么是红黑树结构，此时需要获取该桶的锁，在锁定的情况下执行链表或者红黑树的插入或更新\n\n\t如果桶中第一个元素的hash值大于0，说明是链表结构，则对链表插入或者更新\n\t如果桶中的第一个元素类型是TreeBin，说明是红黑树结构，则按照红黑树的方式进行插入或者更新\n<li>在锁的保护下插入或者更新完毕后，如果是链表结构，需要判断链表中元素的数量是否超过8（默认），一旦超过就要考虑进行数组扩容或者是链表转红黑树\n\n**下面就来重点看看这个扩容过程**\n\n<h2>3.3 扩容过程</h2>\n\n一旦链表中的元素个数超过了8个，那么可以执行数组扩容或者链表转为红黑树，这里依据的策略跟HashMap依据的策略是一致的。\n\n当数组长度还未达到64个时，优先数组的扩容，否则选择链表转为红黑树。\n\n源码如下所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010024665)\n\n重点来看看这个扩容过程，即看下上述tryPresize方法，也可以看到上述是2倍扩容的方式\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010051374)\n\n第一个执行的线程会首先设置sizeCtl属性为一个负值，然后执行transfer(tab, null)，其他晚进来的线程会检查当前扩容是否已经完成，没完成则帮助进行扩容，完成了则直接退出。\n\n该ConcurrentHashMap的扩容操作可以允许多个线程并发执行，那么就要处理好任务的分配工作。每个线程获取一部分桶的迁移任务，如果当前线程的任务完成，查看是否还有未迁移的桶，若有则继续领取任务执行，若没有则退出。在退出时需要检查是否还有其他线程在参与迁移工作，如果有则自己什么也不做直接退出，如果没有了则执行最终的收尾工作。\n\n**问题1：当前线程如何感知其他线程也在参与迁移工作？**\n\n靠sizeCtl的值，它初始值是一个负值=(rs << RESIZE_STAMP_SHIFT) + 2)，每当一个线程参与进来执行迁移工作，则该值进行CAS自增，该线程的任务执行完毕要退出时对该值进行CAS自减操作，所以当sizeCtl的值等于上述初值则说明了此时未有其他线程还在执行迁移工作，可以去执行收尾工作了。见如下代码\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010125312)\n\n**问题2：任务按照何规则进行分片？**\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010151062)\n\n上述stride即是每个分片的大小，目前有最低要求16，即每个分片至少需要16个桶。stride的计算依赖于CPU的核数，如果只有1个核，那么此时就不用分片，即stride=n。其他情况就是 (n >>> 3) / NCPU。\n\n**问题3：如何记录目前已经分出去的任务？**\n\nConcurrentHashMap含有一个属性transferIndex（初值为最后一个桶），表示从transferIndex开始到后面所有的桶的迁移任务已经被分配出去了。所以每次线程领取扩容任务，则需要对该属性进行CAS的减操作，即一般是transferIndex-stride。\n\n**问题4：每个线程如何处理分到的部分桶的迁移工作**\n\n第一个获取到分片的线程会创建一个新的数组，容量是之前的2倍。\n\n遍历自己所分到的桶：\n\n\t桶中元素不存在，则通过CAS操作设置桶中第一个元素为ForwardingNode，其Hash值为MOVED（-1）,同时该元素含有新的数组引用\n\t\n\t此时若其他线程进行put操作，发现第一个元素的hash值为-1则代表正在进行扩容操作（并且表明该桶已经完成扩容操作了，可以直接在新的数组中重新进行hash和插入操作），该线程就可以去参与进去，或者没有任务则不用参与，此时可以去直接操作新的数组了\n\t\n\t桶中元素存在且hash值为-1，则说明该桶已经被处理了（本不会出现多个线程任务重叠的情况，这里主要是该线程在执行完所有的任务后会再次进行检查，再次核对）\n\t\n\t桶中为链表或者红黑树结构，则需要获取桶锁，防止其他线程对该桶进行put操作，然后处理方式同HashMap的处理方式一样，对桶中元素分为2类，分别代表当前桶中和要迁移到新桶中的元素。设置完毕后代表桶迁移工作已经完成，旧数组中该桶可以设置成ForwardingNode了\n\n\n下面来看下详细的代码：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010302919)\n\n<h2>3.4 get过程</h2>\n\n<li>根据k计算出hash值，找到对应的数组index\n<li>如果该index位置无元素则直接返回null\n<li>如果该index位置有元素\n\n\t如果第一个元素的hash值小于0，则该节点可能为ForwardingNode或者红黑树节点TreeBin\n\t\n\t如果是ForwardingNode（表示当前正在进行扩容），使用新的数组来进行查找\n\t\n\t如果是红黑树节点TreeBin，使用红黑树的查找方式来进行查找\n\t\n\t如果第一个元素的hash大于等于0，则为链表结构，依次遍历即可找到对应的元素\n\n详细代码如下\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010356702)\n\n至此，ConcurrentHashMap主要的操作都粗略的介绍完毕了，其他一些操作靠各位自行去看了。\n\n下面针对一些问题来进行解答\n\n<h1>问题分析<h1>\n\n<h2>4.1 ConcurrentHashMap读为什么不需要锁？</h2>\n\n我们通常使用读写锁来保护对一堆数据的读写操作。读时加读锁，写时加写锁。在什么样的情况下可以不需要读锁呢？\n\n如果对数据的读写是一个原子操作，那么此时是可以不需要读锁的。如ConcurrentHashMap对数据的读写，写操作是不需要分2次写的（没有中间状态），读操作也是不需要2次读取的。假如一个写操作需要分多次写，必然会有中间状态，如果读不加锁，那么可能就会读到中间状态，那就不对了。\n\n假如ConcurrentHashMap提供put(key1,value1,key2,value2)，写入的时候必然会存在中间状态即key1写完成，但是key2还未写，此时如果读不加锁，那么就可能读到key1是新数据而key2是老数据的中间状态。\n\n虽然ConcurrentHashMap的读不需要锁，但是需要保证能读到最新数据，所以必须加volatile。即数组的引用需要加volatile，同时一个Node节点中的val和next属性也必须要加volatile。\n\n<h2>4.2 ConcurrentHashMap是否可以在无锁的情况下进行迁移？</h2>\n\n目前1.8的ConcurrentHashMap迁移是在锁定旧桶的前提下进行迁移的，然而并没有去锁定新桶。那么就可能提出如下问题：\n\n<li>在某个桶的迁移过程中，别的线程想要对该桶进行put操作怎么办？\n\n一旦某个桶在迁移过程中了，必然要获取该桶的锁，所以其他线程的put操作要被阻塞，一旦迁移完毕，该桶中第一个元素就会被设置成ForwardingNode节点，所以其他线程put时需要重新判断下桶中第一个元素是否被更改了，如果被改了重新获取重新执行逻辑，如下代码\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010526876)\n\n<li>某个桶已经迁移完成（其他桶还未完成），别的线程想要对该桶进行put操作怎么办？\n\n该线程会首先检查是否还有未分配的迁移任务，如果有则先去执行迁移任务，如果没有即全部任务已经分发出去了，那么此时该线程可以直接对新的桶进行插入操作（映射到的新桶必然已经完成了迁移，所以可以放心执行操作）\n\n从上面看到我们在迁移的时候还是需要对旧桶锁定的，能否在无锁的情况下实现迁移？\n\n可以参考参考这篇论文Split-Ordered Lists: Lock-Free Extensible Hash Tables\n\n一旦扩容就涉及到迁移桶中元素的操作，将一个桶中的元素迁移到另一个桶中的操作不是一个原子操作，所以需要在锁的保护下进行迁移。如果扩容操作是移动桶的指向，那么就可以通过一个CAS操作来完成扩容操作。上述Split-Ordered Lists就是把所有元素按照一定的顺序进行排列。该list被分成一段一段的，每一段都代表某个桶中的所有元素。每个桶中都有一个指向第一个元素的指针，如下图结构所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010603392)\n\n每一段其实也是分成2类的，如同前面所说的HashMap在扩容是分成2类的情况是一样的，此时Split-Ordered Lists在扩容时就只需要将新桶的指针指向这2类的分界点即可。\n\n这一块之后再详细说明吧。\n\n<h2>4.3 ConcurrentHashMap曾经的弱一致性</h2>\n\n具体详见这篇针对老版本的ConcurrentHashMap的说明文章[为什么ConcurrentHashMap是弱一致的](http://ifeve.com/concurrenthashmap-weakly-consistent/)\n\n文中已经解释到：对数组的引用是volatile来修饰的，但是数组中的元素并不是。即读取数组的引用总是能读取到最新的值，但是读取数组中某一个元素的时候并不一定能读到最新的值。所以说是弱一致性的。\n\n我觉得这个只需要稍微改动下就可以实现强一致性：\n\n<li>对于新加的key，通过写入到链表的末尾即可。因为一个元素的next属性是volatile的，可以保证写入后立马看的到，如下1.8的方式\n\n<li>或者对数组中元素的更新采用volatile写的方式，如下1.7的形式\n\n但是现在1.7版本的ConcurrentHashMap对于数组中元素的写也是加了volatile的，如下代码\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010723393)\n\n1.8的方式就是：直接将新加入的元素写入next属性（含有volatile修饰）中而不是修改桶中的第一个元素。\n\n![这里写图片描述](http://img.blog.csdn.net/20170107010744786)\n\n所以在1.7和1.8版本的ConcurrentHashMap中不再是弱一致性，写入的数据是可以立马本读到的。\n\n\n","slug":"jdk1-8的HashMap和ConcurrentHashMap","published":1,"updated":"2017-02-18T13:58:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kfl002drhso3iuwgot5","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>本文针对jdk1.8的ConcurrentHashMap</p>\n<h1>1.8的HashMap设计</h1>\n\n<h2>1.1 整体概览</h2>\n\n<p>HashMap采用的是<strong>数组+链表+红黑树</strong>的形式。</p>\n<p>数组是可以扩容的，链表也是转化为红黑树的，这2种方式都可以承载更多的数据。</p>\n<p>用户可以设置的参数：初始总容量默认16，默认的加载因子0.75</p>\n<p>初始的数组个数默认是16（用户不能设置的）</p>\n<p>容量X加载因子=阈值</p>\n<p>一旦目前容量超过该阈值，则执行扩容操作。<a id=\"more\"></a></p>\n<p><strong>什么时候扩容？</strong></p>\n<p><li>当前容量超过阈值</li></p>\n<p><li>当链表中元素个数超过默认设定（8个），当数组的大小还未超过64的时候，此时进行数组的扩容，如果超过则将链表转化成红黑树</li></p>\n<p><strong>什么时候链表转化为红黑树？（上面已经提到了）</strong></p>\n<p><li>当数组大小已经超过64并且链表中的元素个数超过默认设定（8个）时，将链表转化为红黑树</li></p>\n<p>目前形象的表示数组中的一个元素称为一个桶</p>\n<h2>1.2 put过程</h2>\n\n<p><li>根据key计算出hash值</li></p>\n<p><li>hash值&amp;（数组长度-1）得到所在数组的index</li></p>\n<pre><code>如果该index位置的Node元素不存在，则直接创建一个新的Node\n如果该index位置的Node元素是TreeNode类型即红黑树类型了，则直接按照红黑树的插入方式进行插入\n如果该index位置的Node元素是非TreeNode类型则，则按照链表的形式进行插入操作\n</code></pre><p>链表插入操作完成后，判断是否超过阈值TREEIFY_THRESHOLD（默认是8），超过则要么数组扩容要么链表转化成红黑树</p>\n<p><li>判断当前总容量是否超出阈值，如果超出则执行扩容</li></p>\n<p>源码如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107004609227\" alt=\"这里写图片描述\"></p>\n<p>下面来说说这个扩容的过程</p>\n<h2>1.3 扩容过程</h2>\n\n<p>按照2倍扩容的方式，那么就需要将之前的所有元素全部重新按照2倍桶的长度重新计算所在桶。这里为啥是2倍？</p>\n<p>因为2倍的话，更加容易计算他们所在的桶，并且各自不会相互干扰。如原桶长度是4，现在桶长度是8，那么</p>\n<pre><code>桶0中的元素会被分到桶0和桶4中\n桶1中的元素会被分到桶1和桶5中\n桶2中的元素会被分到桶2和桶6中\n桶3中的元素会被分到桶3和桶7中\n</code></pre><p>为啥是这样呢？</p>\n<p>桶0中的元素的hash值后2位必然是00，这些hash值可以根据后3位000或者100分成2类数据。他们分别&amp;（8-1）即&amp;111,则后3位为000的在桶0中，后3位为100的必然在桶4中。其他同理，也就是说桶4和桶0重新瓜分了原来桶0中的元素。</p>\n<p>如果换成其他倍数，那么瓜分就比较混乱了。</p>\n<p>这样在瓜分这些数据的时候，只需要先把这些数据分类，如上述桶0中分成000和100 2类，然后直接构成新的链表，分类完毕后，直接将新的链表挂在对应的桶下即可，源码如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107004911697\" alt=\"这里写图片描述\"></p>\n<p>上述 (e.hash &amp; oldCap) == 0 即可将原桶中的数据分成2类</p>\n<p>上述是对于链表情况下的重新移动，而针对红黑树情况下：</p>\n<p>则需要考虑分类之后是否还需要依然保持红黑树，如果个数少则直接使用链表即可。</p>\n<h2>1.4 get过程</h2>\n\n<p>get过程比较简单</p>\n<p><li>根据key计算出hash值</li></p>\n<p><li>hash值&amp;（数组长度-1）得到所在数组的index        </li></p>\n<pre><code>如果要找的key就是上述数组index位置的元素，直接返回该元素的值\n如果该数组index位置元素是TreeNode类型，则按照红黑树的查询方式来进行查找\n如果该数组index位置元素非TreeNode类型，则按照链表的方式来进行遍历查询\n</code></pre><p>源码如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107005249311\" alt=\"这里写图片描述\"></p>\n<h1>1.7的ConcurrentHashMap设计</h1>\n\n<p>ConcurrentHashMap是线程安全，通过分段锁的方式提高了并发度。分段是一开始就确定的了，后期不能再进行扩容的。</p>\n<p>其中的段Segment继承了重入锁ReentrantLock，有了锁的功能，同时含有类似HashMap中的数组加链表结构（这里没有使用红黑树）</p>\n<p>虽然Segment的个数是不能扩容的，但是单个Segment里面的数组是可以扩容的。</p>\n<h2>2.1 整体概览</h2>\n\n<p>ConcurrentHashMap有3个参数：</p>\n<pre><code>initialCapacity：初始总容量，默认16\nloadFactor：加载因子，默认0.75\nconcurrencyLevel：并发级别，默认16\n</code></pre><p>然后我们需要知道的是：</p>\n<p><li>segment的个数即ssize</li></p>\n<p>取大于等于并发级别的最小的2的幂次。如concurrencyLevel=16，那么sszie=16,如concurrencyLevel=10，那么ssize=16</p>\n<p><li>单个segment的初始容量cap</li></p>\n<p>c=initialCapacity/ssize,并且可能需要+1。如15/7=2，那么c要取3，如16/8=2，那么c取2</p>\n<p>c可能是一个任意值，那么同上述一样，cap取的值就是大于等于c的最下2的幂次。最小值要求是2</p>\n<p><li>单个segment的阈值threshold</li></p>\n<p>cap*loadFactor</p>\n<p>所以默认情况下，segment的个数sszie=16,每个segment的初始容量cap=2，单个segment的阈值threshold=1</p>\n<h2>2.2 put过程</h2>\n\n<p><li>首先根据key计算出一个hash值，找到对应的Segment</li></p>\n<p><li>调用Segment的lock方法，为后面的put操作加锁</li></p>\n<p><li>根据key计算出hash值，找到Segment中数组中对应index的链表，并将该数据放置到该链表中</li></p>\n<p><li>判断当前Segment包含元素的数量大于阈值，则Segment进行扩容</li></p>\n<p>整体代码逻辑见如下源码：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107005617154\" alt=\"这里写图片描述\"></p>\n<p>其中上述Segment的put过程源码如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107005641091\" alt=\"这里写图片描述\"></p>\n<h2>2.3 扩容过程</h2>\n\n<p>这个扩容是在Segment的锁的保护下进行扩容的，不需要关注并发问题。</p>\n<p><img src=\"http://img.blog.csdn.net/20170107005716473\" alt=\"这里写图片描述\"></p>\n<p>这里的重点就是：</p>\n<p>首先找到一个lastRun，lastRun之后的元素和lastRun是在同一个桶中，所以后面的不需要进行变动。</p>\n<p>然后对开始到lastRun部分的元素，重新计算下设置到newTable中，每次都是将当前元素作为newTable的首元素，之前老的链表作为该首元素的next部分。</p>\n<h2>2.4 get过程</h2>\n\n<p><li>根据key计算出对应的segment</li></p>\n<p><li>再根据key计算出对应segment中数组的index</li></p>\n<p><li>最终遍历上述index位置的链表，查找出对应的key的value</li></p>\n<p>源码如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107005803333\" alt=\"这里写图片描述\"></p>\n<h1>1.8的ConcurrentHashMap设计</h1>\n\n<p>1.8的ConcurrentHashMap摒弃了1.7的segment设计，而是在1.8HashMap的基础上实现了线程安全的版本，即也是采用<strong>数组+链表+红黑树</strong>的形式。</p>\n<p>数组可以扩容，链表可以转化为红黑树</p>\n<h2>3.1 整体概览</h2>\n\n<p>有一个重要的参数sizeCtl，代表数组的大小（但是还有其他取值及其含义，后面再详细说到）</p>\n<p>用户可以设置一个初始容量initialCapacity给ConcurrentHashMap</p>\n<p>sizeCtl=大于（1.5倍initialCapacity+1）的最小的2的幂次。</p>\n<p>即initialCapacity=20，则sizeCtl=32,如initialCapacity=24，则sizeCtl=64。</p>\n<p>初始化的时候，会按照sizeCtl的大小创建出对应大小的数组</p>\n<h2>3.2 put过程</h2>\n\n<p>源码如下所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107005911460\" alt=\"这里写图片描述\"></p>\n<p><li>如果数组还未初始化，那么进行初始化，这里会通过一个CAS操作将sizeCtl设置为-1，设置成功的，可以进行初始化操作</li></p>\n<p><li>根据key的hash值找到对应的桶，如果桶还不存在，那么通过一个CAS操作来设置桶的第一个元素，失败的继续执行下面的逻辑即向桶中插入或更新</li></p>\n<p><li>如果找到的桶存在，但是桶中第一个元素的hash值是-1，说明此时该桶正在进行迁移操作，这一块会在下面的扩容中详细谈及。</li></p>\n<p><li>如果找到的桶存在，那么要么是链表结构要么是红黑树结构，此时需要获取该桶的锁，在锁定的情况下执行链表或者红黑树的插入或更新</li></p>\n<pre><code>如果桶中第一个元素的hash值大于0，说明是链表结构，则对链表插入或者更新\n如果桶中的第一个元素类型是TreeBin，说明是红黑树结构，则按照红黑树的方式进行插入或者更新\n</code></pre><p><li>在锁的保护下插入或者更新完毕后，如果是链表结构，需要判断链表中元素的数量是否超过8（默认），一旦超过就要考虑进行数组扩容或者是链表转红黑树</li></p>\n<p><strong>下面就来重点看看这个扩容过程</strong></p>\n<h2>3.3 扩容过程</h2>\n\n<p>一旦链表中的元素个数超过了8个，那么可以执行数组扩容或者链表转为红黑树，这里依据的策略跟HashMap依据的策略是一致的。</p>\n<p>当数组长度还未达到64个时，优先数组的扩容，否则选择链表转为红黑树。</p>\n<p>源码如下所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010024665\" alt=\"这里写图片描述\"></p>\n<p>重点来看看这个扩容过程，即看下上述tryPresize方法，也可以看到上述是2倍扩容的方式</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010051374\" alt=\"这里写图片描述\"></p>\n<p>第一个执行的线程会首先设置sizeCtl属性为一个负值，然后执行transfer(tab, null)，其他晚进来的线程会检查当前扩容是否已经完成，没完成则帮助进行扩容，完成了则直接退出。</p>\n<p>该ConcurrentHashMap的扩容操作可以允许多个线程并发执行，那么就要处理好任务的分配工作。每个线程获取一部分桶的迁移任务，如果当前线程的任务完成，查看是否还有未迁移的桶，若有则继续领取任务执行，若没有则退出。在退出时需要检查是否还有其他线程在参与迁移工作，如果有则自己什么也不做直接退出，如果没有了则执行最终的收尾工作。</p>\n<p><strong>问题1：当前线程如何感知其他线程也在参与迁移工作？</strong></p>\n<p>靠sizeCtl的值，它初始值是一个负值=(rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2)，每当一个线程参与进来执行迁移工作，则该值进行CAS自增，该线程的任务执行完毕要退出时对该值进行CAS自减操作，所以当sizeCtl的值等于上述初值则说明了此时未有其他线程还在执行迁移工作，可以去执行收尾工作了。见如下代码</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010125312\" alt=\"这里写图片描述\"></p>\n<p><strong>问题2：任务按照何规则进行分片？</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20170107010151062\" alt=\"这里写图片描述\"></p>\n<p>上述stride即是每个分片的大小，目前有最低要求16，即每个分片至少需要16个桶。stride的计算依赖于CPU的核数，如果只有1个核，那么此时就不用分片，即stride=n。其他情况就是 (n &gt;&gt;&gt; 3) / NCPU。</p>\n<p><strong>问题3：如何记录目前已经分出去的任务？</strong></p>\n<p>ConcurrentHashMap含有一个属性transferIndex（初值为最后一个桶），表示从transferIndex开始到后面所有的桶的迁移任务已经被分配出去了。所以每次线程领取扩容任务，则需要对该属性进行CAS的减操作，即一般是transferIndex-stride。</p>\n<p><strong>问题4：每个线程如何处理分到的部分桶的迁移工作</strong></p>\n<p>第一个获取到分片的线程会创建一个新的数组，容量是之前的2倍。</p>\n<p>遍历自己所分到的桶：</p>\n<pre><code>桶中元素不存在，则通过CAS操作设置桶中第一个元素为ForwardingNode，其Hash值为MOVED（-1）,同时该元素含有新的数组引用\n\n此时若其他线程进行put操作，发现第一个元素的hash值为-1则代表正在进行扩容操作（并且表明该桶已经完成扩容操作了，可以直接在新的数组中重新进行hash和插入操作），该线程就可以去参与进去，或者没有任务则不用参与，此时可以去直接操作新的数组了\n\n桶中元素存在且hash值为-1，则说明该桶已经被处理了（本不会出现多个线程任务重叠的情况，这里主要是该线程在执行完所有的任务后会再次进行检查，再次核对）\n\n桶中为链表或者红黑树结构，则需要获取桶锁，防止其他线程对该桶进行put操作，然后处理方式同HashMap的处理方式一样，对桶中元素分为2类，分别代表当前桶中和要迁移到新桶中的元素。设置完毕后代表桶迁移工作已经完成，旧数组中该桶可以设置成ForwardingNode了\n</code></pre><p>下面来看下详细的代码：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010302919\" alt=\"这里写图片描述\"></p>\n<h2>3.4 get过程</h2>\n\n<p><li>根据k计算出hash值，找到对应的数组index</li></p>\n<p><li>如果该index位置无元素则直接返回null</li></p>\n<p><li>如果该index位置有元素</li></p>\n<pre><code>如果第一个元素的hash值小于0，则该节点可能为ForwardingNode或者红黑树节点TreeBin\n\n如果是ForwardingNode（表示当前正在进行扩容），使用新的数组来进行查找\n\n如果是红黑树节点TreeBin，使用红黑树的查找方式来进行查找\n\n如果第一个元素的hash大于等于0，则为链表结构，依次遍历即可找到对应的元素\n</code></pre><p>详细代码如下</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010356702\" alt=\"这里写图片描述\"></p>\n<p>至此，ConcurrentHashMap主要的操作都粗略的介绍完毕了，其他一些操作靠各位自行去看了。</p>\n<p>下面针对一些问题来进行解答</p>\n<p></p><h1>问题分析<h1><p></p>\n<h2>4.1 ConcurrentHashMap读为什么不需要锁？</h2>\n\n<p>我们通常使用读写锁来保护对一堆数据的读写操作。读时加读锁，写时加写锁。在什么样的情况下可以不需要读锁呢？</p>\n<p>如果对数据的读写是一个原子操作，那么此时是可以不需要读锁的。如ConcurrentHashMap对数据的读写，写操作是不需要分2次写的（没有中间状态），读操作也是不需要2次读取的。假如一个写操作需要分多次写，必然会有中间状态，如果读不加锁，那么可能就会读到中间状态，那就不对了。</p>\n<p>假如ConcurrentHashMap提供put(key1,value1,key2,value2)，写入的时候必然会存在中间状态即key1写完成，但是key2还未写，此时如果读不加锁，那么就可能读到key1是新数据而key2是老数据的中间状态。</p>\n<p>虽然ConcurrentHashMap的读不需要锁，但是需要保证能读到最新数据，所以必须加volatile。即数组的引用需要加volatile，同时一个Node节点中的val和next属性也必须要加volatile。</p>\n<h2>4.2 ConcurrentHashMap是否可以在无锁的情况下进行迁移？</h2>\n\n<p>目前1.8的ConcurrentHashMap迁移是在锁定旧桶的前提下进行迁移的，然而并没有去锁定新桶。那么就可能提出如下问题：</p>\n<p><li>在某个桶的迁移过程中，别的线程想要对该桶进行put操作怎么办？</li></p>\n<p>一旦某个桶在迁移过程中了，必然要获取该桶的锁，所以其他线程的put操作要被阻塞，一旦迁移完毕，该桶中第一个元素就会被设置成ForwardingNode节点，所以其他线程put时需要重新判断下桶中第一个元素是否被更改了，如果被改了重新获取重新执行逻辑，如下代码</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010526876\" alt=\"这里写图片描述\"></p>\n<p><li>某个桶已经迁移完成（其他桶还未完成），别的线程想要对该桶进行put操作怎么办？</li></p>\n<p>该线程会首先检查是否还有未分配的迁移任务，如果有则先去执行迁移任务，如果没有即全部任务已经分发出去了，那么此时该线程可以直接对新的桶进行插入操作（映射到的新桶必然已经完成了迁移，所以可以放心执行操作）</p>\n<p>从上面看到我们在迁移的时候还是需要对旧桶锁定的，能否在无锁的情况下实现迁移？</p>\n<p>可以参考参考这篇论文Split-Ordered Lists: Lock-Free Extensible Hash Tables</p>\n<p>一旦扩容就涉及到迁移桶中元素的操作，将一个桶中的元素迁移到另一个桶中的操作不是一个原子操作，所以需要在锁的保护下进行迁移。如果扩容操作是移动桶的指向，那么就可以通过一个CAS操作来完成扩容操作。上述Split-Ordered Lists就是把所有元素按照一定的顺序进行排列。该list被分成一段一段的，每一段都代表某个桶中的所有元素。每个桶中都有一个指向第一个元素的指针，如下图结构所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010603392\" alt=\"这里写图片描述\"></p>\n<p>每一段其实也是分成2类的，如同前面所说的HashMap在扩容是分成2类的情况是一样的，此时Split-Ordered Lists在扩容时就只需要将新桶的指针指向这2类的分界点即可。</p>\n<p>这一块之后再详细说明吧。</p>\n<h2>4.3 ConcurrentHashMap曾经的弱一致性</h2>\n\n<p>具体详见这篇针对老版本的ConcurrentHashMap的说明文章<a href=\"http://ifeve.com/concurrenthashmap-weakly-consistent/\" target=\"_blank\" rel=\"external\">为什么ConcurrentHashMap是弱一致的</a></p>\n<p>文中已经解释到：对数组的引用是volatile来修饰的，但是数组中的元素并不是。即读取数组的引用总是能读取到最新的值，但是读取数组中某一个元素的时候并不一定能读到最新的值。所以说是弱一致性的。</p>\n<p>我觉得这个只需要稍微改动下就可以实现强一致性：</p>\n<p><li>对于新加的key，通过写入到链表的末尾即可。因为一个元素的next属性是volatile的，可以保证写入后立马看的到，如下1.8的方式</li></p>\n<p><li>或者对数组中元素的更新采用volatile写的方式，如下1.7的形式</li></p>\n<p>但是现在1.7版本的ConcurrentHashMap对于数组中元素的写也是加了volatile的，如下代码</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010723393\" alt=\"这里写图片描述\"></p>\n<p>1.8的方式就是：直接将新加入的元素写入next属性（含有volatile修饰）中而不是修改桶中的第一个元素。</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010744786\" alt=\"这里写图片描述\"></p>\n<p>所以在1.7和1.8版本的ConcurrentHashMap中不再是弱一致性，写入的数据是可以立马本读到的。</p>\n</h1></h1>","excerpt":"<p>本文针对jdk1.8的ConcurrentHashMap</p>\n<h1>1.8的HashMap设计</h1>\n\n<h2>1.1 整体概览</h2>\n\n<p>HashMap采用的是<strong>数组+链表+红黑树</strong>的形式。</p>\n<p>数组是可以扩容的，链表也是转化为红黑树的，这2种方式都可以承载更多的数据。</p>\n<p>用户可以设置的参数：初始总容量默认16，默认的加载因子0.75</p>\n<p>初始的数组个数默认是16（用户不能设置的）</p>\n<p>容量X加载因子=阈值</p>\n<p>一旦目前容量超过该阈值，则执行扩容操作。</p>","more":"<p></p>\n<p><strong>什么时候扩容？</strong></p>\n<p><li>当前容量超过阈值</li></p>\n<p><li>当链表中元素个数超过默认设定（8个），当数组的大小还未超过64的时候，此时进行数组的扩容，如果超过则将链表转化成红黑树</li></p>\n<p><strong>什么时候链表转化为红黑树？（上面已经提到了）</strong></p>\n<p><li>当数组大小已经超过64并且链表中的元素个数超过默认设定（8个）时，将链表转化为红黑树</li></p>\n<p>目前形象的表示数组中的一个元素称为一个桶</p>\n<h2>1.2 put过程</h2>\n\n<p><li>根据key计算出hash值</li></p>\n<p><li>hash值&amp;（数组长度-1）得到所在数组的index</li></p>\n<pre><code>如果该index位置的Node元素不存在，则直接创建一个新的Node\n如果该index位置的Node元素是TreeNode类型即红黑树类型了，则直接按照红黑树的插入方式进行插入\n如果该index位置的Node元素是非TreeNode类型则，则按照链表的形式进行插入操作\n</code></pre><p>链表插入操作完成后，判断是否超过阈值TREEIFY_THRESHOLD（默认是8），超过则要么数组扩容要么链表转化成红黑树</p>\n<p><li>判断当前总容量是否超出阈值，如果超出则执行扩容</li></p>\n<p>源码如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107004609227\" alt=\"这里写图片描述\"></p>\n<p>下面来说说这个扩容的过程</p>\n<h2>1.3 扩容过程</h2>\n\n<p>按照2倍扩容的方式，那么就需要将之前的所有元素全部重新按照2倍桶的长度重新计算所在桶。这里为啥是2倍？</p>\n<p>因为2倍的话，更加容易计算他们所在的桶，并且各自不会相互干扰。如原桶长度是4，现在桶长度是8，那么</p>\n<pre><code>桶0中的元素会被分到桶0和桶4中\n桶1中的元素会被分到桶1和桶5中\n桶2中的元素会被分到桶2和桶6中\n桶3中的元素会被分到桶3和桶7中\n</code></pre><p>为啥是这样呢？</p>\n<p>桶0中的元素的hash值后2位必然是00，这些hash值可以根据后3位000或者100分成2类数据。他们分别&amp;（8-1）即&amp;111,则后3位为000的在桶0中，后3位为100的必然在桶4中。其他同理，也就是说桶4和桶0重新瓜分了原来桶0中的元素。</p>\n<p>如果换成其他倍数，那么瓜分就比较混乱了。</p>\n<p>这样在瓜分这些数据的时候，只需要先把这些数据分类，如上述桶0中分成000和100 2类，然后直接构成新的链表，分类完毕后，直接将新的链表挂在对应的桶下即可，源码如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107004911697\" alt=\"这里写图片描述\"></p>\n<p>上述 (e.hash &amp; oldCap) == 0 即可将原桶中的数据分成2类</p>\n<p>上述是对于链表情况下的重新移动，而针对红黑树情况下：</p>\n<p>则需要考虑分类之后是否还需要依然保持红黑树，如果个数少则直接使用链表即可。</p>\n<h2>1.4 get过程</h2>\n\n<p>get过程比较简单</p>\n<p><li>根据key计算出hash值</li></p>\n<p><li>hash值&amp;（数组长度-1）得到所在数组的index        </li></p>\n<pre><code>如果要找的key就是上述数组index位置的元素，直接返回该元素的值\n如果该数组index位置元素是TreeNode类型，则按照红黑树的查询方式来进行查找\n如果该数组index位置元素非TreeNode类型，则按照链表的方式来进行遍历查询\n</code></pre><p>源码如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107005249311\" alt=\"这里写图片描述\"></p>\n<h1>1.7的ConcurrentHashMap设计</h1>\n\n<p>ConcurrentHashMap是线程安全，通过分段锁的方式提高了并发度。分段是一开始就确定的了，后期不能再进行扩容的。</p>\n<p>其中的段Segment继承了重入锁ReentrantLock，有了锁的功能，同时含有类似HashMap中的数组加链表结构（这里没有使用红黑树）</p>\n<p>虽然Segment的个数是不能扩容的，但是单个Segment里面的数组是可以扩容的。</p>\n<h2>2.1 整体概览</h2>\n\n<p>ConcurrentHashMap有3个参数：</p>\n<pre><code>initialCapacity：初始总容量，默认16\nloadFactor：加载因子，默认0.75\nconcurrencyLevel：并发级别，默认16\n</code></pre><p>然后我们需要知道的是：</p>\n<p><li>segment的个数即ssize</li></p>\n<p>取大于等于并发级别的最小的2的幂次。如concurrencyLevel=16，那么sszie=16,如concurrencyLevel=10，那么ssize=16</p>\n<p><li>单个segment的初始容量cap</li></p>\n<p>c=initialCapacity/ssize,并且可能需要+1。如15/7=2，那么c要取3，如16/8=2，那么c取2</p>\n<p>c可能是一个任意值，那么同上述一样，cap取的值就是大于等于c的最下2的幂次。最小值要求是2</p>\n<p><li>单个segment的阈值threshold</li></p>\n<p>cap*loadFactor</p>\n<p>所以默认情况下，segment的个数sszie=16,每个segment的初始容量cap=2，单个segment的阈值threshold=1</p>\n<h2>2.2 put过程</h2>\n\n<p><li>首先根据key计算出一个hash值，找到对应的Segment</li></p>\n<p><li>调用Segment的lock方法，为后面的put操作加锁</li></p>\n<p><li>根据key计算出hash值，找到Segment中数组中对应index的链表，并将该数据放置到该链表中</li></p>\n<p><li>判断当前Segment包含元素的数量大于阈值，则Segment进行扩容</li></p>\n<p>整体代码逻辑见如下源码：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107005617154\" alt=\"这里写图片描述\"></p>\n<p>其中上述Segment的put过程源码如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107005641091\" alt=\"这里写图片描述\"></p>\n<h2>2.3 扩容过程</h2>\n\n<p>这个扩容是在Segment的锁的保护下进行扩容的，不需要关注并发问题。</p>\n<p><img src=\"http://img.blog.csdn.net/20170107005716473\" alt=\"这里写图片描述\"></p>\n<p>这里的重点就是：</p>\n<p>首先找到一个lastRun，lastRun之后的元素和lastRun是在同一个桶中，所以后面的不需要进行变动。</p>\n<p>然后对开始到lastRun部分的元素，重新计算下设置到newTable中，每次都是将当前元素作为newTable的首元素，之前老的链表作为该首元素的next部分。</p>\n<h2>2.4 get过程</h2>\n\n<p><li>根据key计算出对应的segment</li></p>\n<p><li>再根据key计算出对应segment中数组的index</li></p>\n<p><li>最终遍历上述index位置的链表，查找出对应的key的value</li></p>\n<p>源码如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107005803333\" alt=\"这里写图片描述\"></p>\n<h1>1.8的ConcurrentHashMap设计</h1>\n\n<p>1.8的ConcurrentHashMap摒弃了1.7的segment设计，而是在1.8HashMap的基础上实现了线程安全的版本，即也是采用<strong>数组+链表+红黑树</strong>的形式。</p>\n<p>数组可以扩容，链表可以转化为红黑树</p>\n<h2>3.1 整体概览</h2>\n\n<p>有一个重要的参数sizeCtl，代表数组的大小（但是还有其他取值及其含义，后面再详细说到）</p>\n<p>用户可以设置一个初始容量initialCapacity给ConcurrentHashMap</p>\n<p>sizeCtl=大于（1.5倍initialCapacity+1）的最小的2的幂次。</p>\n<p>即initialCapacity=20，则sizeCtl=32,如initialCapacity=24，则sizeCtl=64。</p>\n<p>初始化的时候，会按照sizeCtl的大小创建出对应大小的数组</p>\n<h2>3.2 put过程</h2>\n\n<p>源码如下所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107005911460\" alt=\"这里写图片描述\"></p>\n<p><li>如果数组还未初始化，那么进行初始化，这里会通过一个CAS操作将sizeCtl设置为-1，设置成功的，可以进行初始化操作</li></p>\n<p><li>根据key的hash值找到对应的桶，如果桶还不存在，那么通过一个CAS操作来设置桶的第一个元素，失败的继续执行下面的逻辑即向桶中插入或更新</li></p>\n<p><li>如果找到的桶存在，但是桶中第一个元素的hash值是-1，说明此时该桶正在进行迁移操作，这一块会在下面的扩容中详细谈及。</li></p>\n<p><li>如果找到的桶存在，那么要么是链表结构要么是红黑树结构，此时需要获取该桶的锁，在锁定的情况下执行链表或者红黑树的插入或更新</li></p>\n<pre><code>如果桶中第一个元素的hash值大于0，说明是链表结构，则对链表插入或者更新\n如果桶中的第一个元素类型是TreeBin，说明是红黑树结构，则按照红黑树的方式进行插入或者更新\n</code></pre><p><li>在锁的保护下插入或者更新完毕后，如果是链表结构，需要判断链表中元素的数量是否超过8（默认），一旦超过就要考虑进行数组扩容或者是链表转红黑树</li></p>\n<p><strong>下面就来重点看看这个扩容过程</strong></p>\n<h2>3.3 扩容过程</h2>\n\n<p>一旦链表中的元素个数超过了8个，那么可以执行数组扩容或者链表转为红黑树，这里依据的策略跟HashMap依据的策略是一致的。</p>\n<p>当数组长度还未达到64个时，优先数组的扩容，否则选择链表转为红黑树。</p>\n<p>源码如下所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010024665\" alt=\"这里写图片描述\"></p>\n<p>重点来看看这个扩容过程，即看下上述tryPresize方法，也可以看到上述是2倍扩容的方式</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010051374\" alt=\"这里写图片描述\"></p>\n<p>第一个执行的线程会首先设置sizeCtl属性为一个负值，然后执行transfer(tab, null)，其他晚进来的线程会检查当前扩容是否已经完成，没完成则帮助进行扩容，完成了则直接退出。</p>\n<p>该ConcurrentHashMap的扩容操作可以允许多个线程并发执行，那么就要处理好任务的分配工作。每个线程获取一部分桶的迁移任务，如果当前线程的任务完成，查看是否还有未迁移的桶，若有则继续领取任务执行，若没有则退出。在退出时需要检查是否还有其他线程在参与迁移工作，如果有则自己什么也不做直接退出，如果没有了则执行最终的收尾工作。</p>\n<p><strong>问题1：当前线程如何感知其他线程也在参与迁移工作？</strong></p>\n<p>靠sizeCtl的值，它初始值是一个负值=(rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2)，每当一个线程参与进来执行迁移工作，则该值进行CAS自增，该线程的任务执行完毕要退出时对该值进行CAS自减操作，所以当sizeCtl的值等于上述初值则说明了此时未有其他线程还在执行迁移工作，可以去执行收尾工作了。见如下代码</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010125312\" alt=\"这里写图片描述\"></p>\n<p><strong>问题2：任务按照何规则进行分片？</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20170107010151062\" alt=\"这里写图片描述\"></p>\n<p>上述stride即是每个分片的大小，目前有最低要求16，即每个分片至少需要16个桶。stride的计算依赖于CPU的核数，如果只有1个核，那么此时就不用分片，即stride=n。其他情况就是 (n &gt;&gt;&gt; 3) / NCPU。</p>\n<p><strong>问题3：如何记录目前已经分出去的任务？</strong></p>\n<p>ConcurrentHashMap含有一个属性transferIndex（初值为最后一个桶），表示从transferIndex开始到后面所有的桶的迁移任务已经被分配出去了。所以每次线程领取扩容任务，则需要对该属性进行CAS的减操作，即一般是transferIndex-stride。</p>\n<p><strong>问题4：每个线程如何处理分到的部分桶的迁移工作</strong></p>\n<p>第一个获取到分片的线程会创建一个新的数组，容量是之前的2倍。</p>\n<p>遍历自己所分到的桶：</p>\n<pre><code>桶中元素不存在，则通过CAS操作设置桶中第一个元素为ForwardingNode，其Hash值为MOVED（-1）,同时该元素含有新的数组引用\n\n此时若其他线程进行put操作，发现第一个元素的hash值为-1则代表正在进行扩容操作（并且表明该桶已经完成扩容操作了，可以直接在新的数组中重新进行hash和插入操作），该线程就可以去参与进去，或者没有任务则不用参与，此时可以去直接操作新的数组了\n\n桶中元素存在且hash值为-1，则说明该桶已经被处理了（本不会出现多个线程任务重叠的情况，这里主要是该线程在执行完所有的任务后会再次进行检查，再次核对）\n\n桶中为链表或者红黑树结构，则需要获取桶锁，防止其他线程对该桶进行put操作，然后处理方式同HashMap的处理方式一样，对桶中元素分为2类，分别代表当前桶中和要迁移到新桶中的元素。设置完毕后代表桶迁移工作已经完成，旧数组中该桶可以设置成ForwardingNode了\n</code></pre><p>下面来看下详细的代码：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010302919\" alt=\"这里写图片描述\"></p>\n<h2>3.4 get过程</h2>\n\n<p><li>根据k计算出hash值，找到对应的数组index</li></p>\n<p><li>如果该index位置无元素则直接返回null</li></p>\n<p><li>如果该index位置有元素</li></p>\n<pre><code>如果第一个元素的hash值小于0，则该节点可能为ForwardingNode或者红黑树节点TreeBin\n\n如果是ForwardingNode（表示当前正在进行扩容），使用新的数组来进行查找\n\n如果是红黑树节点TreeBin，使用红黑树的查找方式来进行查找\n\n如果第一个元素的hash大于等于0，则为链表结构，依次遍历即可找到对应的元素\n</code></pre><p>详细代码如下</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010356702\" alt=\"这里写图片描述\"></p>\n<p>至此，ConcurrentHashMap主要的操作都粗略的介绍完毕了，其他一些操作靠各位自行去看了。</p>\n<p>下面针对一些问题来进行解答</p>\n<p></p><h1>问题分析<h1><p></p>\n<h2>4.1 ConcurrentHashMap读为什么不需要锁？</h2>\n\n<p>我们通常使用读写锁来保护对一堆数据的读写操作。读时加读锁，写时加写锁。在什么样的情况下可以不需要读锁呢？</p>\n<p>如果对数据的读写是一个原子操作，那么此时是可以不需要读锁的。如ConcurrentHashMap对数据的读写，写操作是不需要分2次写的（没有中间状态），读操作也是不需要2次读取的。假如一个写操作需要分多次写，必然会有中间状态，如果读不加锁，那么可能就会读到中间状态，那就不对了。</p>\n<p>假如ConcurrentHashMap提供put(key1,value1,key2,value2)，写入的时候必然会存在中间状态即key1写完成，但是key2还未写，此时如果读不加锁，那么就可能读到key1是新数据而key2是老数据的中间状态。</p>\n<p>虽然ConcurrentHashMap的读不需要锁，但是需要保证能读到最新数据，所以必须加volatile。即数组的引用需要加volatile，同时一个Node节点中的val和next属性也必须要加volatile。</p>\n<h2>4.2 ConcurrentHashMap是否可以在无锁的情况下进行迁移？</h2>\n\n<p>目前1.8的ConcurrentHashMap迁移是在锁定旧桶的前提下进行迁移的，然而并没有去锁定新桶。那么就可能提出如下问题：</p>\n<p><li>在某个桶的迁移过程中，别的线程想要对该桶进行put操作怎么办？</li></p>\n<p>一旦某个桶在迁移过程中了，必然要获取该桶的锁，所以其他线程的put操作要被阻塞，一旦迁移完毕，该桶中第一个元素就会被设置成ForwardingNode节点，所以其他线程put时需要重新判断下桶中第一个元素是否被更改了，如果被改了重新获取重新执行逻辑，如下代码</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010526876\" alt=\"这里写图片描述\"></p>\n<p><li>某个桶已经迁移完成（其他桶还未完成），别的线程想要对该桶进行put操作怎么办？</li></p>\n<p>该线程会首先检查是否还有未分配的迁移任务，如果有则先去执行迁移任务，如果没有即全部任务已经分发出去了，那么此时该线程可以直接对新的桶进行插入操作（映射到的新桶必然已经完成了迁移，所以可以放心执行操作）</p>\n<p>从上面看到我们在迁移的时候还是需要对旧桶锁定的，能否在无锁的情况下实现迁移？</p>\n<p>可以参考参考这篇论文Split-Ordered Lists: Lock-Free Extensible Hash Tables</p>\n<p>一旦扩容就涉及到迁移桶中元素的操作，将一个桶中的元素迁移到另一个桶中的操作不是一个原子操作，所以需要在锁的保护下进行迁移。如果扩容操作是移动桶的指向，那么就可以通过一个CAS操作来完成扩容操作。上述Split-Ordered Lists就是把所有元素按照一定的顺序进行排列。该list被分成一段一段的，每一段都代表某个桶中的所有元素。每个桶中都有一个指向第一个元素的指针，如下图结构所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010603392\" alt=\"这里写图片描述\"></p>\n<p>每一段其实也是分成2类的，如同前面所说的HashMap在扩容是分成2类的情况是一样的，此时Split-Ordered Lists在扩容时就只需要将新桶的指针指向这2类的分界点即可。</p>\n<p>这一块之后再详细说明吧。</p>\n<h2>4.3 ConcurrentHashMap曾经的弱一致性</h2>\n\n<p>具体详见这篇针对老版本的ConcurrentHashMap的说明文章<a href=\"http://ifeve.com/concurrenthashmap-weakly-consistent/\">为什么ConcurrentHashMap是弱一致的</a></p>\n<p>文中已经解释到：对数组的引用是volatile来修饰的，但是数组中的元素并不是。即读取数组的引用总是能读取到最新的值，但是读取数组中某一个元素的时候并不一定能读到最新的值。所以说是弱一致性的。</p>\n<p>我觉得这个只需要稍微改动下就可以实现强一致性：</p>\n<p><li>对于新加的key，通过写入到链表的末尾即可。因为一个元素的next属性是volatile的，可以保证写入后立马看的到，如下1.8的方式</li></p>\n<p><li>或者对数组中元素的更新采用volatile写的方式，如下1.7的形式</li></p>\n<p>但是现在1.7版本的ConcurrentHashMap对于数组中元素的写也是加了volatile的，如下代码</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010723393\" alt=\"这里写图片描述\"></p>\n<p>1.8的方式就是：直接将新加入的元素写入next属性（含有volatile修饰）中而不是修改桶中的第一个元素。</p>\n<p><img src=\"http://img.blog.csdn.net/20170107010744786\" alt=\"这里写图片描述\"></p>\n<p>所以在1.7和1.8版本的ConcurrentHashMap中不再是弱一致性，写入的数据是可以立马本读到的。</p></h1></h1>"},{"title":"mysql 如何插入一列自增序号","date":"2017-02-18T12:53:25.000Z","_content":"今天看到朋友问的一个问题，“mysql 加一列 叫序号 然后序号自增 怎么搞？”,由于他主要用的是oracle，所以不太了解mysql的用法，然后我就告诉他用rownum就好了，但是他说用了这个没得到效果。\n<!--more-->\n我想了一下 没啥啊。他说他就想在查询结果中加一个序号列 实现自增，于是我自己建了张表实验一下。\n\n![这里写图片描述](http://img.blog.csdn.net/20161124164205404)\n\n只给了id和name两个字段，方便测试。\n\n![这里写图片描述](http://img.blog.csdn.net/20161124164414499)\n\n\n随便插入了几条数据（设置了utf-8的格式输入中文就直接???了 不知道怎么回事，估计是数据库编码有点问题，先用英文凑合一下。）\n\n```\nselect @rd := @rd+1  as rownum, b.name from (select @rd:=0, name from test) b\n```\n取出name属性，然后给变量rd自增1赋给rownum，看结果：\n\n![这里写图片描述](http://img.blog.csdn.net/20161124164635603)\n\n\n然后，然后就这么成了 -。- 用变量累加，插入有自增字段的临时表中、如果有唯一标识的字段，也可以用查询解决。\n","source":"_posts/mysql-如何插入一列自增序号.md","raw":"---\ntitle: mysql 如何插入一列自增序号\ndate: 2017-02-18 20:53:25\ncategories: 数据库那点事\ntags: \n\t- mysql\n\t- 自增序号\n---\n今天看到朋友问的一个问题，“mysql 加一列 叫序号 然后序号自增 怎么搞？”,由于他主要用的是oracle，所以不太了解mysql的用法，然后我就告诉他用rownum就好了，但是他说用了这个没得到效果。\n<!--more-->\n我想了一下 没啥啊。他说他就想在查询结果中加一个序号列 实现自增，于是我自己建了张表实验一下。\n\n![这里写图片描述](http://img.blog.csdn.net/20161124164205404)\n\n只给了id和name两个字段，方便测试。\n\n![这里写图片描述](http://img.blog.csdn.net/20161124164414499)\n\n\n随便插入了几条数据（设置了utf-8的格式输入中文就直接???了 不知道怎么回事，估计是数据库编码有点问题，先用英文凑合一下。）\n\n```\nselect @rd := @rd+1  as rownum, b.name from (select @rd:=0, name from test) b\n```\n取出name属性，然后给变量rd自增1赋给rownum，看结果：\n\n![这里写图片描述](http://img.blog.csdn.net/20161124164635603)\n\n\n然后，然后就这么成了 -。- 用变量累加，插入有自增字段的临时表中、如果有唯一标识的字段，也可以用查询解决。\n","slug":"mysql-如何插入一列自增序号","published":1,"updated":"2017-02-18T12:55:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kfo002grhsou6g8909r","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>今天看到朋友问的一个问题，“mysql 加一列 叫序号 然后序号自增 怎么搞？”,由于他主要用的是oracle，所以不太了解mysql的用法，然后我就告诉他用rownum就好了，但是他说用了这个没得到效果。<br><a id=\"more\"></a><br>我想了一下 没啥啊。他说他就想在查询结果中加一个序号列 实现自增，于是我自己建了张表实验一下。</p>\n<p><img src=\"http://img.blog.csdn.net/20161124164205404\" alt=\"这里写图片描述\"></p>\n<p>只给了id和name两个字段，方便测试。</p>\n<p><img src=\"http://img.blog.csdn.net/20161124164414499\" alt=\"这里写图片描述\"></p>\n<p>随便插入了几条数据（设置了utf-8的格式输入中文就直接???了 不知道怎么回事，估计是数据库编码有点问题，先用英文凑合一下。）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> @rd := @rd+<span class=\"number\">1</span>  <span class=\"keyword\">as</span> <span class=\"keyword\">rownum</span>, b.name <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> @rd:=<span class=\"number\">0</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> <span class=\"keyword\">test</span>) b</div></pre></td></tr></table></figure>\n<p>取出name属性，然后给变量rd自增1赋给rownum，看结果：</p>\n<p><img src=\"http://img.blog.csdn.net/20161124164635603\" alt=\"这里写图片描述\"></p>\n<p>然后，然后就这么成了 -。- 用变量累加，插入有自增字段的临时表中、如果有唯一标识的字段，也可以用查询解决。</p>\n","excerpt":"<p>今天看到朋友问的一个问题，“mysql 加一列 叫序号 然后序号自增 怎么搞？”,由于他主要用的是oracle，所以不太了解mysql的用法，然后我就告诉他用rownum就好了，但是他说用了这个没得到效果。<br></p>","more":"<br>我想了一下 没啥啊。他说他就想在查询结果中加一个序号列 实现自增，于是我自己建了张表实验一下。<p></p>\n<p><img src=\"http://img.blog.csdn.net/20161124164205404\" alt=\"这里写图片描述\"></p>\n<p>只给了id和name两个字段，方便测试。</p>\n<p><img src=\"http://img.blog.csdn.net/20161124164414499\" alt=\"这里写图片描述\"></p>\n<p>随便插入了几条数据（设置了utf-8的格式输入中文就直接???了 不知道怎么回事，估计是数据库编码有点问题，先用英文凑合一下。）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> @rd := @rd+<span class=\"number\">1</span>  <span class=\"keyword\">as</span> <span class=\"keyword\">rownum</span>, b.name <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> @rd:=<span class=\"number\">0</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> <span class=\"keyword\">test</span>) b</div></pre></td></tr></table></figure>\n<p>取出name属性，然后给变量rd自增1赋给rownum，看结果：</p>\n<p><img src=\"http://img.blog.csdn.net/20161124164635603\" alt=\"这里写图片描述\"></p>\n<p>然后，然后就这么成了 -。- 用变量累加，插入有自增字段的临时表中、如果有唯一标识的字段，也可以用查询解决。</p>"},{"title":"nginx 基本入门(至今为止见过最好的 nginx 入门文章，没有之一。)","date":"2017-02-18T13:28:05.000Z","_content":">本文转自[StuQ](http://www.jianshu.com/p/93ac21161ac6) \n\n<br><br>这篇教程简单介绍了 nginx 并且讲解了一些 nginx 可以解决的简单任务。这里，我们假设 nginx 已经安装在读者的机器上。如果没有，可以看一下如何安装 nginx。这篇教程主要讲解的是如果启用和停止 ngixn，和重新加载配置，描述配置文件的基本结构和怎样搭建一个 nginx 静态辅助器，怎样配置 nginx 作为一个代理服务器来。 nginx 有一个主进程和其他子进程。主进程的主要工作是加载和执行配置文件，并且驻留子进程。子进程用来作为实际的请求处理。nginx 采取基于事件的模型和 OS 依赖的机制，在多个子进程之间高效的分配请求。子进程的个数会直接写在配置文件中并且，对于给定的配置可以是固定的，或者根据可用的 CPU 核数自动的进行调整（参考子进程）。 nginx 和它模块的工作方式是在配置文件中写好的。默认情况下，这个配置文件通常命名为 nginx.conf 并且会放置在 /usr/local/nginx/conf，/etc/nginx，或者 /usr/local/etc/nginx。\n<!--more-->\n启用，停止和重载配置\n\n运行可执行文件就可以开启 nginx，比如:\n\n```\n// -c 为 nginx 的配置文件\n\nnginx -c/usr/local/nginx/conf/nginx.conf\n```\n\n如果，nginx 已经开启，那么它就可以通过使用 -s 参数的可执行命令控制。使用下列格式：\n\n```\nnginx -s signal\n```\n\nsignal 可以为下列命令之一：\n\nstop — 直接关闭 nginx\n\nquit — 会在处理完当前正在的请求后退出，也叫优雅关闭\n\nreload — 重新加载配置文件，相当于重启\n\nreopen — 重新打开日志文件 比如，等待当前子进程处理完正在执行的请求后，结束 nginx 进程，可以使用下列命令：\n\n```\nnginx -s quit\n```\n\n执行该命令的用户需要和启动的 nginx 的用户一致。 如果重载配置文件的命令没有传递给 nginx 或者 nginx 没有重启，那么配置文件的改动是不会被使用的。重载配置文件的命令可以使用：\n\n```\nnginx -s reload\n```\n\n一旦主进程接收到重载配置文件的命令后，它会先检查配置文件语法的合法性，如果没有错误，则会重新加载配置文件。如果成功，则主进程会重新创建一个子进程并且发送关闭请求给以前的子进程。如果没有成功，主进程会回滚改动并且继续使用以前的配置。老的子进程在接受关闭的命令后，会停止接受新的请求并且继续处理当前的请求，直到处理完毕。之后，该子进程就直接退出了。 在 Unix 工具的帮助下，比如使用 kill 工具，该信号会被发送给 nginx 进程。在这种情况下，信号会被直接发送给带有进程 ID 的进程。nginx 的主进程的进程 ID 是写死在 nginx.pid 文件中的。该文件通常放在 /usr/local/nginx/logs 或者 /var/run 目录下。比如，如果主进程的 ID 是 1628，为了发送 QUIT 信号来使 nginx 优雅退出，可以执行：kill -s QUIT 1628\n\n为了得到所有正在运行的 nginx 进程，我们可能会使用到 ps 工具，比如，像下列的方式：\n\n```\n$ ps -ax | grep nginx\n\n// 结果为：（下面是单核 CPU 的情况） \n\n516 pts/0    D+    0:00 grep --color=auto nginx \n\n1156 ?        S      1:22 nginx: worker process\n\n27999 ?        Ss    0:00 nginx: master process ./nginx\n\n```\n\n更多关于发送信号给 nginx，可以参考[nginx 控制](https://link.zhihu.com/?target=http://nginx.org/en/docs/ngx_core_module.html#worker_processes)。\n<br>\n**<h2>配置文件结构</h2>**\n\nnginx 是由一些模块组成，我们一般在配置文件中使用一些具体的指令来控制它们。指令被分为简单指令和块级命令。一个简单的指令是由名字和参数组成，中间用空格分开，并以分号结尾。例如：\n\n```\n// 简单指令\n\nroot /data/www;\n```\n\n块级指令和简单指令一样有着类似的结构，但是末尾不是分号而是用 {和} 大括号包裹的额外指令集。如果一个块级指令的大括号里有其他指令，则它被叫做一个上下文（比如：[events](http://nginx.org/en/docs/ngx_core_module.html#events)，[Module ngx_http_core_module](http://nginx.org/en/docs/http/ngx_http_core_module.html#httph)，[server](http://nginx.org/en/docs/http/ngx_http_core_module.html#servers)，和[location](http://nginx.org/en/docs/http/ngx_http_core_module.html#location)）。 在配置文件中，没有放在任何上下文中的指令都是处在主上下文中。events 和 http 的指令是放在主上下文中，server 放在 http 中, location 放在 server 中。\n\n以 # 开头的行，会被当做注释。\n\n```\n# this is a comment\n\nevents {  \n\n    worker_connections  4096;  ## Default: 1024\n\n}\n\nhttp {    \n\n        server {          \n\n                listen      80;        \n\n                server_name  domain1.com www.domain1.com;        \n\n                access_log  logs/domain1.access.log  main;        \n\n                root        html;        \n\n                location ~ \\.php$ {          \n\n                    fastcgi_pass  127.0.0.1:1025;        \n\n                }    \n\n        }\n\n}\n\n```\n<br>\n**<h2>静态服务器</h2>**\n\n一个重要的网络服务器的任务是处理文件（比如图片或者静态 HTML 文件）。这里，你会实践一个例子，文件会从不同的目录中映射（取决于请求）：/data/www（放置 HTML 文件）和 /data/images（放置图片）。这需要配置一下文件，将带有两个 location 的指令的 server 的块级命令放在 server 指令中。 首先，创建一个 /data/www 目录，然后放置一个事先写好内容的 index.html 文件。接着，创建一个 /data/images 目录，然后放置一些图片。 下一步，打开配置文件。默认的配置文件已经包含了一些关于 server 指令的样式，大多数情况下直接把他们给注释掉。现在，注释掉其他的区块，然后写一个新的 server 区块：\n\n```\nhttp {    \n\n        server {    \n\n        }\n\n}\n```\n\n通常，该配置文件可能会包含多个 server 指令。这些 server 指令监听不同的端口和服务器名。一旦 nginx 决定哪个服务进程处理请求，它会根据在 server 块级指令中定义好的 location 指令的参数，来匹配请求头中指定的 URI。 将下列 location 指令添加到 server 指令中：\n\n```\nlocation / {    \n\n        root /data/www;\n\n}\n```\n\n该 location 指令相对于请求中的 URI 执行了 “/” 的前缀。为了匹配请求，URI 会被添加到 root 命令指定的路径后，即 /data/www，得到本地文件系统中请求文件的路径。如果，有几个 location 匹配到，那么 nginx 会选择最长的前缀。上面的 location 提供了长度为 1 的前缀，所以，仅当其他的 location 匹配失败后，该指令才会使用。 接着，添加第二个 location 区块：\n\n```\nlocation /images/ {    \n\n        root /data;\n\n}\n```\n\n它会匹配到以 /images/ 开头的请求（location / 也会匹配到该请求，只是前缀更短） server 块级命令的配置结果如下：\n\n```\nserver {   \n\n        location / {       \n\n                root /data/www;   \n\n        }   \n\n        location /images/ {       \n\n                root /data;   \n\n        }\n\n}\n\n```\n\n这已经是一个可用的服务器配置，它监听标准的 80 端口并且可以在本地上通过 http://localhost/ 访问。对于 URI 以 /images/ 开头的请求，服务器会从 /data/images 目录中，返回对应的文件。例如，nginx 会返回 /data/images/example.png 文件，当接收到 http://localhost/images/example.png 的请求响应时。如果该文件不存在，nginx 会返回一个 404 错误的响应。没有以 /images/ 开头的 URI 的请求，将会直接映射到 /data/www 目录中。比如，响应 http://localhost/some/example.html 的请求，nginx 会发送 /data/www/some/example.html 文件。 为了使用新的配置文件，如果还没开启 nginx 需要先开启，然后将重载信号发送给 nginx 的主进程，通过执行：\n\n```\nnginx -s reload\n```\n\n如果你发现有些地方出了问题，你可以在 /usr/local/nginx/logs 或者 /var/log/nginx 目录下的 access.log 和 error.log 文件中，找到原因。\n<br>\n**<h2>搭建一个简易的代理服务</h2>**\n\nnginx 常常用来作为代理服务器，这代表着服务器接收请求，然后将它们传递给被代理服务器，得到请求的响应，再将它们发送给客户端。 我们将配置一个基本的代理服务器，它会处理本地图片文件的请求并返回其他的请求给被代理的服务器。在这个例子中，两个服务器都会定义在一个 nginx 实例中。 首先，通过在 nginx 配置文件中添加另一个 server 区块，来定义一个被代理的服务器，像下面的配置：\n\n```\nserver {   \n\n        listen 8080;   \n\n        root /data/up1;   \n\n        location / {   \n\n        }\n\n}\n```\n\n上面就是一个简单的服务器，它监听在 8080 端口（之前，listen 并没被定义，是因为默认监听的 80 端口）并且会映射所有的请求给 本地文件目录 /data/up1。创建该目录，然后添加 index.html 文件。注意，root 指令是放在 server 上下文中。当响应请求的 location 区块中，没有自己的 root 指令，上述的 root 指令才会被使用。 接着，使用前面章节中的 server 配置，然后将它改为一个代理服务配置。在第一个 location 区块中，放置已经添加被代理服务器的协议，名字和端口等参数的proxy_pass指令（在这里，就是 http://localhost:8080）:\n\n```\nserver {   \n\n        location / {\n\n                proxy_pass http://localhost:8080;   \n\n        }   \n\n        location /images/ {\n\n               root /data;   \n\n        }\n\n}\n\n```\n\n我们将修改第二个 location 区块，使他返回一些典型后缀的图片文件请求，现在它只会映射带有 /images/ 前缀的请求到 /data/images 目录下。修改后的 location 指令如下：\n\n```\nlocation ~ \\.(gif|jpg|png)${\n\n        root/data/images;\n\n}\n```\n\n该参数是一个正则表达式，它会匹配所有以 .gif，.jpg 或者 .png 结尾的 URIs。一个正则表达式需要以 ~ 开头。匹配到的请求会被映射到 /data/images 目录下。 当 nginx 在选择 location 去响应一个请求时，它会先检测带有前缀的 location 指令，记住先是检测带有最长前缀的 location，然后检测正则表达式。如果有一个正则的匹配的规则，nginx 会选择该 location，否则，会选择之前缓存的规则。 最终，一个代理服务器的配置结果如下：\n\n```\nserver{\n\n        location/{\n\n                proxy_passhttp://localhost:8080/;\n\n        }\n\n        location~\\.(gif|jpg|png)${\n\n                root/data/images;\n\n        }\n\n}\n\n```\n\n该服务器会选择以 .gif，.jpg，或者 .png 结束的请求并且映射到 /data/images 目录（通过添加 URI 给 root 指令的参数），接着将其他所有的请求映射到上述被代理的服务器。 为了使用新的配置，像前几个章节描述的一样，需要向 nginx 发送重载信号。 这还有很多[其他的指令](http://nginx.org/en/docs/http/ngx_http_proxy_module.html)，可以用于进一步配置代理连接。\n","source":"_posts/nginx-基本入门-至今为止见过最好的-nginx-入门文章，没有之一。.md","raw":"---\ntitle: nginx 基本入门(至今为止见过最好的 nginx 入门文章，没有之一。)\ndate: 2017-02-18 21:28:05\ncategories: WebWebWeb\ntags: \n\t- nginx\n---\n>本文转自[StuQ](http://www.jianshu.com/p/93ac21161ac6) \n\n<br><br>这篇教程简单介绍了 nginx 并且讲解了一些 nginx 可以解决的简单任务。这里，我们假设 nginx 已经安装在读者的机器上。如果没有，可以看一下如何安装 nginx。这篇教程主要讲解的是如果启用和停止 ngixn，和重新加载配置，描述配置文件的基本结构和怎样搭建一个 nginx 静态辅助器，怎样配置 nginx 作为一个代理服务器来。 nginx 有一个主进程和其他子进程。主进程的主要工作是加载和执行配置文件，并且驻留子进程。子进程用来作为实际的请求处理。nginx 采取基于事件的模型和 OS 依赖的机制，在多个子进程之间高效的分配请求。子进程的个数会直接写在配置文件中并且，对于给定的配置可以是固定的，或者根据可用的 CPU 核数自动的进行调整（参考子进程）。 nginx 和它模块的工作方式是在配置文件中写好的。默认情况下，这个配置文件通常命名为 nginx.conf 并且会放置在 /usr/local/nginx/conf，/etc/nginx，或者 /usr/local/etc/nginx。\n<!--more-->\n启用，停止和重载配置\n\n运行可执行文件就可以开启 nginx，比如:\n\n```\n// -c 为 nginx 的配置文件\n\nnginx -c/usr/local/nginx/conf/nginx.conf\n```\n\n如果，nginx 已经开启，那么它就可以通过使用 -s 参数的可执行命令控制。使用下列格式：\n\n```\nnginx -s signal\n```\n\nsignal 可以为下列命令之一：\n\nstop — 直接关闭 nginx\n\nquit — 会在处理完当前正在的请求后退出，也叫优雅关闭\n\nreload — 重新加载配置文件，相当于重启\n\nreopen — 重新打开日志文件 比如，等待当前子进程处理完正在执行的请求后，结束 nginx 进程，可以使用下列命令：\n\n```\nnginx -s quit\n```\n\n执行该命令的用户需要和启动的 nginx 的用户一致。 如果重载配置文件的命令没有传递给 nginx 或者 nginx 没有重启，那么配置文件的改动是不会被使用的。重载配置文件的命令可以使用：\n\n```\nnginx -s reload\n```\n\n一旦主进程接收到重载配置文件的命令后，它会先检查配置文件语法的合法性，如果没有错误，则会重新加载配置文件。如果成功，则主进程会重新创建一个子进程并且发送关闭请求给以前的子进程。如果没有成功，主进程会回滚改动并且继续使用以前的配置。老的子进程在接受关闭的命令后，会停止接受新的请求并且继续处理当前的请求，直到处理完毕。之后，该子进程就直接退出了。 在 Unix 工具的帮助下，比如使用 kill 工具，该信号会被发送给 nginx 进程。在这种情况下，信号会被直接发送给带有进程 ID 的进程。nginx 的主进程的进程 ID 是写死在 nginx.pid 文件中的。该文件通常放在 /usr/local/nginx/logs 或者 /var/run 目录下。比如，如果主进程的 ID 是 1628，为了发送 QUIT 信号来使 nginx 优雅退出，可以执行：kill -s QUIT 1628\n\n为了得到所有正在运行的 nginx 进程，我们可能会使用到 ps 工具，比如，像下列的方式：\n\n```\n$ ps -ax | grep nginx\n\n// 结果为：（下面是单核 CPU 的情况） \n\n516 pts/0    D+    0:00 grep --color=auto nginx \n\n1156 ?        S      1:22 nginx: worker process\n\n27999 ?        Ss    0:00 nginx: master process ./nginx\n\n```\n\n更多关于发送信号给 nginx，可以参考[nginx 控制](https://link.zhihu.com/?target=http://nginx.org/en/docs/ngx_core_module.html#worker_processes)。\n<br>\n**<h2>配置文件结构</h2>**\n\nnginx 是由一些模块组成，我们一般在配置文件中使用一些具体的指令来控制它们。指令被分为简单指令和块级命令。一个简单的指令是由名字和参数组成，中间用空格分开，并以分号结尾。例如：\n\n```\n// 简单指令\n\nroot /data/www;\n```\n\n块级指令和简单指令一样有着类似的结构，但是末尾不是分号而是用 {和} 大括号包裹的额外指令集。如果一个块级指令的大括号里有其他指令，则它被叫做一个上下文（比如：[events](http://nginx.org/en/docs/ngx_core_module.html#events)，[Module ngx_http_core_module](http://nginx.org/en/docs/http/ngx_http_core_module.html#httph)，[server](http://nginx.org/en/docs/http/ngx_http_core_module.html#servers)，和[location](http://nginx.org/en/docs/http/ngx_http_core_module.html#location)）。 在配置文件中，没有放在任何上下文中的指令都是处在主上下文中。events 和 http 的指令是放在主上下文中，server 放在 http 中, location 放在 server 中。\n\n以 # 开头的行，会被当做注释。\n\n```\n# this is a comment\n\nevents {  \n\n    worker_connections  4096;  ## Default: 1024\n\n}\n\nhttp {    \n\n        server {          \n\n                listen      80;        \n\n                server_name  domain1.com www.domain1.com;        \n\n                access_log  logs/domain1.access.log  main;        \n\n                root        html;        \n\n                location ~ \\.php$ {          \n\n                    fastcgi_pass  127.0.0.1:1025;        \n\n                }    \n\n        }\n\n}\n\n```\n<br>\n**<h2>静态服务器</h2>**\n\n一个重要的网络服务器的任务是处理文件（比如图片或者静态 HTML 文件）。这里，你会实践一个例子，文件会从不同的目录中映射（取决于请求）：/data/www（放置 HTML 文件）和 /data/images（放置图片）。这需要配置一下文件，将带有两个 location 的指令的 server 的块级命令放在 server 指令中。 首先，创建一个 /data/www 目录，然后放置一个事先写好内容的 index.html 文件。接着，创建一个 /data/images 目录，然后放置一些图片。 下一步，打开配置文件。默认的配置文件已经包含了一些关于 server 指令的样式，大多数情况下直接把他们给注释掉。现在，注释掉其他的区块，然后写一个新的 server 区块：\n\n```\nhttp {    \n\n        server {    \n\n        }\n\n}\n```\n\n通常，该配置文件可能会包含多个 server 指令。这些 server 指令监听不同的端口和服务器名。一旦 nginx 决定哪个服务进程处理请求，它会根据在 server 块级指令中定义好的 location 指令的参数，来匹配请求头中指定的 URI。 将下列 location 指令添加到 server 指令中：\n\n```\nlocation / {    \n\n        root /data/www;\n\n}\n```\n\n该 location 指令相对于请求中的 URI 执行了 “/” 的前缀。为了匹配请求，URI 会被添加到 root 命令指定的路径后，即 /data/www，得到本地文件系统中请求文件的路径。如果，有几个 location 匹配到，那么 nginx 会选择最长的前缀。上面的 location 提供了长度为 1 的前缀，所以，仅当其他的 location 匹配失败后，该指令才会使用。 接着，添加第二个 location 区块：\n\n```\nlocation /images/ {    \n\n        root /data;\n\n}\n```\n\n它会匹配到以 /images/ 开头的请求（location / 也会匹配到该请求，只是前缀更短） server 块级命令的配置结果如下：\n\n```\nserver {   \n\n        location / {       \n\n                root /data/www;   \n\n        }   \n\n        location /images/ {       \n\n                root /data;   \n\n        }\n\n}\n\n```\n\n这已经是一个可用的服务器配置，它监听标准的 80 端口并且可以在本地上通过 http://localhost/ 访问。对于 URI 以 /images/ 开头的请求，服务器会从 /data/images 目录中，返回对应的文件。例如，nginx 会返回 /data/images/example.png 文件，当接收到 http://localhost/images/example.png 的请求响应时。如果该文件不存在，nginx 会返回一个 404 错误的响应。没有以 /images/ 开头的 URI 的请求，将会直接映射到 /data/www 目录中。比如，响应 http://localhost/some/example.html 的请求，nginx 会发送 /data/www/some/example.html 文件。 为了使用新的配置文件，如果还没开启 nginx 需要先开启，然后将重载信号发送给 nginx 的主进程，通过执行：\n\n```\nnginx -s reload\n```\n\n如果你发现有些地方出了问题，你可以在 /usr/local/nginx/logs 或者 /var/log/nginx 目录下的 access.log 和 error.log 文件中，找到原因。\n<br>\n**<h2>搭建一个简易的代理服务</h2>**\n\nnginx 常常用来作为代理服务器，这代表着服务器接收请求，然后将它们传递给被代理服务器，得到请求的响应，再将它们发送给客户端。 我们将配置一个基本的代理服务器，它会处理本地图片文件的请求并返回其他的请求给被代理的服务器。在这个例子中，两个服务器都会定义在一个 nginx 实例中。 首先，通过在 nginx 配置文件中添加另一个 server 区块，来定义一个被代理的服务器，像下面的配置：\n\n```\nserver {   \n\n        listen 8080;   \n\n        root /data/up1;   \n\n        location / {   \n\n        }\n\n}\n```\n\n上面就是一个简单的服务器，它监听在 8080 端口（之前，listen 并没被定义，是因为默认监听的 80 端口）并且会映射所有的请求给 本地文件目录 /data/up1。创建该目录，然后添加 index.html 文件。注意，root 指令是放在 server 上下文中。当响应请求的 location 区块中，没有自己的 root 指令，上述的 root 指令才会被使用。 接着，使用前面章节中的 server 配置，然后将它改为一个代理服务配置。在第一个 location 区块中，放置已经添加被代理服务器的协议，名字和端口等参数的proxy_pass指令（在这里，就是 http://localhost:8080）:\n\n```\nserver {   \n\n        location / {\n\n                proxy_pass http://localhost:8080;   \n\n        }   \n\n        location /images/ {\n\n               root /data;   \n\n        }\n\n}\n\n```\n\n我们将修改第二个 location 区块，使他返回一些典型后缀的图片文件请求，现在它只会映射带有 /images/ 前缀的请求到 /data/images 目录下。修改后的 location 指令如下：\n\n```\nlocation ~ \\.(gif|jpg|png)${\n\n        root/data/images;\n\n}\n```\n\n该参数是一个正则表达式，它会匹配所有以 .gif，.jpg 或者 .png 结尾的 URIs。一个正则表达式需要以 ~ 开头。匹配到的请求会被映射到 /data/images 目录下。 当 nginx 在选择 location 去响应一个请求时，它会先检测带有前缀的 location 指令，记住先是检测带有最长前缀的 location，然后检测正则表达式。如果有一个正则的匹配的规则，nginx 会选择该 location，否则，会选择之前缓存的规则。 最终，一个代理服务器的配置结果如下：\n\n```\nserver{\n\n        location/{\n\n                proxy_passhttp://localhost:8080/;\n\n        }\n\n        location~\\.(gif|jpg|png)${\n\n                root/data/images;\n\n        }\n\n}\n\n```\n\n该服务器会选择以 .gif，.jpg，或者 .png 结束的请求并且映射到 /data/images 目录（通过添加 URI 给 root 指令的参数），接着将其他所有的请求映射到上述被代理的服务器。 为了使用新的配置，像前几个章节描述的一样，需要向 nginx 发送重载信号。 这还有很多[其他的指令](http://nginx.org/en/docs/http/ngx_http_proxy_module.html)，可以用于进一步配置代理连接。\n","slug":"nginx-基本入门-至今为止见过最好的-nginx-入门文章，没有之一。","published":1,"updated":"2017-02-18T13:33:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kfq002krhsordmgg14l","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><blockquote>\n<p>本文转自<a href=\"http://www.jianshu.com/p/93ac21161ac6\" target=\"_blank\" rel=\"external\">StuQ</a> </p>\n</blockquote>\n<p><br><br>这篇教程简单介绍了 nginx 并且讲解了一些 nginx 可以解决的简单任务。这里，我们假设 nginx 已经安装在读者的机器上。如果没有，可以看一下如何安装 nginx。这篇教程主要讲解的是如果启用和停止 ngixn，和重新加载配置，描述配置文件的基本结构和怎样搭建一个 nginx 静态辅助器，怎样配置 nginx 作为一个代理服务器来。 nginx 有一个主进程和其他子进程。主进程的主要工作是加载和执行配置文件，并且驻留子进程。子进程用来作为实际的请求处理。nginx 采取基于事件的模型和 OS 依赖的机制，在多个子进程之间高效的分配请求。子进程的个数会直接写在配置文件中并且，对于给定的配置可以是固定的，或者根据可用的 CPU 核数自动的进行调整（参考子进程）。 nginx 和它模块的工作方式是在配置文件中写好的。默认情况下，这个配置文件通常命名为 nginx.conf 并且会放置在 /usr/local/nginx/conf，/etc/nginx，或者 /usr/local/etc/nginx。<br><a id=\"more\"></a><br>启用，停止和重载配置</p>\n<p>运行可执行文件就可以开启 nginx，比如:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// -c 为 nginx 的配置文件</span></div><div class=\"line\"></div><div class=\"line\">nginx -c/usr/<span class=\"keyword\">local</span>/nginx/<span class=\"keyword\">conf</span>/nginx.<span class=\"keyword\">conf</span></div></pre></td></tr></table></figure>\n<p>如果，nginx 已经开启，那么它就可以通过使用 -s 参数的可执行命令控制。使用下列格式：</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -s <span class=\"keyword\">signal</span><span class=\"string\"></span></div></pre></td></tr></table></figure>\n<p>signal 可以为下列命令之一：</p>\n<p>stop — 直接关闭 nginx</p>\n<p>quit — 会在处理完当前正在的请求后退出，也叫优雅关闭</p>\n<p>reload — 重新加载配置文件，相当于重启</p>\n<p>reopen — 重新打开日志文件 比如，等待当前子进程处理完正在执行的请求后，结束 nginx 进程，可以使用下列命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx <span class=\"_\">-s</span> quit</div></pre></td></tr></table></figure>\n<p>执行该命令的用户需要和启动的 nginx 的用户一致。 如果重载配置文件的命令没有传递给 nginx 或者 nginx 没有重启，那么配置文件的改动是不会被使用的。重载配置文件的命令可以使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure>\n<p>一旦主进程接收到重载配置文件的命令后，它会先检查配置文件语法的合法性，如果没有错误，则会重新加载配置文件。如果成功，则主进程会重新创建一个子进程并且发送关闭请求给以前的子进程。如果没有成功，主进程会回滚改动并且继续使用以前的配置。老的子进程在接受关闭的命令后，会停止接受新的请求并且继续处理当前的请求，直到处理完毕。之后，该子进程就直接退出了。 在 Unix 工具的帮助下，比如使用 kill 工具，该信号会被发送给 nginx 进程。在这种情况下，信号会被直接发送给带有进程 ID 的进程。nginx 的主进程的进程 ID 是写死在 nginx.pid 文件中的。该文件通常放在 /usr/local/nginx/logs 或者 /var/run 目录下。比如，如果主进程的 ID 是 1628，为了发送 QUIT 信号来使 nginx 优雅退出，可以执行：kill -s QUIT 1628</p>\n<p>为了得到所有正在运行的 nginx 进程，我们可能会使用到 ps 工具，比如，像下列的方式：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ps -ax | grep nginx</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结果为：（下面是单核 CPU 的情况） </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">516</span> pts/<span class=\"number\">0</span>    D+    <span class=\"number\">0</span>:<span class=\"number\">00</span> grep --color=auto nginx </div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1156</span> ?        S      1:<span class=\"number\">22</span> <span class=\"string\">nginx:</span> worker process</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">27999</span> ?        Ss    0:<span class=\"number\">00</span> <span class=\"string\">nginx:</span> master process ./nginx</div></pre></td></tr></table></figure>\n<p>更多关于发送信号给 nginx，可以参考<a href=\"https://link.zhihu.com/?target=http://nginx.org/en/docs/ngx_core_module.html#worker_processes\" target=\"_blank\" rel=\"external\">nginx 控制</a>。<br><br><br><strong><h2>配置文件结构</h2></strong></p>\n<p>nginx 是由一些模块组成，我们一般在配置文件中使用一些具体的指令来控制它们。指令被分为简单指令和块级命令。一个简单的指令是由名字和参数组成，中间用空格分开，并以分号结尾。例如：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> 简单指令</div><div class=\"line\"></div><div class=\"line\">root <span class=\"regexp\">/data/</span>www;</div></pre></td></tr></table></figure>\n<p>块级指令和简单指令一样有着类似的结构，但是末尾不是分号而是用 {和} 大括号包裹的额外指令集。如果一个块级指令的大括号里有其他指令，则它被叫做一个上下文（比如：<a href=\"http://nginx.org/en/docs/ngx_core_module.html#events\" target=\"_blank\" rel=\"external\">events</a>，<a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#httph\" target=\"_blank\" rel=\"external\">Module ngx_http_core_module</a>，<a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#servers\" target=\"_blank\" rel=\"external\">server</a>，和<a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#location\" target=\"_blank\" rel=\"external\">location</a>）。 在配置文件中，没有放在任何上下文中的指令都是处在主上下文中。events 和 http 的指令是放在主上下文中，server 放在 http 中, location 放在 server 中。</p>\n<p>以 # 开头的行，会被当做注释。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># this is a comment</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">events</span> &#123;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">4096</span>;  <span class=\"comment\">## Default: 1024</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">http</span> &#123;    </div><div class=\"line\"></div><div class=\"line\">        <span class=\"section\">server</span> &#123;          </div><div class=\"line\"></div><div class=\"line\">                <span class=\"attribute\">listen</span>      <span class=\"number\">80</span>;        </div><div class=\"line\"></div><div class=\"line\">                <span class=\"attribute\">server_name</span>  domain1.com www.domain1.com;        </div><div class=\"line\"></div><div class=\"line\">                <span class=\"attribute\">access_log</span>  logs/domain1.access.log  main;        </div><div class=\"line\"></div><div class=\"line\">                <span class=\"attribute\">root</span>        html;        </div><div class=\"line\"></div><div class=\"line\">                <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;          </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"attribute\">fastcgi_pass</span>  <span class=\"number\">127.0.0.1:1025</span>;        </div><div class=\"line\"></div><div class=\"line\">                &#125;    </div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><br><br><strong><h2>静态服务器</h2></strong></p>\n<p>一个重要的网络服务器的任务是处理文件（比如图片或者静态 HTML 文件）。这里，你会实践一个例子，文件会从不同的目录中映射（取决于请求）：/data/www（放置 HTML 文件）和 /data/images（放置图片）。这需要配置一下文件，将带有两个 location 的指令的 server 的块级命令放在 server 指令中。 首先，创建一个 /data/www 目录，然后放置一个事先写好内容的 index.html 文件。接着，创建一个 /data/images 目录，然后放置一些图片。 下一步，打开配置文件。默认的配置文件已经包含了一些关于 server 指令的样式，大多数情况下直接把他们给注释掉。现在，注释掉其他的区块，然后写一个新的 server 区块：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">http </span>&#123;    </div><div class=\"line\"></div><div class=\"line\">        <span class=\"class\">server </span>&#123;    </div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通常，该配置文件可能会包含多个 server 指令。这些 server 指令监听不同的端口和服务器名。一旦 nginx 决定哪个服务进程处理请求，它会根据在 server 块级指令中定义好的 location 指令的参数，来匹配请求头中指定的 URI。 将下列 location 指令添加到 server 指令中：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">location</span> <span class=\"title\">/ &#123;    </span></div><div class=\"line\"></div><div class=\"line\">        root /data/www;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该 location 指令相对于请求中的 URI 执行了 “/” 的前缀。为了匹配请求，URI 会被添加到 root 命令指定的路径后，即 /data/www，得到本地文件系统中请求文件的路径。如果，有几个 location 匹配到，那么 nginx 会选择最长的前缀。上面的 location 提供了长度为 1 的前缀，所以，仅当其他的 location 匹配失败后，该指令才会使用。 接着，添加第二个 location 区块：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">location</span> <span class=\"title\">/images</span>/ &#123;    </div><div class=\"line\"></div><div class=\"line\">        root /data;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>它会匹配到以 /images/ 开头的请求（location / 也会匹配到该请求，只是前缀更短） server 块级命令的配置结果如下：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">location</span> <span class=\"title\">/ &#123;       </span></div><div class=\"line\"></div><div class=\"line\">                root /data/www;   </div><div class=\"line\"></div><div class=\"line\">        &#125;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">location</span> <span class=\"title\">/images</span>/ &#123;       </div><div class=\"line\"></div><div class=\"line\">                root /data;   </div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这已经是一个可用的服务器配置，它监听标准的 80 端口并且可以在本地上通过 <a href=\"http://localhost/\" target=\"_blank\" rel=\"external\">http://localhost/</a> 访问。对于 URI 以 /images/ 开头的请求，服务器会从 /data/images 目录中，返回对应的文件。例如，nginx 会返回 /data/images/example.png 文件，当接收到 <a href=\"http://localhost/images/example.png\" target=\"_blank\" rel=\"external\">http://localhost/images/example.png</a> 的请求响应时。如果该文件不存在，nginx 会返回一个 404 错误的响应。没有以 /images/ 开头的 URI 的请求，将会直接映射到 /data/www 目录中。比如，响应 <a href=\"http://localhost/some/example.html\" target=\"_blank\" rel=\"external\">http://localhost/some/example.html</a> 的请求，nginx 会发送 /data/www/some/example.html 文件。 为了使用新的配置文件，如果还没开启 nginx 需要先开启，然后将重载信号发送给 nginx 的主进程，通过执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure>\n<p>如果你发现有些地方出了问题，你可以在 /usr/local/nginx/logs 或者 /var/log/nginx 目录下的 access.log 和 error.log 文件中，找到原因。<br><br><br><strong><h2>搭建一个简易的代理服务</h2></strong></p>\n<p>nginx 常常用来作为代理服务器，这代表着服务器接收请求，然后将它们传递给被代理服务器，得到请求的响应，再将它们发送给客户端。 我们将配置一个基本的代理服务器，它会处理本地图片文件的请求并返回其他的请求给被代理的服务器。在这个例子中，两个服务器都会定义在一个 nginx 实例中。 首先，通过在 nginx 配置文件中添加另一个 server 区块，来定义一个被代理的服务器，像下面的配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"attribute\">root</span> /data/up1;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"attribute\">location</span> / &#123;   </div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面就是一个简单的服务器，它监听在 8080 端口（之前，listen 并没被定义，是因为默认监听的 80 端口）并且会映射所有的请求给 本地文件目录 /data/up1。创建该目录，然后添加 index.html 文件。注意，root 指令是放在 server 上下文中。当响应请求的 location 区块中，没有自己的 root 指令，上述的 root 指令才会被使用。 接着，使用前面章节中的 server 配置，然后将它改为一个代理服务配置。在第一个 location 区块中，放置已经添加被代理服务器的协议，名字和端口等参数的proxy_pass指令（在这里，就是 <a href=\"http://localhost:8080）\" target=\"_blank\" rel=\"external\">http://localhost:8080）</a>:</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">location</span> <span class=\"title\">/ &#123;</span></div><div class=\"line\"></div><div class=\"line\">                proxy_pass http://localhost:<span class=\"number\">8080</span>;   </div><div class=\"line\"></div><div class=\"line\">        &#125;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">location</span> <span class=\"title\">/images</span>/ &#123;</div><div class=\"line\"></div><div class=\"line\">               root /data;   </div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们将修改第二个 location 区块，使他返回一些典型后缀的图片文件请求，现在它只会映射带有 /images/ 前缀的请求到 /data/images 目录下。修改后的 location 指令如下：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">location</span> <span class=\"title\">~ \\.(gif</span>|jpg|png)$&#123;</div><div class=\"line\"></div><div class=\"line\">        root/data/images;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该参数是一个正则表达式，它会匹配所有以 .gif，.jpg 或者 .png 结尾的 URIs。一个正则表达式需要以 ~ 开头。匹配到的请求会被映射到 /data/images 目录下。 当 nginx 在选择 location 去响应一个请求时，它会先检测带有前缀的 location 指令，记住先是检测带有最长前缀的 location，然后检测正则表达式。如果有一个正则的匹配的规则，nginx 会选择该 location，否则，会选择之前缓存的规则。 最终，一个代理服务器的配置结果如下：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server&#123;</div><div class=\"line\"></div><div class=\"line\">        location<span class=\"class\">/&#123;</span></div><div class=\"line\"><span class=\"symbol\"></span></div><div class=\"line\">                proxy_passhttp:<span class=\"comment\">//localhost:8080/;</span></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        location~\\.(gif|jpg|png)$&#123;</div><div class=\"line\"></div><div class=\"line\">                root<span class=\"meta-keyword\">/data/</span>images;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该服务器会选择以 .gif，.jpg，或者 .png 结束的请求并且映射到 /data/images 目录（通过添加 URI 给 root 指令的参数），接着将其他所有的请求映射到上述被代理的服务器。 为了使用新的配置，像前几个章节描述的一样，需要向 nginx 发送重载信号。 这还有很多<a href=\"http://nginx.org/en/docs/http/ngx_http_proxy_module.html\" target=\"_blank\" rel=\"external\">其他的指令</a>，可以用于进一步配置代理连接。</p>\n","excerpt":"<blockquote>\n<p>本文转自<a href=\"http://www.jianshu.com/p/93ac21161ac6\">StuQ</a> </p>\n</blockquote>\n<p><br><br>这篇教程简单介绍了 nginx 并且讲解了一些 nginx 可以解决的简单任务。这里，我们假设 nginx 已经安装在读者的机器上。如果没有，可以看一下如何安装 nginx。这篇教程主要讲解的是如果启用和停止 ngixn，和重新加载配置，描述配置文件的基本结构和怎样搭建一个 nginx 静态辅助器，怎样配置 nginx 作为一个代理服务器来。 nginx 有一个主进程和其他子进程。主进程的主要工作是加载和执行配置文件，并且驻留子进程。子进程用来作为实际的请求处理。nginx 采取基于事件的模型和 OS 依赖的机制，在多个子进程之间高效的分配请求。子进程的个数会直接写在配置文件中并且，对于给定的配置可以是固定的，或者根据可用的 CPU 核数自动的进行调整（参考子进程）。 nginx 和它模块的工作方式是在配置文件中写好的。默认情况下，这个配置文件通常命名为 nginx.conf 并且会放置在 /usr/local/nginx/conf，/etc/nginx，或者 /usr/local/etc/nginx。<br></p>","more":"<br>启用，停止和重载配置<p></p>\n<p>运行可执行文件就可以开启 nginx，比如:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// -c 为 nginx 的配置文件</span></div><div class=\"line\"></div><div class=\"line\">nginx -c/usr/<span class=\"keyword\">local</span>/nginx/<span class=\"keyword\">conf</span>/nginx.<span class=\"keyword\">conf</span></div></pre></td></tr></table></figure>\n<p>如果，nginx 已经开启，那么它就可以通过使用 -s 参数的可执行命令控制。使用下列格式：</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -s <span class=\"keyword\">signal</span><span class=\"string\"></span></div></pre></td></tr></table></figure>\n<p>signal 可以为下列命令之一：</p>\n<p>stop — 直接关闭 nginx</p>\n<p>quit — 会在处理完当前正在的请求后退出，也叫优雅关闭</p>\n<p>reload — 重新加载配置文件，相当于重启</p>\n<p>reopen — 重新打开日志文件 比如，等待当前子进程处理完正在执行的请求后，结束 nginx 进程，可以使用下列命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx <span class=\"_\">-s</span> quit</div></pre></td></tr></table></figure>\n<p>执行该命令的用户需要和启动的 nginx 的用户一致。 如果重载配置文件的命令没有传递给 nginx 或者 nginx 没有重启，那么配置文件的改动是不会被使用的。重载配置文件的命令可以使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure>\n<p>一旦主进程接收到重载配置文件的命令后，它会先检查配置文件语法的合法性，如果没有错误，则会重新加载配置文件。如果成功，则主进程会重新创建一个子进程并且发送关闭请求给以前的子进程。如果没有成功，主进程会回滚改动并且继续使用以前的配置。老的子进程在接受关闭的命令后，会停止接受新的请求并且继续处理当前的请求，直到处理完毕。之后，该子进程就直接退出了。 在 Unix 工具的帮助下，比如使用 kill 工具，该信号会被发送给 nginx 进程。在这种情况下，信号会被直接发送给带有进程 ID 的进程。nginx 的主进程的进程 ID 是写死在 nginx.pid 文件中的。该文件通常放在 /usr/local/nginx/logs 或者 /var/run 目录下。比如，如果主进程的 ID 是 1628，为了发送 QUIT 信号来使 nginx 优雅退出，可以执行：kill -s QUIT 1628</p>\n<p>为了得到所有正在运行的 nginx 进程，我们可能会使用到 ps 工具，比如，像下列的方式：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ps -ax | grep nginx</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结果为：（下面是单核 CPU 的情况） </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">516</span> pts/<span class=\"number\">0</span>    D+    <span class=\"number\">0</span>:<span class=\"number\">00</span> grep --color=auto nginx </div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1156</span> ?        S      1:<span class=\"number\">22</span> <span class=\"string\">nginx:</span> worker process</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">27999</span> ?        Ss    0:<span class=\"number\">00</span> <span class=\"string\">nginx:</span> master process ./nginx</div></pre></td></tr></table></figure>\n<p>更多关于发送信号给 nginx，可以参考<a href=\"https://link.zhihu.com/?target=http://nginx.org/en/docs/ngx_core_module.html#worker_processes\">nginx 控制</a>。<br><br><br><strong><h2>配置文件结构</h2></strong></p>\n<p>nginx 是由一些模块组成，我们一般在配置文件中使用一些具体的指令来控制它们。指令被分为简单指令和块级命令。一个简单的指令是由名字和参数组成，中间用空格分开，并以分号结尾。例如：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> 简单指令</div><div class=\"line\"></div><div class=\"line\">root <span class=\"regexp\">/data/</span>www;</div></pre></td></tr></table></figure>\n<p>块级指令和简单指令一样有着类似的结构，但是末尾不是分号而是用 {和} 大括号包裹的额外指令集。如果一个块级指令的大括号里有其他指令，则它被叫做一个上下文（比如：<a href=\"http://nginx.org/en/docs/ngx_core_module.html#events\">events</a>，<a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#httph\">Module ngx_http_core_module</a>，<a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#servers\">server</a>，和<a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#location\">location</a>）。 在配置文件中，没有放在任何上下文中的指令都是处在主上下文中。events 和 http 的指令是放在主上下文中，server 放在 http 中, location 放在 server 中。</p>\n<p>以 # 开头的行，会被当做注释。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># this is a comment</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">events</span> &#123;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">4096</span>;  <span class=\"comment\">## Default: 1024</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">http</span> &#123;    </div><div class=\"line\"></div><div class=\"line\">        <span class=\"section\">server</span> &#123;          </div><div class=\"line\"></div><div class=\"line\">                <span class=\"attribute\">listen</span>      <span class=\"number\">80</span>;        </div><div class=\"line\"></div><div class=\"line\">                <span class=\"attribute\">server_name</span>  domain1.com www.domain1.com;        </div><div class=\"line\"></div><div class=\"line\">                <span class=\"attribute\">access_log</span>  logs/domain1.access.log  main;        </div><div class=\"line\"></div><div class=\"line\">                <span class=\"attribute\">root</span>        html;        </div><div class=\"line\"></div><div class=\"line\">                <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;          </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"attribute\">fastcgi_pass</span>  <span class=\"number\">127.0.0.1:1025</span>;        </div><div class=\"line\"></div><div class=\"line\">                &#125;    </div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><br><br><strong><h2>静态服务器</h2></strong></p>\n<p>一个重要的网络服务器的任务是处理文件（比如图片或者静态 HTML 文件）。这里，你会实践一个例子，文件会从不同的目录中映射（取决于请求）：/data/www（放置 HTML 文件）和 /data/images（放置图片）。这需要配置一下文件，将带有两个 location 的指令的 server 的块级命令放在 server 指令中。 首先，创建一个 /data/www 目录，然后放置一个事先写好内容的 index.html 文件。接着，创建一个 /data/images 目录，然后放置一些图片。 下一步，打开配置文件。默认的配置文件已经包含了一些关于 server 指令的样式，大多数情况下直接把他们给注释掉。现在，注释掉其他的区块，然后写一个新的 server 区块：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">http </span>&#123;    </div><div class=\"line\"></div><div class=\"line\">        <span class=\"class\">server </span>&#123;    </div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通常，该配置文件可能会包含多个 server 指令。这些 server 指令监听不同的端口和服务器名。一旦 nginx 决定哪个服务进程处理请求，它会根据在 server 块级指令中定义好的 location 指令的参数，来匹配请求头中指定的 URI。 将下列 location 指令添加到 server 指令中：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">location</span> <span class=\"title\">/ &#123;    </span></div><div class=\"line\"></div><div class=\"line\">        root /data/www;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该 location 指令相对于请求中的 URI 执行了 “/” 的前缀。为了匹配请求，URI 会被添加到 root 命令指定的路径后，即 /data/www，得到本地文件系统中请求文件的路径。如果，有几个 location 匹配到，那么 nginx 会选择最长的前缀。上面的 location 提供了长度为 1 的前缀，所以，仅当其他的 location 匹配失败后，该指令才会使用。 接着，添加第二个 location 区块：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">location</span> <span class=\"title\">/images</span>/ &#123;    </div><div class=\"line\"></div><div class=\"line\">        root /data;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>它会匹配到以 /images/ 开头的请求（location / 也会匹配到该请求，只是前缀更短） server 块级命令的配置结果如下：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">location</span> <span class=\"title\">/ &#123;       </span></div><div class=\"line\"></div><div class=\"line\">                root /data/www;   </div><div class=\"line\"></div><div class=\"line\">        &#125;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">location</span> <span class=\"title\">/images</span>/ &#123;       </div><div class=\"line\"></div><div class=\"line\">                root /data;   </div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这已经是一个可用的服务器配置，它监听标准的 80 端口并且可以在本地上通过 <a href=\"http://localhost/\">http://localhost/</a> 访问。对于 URI 以 /images/ 开头的请求，服务器会从 /data/images 目录中，返回对应的文件。例如，nginx 会返回 /data/images/example.png 文件，当接收到 <a href=\"http://localhost/images/example.png\">http://localhost/images/example.png</a> 的请求响应时。如果该文件不存在，nginx 会返回一个 404 错误的响应。没有以 /images/ 开头的 URI 的请求，将会直接映射到 /data/www 目录中。比如，响应 <a href=\"http://localhost/some/example.html\">http://localhost/some/example.html</a> 的请求，nginx 会发送 /data/www/some/example.html 文件。 为了使用新的配置文件，如果还没开启 nginx 需要先开启，然后将重载信号发送给 nginx 的主进程，通过执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure>\n<p>如果你发现有些地方出了问题，你可以在 /usr/local/nginx/logs 或者 /var/log/nginx 目录下的 access.log 和 error.log 文件中，找到原因。<br><br><br><strong><h2>搭建一个简易的代理服务</h2></strong></p>\n<p>nginx 常常用来作为代理服务器，这代表着服务器接收请求，然后将它们传递给被代理服务器，得到请求的响应，再将它们发送给客户端。 我们将配置一个基本的代理服务器，它会处理本地图片文件的请求并返回其他的请求给被代理的服务器。在这个例子中，两个服务器都会定义在一个 nginx 实例中。 首先，通过在 nginx 配置文件中添加另一个 server 区块，来定义一个被代理的服务器，像下面的配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"attribute\">root</span> /data/up1;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"attribute\">location</span> / &#123;   </div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面就是一个简单的服务器，它监听在 8080 端口（之前，listen 并没被定义，是因为默认监听的 80 端口）并且会映射所有的请求给 本地文件目录 /data/up1。创建该目录，然后添加 index.html 文件。注意，root 指令是放在 server 上下文中。当响应请求的 location 区块中，没有自己的 root 指令，上述的 root 指令才会被使用。 接着，使用前面章节中的 server 配置，然后将它改为一个代理服务配置。在第一个 location 区块中，放置已经添加被代理服务器的协议，名字和端口等参数的proxy_pass指令（在这里，就是 <a href=\"http://localhost:8080）\">http://localhost:8080）</a>:</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">location</span> <span class=\"title\">/ &#123;</span></div><div class=\"line\"></div><div class=\"line\">                proxy_pass http://localhost:<span class=\"number\">8080</span>;   </div><div class=\"line\"></div><div class=\"line\">        &#125;   </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">location</span> <span class=\"title\">/images</span>/ &#123;</div><div class=\"line\"></div><div class=\"line\">               root /data;   </div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们将修改第二个 location 区块，使他返回一些典型后缀的图片文件请求，现在它只会映射带有 /images/ 前缀的请求到 /data/images 目录下。修改后的 location 指令如下：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">location</span> <span class=\"title\">~ \\.(gif</span>|jpg|png)$&#123;</div><div class=\"line\"></div><div class=\"line\">        root/data/images;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该参数是一个正则表达式，它会匹配所有以 .gif，.jpg 或者 .png 结尾的 URIs。一个正则表达式需要以 ~ 开头。匹配到的请求会被映射到 /data/images 目录下。 当 nginx 在选择 location 去响应一个请求时，它会先检测带有前缀的 location 指令，记住先是检测带有最长前缀的 location，然后检测正则表达式。如果有一个正则的匹配的规则，nginx 会选择该 location，否则，会选择之前缓存的规则。 最终，一个代理服务器的配置结果如下：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server&#123;</div><div class=\"line\"></div><div class=\"line\">        location<span class=\"class\">/&#123;</span></div><div class=\"line\"><span class=\"symbol\"></span></div><div class=\"line\">                proxy_passhttp:<span class=\"comment\">//localhost:8080/;</span></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        location~\\.(gif|jpg|png)$&#123;</div><div class=\"line\"></div><div class=\"line\">                root<span class=\"meta-keyword\">/data/</span>images;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该服务器会选择以 .gif，.jpg，或者 .png 结束的请求并且映射到 /data/images 目录（通过添加 URI 给 root 指令的参数），接着将其他所有的请求映射到上述被代理的服务器。 为了使用新的配置，像前几个章节描述的一样，需要向 nginx 发送重载信号。 这还有很多<a href=\"http://nginx.org/en/docs/http/ngx_http_proxy_module.html\">其他的指令</a>，可以用于进一步配置代理连接。</p>"},{"title":"spring ioc原理（自己也可以写个spring）","date":"2017-03-10T09:07:33.000Z","_content":"最近，买了本spring入门书：spring In Action 。大致浏览了下感觉还不错。就是入门了点。Manning的书还是不错的，我虽然不像哪些只看Manning书的人那样专注于Manning,但怀着崇敬的心情和激情通览了一遍。又一次接受了IOC 、DI、AOP等Spring核心概念。 先就IOC和DI谈一点我的看法。\n<!--more-->\nIOC（DI）：其实这个Spring架构核心的概念没有这么复杂，更不像有些书上描述的那样晦涩。Java程序员都知道：java程序中的每个业务逻辑至少需要两个或以上的对象来协作完成，通常，每个对象在使用他的合作对象时，自己均要使用像new object（） 这样的语法来完成合作对象的申请工作。你会发现：对象间的耦合度高了。而IOC的思想是：Spring容器来实现这些相互依赖对象的创建、协调工作。对象只需要关系业务逻辑本身就可以了。从这方面来说，对象如何得到他的协作对象的责任被反转了（IOC、DI）。\n\n这是我对Spring的IOC的体会。DI其实就是IOC的另外一种说法。DI是由Martin Fowler 在2004年初的一篇论文中首次提出的。<code>他总结：控制的什么被反转了？就是：获得依赖对象的方式反转了。</code>\n\n如果对这一核心概念还不理解：这里引用一个叫Bromon的blog上找到的浅显易懂的答案：\n\n>IoC与DI\n\n>　　首先想说说IoC（Inversion of Control，控制倒转）。这是spring的核心，贯穿始终。所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。\n\n>　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。如果你还不明白的话，我决定放弃。\n\n>IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。关于反射的相关资料请查阅java doc。\n　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。\n\n如果还不明白，放弃java吧！\n\n**下面来让大家了解一下Spring到底是怎么运行的。**\n\n```\npublic static void main(String[] args) {   \n        ApplicationContext context = new FileSystemXmlApplicationContext(   \n                \"applicationContext.xml\");   \n        Animal animal = (Animal) context.getBean(\"animal\");   \n        animal.say();   \n    }  \n```\n\n\n这段代码你一定很熟悉吧，不过还是让我们分析一下它吧，首先是applicationContext.xml\n\n```\n<bean id=\"animal\" class=\"phz.springframework.test.Cat\">   \n        <property name=\"name\" value=\"kitty\" />   \n    </bean>  \n```\n\n他有一个类Cat\n\n```\npublic class Cat implements Animal {   \n    private String name;   \n    public void say() {   \n        System.out.println(\"I am \" + name + \"!\");   \n    }   \n    public void setName(String name) {   \n        this.name = name;   \n    }   \n}  \n```\n\n实现了Animal接口\n\n```\npublic interface Animal {   \n    public void say();   \n}  \n```\n\n很明显上面的代码输出I am kitty! \n\n那么到底Spring是如何做到的呢？ \n接下来就让我们自己写个Spring 来看看Spring 到底是怎么运行的吧！ \n\n首先，我们定义一个Bean类，这个类用来存放一个Bean拥有的属性\n\n```\n/* Bean Id */  \n    private String id;   \n    /* Bean Class */  \n    private String type;   \n    /* Bean Property */  \n    private Map<String, Object> properties = new HashMap<String, Object>();  \n```\n\n一个Bean包括id,type,和Properties。 \n\n接下来Spring 就开始加载我们的配置文件了，将我们配置的信息保存在一个HashMap中，HashMap的key就是Bean 的 Id ，HasMap 的value是这个Bean，只有这样我们才能通过context.getBean(\"animal\")这个方法获得Animal这个类。我们都知道Spirng可以注入基本类型，而且可以注入像List，Map这样的类型，接下来就让我们以Map为例看看Spring是怎么保存的吧 \n\nMap配置可以像下面的\n\n```\n<bean id=\"test\" class=\"Test\">   \n        <property name=\"testMap\">   \n            <map>   \n                <entry key=\"a\">   \n                    <value>1</value>   \n                </entry>   \n                <entry key=\"b\">   \n                    <value>2</value>   \n                </entry>   \n            </map>   \n        </property>   \n    </bean>  \n```\n\nSpring是怎样保存上面的配置呢？，代码如下：\n\n```\nif (beanProperty.element(\"map\") != null) {   \n                    Map<String, Object> propertiesMap = new HashMap<String, Object>();   \n                    Element propertiesListMap = (Element) beanProperty   \n                            .elements().get(0);   \n                    Iterator<?> propertiesIterator = propertiesListMap   \n                            .elements().iterator();   \n                    while (propertiesIterator.hasNext()) {   \n                        Element vet = (Element) propertiesIterator.next();   \n                        if (vet.getName().equals(\"entry\")) {   \n                            String key = vet.attributeValue(\"key\");   \n                            Iterator<?> valuesIterator = vet.elements()   \n                                    .iterator();   \n                            while (valuesIterator.hasNext()) {   \n                                Element value = (Element) valuesIterator.next();   \n                                if (value.getName().equals(\"value\")) {   \n                                    propertiesMap.put(key, value.getText());   \n                                }   \n                                if (value.getName().equals(\"ref\")) {   \n                                    propertiesMap.put(key, new String[] { value   \n                                            .attributeValue(\"bean\") });   \n                                }   \n                            }   \n                        }   \n                    }   \n                    bean.getProperties().put(name, propertiesMap);   \n                }  \n```\n\n接下来就进入最核心部分了，让我们看看Spring 到底是怎么依赖注入的吧，其实依赖注入的思想也很简单，它是通过反射机制实现的，在实例化一个类时，它通过反射调用类中set方法将事先保存在HashMap中的类属性注入到类中。让我们看看具体它是怎么做的吧。 \n首先实例化一个类，像这样\n\n```\npublic static Object newInstance(String className) {   \n        Class<?> cls = null;   \n        Object obj = null;   \n        try {   \n            cls = Class.forName(className);   \n            obj = cls.newInstance();   \n        } catch (ClassNotFoundException e) {   \n            throw new RuntimeException(e);   \n        } catch (InstantiationException e) {   \n            throw new RuntimeException(e);   \n        } catch (IllegalAccessException e) {   \n            throw new RuntimeException(e);   \n        }   \n        return obj;   \n    }  \n```\n\n接着它将这个类的依赖注入进去，像这样\n\n```\npublic static void setProperty(Object obj, String name, String value) {   \n        Class<? extends Object> clazz = obj.getClass();   \n        try {   \n            String methodName = returnSetMthodName(name);   \n            Method[] ms = clazz.getMethods();   \n            for (Method m : ms) {   \n                if (m.getName().equals(methodName)) {   \n                    if (m.getParameterTypes().length == 1) {   \n                        Class<?> clazzParameterType = m.getParameterTypes()[0];   \n                        setFieldValue(clazzParameterType.getName(), value, m,   \n                                obj);   \n                        break;   \n                    }   \n                }   \n            }   \n        } catch (SecurityException e) {   \n            throw new RuntimeException(e);   \n        } catch (IllegalArgumentException e) {   \n            throw new RuntimeException(e);   \n        } catch (IllegalAccessException e) {   \n            throw new RuntimeException(e);   \n        } catch (InvocationTargetException e) {   \n            throw new RuntimeException(e);   \n        }   \n}  \n```\n\n最后它将这个类的实例返回给我们，我们就可以用了。我们还是以Map为例看看它是怎么做的，我写的代码里面是创建一个HashMap并把该HashMap注入到需要注入的类中，像这样，\n\n```\nif (value instanceof Map) {   \n                Iterator<?> entryIterator = ((Map<?, ?>) value).entrySet()   \n                        .iterator();   \n                Map<String, Object> map = new HashMap<String, Object>();   \n                while (entryIterator.hasNext()) {   \n                    Entry<?, ?> entryMap = (Entry<?, ?>) entryIterator.next();   \n                    if (entryMap.getValue() instanceof String[]) {   \n                        map.put((String) entryMap.getKey(),   \n                                getBean(((String[]) entryMap.getValue())[0]));   \n                    }   \n                }   \n                BeanProcesser.setProperty(obj, property, map);   \n            }  \n```\n\n好了，这样我们就可以用Spring 给我们创建的类了，是不是也不是很难啊？当然Spring能做到的远不止这些，这个示例程序仅仅提供了Spring最核心的依赖注入功能中的一部分。 \n本文参考了大量文章无法一一感谢，在这一起感谢，如果侵犯了你的版权深表歉意，很希望对大家有帮助！","source":"_posts/spring-ioc原理.md","raw":"---\ntitle: spring ioc原理（自己也可以写个spring）\ndate: 2017-03-10 17:07:33\ncategories: Java二三事\ntags:\n\t- Spring\n\t- 框架\n---\n最近，买了本spring入门书：spring In Action 。大致浏览了下感觉还不错。就是入门了点。Manning的书还是不错的，我虽然不像哪些只看Manning书的人那样专注于Manning,但怀着崇敬的心情和激情通览了一遍。又一次接受了IOC 、DI、AOP等Spring核心概念。 先就IOC和DI谈一点我的看法。\n<!--more-->\nIOC（DI）：其实这个Spring架构核心的概念没有这么复杂，更不像有些书上描述的那样晦涩。Java程序员都知道：java程序中的每个业务逻辑至少需要两个或以上的对象来协作完成，通常，每个对象在使用他的合作对象时，自己均要使用像new object（） 这样的语法来完成合作对象的申请工作。你会发现：对象间的耦合度高了。而IOC的思想是：Spring容器来实现这些相互依赖对象的创建、协调工作。对象只需要关系业务逻辑本身就可以了。从这方面来说，对象如何得到他的协作对象的责任被反转了（IOC、DI）。\n\n这是我对Spring的IOC的体会。DI其实就是IOC的另外一种说法。DI是由Martin Fowler 在2004年初的一篇论文中首次提出的。<code>他总结：控制的什么被反转了？就是：获得依赖对象的方式反转了。</code>\n\n如果对这一核心概念还不理解：这里引用一个叫Bromon的blog上找到的浅显易懂的答案：\n\n>IoC与DI\n\n>　　首先想说说IoC（Inversion of Control，控制倒转）。这是spring的核心，贯穿始终。所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。\n\n>　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。如果你还不明白的话，我决定放弃。\n\n>IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。关于反射的相关资料请查阅java doc。\n　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。\n\n如果还不明白，放弃java吧！\n\n**下面来让大家了解一下Spring到底是怎么运行的。**\n\n```\npublic static void main(String[] args) {   \n        ApplicationContext context = new FileSystemXmlApplicationContext(   \n                \"applicationContext.xml\");   \n        Animal animal = (Animal) context.getBean(\"animal\");   \n        animal.say();   \n    }  \n```\n\n\n这段代码你一定很熟悉吧，不过还是让我们分析一下它吧，首先是applicationContext.xml\n\n```\n<bean id=\"animal\" class=\"phz.springframework.test.Cat\">   \n        <property name=\"name\" value=\"kitty\" />   \n    </bean>  \n```\n\n他有一个类Cat\n\n```\npublic class Cat implements Animal {   \n    private String name;   \n    public void say() {   \n        System.out.println(\"I am \" + name + \"!\");   \n    }   \n    public void setName(String name) {   \n        this.name = name;   \n    }   \n}  \n```\n\n实现了Animal接口\n\n```\npublic interface Animal {   \n    public void say();   \n}  \n```\n\n很明显上面的代码输出I am kitty! \n\n那么到底Spring是如何做到的呢？ \n接下来就让我们自己写个Spring 来看看Spring 到底是怎么运行的吧！ \n\n首先，我们定义一个Bean类，这个类用来存放一个Bean拥有的属性\n\n```\n/* Bean Id */  \n    private String id;   \n    /* Bean Class */  \n    private String type;   \n    /* Bean Property */  \n    private Map<String, Object> properties = new HashMap<String, Object>();  \n```\n\n一个Bean包括id,type,和Properties。 \n\n接下来Spring 就开始加载我们的配置文件了，将我们配置的信息保存在一个HashMap中，HashMap的key就是Bean 的 Id ，HasMap 的value是这个Bean，只有这样我们才能通过context.getBean(\"animal\")这个方法获得Animal这个类。我们都知道Spirng可以注入基本类型，而且可以注入像List，Map这样的类型，接下来就让我们以Map为例看看Spring是怎么保存的吧 \n\nMap配置可以像下面的\n\n```\n<bean id=\"test\" class=\"Test\">   \n        <property name=\"testMap\">   \n            <map>   \n                <entry key=\"a\">   \n                    <value>1</value>   \n                </entry>   \n                <entry key=\"b\">   \n                    <value>2</value>   \n                </entry>   \n            </map>   \n        </property>   \n    </bean>  \n```\n\nSpring是怎样保存上面的配置呢？，代码如下：\n\n```\nif (beanProperty.element(\"map\") != null) {   \n                    Map<String, Object> propertiesMap = new HashMap<String, Object>();   \n                    Element propertiesListMap = (Element) beanProperty   \n                            .elements().get(0);   \n                    Iterator<?> propertiesIterator = propertiesListMap   \n                            .elements().iterator();   \n                    while (propertiesIterator.hasNext()) {   \n                        Element vet = (Element) propertiesIterator.next();   \n                        if (vet.getName().equals(\"entry\")) {   \n                            String key = vet.attributeValue(\"key\");   \n                            Iterator<?> valuesIterator = vet.elements()   \n                                    .iterator();   \n                            while (valuesIterator.hasNext()) {   \n                                Element value = (Element) valuesIterator.next();   \n                                if (value.getName().equals(\"value\")) {   \n                                    propertiesMap.put(key, value.getText());   \n                                }   \n                                if (value.getName().equals(\"ref\")) {   \n                                    propertiesMap.put(key, new String[] { value   \n                                            .attributeValue(\"bean\") });   \n                                }   \n                            }   \n                        }   \n                    }   \n                    bean.getProperties().put(name, propertiesMap);   \n                }  \n```\n\n接下来就进入最核心部分了，让我们看看Spring 到底是怎么依赖注入的吧，其实依赖注入的思想也很简单，它是通过反射机制实现的，在实例化一个类时，它通过反射调用类中set方法将事先保存在HashMap中的类属性注入到类中。让我们看看具体它是怎么做的吧。 \n首先实例化一个类，像这样\n\n```\npublic static Object newInstance(String className) {   \n        Class<?> cls = null;   \n        Object obj = null;   \n        try {   \n            cls = Class.forName(className);   \n            obj = cls.newInstance();   \n        } catch (ClassNotFoundException e) {   \n            throw new RuntimeException(e);   \n        } catch (InstantiationException e) {   \n            throw new RuntimeException(e);   \n        } catch (IllegalAccessException e) {   \n            throw new RuntimeException(e);   \n        }   \n        return obj;   \n    }  \n```\n\n接着它将这个类的依赖注入进去，像这样\n\n```\npublic static void setProperty(Object obj, String name, String value) {   \n        Class<? extends Object> clazz = obj.getClass();   \n        try {   \n            String methodName = returnSetMthodName(name);   \n            Method[] ms = clazz.getMethods();   \n            for (Method m : ms) {   \n                if (m.getName().equals(methodName)) {   \n                    if (m.getParameterTypes().length == 1) {   \n                        Class<?> clazzParameterType = m.getParameterTypes()[0];   \n                        setFieldValue(clazzParameterType.getName(), value, m,   \n                                obj);   \n                        break;   \n                    }   \n                }   \n            }   \n        } catch (SecurityException e) {   \n            throw new RuntimeException(e);   \n        } catch (IllegalArgumentException e) {   \n            throw new RuntimeException(e);   \n        } catch (IllegalAccessException e) {   \n            throw new RuntimeException(e);   \n        } catch (InvocationTargetException e) {   \n            throw new RuntimeException(e);   \n        }   \n}  \n```\n\n最后它将这个类的实例返回给我们，我们就可以用了。我们还是以Map为例看看它是怎么做的，我写的代码里面是创建一个HashMap并把该HashMap注入到需要注入的类中，像这样，\n\n```\nif (value instanceof Map) {   \n                Iterator<?> entryIterator = ((Map<?, ?>) value).entrySet()   \n                        .iterator();   \n                Map<String, Object> map = new HashMap<String, Object>();   \n                while (entryIterator.hasNext()) {   \n                    Entry<?, ?> entryMap = (Entry<?, ?>) entryIterator.next();   \n                    if (entryMap.getValue() instanceof String[]) {   \n                        map.put((String) entryMap.getKey(),   \n                                getBean(((String[]) entryMap.getValue())[0]));   \n                    }   \n                }   \n                BeanProcesser.setProperty(obj, property, map);   \n            }  \n```\n\n好了，这样我们就可以用Spring 给我们创建的类了，是不是也不是很难啊？当然Spring能做到的远不止这些，这个示例程序仅仅提供了Spring最核心的依赖注入功能中的一部分。 \n本文参考了大量文章无法一一感谢，在这一起感谢，如果侵犯了你的版权深表歉意，很希望对大家有帮助！","slug":"spring-ioc原理","published":1,"updated":"2017-03-10T09:10:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kfs002nrhso59dprzkr","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>最近，买了本spring入门书：spring In Action 。大致浏览了下感觉还不错。就是入门了点。Manning的书还是不错的，我虽然不像哪些只看Manning书的人那样专注于Manning,但怀着崇敬的心情和激情通览了一遍。又一次接受了IOC 、DI、AOP等Spring核心概念。 先就IOC和DI谈一点我的看法。<br><a id=\"more\"></a><br>IOC（DI）：其实这个Spring架构核心的概念没有这么复杂，更不像有些书上描述的那样晦涩。Java程序员都知道：java程序中的每个业务逻辑至少需要两个或以上的对象来协作完成，通常，每个对象在使用他的合作对象时，自己均要使用像new object（） 这样的语法来完成合作对象的申请工作。你会发现：对象间的耦合度高了。而IOC的思想是：Spring容器来实现这些相互依赖对象的创建、协调工作。对象只需要关系业务逻辑本身就可以了。从这方面来说，对象如何得到他的协作对象的责任被反转了（IOC、DI）。</p>\n<p>这是我对Spring的IOC的体会。DI其实就是IOC的另外一种说法。DI是由Martin Fowler 在2004年初的一篇论文中首次提出的。<code>他总结：控制的什么被反转了？就是：获得依赖对象的方式反转了。</code></p>\n<p>如果对这一核心概念还不理解：这里引用一个叫Bromon的blog上找到的浅显易懂的答案：</p>\n<blockquote>\n<p>IoC与DI</p>\n<p>　　首先想说说IoC（Inversion of Control，控制倒转）。这是spring的核心，贯穿始终。所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。</p>\n<p>　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。如果你还不明白的话，我决定放弃。</p>\n<p>IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。关于反射的相关资料请查阅java doc。<br>　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。</p>\n</blockquote>\n<p>如果还不明白，放弃java吧！</p>\n<p><strong>下面来让大家了解一下Spring到底是怎么运行的。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;   </div><div class=\"line\">        ApplicationContext context = <span class=\"keyword\">new</span> FileSystemXmlApplicationContext(   </div><div class=\"line\">                <span class=\"string\">\"applicationContext.xml\"</span>);   </div><div class=\"line\">        Animal animal = (Animal) context.getBean(<span class=\"string\">\"animal\"</span>);   </div><div class=\"line\">        animal.say();   </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这段代码你一定很熟悉吧，不过还是让我们分析一下它吧，首先是applicationContext.xml</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=<span class=\"string\">\"animal\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"phz.springframework.test.Cat\"</span>&gt;   </div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"kitty\"</span> /&gt;</span>   </span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>他有一个类Cat</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">private</span> String name;   </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;   </div><div class=\"line\">        System.out.println(<span class=\"string\">\"I am \"</span> + name + <span class=\"string\">\"!\"</span>);   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;   </div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实现了Animal接口</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">Animal</span> &#123;   </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>很明显上面的代码输出I am kitty! </p>\n<p>那么到底Spring是如何做到的呢？<br>接下来就让我们自己写个Spring 来看看Spring 到底是怎么运行的吧！ </p>\n<p>首先，我们定义一个Bean类，这个类用来存放一个Bean拥有的属性</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Bean Id */</span>  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> id;   </div><div class=\"line\">    <span class=\"comment\">/* Bean Class */</span>  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> type;   </div><div class=\"line\">    <span class=\"comment\">/* Bean Property */</span>  </div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt; properties = <span class=\"keyword\">new</span> <span class=\"keyword\">HashMap</span>&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt;();</div></pre></td></tr></table></figure>\n<p>一个Bean包括id,type,和Properties。 </p>\n<p>接下来Spring 就开始加载我们的配置文件了，将我们配置的信息保存在一个HashMap中，HashMap的key就是Bean 的 Id ，HasMap 的value是这个Bean，只有这样我们才能通过context.getBean(“animal”)这个方法获得Animal这个类。我们都知道Spirng可以注入基本类型，而且可以注入像List，Map这样的类型，接下来就让我们以Map为例看看Spring是怎么保存的吧 </p>\n<p>Map配置可以像下面的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=<span class=\"string\">\"test\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"Test\"</span>&gt;   </div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testMap\"</span>&gt;</span>   </span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span>   </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"a\"</span>&gt;</span>   </div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>   </div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span>   </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"b\"</span>&gt;</span>   </div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>   </div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span>   </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span>   </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>   </div><div class=\"line\">    &lt;<span class=\"regexp\">/bean&gt;</span></div></pre></td></tr></table></figure>\n<p>Spring是怎样保存上面的配置呢？，代码如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (beanProperty.element(<span class=\"string\">\"map\"</span>) != <span class=\"keyword\">null</span>) &#123;   </div><div class=\"line\">                    <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; propertiesMap = <span class=\"keyword\">new</span> HashMap&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt;();   </div><div class=\"line\">                    <span class=\"built_in\">Element</span> propertiesListMap = (<span class=\"built_in\">Element</span>) beanProperty   </div><div class=\"line\">                            .elements().<span class=\"keyword\">get</span>(<span class=\"number\">0</span>);   </div><div class=\"line\">                    <span class=\"built_in\">Iterator</span>&lt;?&gt; propertiesIterator = propertiesListMap   </div><div class=\"line\">                            .elements().iterator();   </div><div class=\"line\">                    <span class=\"keyword\">while</span> (propertiesIterator.hasNext()) &#123;   </div><div class=\"line\">                        <span class=\"built_in\">Element</span> vet = (<span class=\"built_in\">Element</span>) propertiesIterator.next();   </div><div class=\"line\">                        <span class=\"keyword\">if</span> (vet.getName().equals(<span class=\"string\">\"entry\"</span>)) &#123;   </div><div class=\"line\">                            <span class=\"built_in\">String</span> key = vet.attributeValue(<span class=\"string\">\"key\"</span>);   </div><div class=\"line\">                            <span class=\"built_in\">Iterator</span>&lt;?&gt; valuesIterator = vet.elements()   </div><div class=\"line\">                                    .iterator();   </div><div class=\"line\">                            <span class=\"keyword\">while</span> (valuesIterator.hasNext()) &#123;   </div><div class=\"line\">                                <span class=\"built_in\">Element</span> value = (<span class=\"built_in\">Element</span>) valuesIterator.next();   </div><div class=\"line\">                                <span class=\"keyword\">if</span> (value.getName().equals(<span class=\"string\">\"value\"</span>)) &#123;   </div><div class=\"line\">                                    propertiesMap.put(key, value.getText());   </div><div class=\"line\">                                &#125;   </div><div class=\"line\">                                <span class=\"keyword\">if</span> (value.getName().equals(<span class=\"string\">\"ref\"</span>)) &#123;   </div><div class=\"line\">                                    propertiesMap.put(key, <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>[] &#123; value   </div><div class=\"line\">                                            .attributeValue(<span class=\"string\">\"bean\"</span>) &#125;);   </div><div class=\"line\">                                &#125;   </div><div class=\"line\">                            &#125;   </div><div class=\"line\">                        &#125;   </div><div class=\"line\">                    &#125;   </div><div class=\"line\">                    bean.getProperties().put(name, propertiesMap);   </div><div class=\"line\">                &#125;</div></pre></td></tr></table></figure>\n<p>接下来就进入最核心部分了，让我们看看Spring 到底是怎么依赖注入的吧，其实依赖注入的思想也很简单，它是通过反射机制实现的，在实例化一个类时，它通过反射调用类中set方法将事先保存在HashMap中的类属性注入到类中。让我们看看具体它是怎么做的吧。<br>首先实例化一个类，像这样</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"keyword\">new</span><span class=\"type\">Instance</span>(<span class=\"keyword\">String</span> className) &#123;   </div><div class=\"line\">        Class&lt;?&gt; cls = <span class=\"literal\">null</span>;   </div><div class=\"line\">        Object obj = <span class=\"literal\">null</span>;   </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;   </div><div class=\"line\">            cls = Class.forName(className);   </div><div class=\"line\">            obj = cls.<span class=\"keyword\">new</span><span class=\"type\">Instance</span>();   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">RuntimeException</span>(e);   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">RuntimeException</span>(e);   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">RuntimeException</span>(e);   </div><div class=\"line\">        &#125;   </div><div class=\"line\">        <span class=\"keyword\">return</span> obj;   </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>接着它将这个类的依赖注入进去，像这样</p>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> static void setProperty(Object obj, String name, String value) &#123;   </div><div class=\"line\">        <span class=\"class\"><span class=\"keyword\">Class</span>&lt;? <span class=\"keyword\">extends</span> <span class=\"title\">Object</span>&gt; <span class=\"title\">clazz</span> = <span class=\"title\">obj</span>.<span class=\"title\">getClass</span>();   </span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;   </div><div class=\"line\">            String methodName = returnSetMthodName(name);   </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">Method</span>[] <span class=\"title\">ms</span> =</span> clazz.getMethods();   </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">m</span> :</span> ms) &#123;   </div><div class=\"line\">                <span class=\"keyword\">if</span> (m.getName().equals(methodName)) &#123;   </div><div class=\"line\">                    <span class=\"keyword\">if</span> (m.getParameterTypes().length == <span class=\"number\">1</span>) &#123;   </div><div class=\"line\">                        <span class=\"class\"><span class=\"keyword\">Class</span>&lt;?&gt; <span class=\"title\">clazzParameterType</span> = <span class=\"title\">m</span>.<span class=\"title\">getParameterTypes</span>()[0];   </span></div><div class=\"line\">                        setFieldValue(clazzParameterType.getName(), value, m,   </div><div class=\"line\">                                obj);   </div><div class=\"line\">                        break;   </div><div class=\"line\">                    &#125;   </div><div class=\"line\">                &#125;   </div><div class=\"line\">            &#125;   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SecurityException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);   </div><div class=\"line\">        &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后它将这个类的实例返回给我们，我们就可以用了。我们还是以Map为例看看它是怎么做的，我写的代码里面是创建一个HashMap并把该HashMap注入到需要注入的类中，像这样，</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">if</span> (value instanceof <span class=\"meta\">Map</span>) &#123;   </div><div class=\"line\">                <span class=\"keyword\">Iterator&lt;?&gt; </span>entryIterator = ((<span class=\"meta\">Map</span>&lt;?, ?&gt;) value).entrySet()   </div><div class=\"line\">                        .<span class=\"keyword\">iterator(); </span>  </div><div class=\"line\">                <span class=\"meta\">Map</span>&lt;<span class=\"keyword\">String, </span>Object&gt; <span class=\"meta\">map</span> = new HashMap&lt;<span class=\"keyword\">String, </span>Object&gt;()<span class=\"comment\">;   </span></div><div class=\"line\">                <span class=\"meta\">while</span> (entryIterator.hasNext()) &#123;   </div><div class=\"line\">                    <span class=\"meta\">Entry</span>&lt;?, ?&gt; entryMap = (<span class=\"meta\">Entry</span>&lt;?, ?&gt;) entryIterator.next()<span class=\"comment\">;   </span></div><div class=\"line\">                    <span class=\"meta\">if</span> (entryMap.getValue() instanceof <span class=\"keyword\">String[]) </span>&#123;   </div><div class=\"line\">                        <span class=\"meta\">map</span>.put((<span class=\"keyword\">String) </span>entryMap.getKey(),   </div><div class=\"line\">                                getBean(((<span class=\"keyword\">String[]) </span>entryMap.getValue())[<span class=\"number\">0</span>]))<span class=\"comment\">;   </span></div><div class=\"line\">                    &#125;   </div><div class=\"line\">                &#125;   </div><div class=\"line\">                <span class=\"keyword\">BeanProcesser.setProperty(obj, </span>property, <span class=\"meta\">map</span>)<span class=\"comment\">;   </span></div><div class=\"line\">            &#125;</div></pre></td></tr></table></figure>\n<p>好了，这样我们就可以用Spring 给我们创建的类了，是不是也不是很难啊？当然Spring能做到的远不止这些，这个示例程序仅仅提供了Spring最核心的依赖注入功能中的一部分。<br>本文参考了大量文章无法一一感谢，在这一起感谢，如果侵犯了你的版权深表歉意，很希望对大家有帮助！</p>\n","excerpt":"<p>最近，买了本spring入门书：spring In Action 。大致浏览了下感觉还不错。就是入门了点。Manning的书还是不错的，我虽然不像哪些只看Manning书的人那样专注于Manning,但怀着崇敬的心情和激情通览了一遍。又一次接受了IOC 、DI、AOP等Spring核心概念。 先就IOC和DI谈一点我的看法。<br></p>","more":"<br>IOC（DI）：其实这个Spring架构核心的概念没有这么复杂，更不像有些书上描述的那样晦涩。Java程序员都知道：java程序中的每个业务逻辑至少需要两个或以上的对象来协作完成，通常，每个对象在使用他的合作对象时，自己均要使用像new object（） 这样的语法来完成合作对象的申请工作。你会发现：对象间的耦合度高了。而IOC的思想是：Spring容器来实现这些相互依赖对象的创建、协调工作。对象只需要关系业务逻辑本身就可以了。从这方面来说，对象如何得到他的协作对象的责任被反转了（IOC、DI）。<p></p>\n<p>这是我对Spring的IOC的体会。DI其实就是IOC的另外一种说法。DI是由Martin Fowler 在2004年初的一篇论文中首次提出的。<code>他总结：控制的什么被反转了？就是：获得依赖对象的方式反转了。</code></p>\n<p>如果对这一核心概念还不理解：这里引用一个叫Bromon的blog上找到的浅显易懂的答案：</p>\n<blockquote>\n<p>IoC与DI</p>\n<p>　　首先想说说IoC（Inversion of Control，控制倒转）。这是spring的核心，贯穿始终。所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。</p>\n<p>　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。如果你还不明白的话，我决定放弃。</p>\n<p>IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。关于反射的相关资料请查阅java doc。<br>　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。</p>\n</blockquote>\n<p>如果还不明白，放弃java吧！</p>\n<p><strong>下面来让大家了解一下Spring到底是怎么运行的。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;   </div><div class=\"line\">        ApplicationContext context = <span class=\"keyword\">new</span> FileSystemXmlApplicationContext(   </div><div class=\"line\">                <span class=\"string\">\"applicationContext.xml\"</span>);   </div><div class=\"line\">        Animal animal = (Animal) context.getBean(<span class=\"string\">\"animal\"</span>);   </div><div class=\"line\">        animal.say();   </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这段代码你一定很熟悉吧，不过还是让我们分析一下它吧，首先是applicationContext.xml</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=<span class=\"string\">\"animal\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"phz.springframework.test.Cat\"</span>&gt;   </div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"kitty\"</span> /&gt;</span>   </span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>他有一个类Cat</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">private</span> String name;   </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;   </div><div class=\"line\">        System.out.println(<span class=\"string\">\"I am \"</span> + name + <span class=\"string\">\"!\"</span>);   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;   </div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实现了Animal接口</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">Animal</span> &#123;   </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>很明显上面的代码输出I am kitty! </p>\n<p>那么到底Spring是如何做到的呢？<br>接下来就让我们自己写个Spring 来看看Spring 到底是怎么运行的吧！ </p>\n<p>首先，我们定义一个Bean类，这个类用来存放一个Bean拥有的属性</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Bean Id */</span>  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> id;   </div><div class=\"line\">    <span class=\"comment\">/* Bean Class */</span>  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> type;   </div><div class=\"line\">    <span class=\"comment\">/* Bean Property */</span>  </div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt; properties = <span class=\"keyword\">new</span> <span class=\"keyword\">HashMap</span>&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt;();</div></pre></td></tr></table></figure>\n<p>一个Bean包括id,type,和Properties。 </p>\n<p>接下来Spring 就开始加载我们的配置文件了，将我们配置的信息保存在一个HashMap中，HashMap的key就是Bean 的 Id ，HasMap 的value是这个Bean，只有这样我们才能通过context.getBean(“animal”)这个方法获得Animal这个类。我们都知道Spirng可以注入基本类型，而且可以注入像List，Map这样的类型，接下来就让我们以Map为例看看Spring是怎么保存的吧 </p>\n<p>Map配置可以像下面的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=<span class=\"string\">\"test\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"Test\"</span>&gt;   </div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testMap\"</span>&gt;</span>   </span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span>   </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"a\"</span>&gt;</span>   </div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>   </div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span>   </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"b\"</span>&gt;</span>   </div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>   </div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span>   </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span>   </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>   </div><div class=\"line\">    &lt;<span class=\"regexp\">/bean&gt;</span></div></pre></td></tr></table></figure>\n<p>Spring是怎样保存上面的配置呢？，代码如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (beanProperty.element(<span class=\"string\">\"map\"</span>) != <span class=\"keyword\">null</span>) &#123;   </div><div class=\"line\">                    <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; propertiesMap = <span class=\"keyword\">new</span> HashMap&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt;();   </div><div class=\"line\">                    <span class=\"built_in\">Element</span> propertiesListMap = (<span class=\"built_in\">Element</span>) beanProperty   </div><div class=\"line\">                            .elements().<span class=\"keyword\">get</span>(<span class=\"number\">0</span>);   </div><div class=\"line\">                    <span class=\"built_in\">Iterator</span>&lt;?&gt; propertiesIterator = propertiesListMap   </div><div class=\"line\">                            .elements().iterator();   </div><div class=\"line\">                    <span class=\"keyword\">while</span> (propertiesIterator.hasNext()) &#123;   </div><div class=\"line\">                        <span class=\"built_in\">Element</span> vet = (<span class=\"built_in\">Element</span>) propertiesIterator.next();   </div><div class=\"line\">                        <span class=\"keyword\">if</span> (vet.getName().equals(<span class=\"string\">\"entry\"</span>)) &#123;   </div><div class=\"line\">                            <span class=\"built_in\">String</span> key = vet.attributeValue(<span class=\"string\">\"key\"</span>);   </div><div class=\"line\">                            <span class=\"built_in\">Iterator</span>&lt;?&gt; valuesIterator = vet.elements()   </div><div class=\"line\">                                    .iterator();   </div><div class=\"line\">                            <span class=\"keyword\">while</span> (valuesIterator.hasNext()) &#123;   </div><div class=\"line\">                                <span class=\"built_in\">Element</span> value = (<span class=\"built_in\">Element</span>) valuesIterator.next();   </div><div class=\"line\">                                <span class=\"keyword\">if</span> (value.getName().equals(<span class=\"string\">\"value\"</span>)) &#123;   </div><div class=\"line\">                                    propertiesMap.put(key, value.getText());   </div><div class=\"line\">                                &#125;   </div><div class=\"line\">                                <span class=\"keyword\">if</span> (value.getName().equals(<span class=\"string\">\"ref\"</span>)) &#123;   </div><div class=\"line\">                                    propertiesMap.put(key, <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>[] &#123; value   </div><div class=\"line\">                                            .attributeValue(<span class=\"string\">\"bean\"</span>) &#125;);   </div><div class=\"line\">                                &#125;   </div><div class=\"line\">                            &#125;   </div><div class=\"line\">                        &#125;   </div><div class=\"line\">                    &#125;   </div><div class=\"line\">                    bean.getProperties().put(name, propertiesMap);   </div><div class=\"line\">                &#125;</div></pre></td></tr></table></figure>\n<p>接下来就进入最核心部分了，让我们看看Spring 到底是怎么依赖注入的吧，其实依赖注入的思想也很简单，它是通过反射机制实现的，在实例化一个类时，它通过反射调用类中set方法将事先保存在HashMap中的类属性注入到类中。让我们看看具体它是怎么做的吧。<br>首先实例化一个类，像这样</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"keyword\">new</span><span class=\"type\">Instance</span>(<span class=\"keyword\">String</span> className) &#123;   </div><div class=\"line\">        Class&lt;?&gt; cls = <span class=\"literal\">null</span>;   </div><div class=\"line\">        Object obj = <span class=\"literal\">null</span>;   </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;   </div><div class=\"line\">            cls = Class.forName(className);   </div><div class=\"line\">            obj = cls.<span class=\"keyword\">new</span><span class=\"type\">Instance</span>();   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">RuntimeException</span>(e);   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">RuntimeException</span>(e);   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">RuntimeException</span>(e);   </div><div class=\"line\">        &#125;   </div><div class=\"line\">        <span class=\"keyword\">return</span> obj;   </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>接着它将这个类的依赖注入进去，像这样</p>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> static void setProperty(Object obj, String name, String value) &#123;   </div><div class=\"line\">        <span class=\"class\"><span class=\"keyword\">Class</span>&lt;? <span class=\"keyword\">extends</span> <span class=\"title\">Object</span>&gt; <span class=\"title\">clazz</span> = <span class=\"title\">obj</span>.<span class=\"title\">getClass</span>();   </span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;   </div><div class=\"line\">            String methodName = returnSetMthodName(name);   </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">Method</span>[] <span class=\"title\">ms</span> =</span> clazz.getMethods();   </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">m</span> :</span> ms) &#123;   </div><div class=\"line\">                <span class=\"keyword\">if</span> (m.getName().equals(methodName)) &#123;   </div><div class=\"line\">                    <span class=\"keyword\">if</span> (m.getParameterTypes().length == <span class=\"number\">1</span>) &#123;   </div><div class=\"line\">                        <span class=\"class\"><span class=\"keyword\">Class</span>&lt;?&gt; <span class=\"title\">clazzParameterType</span> = <span class=\"title\">m</span>.<span class=\"title\">getParameterTypes</span>()[0];   </span></div><div class=\"line\">                        setFieldValue(clazzParameterType.getName(), value, m,   </div><div class=\"line\">                                obj);   </div><div class=\"line\">                        break;   </div><div class=\"line\">                    &#125;   </div><div class=\"line\">                &#125;   </div><div class=\"line\">            &#125;   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SecurityException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);   </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);   </div><div class=\"line\">        &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后它将这个类的实例返回给我们，我们就可以用了。我们还是以Map为例看看它是怎么做的，我写的代码里面是创建一个HashMap并把该HashMap注入到需要注入的类中，像这样，</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">if</span> (value instanceof <span class=\"meta\">Map</span>) &#123;   </div><div class=\"line\">                <span class=\"keyword\">Iterator&lt;?&gt; </span>entryIterator = ((<span class=\"meta\">Map</span>&lt;?, ?&gt;) value).entrySet()   </div><div class=\"line\">                        .<span class=\"keyword\">iterator(); </span>  </div><div class=\"line\">                <span class=\"meta\">Map</span>&lt;<span class=\"keyword\">String, </span>Object&gt; <span class=\"meta\">map</span> = new HashMap&lt;<span class=\"keyword\">String, </span>Object&gt;()<span class=\"comment\">;   </span></div><div class=\"line\">                <span class=\"meta\">while</span> (entryIterator.hasNext()) &#123;   </div><div class=\"line\">                    <span class=\"meta\">Entry</span>&lt;?, ?&gt; entryMap = (<span class=\"meta\">Entry</span>&lt;?, ?&gt;) entryIterator.next()<span class=\"comment\">;   </span></div><div class=\"line\">                    <span class=\"meta\">if</span> (entryMap.getValue() instanceof <span class=\"keyword\">String[]) </span>&#123;   </div><div class=\"line\">                        <span class=\"meta\">map</span>.put((<span class=\"keyword\">String) </span>entryMap.getKey(),   </div><div class=\"line\">                                getBean(((<span class=\"keyword\">String[]) </span>entryMap.getValue())[<span class=\"number\">0</span>]))<span class=\"comment\">;   </span></div><div class=\"line\">                    &#125;   </div><div class=\"line\">                &#125;   </div><div class=\"line\">                <span class=\"keyword\">BeanProcesser.setProperty(obj, </span>property, <span class=\"meta\">map</span>)<span class=\"comment\">;   </span></div><div class=\"line\">            &#125;</div></pre></td></tr></table></figure>\n<p>好了，这样我们就可以用Spring 给我们创建的类了，是不是也不是很难啊？当然Spring能做到的远不止这些，这个示例程序仅仅提供了Spring最核心的依赖注入功能中的一部分。<br>本文参考了大量文章无法一一感谢，在这一起感谢，如果侵犯了你的版权深表歉意，很希望对大家有帮助！</p>"},{"title":"userId分库，怎么通过其他字段查询","date":"2017-04-18T02:12:40.000Z","_content":"用户中心是几乎每一个公司必备的基础服务，用户注册、登录、信息查询与修改都离不开用户中心。\n \n当数据量越来越大时，需要多用户中心进行水平切分。最常见的水平切分方式，**按照userId取模分库**：<!--more-->\n\n例如：\n\n<img src=\"http://img.blog.csdn.net/20170418093703450\" height=\"300px\" width=\"500px\"/>\n\n通过userId取模，将数据分布到多个数据库实例上去，提高服务实例个数，降低单库数据量，以达到扩容的目的。\n\n这样水平切分之后，userId属性上的查询可以直接路由到库，如上图，假设访问uid=10的数据，取模后能够直接定位db1。\n\n\n但是分库之后，对于其他字段的查询，就不能这么幸运了。假设访问userName=\"lizhi\"的数据，由于不知道数据落在哪个库上，**往往需要遍历所有库，当分库数量多起来，性能会显著降低**。\n\n所以我要们寻找如何高效查询的方法！（以下用userName为例）\n\n<h2>索引表法</h2>\n\n思路：userId直接定位到库，userName不能直接定位到库，如果通过userName能查询到userId，问题解决。\n\n解决方案：<br>\n1）建立一个索引表记录userName->userId的映射关系\n2）用userName来访问时，先通过索引表查询到userId，再定位相应的库\n3）索引表属性较少，可以容纳非常多数据，一般不需要分库\n4）如果数据量过大，可以通过userName来分库\n\n潜在不足：多一次数据库查询，性能下降一倍。\n\n<h2>缓存映射法</h2>\n思路：访问索引表性能较低，把映射关系放在缓存里性能更佳。\n\n解决方案：<br>\n1）userName查询先到cache中查询userId，再根据userId定位数据库\n2）假设cache miss，采用扫全库法获取userName对应的userId，放入cache\n3）userName到userId的映射关系不会变化，映射关系一旦放入缓存，不会更改，无需淘汰，缓存命中率超高\n4）如果数据量过大，可以通过userName进行cache水平切分\n\n潜在不足：多一次cache查询\n\n\n<h2>userName生成userId</h2>\n思路：不进行远程查询，由userName直接得到userId\n\n解决方案：<br>\n1）在用户注册时，设计函数userName生成userId，userId=f(userName)，按userId分库插入数据\n2）用userName来访问时，先通过函数计算出userId，即userId=f(userName)再来一遍，由userId路由到对应库\n\n潜在不足：该函数设计需要非常讲究技巧，有userId生成冲突风险\n\n\n<h2>userName基因融入userId</h2>\n思路：不能用userName生成userId，可以从userName抽取“基因”，融入userId中\n\n假设分8库，采用userId%8路由，潜台词是，userId的最后3个bit决定这条数据落在哪个库上，这3个bit就是所谓的“基因”。\n \n解决方案：<br>\n1）在用户注册时，设计函数userName生成3bit基因，userName_gene=f(userName)\n2）同时，生成61bit的全局唯一id，作为用户的标识\n3）接着把3bit的userName_gene也作为userId的一部分\n4）生成64bit的userId，由id和userName_gene拼装而成，并按照userId库插入数据\n5）用userName来访问时，先通过函数由userName再次复原3bit基因，userName_gene=f(userName)，通过userName_gene%8直接定位到库\n","source":"_posts/userId分库，怎么通过其他字段查询.md","raw":"---\ntitle: userId分库，怎么通过其他字段查询\ndate: 2017-04-18 10:12:40\ncategories: 数据库那点事\ntags:\n\t- 分库\n---\n用户中心是几乎每一个公司必备的基础服务，用户注册、登录、信息查询与修改都离不开用户中心。\n \n当数据量越来越大时，需要多用户中心进行水平切分。最常见的水平切分方式，**按照userId取模分库**：<!--more-->\n\n例如：\n\n<img src=\"http://img.blog.csdn.net/20170418093703450\" height=\"300px\" width=\"500px\"/>\n\n通过userId取模，将数据分布到多个数据库实例上去，提高服务实例个数，降低单库数据量，以达到扩容的目的。\n\n这样水平切分之后，userId属性上的查询可以直接路由到库，如上图，假设访问uid=10的数据，取模后能够直接定位db1。\n\n\n但是分库之后，对于其他字段的查询，就不能这么幸运了。假设访问userName=\"lizhi\"的数据，由于不知道数据落在哪个库上，**往往需要遍历所有库，当分库数量多起来，性能会显著降低**。\n\n所以我要们寻找如何高效查询的方法！（以下用userName为例）\n\n<h2>索引表法</h2>\n\n思路：userId直接定位到库，userName不能直接定位到库，如果通过userName能查询到userId，问题解决。\n\n解决方案：<br>\n1）建立一个索引表记录userName->userId的映射关系\n2）用userName来访问时，先通过索引表查询到userId，再定位相应的库\n3）索引表属性较少，可以容纳非常多数据，一般不需要分库\n4）如果数据量过大，可以通过userName来分库\n\n潜在不足：多一次数据库查询，性能下降一倍。\n\n<h2>缓存映射法</h2>\n思路：访问索引表性能较低，把映射关系放在缓存里性能更佳。\n\n解决方案：<br>\n1）userName查询先到cache中查询userId，再根据userId定位数据库\n2）假设cache miss，采用扫全库法获取userName对应的userId，放入cache\n3）userName到userId的映射关系不会变化，映射关系一旦放入缓存，不会更改，无需淘汰，缓存命中率超高\n4）如果数据量过大，可以通过userName进行cache水平切分\n\n潜在不足：多一次cache查询\n\n\n<h2>userName生成userId</h2>\n思路：不进行远程查询，由userName直接得到userId\n\n解决方案：<br>\n1）在用户注册时，设计函数userName生成userId，userId=f(userName)，按userId分库插入数据\n2）用userName来访问时，先通过函数计算出userId，即userId=f(userName)再来一遍，由userId路由到对应库\n\n潜在不足：该函数设计需要非常讲究技巧，有userId生成冲突风险\n\n\n<h2>userName基因融入userId</h2>\n思路：不能用userName生成userId，可以从userName抽取“基因”，融入userId中\n\n假设分8库，采用userId%8路由，潜台词是，userId的最后3个bit决定这条数据落在哪个库上，这3个bit就是所谓的“基因”。\n \n解决方案：<br>\n1）在用户注册时，设计函数userName生成3bit基因，userName_gene=f(userName)\n2）同时，生成61bit的全局唯一id，作为用户的标识\n3）接着把3bit的userName_gene也作为userId的一部分\n4）生成64bit的userId，由id和userName_gene拼装而成，并按照userId库插入数据\n5）用userName来访问时，先通过函数由userName再次复原3bit基因，userName_gene=f(userName)，通过userName_gene%8直接定位到库\n","slug":"userId分库，怎么通过其他字段查询","published":1,"updated":"2017-04-18T02:13:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kft002srhsof6dtb947","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>用户中心是几乎每一个公司必备的基础服务，用户注册、登录、信息查询与修改都离不开用户中心。</p>\n<p>当数据量越来越大时，需要多用户中心进行水平切分。最常见的水平切分方式，<strong>按照userId取模分库</strong>：<a id=\"more\"></a></p>\n<p>例如：</p>\n<p><img src=\"http://img.blog.csdn.net/20170418093703450\" height=\"300px\" width=\"500px\"></p>\n<p>通过userId取模，将数据分布到多个数据库实例上去，提高服务实例个数，降低单库数据量，以达到扩容的目的。</p>\n<p>这样水平切分之后，userId属性上的查询可以直接路由到库，如上图，假设访问uid=10的数据，取模后能够直接定位db1。</p>\n<p>但是分库之后，对于其他字段的查询，就不能这么幸运了。假设访问userName=”lizhi”的数据，由于不知道数据落在哪个库上，<strong>往往需要遍历所有库，当分库数量多起来，性能会显著降低</strong>。</p>\n<p>所以我要们寻找如何高效查询的方法！（以下用userName为例）</p>\n<h2>索引表法</h2>\n\n<p>思路：userId直接定位到库，userName不能直接定位到库，如果通过userName能查询到userId，问题解决。</p>\n<p>解决方案：<br><br>1）建立一个索引表记录userName-&gt;userId的映射关系<br>2）用userName来访问时，先通过索引表查询到userId，再定位相应的库<br>3）索引表属性较少，可以容纳非常多数据，一般不需要分库<br>4）如果数据量过大，可以通过userName来分库</p>\n<p>潜在不足：多一次数据库查询，性能下降一倍。</p>\n<p></p><h2>缓存映射法</h2><br>思路：访问索引表性能较低，把映射关系放在缓存里性能更佳。<p></p>\n<p>解决方案：<br><br>1）userName查询先到cache中查询userId，再根据userId定位数据库<br>2）假设cache miss，采用扫全库法获取userName对应的userId，放入cache<br>3）userName到userId的映射关系不会变化，映射关系一旦放入缓存，不会更改，无需淘汰，缓存命中率超高<br>4）如果数据量过大，可以通过userName进行cache水平切分</p>\n<p>潜在不足：多一次cache查询</p>\n<p></p><h2>userName生成userId</h2><br>思路：不进行远程查询，由userName直接得到userId<p></p>\n<p>解决方案：<br><br>1）在用户注册时，设计函数userName生成userId，userId=f(userName)，按userId分库插入数据<br>2）用userName来访问时，先通过函数计算出userId，即userId=f(userName)再来一遍，由userId路由到对应库</p>\n<p>潜在不足：该函数设计需要非常讲究技巧，有userId生成冲突风险</p>\n<p></p><h2>userName基因融入userId</h2><br>思路：不能用userName生成userId，可以从userName抽取“基因”，融入userId中<p></p>\n<p>假设分8库，采用userId%8路由，潜台词是，userId的最后3个bit决定这条数据落在哪个库上，这3个bit就是所谓的“基因”。</p>\n<p>解决方案：<br><br>1）在用户注册时，设计函数userName生成3bit基因，userName_gene=f(userName)<br>2）同时，生成61bit的全局唯一id，作为用户的标识<br>3）接着把3bit的userName_gene也作为userId的一部分<br>4）生成64bit的userId，由id和userName_gene拼装而成，并按照userId库插入数据<br>5）用userName来访问时，先通过函数由userName再次复原3bit基因，userName_gene=f(userName)，通过userName_gene%8直接定位到库</p>\n","excerpt":"<p>用户中心是几乎每一个公司必备的基础服务，用户注册、登录、信息查询与修改都离不开用户中心。</p>\n<p>当数据量越来越大时，需要多用户中心进行水平切分。最常见的水平切分方式，<strong>按照userId取模分库</strong>：</p>","more":"<p></p>\n<p>例如：</p>\n<p><img src=\"http://img.blog.csdn.net/20170418093703450\" height=\"300px\" width=\"500px\"></p>\n<p>通过userId取模，将数据分布到多个数据库实例上去，提高服务实例个数，降低单库数据量，以达到扩容的目的。</p>\n<p>这样水平切分之后，userId属性上的查询可以直接路由到库，如上图，假设访问uid=10的数据，取模后能够直接定位db1。</p>\n<p>但是分库之后，对于其他字段的查询，就不能这么幸运了。假设访问userName=”lizhi”的数据，由于不知道数据落在哪个库上，<strong>往往需要遍历所有库，当分库数量多起来，性能会显著降低</strong>。</p>\n<p>所以我要们寻找如何高效查询的方法！（以下用userName为例）</p>\n<h2>索引表法</h2>\n\n<p>思路：userId直接定位到库，userName不能直接定位到库，如果通过userName能查询到userId，问题解决。</p>\n<p>解决方案：<br><br>1）建立一个索引表记录userName-&gt;userId的映射关系<br>2）用userName来访问时，先通过索引表查询到userId，再定位相应的库<br>3）索引表属性较少，可以容纳非常多数据，一般不需要分库<br>4）如果数据量过大，可以通过userName来分库</p>\n<p>潜在不足：多一次数据库查询，性能下降一倍。</p>\n<p></p><h2>缓存映射法</h2><br>思路：访问索引表性能较低，把映射关系放在缓存里性能更佳。<p></p>\n<p>解决方案：<br><br>1）userName查询先到cache中查询userId，再根据userId定位数据库<br>2）假设cache miss，采用扫全库法获取userName对应的userId，放入cache<br>3）userName到userId的映射关系不会变化，映射关系一旦放入缓存，不会更改，无需淘汰，缓存命中率超高<br>4）如果数据量过大，可以通过userName进行cache水平切分</p>\n<p>潜在不足：多一次cache查询</p>\n<p></p><h2>userName生成userId</h2><br>思路：不进行远程查询，由userName直接得到userId<p></p>\n<p>解决方案：<br><br>1）在用户注册时，设计函数userName生成userId，userId=f(userName)，按userId分库插入数据<br>2）用userName来访问时，先通过函数计算出userId，即userId=f(userName)再来一遍，由userId路由到对应库</p>\n<p>潜在不足：该函数设计需要非常讲究技巧，有userId生成冲突风险</p>\n<p></p><h2>userName基因融入userId</h2><br>思路：不能用userName生成userId，可以从userName抽取“基因”，融入userId中<p></p>\n<p>假设分8库，采用userId%8路由，潜台词是，userId的最后3个bit决定这条数据落在哪个库上，这3个bit就是所谓的“基因”。</p>\n<p>解决方案：<br><br>1）在用户注册时，设计函数userName生成3bit基因，userName_gene=f(userName)<br>2）同时，生成61bit的全局唯一id，作为用户的标识<br>3）接着把3bit的userName_gene也作为userId的一部分<br>4）生成64bit的userId，由id和userName_gene拼装而成，并按照userId库插入数据<br>5）用userName来访问时，先通过函数由userName再次复原3bit基因，userName_gene=f(userName)，通过userName_gene%8直接定位到库</p>"},{"title":"为什么volatile不能保证原子性而Atomic可以？","date":"2017-03-02T07:51:50.000Z","_content":"在Java中long赋值不是原子操作，因为先写32位，再写后32位，分两步操作，而AtomicLong赋值是原子操作，为什么？为什么volatile能替代简单的锁，却不能保证原子性？这里面涉及volatile，是java中的一个我觉得这个词在Java规范中从未被解释清楚的神奇关键词，在Sun的JDK官方文档是这样形容volatile的：\n<!--more-->\n>The Java programming language provides a second mechanism, volatile fields, that is more convenient than locking for some purposes. A field may be declared volatile, in which case the Java Memory Model ensures that all threads see a consistent value for the variable.\n\n意思就是说，如果一个变量加了volatile关键字，就会告诉编译器和JVM的内存模型：这个变量是对所有线程共享的、可见的，每次jvm都会读取最新写入的值并使其最新值在所有CPU可见。**volatile似乎是有时候可以代替简单的锁，似乎加了volatile关键字就省掉了锁。但又说volatile不能保证原子性（java程序员很熟悉这句话：volatile仅仅用来保证该变量对所有线程的可见性，但不保证原子性）**。这不是互相矛盾吗？\n\n>不要将volatile用在getAndOperate场合，仅仅set或者get的场景是适合volatile的\n\n**不要将volatile用在getAndOperate场合（这种场合不原子，需要再加锁），仅仅set或者get的场景是适合volatile的。**\n\n>volatile没有原子性举例：AtomicInteger自增\n\n例如你让一个volatile的integer自增（i++），其实要分成3步：1）读取volatile变量值到local； 2）增加变量的值；3）把local的值写回，让其它的线程可见。这3步的jvm指令为：\n\n```\nmov    0xc(%r10),%r8d ; Load\ninc    %r8d           ; Increment\nmov    %r8d,0xc(%r10) ; Store\nlock addl $0x0,(%rsp) ; StoreLoad Barrier\n```\n\n注意最后一步是内存屏障。\n\n>什么是内存屏障（Memory Barrier）？\n\n内存屏障（memory barrier）是一个CPU指令。基本上，它是这样一条指令： a) 确保一些特定操作执行的顺序； b) 影响一些数据的可见性(可能是某些指令执行后的结果)。编译器和CPU可以在保证输出结果一样的情况下对指令重排序，使性能得到优化。插入一个内存屏障，相当于告诉CPU和编译器先于这个命令的必须先执行，后于这个命令的必须后执行。内存屏障另一个作用是强制更新一次不同CPU的缓存。例如，一个写屏障会把这个屏障前写入的数据刷新到缓存，这样任何试图读取该数据的线程将得到最新值，而不用考虑到底是被哪个cpu核心或者哪颗CPU执行的。\n\n内存屏障（memory barrier）和volatile什么关系？上面的虚拟机指令里面有提到，如果你的字段是volatile，Java内存模型将在写操作后插入一个写屏障指令，在读操作前插入一个读屏障指令。这意味着如果你对一个volatile字段进行写操作，你必须知道：1、一旦你完成写入，任何访问这个字段的线程将会得到最新的值。2、在你写入前，会保证所有之前发生的事已经发生，并且任何更新过的数据值也是可见的，因为内存屏障会把之前的写入值都刷新到缓存。\n\n>volatile为什么没有原子性?\n\n明白了内存屏障（memory barrier）这个CPU指令，回到前面的JVM指令：从Load到store到内存屏障，一共4步，其中最后一步jvm让这个最新的变量的值在所有线程可见，也就是最后一步让所有的CPU内核都获得了最新的值，但中间的几步（从Load到Store）是不安全的，中间如果其他的CPU修改了值将会丢失。下面的测试代码可以实际测试voaltile的自增没有原子性：\n\n```\n private static volatile long _longVal = 0;\n     \n    private static class LoopVolatile implements Runnable {\n        public void run() {\n            long val = 0;\n            while (val < 10000000L) {\n                _longVal++;\n                val++;\n            }\n        }\n    }\n     \n    private static class LoopVolatile2 implements Runnable {\n        public void run() {\n            long val = 0;\n            while (val < 10000000L) {\n                _longVal++;\n                val++;\n            }\n        }\n    }\n     \n    private  void testVolatile(){\n        Thread t1 = new Thread(new LoopVolatile());\n        t1.start();\n         \n        Thread t2 = new Thread(new LoopVolatile2());\n        t2.start();\n         \n        while (t1.isAlive() || t2.isAlive()) {\n        }\n \n        System.out.println(\"final val is: \" + _longVal);\n    }\n \nOutput:-------------\n     \nfinal val is: 11223828\nfinal val is: 17567127\nfinal val is: 12912109\n\n```\n\n>volatile没有原子性举例：singleton单例模式实现\n\n这是一段线程不安全的singleton（单例模式）实现，尽管使用了volatile：\n\n```\npublic class wrongsingleton {\n    private static volatile wrongsingleton _instance = null; \n \n    private wrongsingleton() {}\n \n    public static wrongsingleton getInstance() {\n \n        if (_instance == null) {\n            _instance = new wrongsingleton();\n        }\n \n        return _instance;\n    }\n}\n```\n下面的测试代码可以测试出是线程不安全的：\n\n```\npublic class wrongsingleton {\n    private static volatile wrongsingleton _instance = null; \n \n    private wrongsingleton() {}\n \n    public static wrongsingleton getInstance() {\n \n        if (_instance == null) {\n            _instance = new wrongsingleton();\n            System.out.println(\"--initialized once.\");\n        }\n \n        return _instance;\n    }\n}\n \nprivate static void testInit(){\n         \n        Thread t1 = new Thread(new LoopInit());\n        Thread t2 = new Thread(new LoopInit2());\n        Thread t3 = new Thread(new LoopInit());\n        Thread t4 = new Thread(new LoopInit2());\n        t1.start();\n        t2.start();\n        t3.start();\n        t4.start();\n         \n        while (t1.isAlive() || t2.isAlive() || t3.isAlive()|| t4.isAlive()) {\n             \n        }\n \n    }\n输出：有时输出\"--initialized once.\"一次，有时输出好几次\n```\n\n原因自然和上面的例子是一样的。**因为volatile保证变量对线程的可见性，但不保证原子性。**\n\n附：正确线程安全的单例模式写法：\n\n```\n@ThreadSafe\npublic class SafeLazyInitialization { \n   private static Resource resource; \n   public synchronized static Resource getInstance() { \n      if (resource == null) \n          resource = new Resource(); \n      return resource; \n    } \n}\n\n```\n\n另外一种写法：\n\n```\n@ThreadSafe\npublic class EagerInitialization { \n  private static Resource resource = new Resource(); \n  public static Resource getResource() { return resource; } \n}\n```\n\n延迟初始化的写法：\n\n```\n@ThreadSafe\npublic class ResourceFactory { \n    private static class ResourceHolder { \n        public static Resource resource = new Resource(); \n    } \n    public static Resource getResource() { \n        return ResourceHolder.resource ; \n    } \n}\n\n```\n\n二次检查锁定/Double Checked Locking的写法（反模式）\n\n```\npublic class SingletonDemo {\n    private static volatile SingletonDemo instance = null;//注意需要volatile\n  \n    private SingletonDemo() {   }\n  \n    public static SingletonDemo getInstance() {\n        if (instance == null) { //二次检查，比直接用独占锁效率高\n               synchronized (SingletonDemo .class){\n                    if (instance == null) {\n                               instance = new SingletonDemo (); \n                    }\n             }\n        }\n        return instance;\n    }\n}\n```\n\n>为什么AtomicXXX具有原子性和可见性？\n\n就拿AtomicLong来说，它既解决了上述的volatile的原子性没有保证的问题，又具有可见性。它是如何做到的？CAS（比较并交换）指令。 其实AtomicLong的源码里也用到了volatile，但只是用来读取或写入，见源码：\n\n```\npublic class AtomicLong extends Number implements java.io.Serializable {\n    private volatile long value;\n \n    /**\n     * Creates a new AtomicLong with the given initial value.\n     *\n     * @param initialValue the initial value\n     */\n    public AtomicLong(long initialValue) {\n        value = initialValue;\n    }\n \n    /**\n     * Creates a new AtomicLong with initial value {@code 0}.\n     */\n    public AtomicLong() {\n    }\n```\n\n其CAS源码核心代码为：\n\n```\nint compare_and_swap (int* reg, int oldval, int newval) \n{\n  ATOMIC();\n  int old_reg_val = *reg;\n  if (old_reg_val == oldval) \n     *reg = newval;\n  END_ATOMIC();\n  return old_reg_val;\n}\n```\n\n虚拟机指令为：\n\n```\nmov    0xc(%r11),%eax       ; Load\nmov    %eax,%r8d            \ninc    %r8d                 ; Increment\nlock cmpxchg %r8d,0xc(%r11) ; Compare and exchange\n\n```\n\n因为CAS是基于乐观锁的，也就是说当写入的时候，如果寄存器旧值已经不等于现值，说明有其他CPU在修改，那就继续尝试。所以这就保证了操作的原子性。\n\n <img src=\"http://images.cnitblog.com/blog/28306/201402/191824486252285.png \" width = \"400\" height = \"300\" alt=\"图片名称\" align=center />","source":"_posts/为什么volatile不能保证原子性而Atomic可以？.md","raw":"---\ntitle: 为什么volatile不能保证原子性而Atomic可以？\ndate: 2017-03-02 15:51:50\ncategories: Java二三事\ntags:\n\t- Java\n---\n在Java中long赋值不是原子操作，因为先写32位，再写后32位，分两步操作，而AtomicLong赋值是原子操作，为什么？为什么volatile能替代简单的锁，却不能保证原子性？这里面涉及volatile，是java中的一个我觉得这个词在Java规范中从未被解释清楚的神奇关键词，在Sun的JDK官方文档是这样形容volatile的：\n<!--more-->\n>The Java programming language provides a second mechanism, volatile fields, that is more convenient than locking for some purposes. A field may be declared volatile, in which case the Java Memory Model ensures that all threads see a consistent value for the variable.\n\n意思就是说，如果一个变量加了volatile关键字，就会告诉编译器和JVM的内存模型：这个变量是对所有线程共享的、可见的，每次jvm都会读取最新写入的值并使其最新值在所有CPU可见。**volatile似乎是有时候可以代替简单的锁，似乎加了volatile关键字就省掉了锁。但又说volatile不能保证原子性（java程序员很熟悉这句话：volatile仅仅用来保证该变量对所有线程的可见性，但不保证原子性）**。这不是互相矛盾吗？\n\n>不要将volatile用在getAndOperate场合，仅仅set或者get的场景是适合volatile的\n\n**不要将volatile用在getAndOperate场合（这种场合不原子，需要再加锁），仅仅set或者get的场景是适合volatile的。**\n\n>volatile没有原子性举例：AtomicInteger自增\n\n例如你让一个volatile的integer自增（i++），其实要分成3步：1）读取volatile变量值到local； 2）增加变量的值；3）把local的值写回，让其它的线程可见。这3步的jvm指令为：\n\n```\nmov    0xc(%r10),%r8d ; Load\ninc    %r8d           ; Increment\nmov    %r8d,0xc(%r10) ; Store\nlock addl $0x0,(%rsp) ; StoreLoad Barrier\n```\n\n注意最后一步是内存屏障。\n\n>什么是内存屏障（Memory Barrier）？\n\n内存屏障（memory barrier）是一个CPU指令。基本上，它是这样一条指令： a) 确保一些特定操作执行的顺序； b) 影响一些数据的可见性(可能是某些指令执行后的结果)。编译器和CPU可以在保证输出结果一样的情况下对指令重排序，使性能得到优化。插入一个内存屏障，相当于告诉CPU和编译器先于这个命令的必须先执行，后于这个命令的必须后执行。内存屏障另一个作用是强制更新一次不同CPU的缓存。例如，一个写屏障会把这个屏障前写入的数据刷新到缓存，这样任何试图读取该数据的线程将得到最新值，而不用考虑到底是被哪个cpu核心或者哪颗CPU执行的。\n\n内存屏障（memory barrier）和volatile什么关系？上面的虚拟机指令里面有提到，如果你的字段是volatile，Java内存模型将在写操作后插入一个写屏障指令，在读操作前插入一个读屏障指令。这意味着如果你对一个volatile字段进行写操作，你必须知道：1、一旦你完成写入，任何访问这个字段的线程将会得到最新的值。2、在你写入前，会保证所有之前发生的事已经发生，并且任何更新过的数据值也是可见的，因为内存屏障会把之前的写入值都刷新到缓存。\n\n>volatile为什么没有原子性?\n\n明白了内存屏障（memory barrier）这个CPU指令，回到前面的JVM指令：从Load到store到内存屏障，一共4步，其中最后一步jvm让这个最新的变量的值在所有线程可见，也就是最后一步让所有的CPU内核都获得了最新的值，但中间的几步（从Load到Store）是不安全的，中间如果其他的CPU修改了值将会丢失。下面的测试代码可以实际测试voaltile的自增没有原子性：\n\n```\n private static volatile long _longVal = 0;\n     \n    private static class LoopVolatile implements Runnable {\n        public void run() {\n            long val = 0;\n            while (val < 10000000L) {\n                _longVal++;\n                val++;\n            }\n        }\n    }\n     \n    private static class LoopVolatile2 implements Runnable {\n        public void run() {\n            long val = 0;\n            while (val < 10000000L) {\n                _longVal++;\n                val++;\n            }\n        }\n    }\n     \n    private  void testVolatile(){\n        Thread t1 = new Thread(new LoopVolatile());\n        t1.start();\n         \n        Thread t2 = new Thread(new LoopVolatile2());\n        t2.start();\n         \n        while (t1.isAlive() || t2.isAlive()) {\n        }\n \n        System.out.println(\"final val is: \" + _longVal);\n    }\n \nOutput:-------------\n     \nfinal val is: 11223828\nfinal val is: 17567127\nfinal val is: 12912109\n\n```\n\n>volatile没有原子性举例：singleton单例模式实现\n\n这是一段线程不安全的singleton（单例模式）实现，尽管使用了volatile：\n\n```\npublic class wrongsingleton {\n    private static volatile wrongsingleton _instance = null; \n \n    private wrongsingleton() {}\n \n    public static wrongsingleton getInstance() {\n \n        if (_instance == null) {\n            _instance = new wrongsingleton();\n        }\n \n        return _instance;\n    }\n}\n```\n下面的测试代码可以测试出是线程不安全的：\n\n```\npublic class wrongsingleton {\n    private static volatile wrongsingleton _instance = null; \n \n    private wrongsingleton() {}\n \n    public static wrongsingleton getInstance() {\n \n        if (_instance == null) {\n            _instance = new wrongsingleton();\n            System.out.println(\"--initialized once.\");\n        }\n \n        return _instance;\n    }\n}\n \nprivate static void testInit(){\n         \n        Thread t1 = new Thread(new LoopInit());\n        Thread t2 = new Thread(new LoopInit2());\n        Thread t3 = new Thread(new LoopInit());\n        Thread t4 = new Thread(new LoopInit2());\n        t1.start();\n        t2.start();\n        t3.start();\n        t4.start();\n         \n        while (t1.isAlive() || t2.isAlive() || t3.isAlive()|| t4.isAlive()) {\n             \n        }\n \n    }\n输出：有时输出\"--initialized once.\"一次，有时输出好几次\n```\n\n原因自然和上面的例子是一样的。**因为volatile保证变量对线程的可见性，但不保证原子性。**\n\n附：正确线程安全的单例模式写法：\n\n```\n@ThreadSafe\npublic class SafeLazyInitialization { \n   private static Resource resource; \n   public synchronized static Resource getInstance() { \n      if (resource == null) \n          resource = new Resource(); \n      return resource; \n    } \n}\n\n```\n\n另外一种写法：\n\n```\n@ThreadSafe\npublic class EagerInitialization { \n  private static Resource resource = new Resource(); \n  public static Resource getResource() { return resource; } \n}\n```\n\n延迟初始化的写法：\n\n```\n@ThreadSafe\npublic class ResourceFactory { \n    private static class ResourceHolder { \n        public static Resource resource = new Resource(); \n    } \n    public static Resource getResource() { \n        return ResourceHolder.resource ; \n    } \n}\n\n```\n\n二次检查锁定/Double Checked Locking的写法（反模式）\n\n```\npublic class SingletonDemo {\n    private static volatile SingletonDemo instance = null;//注意需要volatile\n  \n    private SingletonDemo() {   }\n  \n    public static SingletonDemo getInstance() {\n        if (instance == null) { //二次检查，比直接用独占锁效率高\n               synchronized (SingletonDemo .class){\n                    if (instance == null) {\n                               instance = new SingletonDemo (); \n                    }\n             }\n        }\n        return instance;\n    }\n}\n```\n\n>为什么AtomicXXX具有原子性和可见性？\n\n就拿AtomicLong来说，它既解决了上述的volatile的原子性没有保证的问题，又具有可见性。它是如何做到的？CAS（比较并交换）指令。 其实AtomicLong的源码里也用到了volatile，但只是用来读取或写入，见源码：\n\n```\npublic class AtomicLong extends Number implements java.io.Serializable {\n    private volatile long value;\n \n    /**\n     * Creates a new AtomicLong with the given initial value.\n     *\n     * @param initialValue the initial value\n     */\n    public AtomicLong(long initialValue) {\n        value = initialValue;\n    }\n \n    /**\n     * Creates a new AtomicLong with initial value {@code 0}.\n     */\n    public AtomicLong() {\n    }\n```\n\n其CAS源码核心代码为：\n\n```\nint compare_and_swap (int* reg, int oldval, int newval) \n{\n  ATOMIC();\n  int old_reg_val = *reg;\n  if (old_reg_val == oldval) \n     *reg = newval;\n  END_ATOMIC();\n  return old_reg_val;\n}\n```\n\n虚拟机指令为：\n\n```\nmov    0xc(%r11),%eax       ; Load\nmov    %eax,%r8d            \ninc    %r8d                 ; Increment\nlock cmpxchg %r8d,0xc(%r11) ; Compare and exchange\n\n```\n\n因为CAS是基于乐观锁的，也就是说当写入的时候，如果寄存器旧值已经不等于现值，说明有其他CPU在修改，那就继续尝试。所以这就保证了操作的原子性。\n\n <img src=\"http://images.cnitblog.com/blog/28306/201402/191824486252285.png \" width = \"400\" height = \"300\" alt=\"图片名称\" align=center />","slug":"为什么volatile不能保证原子性而Atomic可以？","published":1,"updated":"2017-03-02T07:57:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kfu002vrhsod4bsxxx8","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>在Java中long赋值不是原子操作，因为先写32位，再写后32位，分两步操作，而AtomicLong赋值是原子操作，为什么？为什么volatile能替代简单的锁，却不能保证原子性？这里面涉及volatile，是java中的一个我觉得这个词在Java规范中从未被解释清楚的神奇关键词，在Sun的JDK官方文档是这样形容volatile的：<br><a id=\"more\"></a></p>\n<blockquote>\n<p>The Java programming language provides a second mechanism, volatile fields, that is more convenient than locking for some purposes. A field may be declared volatile, in which case the Java Memory Model ensures that all threads see a consistent value for the variable.</p>\n</blockquote>\n<p>意思就是说，如果一个变量加了volatile关键字，就会告诉编译器和JVM的内存模型：这个变量是对所有线程共享的、可见的，每次jvm都会读取最新写入的值并使其最新值在所有CPU可见。<strong>volatile似乎是有时候可以代替简单的锁，似乎加了volatile关键字就省掉了锁。但又说volatile不能保证原子性（java程序员很熟悉这句话：volatile仅仅用来保证该变量对所有线程的可见性，但不保证原子性）</strong>。这不是互相矛盾吗？</p>\n<blockquote>\n<p>不要将volatile用在getAndOperate场合，仅仅set或者get的场景是适合volatile的</p>\n</blockquote>\n<p><strong>不要将volatile用在getAndOperate场合（这种场合不原子，需要再加锁），仅仅set或者get的场景是适合volatile的。</strong></p>\n<blockquote>\n<p>volatile没有原子性举例：AtomicInteger自增</p>\n</blockquote>\n<p>例如你让一个volatile的integer自增（i++），其实要分成3步：1）读取volatile变量值到local； 2）增加变量的值；3）把local的值写回，让其它的线程可见。这3步的jvm指令为：</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mov    <span class=\"number\">0</span>xc(<span class=\"built_in\">%r</span>10),<span class=\"built_in\">%r</span>8d <span class=\"comment\">; Load</span></div><div class=\"line\">inc    <span class=\"built_in\">%r</span>8d           <span class=\"comment\">; Increment</span></div><div class=\"line\">mov    <span class=\"built_in\">%r</span>8d,<span class=\"number\">0</span>xc(<span class=\"built_in\">%r</span>10) <span class=\"comment\">; Store</span></div><div class=\"line\"><span class=\"keyword\">lock</span> addl $<span class=\"number\">0</span>x0,(<span class=\"built_in\">%rsp</span>) <span class=\"comment\">; StoreLoad Barrier</span></div></pre></td></tr></table></figure>\n<p>注意最后一步是内存屏障。</p>\n<blockquote>\n<p>什么是内存屏障（Memory Barrier）？</p>\n</blockquote>\n<p>内存屏障（memory barrier）是一个CPU指令。基本上，它是这样一条指令： a) 确保一些特定操作执行的顺序； b) 影响一些数据的可见性(可能是某些指令执行后的结果)。编译器和CPU可以在保证输出结果一样的情况下对指令重排序，使性能得到优化。插入一个内存屏障，相当于告诉CPU和编译器先于这个命令的必须先执行，后于这个命令的必须后执行。内存屏障另一个作用是强制更新一次不同CPU的缓存。例如，一个写屏障会把这个屏障前写入的数据刷新到缓存，这样任何试图读取该数据的线程将得到最新值，而不用考虑到底是被哪个cpu核心或者哪颗CPU执行的。</p>\n<p>内存屏障（memory barrier）和volatile什么关系？上面的虚拟机指令里面有提到，如果你的字段是volatile，Java内存模型将在写操作后插入一个写屏障指令，在读操作前插入一个读屏障指令。这意味着如果你对一个volatile字段进行写操作，你必须知道：1、一旦你完成写入，任何访问这个字段的线程将会得到最新的值。2、在你写入前，会保证所有之前发生的事已经发生，并且任何更新过的数据值也是可见的，因为内存屏障会把之前的写入值都刷新到缓存。</p>\n<blockquote>\n<p>volatile为什么没有原子性?</p>\n</blockquote>\n<p>明白了内存屏障（memory barrier）这个CPU指令，回到前面的JVM指令：从Load到store到内存屏障，一共4步，其中最后一步jvm让这个最新的变量的值在所有线程可见，也就是最后一步让所有的CPU内核都获得了最新的值，但中间的几步（从Load到Store）是不安全的，中间如果其他的CPU修改了值将会丢失。下面的测试代码可以实际测试voaltile的自增没有原子性：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> _longVal = <span class=\"number\">0</span>;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoopVolatile</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> &#123;</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> run() &#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span> (val &lt; <span class=\"number\">10000000</span>L) &#123;</div><div class=\"line\">                _longVal++;</div><div class=\"line\">                val++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoopVolatile2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> &#123;</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> run() &#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span> (val &lt; <span class=\"number\">10000000</span>L) &#123;</div><div class=\"line\">                _longVal++;</div><div class=\"line\">                val++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"keyword\">void</span> testVolatile()&#123;</div><div class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> LoopVolatile());</div><div class=\"line\">        t1.start();</div><div class=\"line\">         </div><div class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> LoopVolatile2());</div><div class=\"line\">        t2.start();</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">while</span> (t1.isAlive() || t2.isAlive()) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        System.out.println(<span class=\"string\">\"final val is: \"</span> + _longVal);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"symbol\"> </span></div><div class=\"line\">Output:-------------</div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">final</span> val <span class=\"string\">is:</span> <span class=\"number\">11223828</span></div><div class=\"line\"><span class=\"keyword\">final</span> val <span class=\"string\">is:</span> <span class=\"number\">17567127</span></div><div class=\"line\"><span class=\"keyword\">final</span> val <span class=\"string\">is:</span> <span class=\"number\">12912109</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>volatile没有原子性举例：singleton单例模式实现</p>\n</blockquote>\n<p>这是一段线程不安全的singleton（单例模式）实现，尽管使用了volatile：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">wrongsingleton</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> wrongsingleton _instance = <span class=\"literal\">null</span>; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">wrongsingleton</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> wrongsingleton <span class=\"title\">getInstance</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">            _instance = <span class=\"keyword\">new</span> wrongsingleton();</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面的测试代码可以测试出是线程不安全的：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">wrongsingleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> volatile wrongsingleton _instance = <span class=\"literal\">null</span>; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> wrongsingleton() &#123;&#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> wrongsingleton getInstance() &#123;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">            _instance = <span class=\"keyword\">new</span> <span class=\"type\">wrongsingleton</span>();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"--initialized once.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> void testInit()&#123;</div><div class=\"line\">         </div><div class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">LoopInit</span>());</div><div class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">LoopInit2</span>());</div><div class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">LoopInit</span>());</div><div class=\"line\">        Thread t4 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">LoopInit2</span>());</div><div class=\"line\">        t1.start();</div><div class=\"line\">        t2.start();</div><div class=\"line\">        t3.start();</div><div class=\"line\">        t4.start();</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">while</span> (t1.isAlive() || t2.isAlive() || t3.isAlive()|| t4.isAlive()) &#123;</div><div class=\"line\">             </div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\">输出：有时输出<span class=\"string\">\"--initialized once.\"</span>一次，有时输出好几次</div></pre></td></tr></table></figure>\n<p>原因自然和上面的例子是一样的。<strong>因为volatile保证变量对线程的可见性，但不保证原子性。</strong></p>\n<p>附：正确线程安全的单例模式写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ThreadSafe</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeLazyInitialization</span> </span>&#123; </div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Resource resource; </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> Resource <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">      <span class=\"keyword\">if</span> (resource == <span class=\"keyword\">null</span>) </div><div class=\"line\">          resource = <span class=\"keyword\">new</span> Resource(); </div><div class=\"line\">      <span class=\"keyword\">return</span> resource; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外一种写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ThreadSafe</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EagerInitialization</span> </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Resource resource = <span class=\"keyword\">new</span> Resource(); </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Resource <span class=\"title\">getResource</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> resource; &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>延迟初始化的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ThreadSafe</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFactory</span> </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceHolder</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Resource resource = <span class=\"keyword\">new</span> Resource(); </div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Resource <span class=\"title\">getResource</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> ResourceHolder.resource ; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>二次检查锁定/Double Checked Locking的写法（反模式）</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SingletonDemo &#123;</div><div class=\"line\">   <span class=\"keyword\"> private</span><span class=\"keyword\"> static</span> volatile SingletonDemo<span class=\"built_in\"> instance </span>= null;//注意需要volatile</div><div class=\"line\">  </div><div class=\"line\">   <span class=\"keyword\"> private</span> SingletonDemo() &#123;   &#125;</div><div class=\"line\">  </div><div class=\"line\">   <span class=\"keyword\"> public</span><span class=\"keyword\"> static</span> SingletonDemo getInstance() &#123;</div><div class=\"line\">       <span class=\"built_in\"> if </span>(instance == null) &#123; //二次检查，比直接用独占锁效率高</div><div class=\"line\">               synchronized (SingletonDemo .class)&#123;</div><div class=\"line\">                   <span class=\"built_in\"> if </span>(instance == null) &#123;</div><div class=\"line\">                              <span class=\"built_in\"> instance </span>=<span class=\"built_in\"> new </span>SingletonDemo (); </div><div class=\"line\">                    &#125;</div><div class=\"line\">             &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">       <span class=\"built_in\"> return </span>instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>为什么AtomicXXX具有原子性和可见性？</p>\n</blockquote>\n<p>就拿AtomicLong来说，它既解决了上述的volatile的原子性没有保证的问题，又具有可见性。它是如何做到的？CAS（比较并交换）指令。 其实AtomicLong的源码里也用到了volatile，但只是用来读取或写入，见源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicLong</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> value;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Creates a new AtomicLong with the given initial value.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> initialValue the initial value</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicLong</span><span class=\"params\">(<span class=\"keyword\">long</span> initialValue)</span> </span>&#123;</div><div class=\"line\">        value = initialValue;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Creates a new AtomicLong with initial value &#123;<span class=\"doctag\">@code</span> 0&#125;.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicLong</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>其CAS源码核心代码为：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> compare_and_swap (<span class=\"keyword\">int</span>* <span class=\"keyword\">reg</span>, <span class=\"keyword\">int</span> oldval, <span class=\"keyword\">int</span> newval) </div><div class=\"line\">&#123;</div><div class=\"line\">  ATOMIC();</div><div class=\"line\">  <span class=\"keyword\">int</span> old_reg_val = *<span class=\"keyword\">reg</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (old_reg_val == oldval) </div><div class=\"line\">     *<span class=\"keyword\">reg</span> = newval;</div><div class=\"line\">  END_ATOMIC();</div><div class=\"line\">  <span class=\"keyword\">return</span> old_reg_val;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>虚拟机指令为：</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mov    <span class=\"number\">0</span>xc(<span class=\"built_in\">%r</span>11),<span class=\"built_in\">%eax</span>       <span class=\"comment\">; Load</span></div><div class=\"line\">mov    <span class=\"built_in\">%eax</span>,<span class=\"built_in\">%r</span>8d            </div><div class=\"line\">inc    <span class=\"built_in\">%r</span>8d                 <span class=\"comment\">; Increment</span></div><div class=\"line\"><span class=\"keyword\">lock</span> cmpxchg <span class=\"built_in\">%r</span>8d,<span class=\"number\">0</span>xc(<span class=\"built_in\">%r</span>11) <span class=\"comment\">; Compare and exchange</span></div></pre></td></tr></table></figure>\n<p>因为CAS是基于乐观锁的，也就是说当写入的时候，如果寄存器旧值已经不等于现值，说明有其他CPU在修改，那就继续尝试。所以这就保证了操作的原子性。</p>\n<p> <img src=\"http://images.cnitblog.com/blog/28306/201402/191824486252285.png \" width=\"400\" height=\"300\" alt=\"图片名称\" align=\"center\"></p>\n","excerpt":"<p>在Java中long赋值不是原子操作，因为先写32位，再写后32位，分两步操作，而AtomicLong赋值是原子操作，为什么？为什么volatile能替代简单的锁，却不能保证原子性？这里面涉及volatile，是java中的一个我觉得这个词在Java规范中从未被解释清楚的神奇关键词，在Sun的JDK官方文档是这样形容volatile的：<br></p>","more":"<p></p>\n<blockquote>\n<p>The Java programming language provides a second mechanism, volatile fields, that is more convenient than locking for some purposes. A field may be declared volatile, in which case the Java Memory Model ensures that all threads see a consistent value for the variable.</p>\n</blockquote>\n<p>意思就是说，如果一个变量加了volatile关键字，就会告诉编译器和JVM的内存模型：这个变量是对所有线程共享的、可见的，每次jvm都会读取最新写入的值并使其最新值在所有CPU可见。<strong>volatile似乎是有时候可以代替简单的锁，似乎加了volatile关键字就省掉了锁。但又说volatile不能保证原子性（java程序员很熟悉这句话：volatile仅仅用来保证该变量对所有线程的可见性，但不保证原子性）</strong>。这不是互相矛盾吗？</p>\n<blockquote>\n<p>不要将volatile用在getAndOperate场合，仅仅set或者get的场景是适合volatile的</p>\n</blockquote>\n<p><strong>不要将volatile用在getAndOperate场合（这种场合不原子，需要再加锁），仅仅set或者get的场景是适合volatile的。</strong></p>\n<blockquote>\n<p>volatile没有原子性举例：AtomicInteger自增</p>\n</blockquote>\n<p>例如你让一个volatile的integer自增（i++），其实要分成3步：1）读取volatile变量值到local； 2）增加变量的值；3）把local的值写回，让其它的线程可见。这3步的jvm指令为：</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mov    <span class=\"number\">0</span>xc(<span class=\"built_in\">%r</span>10),<span class=\"built_in\">%r</span>8d <span class=\"comment\">; Load</span></div><div class=\"line\">inc    <span class=\"built_in\">%r</span>8d           <span class=\"comment\">; Increment</span></div><div class=\"line\">mov    <span class=\"built_in\">%r</span>8d,<span class=\"number\">0</span>xc(<span class=\"built_in\">%r</span>10) <span class=\"comment\">; Store</span></div><div class=\"line\"><span class=\"keyword\">lock</span> addl $<span class=\"number\">0</span>x0,(<span class=\"built_in\">%rsp</span>) <span class=\"comment\">; StoreLoad Barrier</span></div></pre></td></tr></table></figure>\n<p>注意最后一步是内存屏障。</p>\n<blockquote>\n<p>什么是内存屏障（Memory Barrier）？</p>\n</blockquote>\n<p>内存屏障（memory barrier）是一个CPU指令。基本上，它是这样一条指令： a) 确保一些特定操作执行的顺序； b) 影响一些数据的可见性(可能是某些指令执行后的结果)。编译器和CPU可以在保证输出结果一样的情况下对指令重排序，使性能得到优化。插入一个内存屏障，相当于告诉CPU和编译器先于这个命令的必须先执行，后于这个命令的必须后执行。内存屏障另一个作用是强制更新一次不同CPU的缓存。例如，一个写屏障会把这个屏障前写入的数据刷新到缓存，这样任何试图读取该数据的线程将得到最新值，而不用考虑到底是被哪个cpu核心或者哪颗CPU执行的。</p>\n<p>内存屏障（memory barrier）和volatile什么关系？上面的虚拟机指令里面有提到，如果你的字段是volatile，Java内存模型将在写操作后插入一个写屏障指令，在读操作前插入一个读屏障指令。这意味着如果你对一个volatile字段进行写操作，你必须知道：1、一旦你完成写入，任何访问这个字段的线程将会得到最新的值。2、在你写入前，会保证所有之前发生的事已经发生，并且任何更新过的数据值也是可见的，因为内存屏障会把之前的写入值都刷新到缓存。</p>\n<blockquote>\n<p>volatile为什么没有原子性?</p>\n</blockquote>\n<p>明白了内存屏障（memory barrier）这个CPU指令，回到前面的JVM指令：从Load到store到内存屏障，一共4步，其中最后一步jvm让这个最新的变量的值在所有线程可见，也就是最后一步让所有的CPU内核都获得了最新的值，但中间的几步（从Load到Store）是不安全的，中间如果其他的CPU修改了值将会丢失。下面的测试代码可以实际测试voaltile的自增没有原子性：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> _longVal = <span class=\"number\">0</span>;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoopVolatile</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> &#123;</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> run() &#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span> (val &lt; <span class=\"number\">10000000</span>L) &#123;</div><div class=\"line\">                _longVal++;</div><div class=\"line\">                val++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoopVolatile2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> &#123;</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> run() &#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> val = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span> (val &lt; <span class=\"number\">10000000</span>L) &#123;</div><div class=\"line\">                _longVal++;</div><div class=\"line\">                val++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"keyword\">void</span> testVolatile()&#123;</div><div class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> LoopVolatile());</div><div class=\"line\">        t1.start();</div><div class=\"line\">         </div><div class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> LoopVolatile2());</div><div class=\"line\">        t2.start();</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">while</span> (t1.isAlive() || t2.isAlive()) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        System.out.println(<span class=\"string\">\"final val is: \"</span> + _longVal);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"symbol\"> </span></div><div class=\"line\">Output:-------------</div><div class=\"line\">     </div><div class=\"line\"><span class=\"keyword\">final</span> val <span class=\"string\">is:</span> <span class=\"number\">11223828</span></div><div class=\"line\"><span class=\"keyword\">final</span> val <span class=\"string\">is:</span> <span class=\"number\">17567127</span></div><div class=\"line\"><span class=\"keyword\">final</span> val <span class=\"string\">is:</span> <span class=\"number\">12912109</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>volatile没有原子性举例：singleton单例模式实现</p>\n</blockquote>\n<p>这是一段线程不安全的singleton（单例模式）实现，尽管使用了volatile：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">wrongsingleton</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> wrongsingleton _instance = <span class=\"literal\">null</span>; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">wrongsingleton</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> wrongsingleton <span class=\"title\">getInstance</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">            _instance = <span class=\"keyword\">new</span> wrongsingleton();</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面的测试代码可以测试出是线程不安全的：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">wrongsingleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> volatile wrongsingleton _instance = <span class=\"literal\">null</span>; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> wrongsingleton() &#123;&#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> wrongsingleton getInstance() &#123;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">            _instance = <span class=\"keyword\">new</span> <span class=\"type\">wrongsingleton</span>();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"--initialized once.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> void testInit()&#123;</div><div class=\"line\">         </div><div class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">LoopInit</span>());</div><div class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">LoopInit2</span>());</div><div class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">LoopInit</span>());</div><div class=\"line\">        Thread t4 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">LoopInit2</span>());</div><div class=\"line\">        t1.start();</div><div class=\"line\">        t2.start();</div><div class=\"line\">        t3.start();</div><div class=\"line\">        t4.start();</div><div class=\"line\">         </div><div class=\"line\">        <span class=\"keyword\">while</span> (t1.isAlive() || t2.isAlive() || t3.isAlive()|| t4.isAlive()) &#123;</div><div class=\"line\">             </div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\">输出：有时输出<span class=\"string\">\"--initialized once.\"</span>一次，有时输出好几次</div></pre></td></tr></table></figure>\n<p>原因自然和上面的例子是一样的。<strong>因为volatile保证变量对线程的可见性，但不保证原子性。</strong></p>\n<p>附：正确线程安全的单例模式写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ThreadSafe</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeLazyInitialization</span> </span>&#123; </div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Resource resource; </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> Resource <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">      <span class=\"keyword\">if</span> (resource == <span class=\"keyword\">null</span>) </div><div class=\"line\">          resource = <span class=\"keyword\">new</span> Resource(); </div><div class=\"line\">      <span class=\"keyword\">return</span> resource; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外一种写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ThreadSafe</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EagerInitialization</span> </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Resource resource = <span class=\"keyword\">new</span> Resource(); </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Resource <span class=\"title\">getResource</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> resource; &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>延迟初始化的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ThreadSafe</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceFactory</span> </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceHolder</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Resource resource = <span class=\"keyword\">new</span> Resource(); </div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Resource <span class=\"title\">getResource</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> ResourceHolder.resource ; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>二次检查锁定/Double Checked Locking的写法（反模式）</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SingletonDemo &#123;</div><div class=\"line\">   <span class=\"keyword\"> private</span><span class=\"keyword\"> static</span> volatile SingletonDemo<span class=\"built_in\"> instance </span>= null;//注意需要volatile</div><div class=\"line\">  </div><div class=\"line\">   <span class=\"keyword\"> private</span> SingletonDemo() &#123;   &#125;</div><div class=\"line\">  </div><div class=\"line\">   <span class=\"keyword\"> public</span><span class=\"keyword\"> static</span> SingletonDemo getInstance() &#123;</div><div class=\"line\">       <span class=\"built_in\"> if </span>(instance == null) &#123; //二次检查，比直接用独占锁效率高</div><div class=\"line\">               synchronized (SingletonDemo .class)&#123;</div><div class=\"line\">                   <span class=\"built_in\"> if </span>(instance == null) &#123;</div><div class=\"line\">                              <span class=\"built_in\"> instance </span>=<span class=\"built_in\"> new </span>SingletonDemo (); </div><div class=\"line\">                    &#125;</div><div class=\"line\">             &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">       <span class=\"built_in\"> return </span>instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>为什么AtomicXXX具有原子性和可见性？</p>\n</blockquote>\n<p>就拿AtomicLong来说，它既解决了上述的volatile的原子性没有保证的问题，又具有可见性。它是如何做到的？CAS（比较并交换）指令。 其实AtomicLong的源码里也用到了volatile，但只是用来读取或写入，见源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicLong</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> value;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Creates a new AtomicLong with the given initial value.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> initialValue the initial value</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicLong</span><span class=\"params\">(<span class=\"keyword\">long</span> initialValue)</span> </span>&#123;</div><div class=\"line\">        value = initialValue;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Creates a new AtomicLong with initial value &#123;<span class=\"doctag\">@code</span> 0&#125;.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AtomicLong</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>其CAS源码核心代码为：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> compare_and_swap (<span class=\"keyword\">int</span>* <span class=\"keyword\">reg</span>, <span class=\"keyword\">int</span> oldval, <span class=\"keyword\">int</span> newval) </div><div class=\"line\">&#123;</div><div class=\"line\">  ATOMIC();</div><div class=\"line\">  <span class=\"keyword\">int</span> old_reg_val = *<span class=\"keyword\">reg</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (old_reg_val == oldval) </div><div class=\"line\">     *<span class=\"keyword\">reg</span> = newval;</div><div class=\"line\">  END_ATOMIC();</div><div class=\"line\">  <span class=\"keyword\">return</span> old_reg_val;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>虚拟机指令为：</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mov    <span class=\"number\">0</span>xc(<span class=\"built_in\">%r</span>11),<span class=\"built_in\">%eax</span>       <span class=\"comment\">; Load</span></div><div class=\"line\">mov    <span class=\"built_in\">%eax</span>,<span class=\"built_in\">%r</span>8d            </div><div class=\"line\">inc    <span class=\"built_in\">%r</span>8d                 <span class=\"comment\">; Increment</span></div><div class=\"line\"><span class=\"keyword\">lock</span> cmpxchg <span class=\"built_in\">%r</span>8d,<span class=\"number\">0</span>xc(<span class=\"built_in\">%r</span>11) <span class=\"comment\">; Compare and exchange</span></div></pre></td></tr></table></figure>\n<p>因为CAS是基于乐观锁的，也就是说当写入的时候，如果寄存器旧值已经不等于现值，说明有其他CPU在修改，那就继续尝试。所以这就保证了操作的原子性。</p>\n<p> <img src=\"http://images.cnitblog.com/blog/28306/201402/191824486252285.png \" width=\"400\" height=\"300\" alt=\"图片名称\" align=\"center\"></p>"},{"title":"关于Ajax的cache参数的测试","date":"2017-02-18T12:42:59.000Z","_content":"&nbsp;&nbsp;其实这次做这个测试是因为和同学谈论@requestbody时引发的一个笑话，我之前一直以为ajax中的`dataType: 'json'`是传输去后台的数据格式，后来分分钟被打脸，查了一下百度，才知道原来`dataType: 'json'`是期望返回的数据类型，由此才发现原来ajax并没有平常用的那么简单。\n<!--more-->\n首先我们来看一下什么是Ajax：\nAJAX = 异步 JavaScript 和 XML。\nAJAX 是一种用于创建快速动态网页的技术。\n通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\n传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。\n有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。(以上来自w3cschool)\n         \n在看这些资料的过程中，一个参数引起了我的注意：**cache** 这个cache有true和false两个方向，<font color=red>显式的要求如果当前请求有缓存的话，直接使用缓存。如果该属性设置为 false，则每次都会向服务器请求</font>。由此我做了下面的测试：\n\n首先创建一个servlet，用来接收客户端发来的请求\n\nAjaxServlet.java\n\n```\npublic class AjaxServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"进入了servlet!\");\n        resp.setContentType(\"text/html;charset=UTF-8\");\n        PrintWriter out = resp.getWriter();\n        int a = 1;\n        out.print(a);\n        out.flush();\n        out.close();\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doGet(req, resp);\n    }\n}\n```\n这里做出了标记，如果请求进来了，控制台会输出\"进入了servlet\"\n\n然后创建一个Jsp用来发出请求：\najaxTest.jsp\n\n```\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<% String path = request.getContextPath(); %>\n<html>\n<head>\n    <title>Title</title>\n</head>\n<body>\n<button id=\"ajaxBtn\" value=\"点我试试~\">点我试试~</button>\n</body>\n<script src=\"jquery.js\"></script>\n<script>\n    $(\"#ajaxBtn\").click(function () {\n        $.ajax({\n            url: \"<%=path%>/AjaxServlet\",\n            type: 'get',\n            cache: true,\n            success: function (data) {\n                alert(data);\n            }\n        });\n    })\n</script>\n</html>\n\n```\n这里点击这个按钮可以出发一个get请求，我们把cache设置为了true，这样会在浏览器缓存中加载请求信息。\n\n![这里写图片描述](http://img.blog.csdn.net/20161123204951948)\n\n\n![](http://img.blog.csdn.net/20161123205002870)<br>\n\n可以看出第一次成功进入了servlet，前台也alert出了这个返回的值。\n\n接着我们点击第二次，发现居然还是进入了servlet!!!!!<br>\n![这里写图片描述](http://img.blog.csdn.net/20161123205119785)\n<br>\n这是怎么回事呢？ 没办法只能继续踏上百度谷歌之路，经过查找发现，在IE浏览器下，可以实现这个功能，点击两次，第二次就不再进入servlet了。<br>\n![](http://img.blog.csdn.net/20161123205002870)\n<br>\n不过，并不鼓励使用cache:true,因为ajax是实时获取数据的，所以不太适合从缓存中加载信息，我想也正是因为这个原因，谷歌 safari浏览器实现不了这个功能吧，那么问题来了为什么ie还可以这么坚挺？（日常吐槽）。\n\n附：ajax其他参数<br>\n**参数：**\nurl: 要求为String类型的参数，（默认为当前页地址）发送请求的地址。\ntype: 要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。\ntimeout: 要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。\nasync：要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。\ncache：要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false）。设置为false将不会从浏览器缓存中加载请求信息。\ndata: 要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看processData选项。对象必须为key/value格\n 式，例如{foo1:\"bar1\",foo2:\"bar2\"}转换为&foo1=bar1&foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[\"bar1\",\"bar2\"]}转换为&foo=bar1&foo=bar2。\ndataType: 要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。\n          可用的类型如下：<br>\n          xml：返回XML文档，可用JQuery处理。<br>\n          html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br>\n          script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br>\n          json：返回JSON数据。<br>\n          jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br>\n          text：返回纯文本字符串。\nbeforeSend：要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义。\n            HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。\n\n\n\n","source":"_posts/关于Ajax的cache参数的测试.md","raw":"---\ntitle: 关于Ajax的cache参数的测试\ndate: 2017-02-18 20:42:59\ncategories: Java二三事\ntags: \n\t- JavaScript\n\t- Ajax\n\t- cache\n---\n&nbsp;&nbsp;其实这次做这个测试是因为和同学谈论@requestbody时引发的一个笑话，我之前一直以为ajax中的`dataType: 'json'`是传输去后台的数据格式，后来分分钟被打脸，查了一下百度，才知道原来`dataType: 'json'`是期望返回的数据类型，由此才发现原来ajax并没有平常用的那么简单。\n<!--more-->\n首先我们来看一下什么是Ajax：\nAJAX = 异步 JavaScript 和 XML。\nAJAX 是一种用于创建快速动态网页的技术。\n通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\n传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。\n有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。(以上来自w3cschool)\n         \n在看这些资料的过程中，一个参数引起了我的注意：**cache** 这个cache有true和false两个方向，<font color=red>显式的要求如果当前请求有缓存的话，直接使用缓存。如果该属性设置为 false，则每次都会向服务器请求</font>。由此我做了下面的测试：\n\n首先创建一个servlet，用来接收客户端发来的请求\n\nAjaxServlet.java\n\n```\npublic class AjaxServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"进入了servlet!\");\n        resp.setContentType(\"text/html;charset=UTF-8\");\n        PrintWriter out = resp.getWriter();\n        int a = 1;\n        out.print(a);\n        out.flush();\n        out.close();\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doGet(req, resp);\n    }\n}\n```\n这里做出了标记，如果请求进来了，控制台会输出\"进入了servlet\"\n\n然后创建一个Jsp用来发出请求：\najaxTest.jsp\n\n```\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<% String path = request.getContextPath(); %>\n<html>\n<head>\n    <title>Title</title>\n</head>\n<body>\n<button id=\"ajaxBtn\" value=\"点我试试~\">点我试试~</button>\n</body>\n<script src=\"jquery.js\"></script>\n<script>\n    $(\"#ajaxBtn\").click(function () {\n        $.ajax({\n            url: \"<%=path%>/AjaxServlet\",\n            type: 'get',\n            cache: true,\n            success: function (data) {\n                alert(data);\n            }\n        });\n    })\n</script>\n</html>\n\n```\n这里点击这个按钮可以出发一个get请求，我们把cache设置为了true，这样会在浏览器缓存中加载请求信息。\n\n![这里写图片描述](http://img.blog.csdn.net/20161123204951948)\n\n\n![](http://img.blog.csdn.net/20161123205002870)<br>\n\n可以看出第一次成功进入了servlet，前台也alert出了这个返回的值。\n\n接着我们点击第二次，发现居然还是进入了servlet!!!!!<br>\n![这里写图片描述](http://img.blog.csdn.net/20161123205119785)\n<br>\n这是怎么回事呢？ 没办法只能继续踏上百度谷歌之路，经过查找发现，在IE浏览器下，可以实现这个功能，点击两次，第二次就不再进入servlet了。<br>\n![](http://img.blog.csdn.net/20161123205002870)\n<br>\n不过，并不鼓励使用cache:true,因为ajax是实时获取数据的，所以不太适合从缓存中加载信息，我想也正是因为这个原因，谷歌 safari浏览器实现不了这个功能吧，那么问题来了为什么ie还可以这么坚挺？（日常吐槽）。\n\n附：ajax其他参数<br>\n**参数：**\nurl: 要求为String类型的参数，（默认为当前页地址）发送请求的地址。\ntype: 要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。\ntimeout: 要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。\nasync：要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。\ncache：要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false）。设置为false将不会从浏览器缓存中加载请求信息。\ndata: 要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看processData选项。对象必须为key/value格\n 式，例如{foo1:\"bar1\",foo2:\"bar2\"}转换为&foo1=bar1&foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[\"bar1\",\"bar2\"]}转换为&foo=bar1&foo=bar2。\ndataType: 要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。\n          可用的类型如下：<br>\n          xml：返回XML文档，可用JQuery处理。<br>\n          html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br>\n          script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br>\n          json：返回JSON数据。<br>\n          jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br>\n          text：返回纯文本字符串。\nbeforeSend：要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义。\n            HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。\n\n\n\n","slug":"关于Ajax的cache参数的测试","published":1,"updated":"2017-02-18T12:46:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kg1002yrhsooub8ggzq","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>&nbsp;&nbsp;其实这次做这个测试是因为和同学谈论@requestbody时引发的一个笑话，我之前一直以为ajax中的<code>dataType: &#39;json&#39;</code>是传输去后台的数据格式，后来分分钟被打脸，查了一下百度，才知道原来<code>dataType: &#39;json&#39;</code>是期望返回的数据类型，由此才发现原来ajax并没有平常用的那么简单。<br><a id=\"more\"></a><br>首先我们来看一下什么是Ajax：<br>AJAX = 异步 JavaScript 和 XML。<br>AJAX 是一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。<br>有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。(以上来自w3cschool)</p>\n<p>在看这些资料的过程中，一个参数引起了我的注意：<strong>cache</strong> 这个cache有true和false两个方向，<font color=\"red\">显式的要求如果当前请求有缓存的话，直接使用缓存。如果该属性设置为 false，则每次都会向服务器请求</font>。由此我做了下面的测试：</p>\n<p>首先创建一个servlet，用来接收客户端发来的请求</p>\n<p>AjaxServlet.java</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AjaxServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> void doGet(<span class=\"type\">HttpServletRequest</span> req, <span class=\"type\">HttpServletResponse</span> resp) <span class=\"keyword\">throws</span> <span class=\"type\">ServletException</span>, <span class=\"type\">IOException</span> &#123;</div><div class=\"line\">        <span class=\"type\">System</span>.out.println(<span class=\"string\">\"进入了servlet!\"</span>);</div><div class=\"line\">        resp.setContentType(<span class=\"string\">\"text/html;charset=UTF-8\"</span>);</div><div class=\"line\">        <span class=\"type\">PrintWriter</span> out = resp.getWriter();</div><div class=\"line\">        int a = <span class=\"number\">1</span>;</div><div class=\"line\">        out.print(a);</div><div class=\"line\">        out.flush();</div><div class=\"line\">        out.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> void doPost(<span class=\"type\">HttpServletRequest</span> req, <span class=\"type\">HttpServletResponse</span> resp) <span class=\"keyword\">throws</span> <span class=\"type\">ServletException</span>, <span class=\"type\">IOException</span> &#123;</div><div class=\"line\">        doGet(req, resp);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里做出了标记，如果请求进来了，控制台会输出”进入了servlet”</p>\n<p>然后创建一个Jsp用来发出请求：<br>ajaxTest.jsp</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">String</span> <span class=\"attr\">path</span> = <span class=\"string\">request.getContextPath();</span> %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ajaxBtn\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"点我试试~\"</span>&gt;</span>点我试试~<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    $(<span class=\"string\">\"#ajaxBtn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $.ajax(&#123;</div><div class=\"line\">            <span class=\"attr\">url</span>: <span class=\"string\">\"&lt;%=path%&gt;/AjaxServlet\"</span>,</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,</div><div class=\"line\">            <span class=\"attr\">cache</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">            <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">                alert(data);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这里点击这个按钮可以出发一个get请求，我们把cache设置为了true，这样会在浏览器缓存中加载请求信息。</p>\n<p><img src=\"http://img.blog.csdn.net/20161123204951948\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161123205002870\" alt=\"\"><br></p>\n<p>可以看出第一次成功进入了servlet，前台也alert出了这个返回的值。</p>\n<p>接着我们点击第二次，发现居然还是进入了servlet!!!!!<br><br><img src=\"http://img.blog.csdn.net/20161123205119785\" alt=\"这里写图片描述\"><br><br><br>这是怎么回事呢？ 没办法只能继续踏上百度谷歌之路，经过查找发现，在IE浏览器下，可以实现这个功能，点击两次，第二次就不再进入servlet了。<br><br><img src=\"http://img.blog.csdn.net/20161123205002870\" alt=\"\"><br><br><br>不过，并不鼓励使用cache:true,因为ajax是实时获取数据的，所以不太适合从缓存中加载信息，我想也正是因为这个原因，谷歌 safari浏览器实现不了这个功能吧，那么问题来了为什么ie还可以这么坚挺？（日常吐槽）。</p>\n<p>附：ajax其他参数<br><br><strong>参数：</strong><br>url: 要求为String类型的参数，（默认为当前页地址）发送请求的地址。<br>type: 要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。<br>timeout: 要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。<br>async：要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。<br>cache：要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false）。设置为false将不会从浏览器缓存中加载请求信息。<br>data: 要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看processData选项。对象必须为key/value格<br> 式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1=bar1&amp;foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo=bar1&amp;foo=bar2。<br>dataType: 要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。<br>          可用的类型如下：<br><br>          xml：返回XML文档，可用JQuery处理。<br><br>          html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br><br>          script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br><br>          json：返回JSON数据。<br><br>          jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br><br>          text：返回纯文本字符串。<br>beforeSend：要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义。<br>            HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。</p>\n","excerpt":"<p>&nbsp;&nbsp;其实这次做这个测试是因为和同学谈论@requestbody时引发的一个笑话，我之前一直以为ajax中的<code>dataType: &#39;json&#39;</code>是传输去后台的数据格式，后来分分钟被打脸，查了一下百度，才知道原来<code>dataType: &#39;json&#39;</code>是期望返回的数据类型，由此才发现原来ajax并没有平常用的那么简单。<br></p>","more":"<br>首先我们来看一下什么是Ajax：<br>AJAX = 异步 JavaScript 和 XML。<br>AJAX 是一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。<br>有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。(以上来自w3cschool)<p></p>\n<p>在看这些资料的过程中，一个参数引起了我的注意：<strong>cache</strong> 这个cache有true和false两个方向，<font color=\"red\">显式的要求如果当前请求有缓存的话，直接使用缓存。如果该属性设置为 false，则每次都会向服务器请求</font>。由此我做了下面的测试：</p>\n<p>首先创建一个servlet，用来接收客户端发来的请求</p>\n<p>AjaxServlet.java</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AjaxServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> void doGet(<span class=\"type\">HttpServletRequest</span> req, <span class=\"type\">HttpServletResponse</span> resp) <span class=\"keyword\">throws</span> <span class=\"type\">ServletException</span>, <span class=\"type\">IOException</span> &#123;</div><div class=\"line\">        <span class=\"type\">System</span>.out.println(<span class=\"string\">\"进入了servlet!\"</span>);</div><div class=\"line\">        resp.setContentType(<span class=\"string\">\"text/html;charset=UTF-8\"</span>);</div><div class=\"line\">        <span class=\"type\">PrintWriter</span> out = resp.getWriter();</div><div class=\"line\">        int a = <span class=\"number\">1</span>;</div><div class=\"line\">        out.print(a);</div><div class=\"line\">        out.flush();</div><div class=\"line\">        out.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> void doPost(<span class=\"type\">HttpServletRequest</span> req, <span class=\"type\">HttpServletResponse</span> resp) <span class=\"keyword\">throws</span> <span class=\"type\">ServletException</span>, <span class=\"type\">IOException</span> &#123;</div><div class=\"line\">        doGet(req, resp);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里做出了标记，如果请求进来了，控制台会输出”进入了servlet”</p>\n<p>然后创建一个Jsp用来发出请求：<br>ajaxTest.jsp</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">String</span> <span class=\"attr\">path</span> = <span class=\"string\">request.getContextPath();</span> %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ajaxBtn\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"点我试试~\"</span>&gt;</span>点我试试~<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    $(<span class=\"string\">\"#ajaxBtn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $.ajax(&#123;</div><div class=\"line\">            <span class=\"attr\">url</span>: <span class=\"string\">\"&lt;%=path%&gt;/AjaxServlet\"</span>,</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,</div><div class=\"line\">            <span class=\"attr\">cache</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">            <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">                alert(data);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这里点击这个按钮可以出发一个get请求，我们把cache设置为了true，这样会在浏览器缓存中加载请求信息。</p>\n<p><img src=\"http://img.blog.csdn.net/20161123204951948\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20161123205002870\" alt=\"\"><br></p>\n<p>可以看出第一次成功进入了servlet，前台也alert出了这个返回的值。</p>\n<p>接着我们点击第二次，发现居然还是进入了servlet!!!!!<br><br><img src=\"http://img.blog.csdn.net/20161123205119785\" alt=\"这里写图片描述\"><br><br><br>这是怎么回事呢？ 没办法只能继续踏上百度谷歌之路，经过查找发现，在IE浏览器下，可以实现这个功能，点击两次，第二次就不再进入servlet了。<br><br><img src=\"http://img.blog.csdn.net/20161123205002870\" alt=\"\"><br><br><br>不过，并不鼓励使用cache:true,因为ajax是实时获取数据的，所以不太适合从缓存中加载信息，我想也正是因为这个原因，谷歌 safari浏览器实现不了这个功能吧，那么问题来了为什么ie还可以这么坚挺？（日常吐槽）。</p>\n<p>附：ajax其他参数<br><br><strong>参数：</strong><br>url: 要求为String类型的参数，（默认为当前页地址）发送请求的地址。<br>type: 要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。<br>timeout: 要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。<br>async：要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。<br>cache：要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false）。设置为false将不会从浏览器缓存中加载请求信息。<br>data: 要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看processData选项。对象必须为key/value格<br> 式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1=bar1&amp;foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo=bar1&amp;foo=bar2。<br>dataType: 要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。<br>          可用的类型如下：<br><br>          xml：返回XML文档，可用JQuery处理。<br><br>          html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br><br>          script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br><br>          json：返回JSON数据。<br><br>          jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br><br>          text：返回纯文本字符串。<br>beforeSend：要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义。<br>            HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。</p>"},{"title":"实验插入b站h5播放器","date":"2017-02-18T08:42:57.000Z","_content":"\nHexo 插 B 站的播放器很简单，在 md 文档中插个 iframe 标签就行，aid 和 cid 值需要手动填写，播放器大小可以自己调节：\n\n>B 站每个视频都有对应的 aid 和 cid 值，在视频网页的源代码中可以找到\n\n<!--more-->\n\n```\n<iframe src=\"https://www.bilibili.com/html/html5player.html?aid=3521416&cid=6041635\" width=\"960\" height=\"600\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n```\n<br>\n<iframe src=\"https://www.bilibili.com/html/html5player.html?aid=3521416&cid=6041635\" width=\"960\" height=\"600\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\n","source":"_posts/实验插入b站h5播放器.md","raw":"---\ntitle: 实验插入b站h5播放器\ndate: 2017-02-18 16:42:57\ncategories: 博客\ntags: \n\t- 小插件\n---\n\nHexo 插 B 站的播放器很简单，在 md 文档中插个 iframe 标签就行，aid 和 cid 值需要手动填写，播放器大小可以自己调节：\n\n>B 站每个视频都有对应的 aid 和 cid 值，在视频网页的源代码中可以找到\n\n<!--more-->\n\n```\n<iframe src=\"https://www.bilibili.com/html/html5player.html?aid=3521416&cid=6041635\" width=\"960\" height=\"600\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n```\n<br>\n<iframe src=\"https://www.bilibili.com/html/html5player.html?aid=3521416&cid=6041635\" width=\"960\" height=\"600\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\n","slug":"实验插入b站h5播放器","published":1,"updated":"2017-02-18T11:19:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kg30031rhsow94p839n","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>Hexo 插 B 站的播放器很简单，在 md 文档中插个 iframe 标签就行，aid 和 cid 值需要手动填写，播放器大小可以自己调节：</p>\n<blockquote>\n<p>B 站每个视频都有对应的 aid 和 cid 值，在视频网页的源代码中可以找到</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">iframe</span> src=<span class=\"string\">\"https://www.bilibili.com/html/html5player.html?aid=3521416&amp;cid=6041635\"</span> <span class=\"attribute\">width</span>=<span class=\"string\">\"960\"</span> height=<span class=\"string\">\"600\"</span> frameborder=<span class=\"string\">\"0\"</span> webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure>\n<p><br></p>\n<iframe src=\"https://www.bilibili.com/html/html5player.html?aid=3521416&cid=6041635\" width=\"960\" height=\"600\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen></iframe>\n\n","excerpt":"<p>Hexo 插 B 站的播放器很简单，在 md 文档中插个 iframe 标签就行，aid 和 cid 值需要手动填写，播放器大小可以自己调节：</p>\n<blockquote>\n<p>B 站每个视频都有对应的 aid 和 cid 值，在视频网页的源代码中可以找到</p>\n</blockquote>","more":"<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">iframe</span> src=<span class=\"string\">\"https://www.bilibili.com/html/html5player.html?aid=3521416&amp;cid=6041635\"</span> <span class=\"attribute\">width</span>=<span class=\"string\">\"960\"</span> height=<span class=\"string\">\"600\"</span> frameborder=<span class=\"string\">\"0\"</span> webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure>\n<p><br></p>\n<iframe src=\"https://www.bilibili.com/html/html5player.html?aid=3521416&cid=6041635\" width=\"960\" height=\"600\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen></iframe>"},{"title":"希尔排序","date":"2017-02-20T14:06:01.000Z","_content":"\n希尔排序，也称**递减增量排序算法**，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。\n希尔排序是基于插入排序的以下两点性质而提出改进方法的：\n<li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率\n<li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位\n<!--more-->\n原始的算法实现在最坏的情况下需要进行O(n2)的比较和交换。之后对算法进行了少量修改，可以使得性能提升至O(n log2 n)。这比最好的比较算法的O(n log n)要差一些。\n\n希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。\n\n假设有一个很小的数据在一个已按升序排好序的数组的末端。如果用复杂度为O(n2)的排序（冒泡排序或插入排序），可能会进行n次的比较和交换才能将该数据移至正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。\n\n一个更好理解的希尔排序实现：将数组列在一个表中并对列排序（用插入排序）。重复这过程，不过每次用更长的列来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身仅仅对原数组进行排序（通过增加索引的步长，例如是用<code>i += step_size</code>而不是<code>i++</code>）。\n\n例如，假设有这样一组数<code>[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]</code>，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样：\n\n>13 14 94 33 82\n25 59 94 65 23\n45 27 73 25 39\n10\n\n然后我们对每列进行排序：\n\n>10 14 73 25 23\n13 27 94 33 39\n25 59 94 65 82\n45\n\n将上述四行数字，依序接在一起时我们得到：[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ].这时10已经移至正确位置了，然后再以3为步长进行排序：\n\n>10 14 73\n25 23 13\n27 94 33\n39 25 59\n94 65 82\n45\n\n排序之后变为：\n\n>10 14 13\n25 23 33\n27 25 59\n39 65 73\n45 94 82\n94\n\n最后以1步长进行排序（此时就是简单的插入排序了）。\n\n步长的选择是希尔排序的重要部分。只要最终步长为1任何步长序列都可以工作。算法最开始以一定的步长进行排序。然后会继续以一定步长进行排序，最终算法以步长为1进行排序。当步长为1时，算法变为插入排序，这就保证了数据一定会被排序。\n\n该算法最初建议步长选择为n/2并且对步长取半直到步长达到1。虽然这样取可以比O(n'2)类的算法（插入排序）更好，但这样仍然有减少平均时间和最差时间的余地。可能希尔排序最重要的地方在于当用较小步长排序后，以前用的较大步长仍然是有序的。\n\n比如，如果一个数列以步长5进行了排序然后再以步长3进行排序，那么该数列不仅是以步长3有序，而且是以步长5有序。如果不是这样，那么算法在迭代过程中会打乱以前的顺序，那就不会以如此短的时间完成排序了。\n\n**实现：**\n```\npublic static void shell_sort(int[] arr) {\n\tint gap = 1, i, j, len = arr.length;\n\tint temp;\n\twhile (gap < len / 3)\n\t\tgap = gap * 3 + 1; // 1, 4, 13, 40, 121, ...\n\tfor (; gap > 0; gap /= 3)\n\t\tfor (i = gap; i < len; i++) {\n\t\t\ttemp = arr[i];\n\t\t\tfor (j = i - gap; j >= 0 && arr[j] > temp; j -= gap)\n\t\t\t\tarr[j + gap] = arr[j];\n\t\t\tarr[j + gap] = temp;\n\t\t}\n}\n```","source":"_posts/希尔排序.md","raw":"---\ntitle: 希尔排序\ndate: 2017-02-20 22:06:01\ncategories: 算法\ntags:\n\t- 排序\n---\n\n希尔排序，也称**递减增量排序算法**，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。\n希尔排序是基于插入排序的以下两点性质而提出改进方法的：\n<li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率\n<li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位\n<!--more-->\n原始的算法实现在最坏的情况下需要进行O(n2)的比较和交换。之后对算法进行了少量修改，可以使得性能提升至O(n log2 n)。这比最好的比较算法的O(n log n)要差一些。\n\n希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。\n\n假设有一个很小的数据在一个已按升序排好序的数组的末端。如果用复杂度为O(n2)的排序（冒泡排序或插入排序），可能会进行n次的比较和交换才能将该数据移至正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。\n\n一个更好理解的希尔排序实现：将数组列在一个表中并对列排序（用插入排序）。重复这过程，不过每次用更长的列来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身仅仅对原数组进行排序（通过增加索引的步长，例如是用<code>i += step_size</code>而不是<code>i++</code>）。\n\n例如，假设有这样一组数<code>[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]</code>，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样：\n\n>13 14 94 33 82\n25 59 94 65 23\n45 27 73 25 39\n10\n\n然后我们对每列进行排序：\n\n>10 14 73 25 23\n13 27 94 33 39\n25 59 94 65 82\n45\n\n将上述四行数字，依序接在一起时我们得到：[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ].这时10已经移至正确位置了，然后再以3为步长进行排序：\n\n>10 14 73\n25 23 13\n27 94 33\n39 25 59\n94 65 82\n45\n\n排序之后变为：\n\n>10 14 13\n25 23 33\n27 25 59\n39 65 73\n45 94 82\n94\n\n最后以1步长进行排序（此时就是简单的插入排序了）。\n\n步长的选择是希尔排序的重要部分。只要最终步长为1任何步长序列都可以工作。算法最开始以一定的步长进行排序。然后会继续以一定步长进行排序，最终算法以步长为1进行排序。当步长为1时，算法变为插入排序，这就保证了数据一定会被排序。\n\n该算法最初建议步长选择为n/2并且对步长取半直到步长达到1。虽然这样取可以比O(n'2)类的算法（插入排序）更好，但这样仍然有减少平均时间和最差时间的余地。可能希尔排序最重要的地方在于当用较小步长排序后，以前用的较大步长仍然是有序的。\n\n比如，如果一个数列以步长5进行了排序然后再以步长3进行排序，那么该数列不仅是以步长3有序，而且是以步长5有序。如果不是这样，那么算法在迭代过程中会打乱以前的顺序，那就不会以如此短的时间完成排序了。\n\n**实现：**\n```\npublic static void shell_sort(int[] arr) {\n\tint gap = 1, i, j, len = arr.length;\n\tint temp;\n\twhile (gap < len / 3)\n\t\tgap = gap * 3 + 1; // 1, 4, 13, 40, 121, ...\n\tfor (; gap > 0; gap /= 3)\n\t\tfor (i = gap; i < len; i++) {\n\t\t\ttemp = arr[i];\n\t\t\tfor (j = i - gap; j >= 0 && arr[j] > temp; j -= gap)\n\t\t\t\tarr[j + gap] = arr[j];\n\t\t\tarr[j + gap] = temp;\n\t\t}\n}\n```","slug":"希尔排序","published":1,"updated":"2017-02-20T14:07:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kg40034rhsop5jpp7yc","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>希尔排序，也称<strong>递减增量排序算法</strong>，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。<br>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>\n<p><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</li></p>\n<p><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位<br><a id=\"more\"></a><br>原始的算法实现在最坏的情况下需要进行O(n2)的比较和交换。之后对算法进行了少量修改，可以使得性能提升至O(n log2 n)。这比最好的比较算法的O(n log n)要差一些。</li></p>\n<p>希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。</p>\n<p>假设有一个很小的数据在一个已按升序排好序的数组的末端。如果用复杂度为O(n2)的排序（冒泡排序或插入排序），可能会进行n次的比较和交换才能将该数据移至正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。</p>\n<p>一个更好理解的希尔排序实现：将数组列在一个表中并对列排序（用插入排序）。重复这过程，不过每次用更长的列来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身仅仅对原数组进行排序（通过增加索引的步长，例如是用<code>i += step_size</code>而不是<code>i++</code>）。</p>\n<p>例如，假设有这样一组数<code>[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]</code>，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样：</p>\n<blockquote>\n<p>13 14 94 33 82<br>25 59 94 65 23<br>45 27 73 25 39<br>10</p>\n</blockquote>\n<p>然后我们对每列进行排序：</p>\n<blockquote>\n<p>10 14 73 25 23<br>13 27 94 33 39<br>25 59 94 65 82<br>45</p>\n</blockquote>\n<p>将上述四行数字，依序接在一起时我们得到：[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ].这时10已经移至正确位置了，然后再以3为步长进行排序：</p>\n<blockquote>\n<p>10 14 73<br>25 23 13<br>27 94 33<br>39 25 59<br>94 65 82<br>45</p>\n</blockquote>\n<p>排序之后变为：</p>\n<blockquote>\n<p>10 14 13<br>25 23 33<br>27 25 59<br>39 65 73<br>45 94 82<br>94</p>\n</blockquote>\n<p>最后以1步长进行排序（此时就是简单的插入排序了）。</p>\n<p>步长的选择是希尔排序的重要部分。只要最终步长为1任何步长序列都可以工作。算法最开始以一定的步长进行排序。然后会继续以一定步长进行排序，最终算法以步长为1进行排序。当步长为1时，算法变为插入排序，这就保证了数据一定会被排序。</p>\n<p>该算法最初建议步长选择为n/2并且对步长取半直到步长达到1。虽然这样取可以比O(n’2)类的算法（插入排序）更好，但这样仍然有减少平均时间和最差时间的余地。可能希尔排序最重要的地方在于当用较小步长排序后，以前用的较大步长仍然是有序的。</p>\n<p>比如，如果一个数列以步长5进行了排序然后再以步长3进行排序，那么该数列不仅是以步长3有序，而且是以步长5有序。如果不是这样，那么算法在迭代过程中会打乱以前的顺序，那就不会以如此短的时间完成排序了。</p>\n<p><strong>实现：</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shell_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> gap = <span class=\"number\">1</span>, i, j, len = arr.length;</div><div class=\"line\">\t<span class=\"keyword\">int</span> temp;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (gap &lt; len / <span class=\"number\">3</span>)</div><div class=\"line\">\t\tgap = gap * <span class=\"number\">3</span> + <span class=\"number\">1</span>; <span class=\"comment\">// 1, 4, 13, 40, 121, ...</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">3</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (i = gap; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t\ttemp = arr[i];</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i - gap; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)</div><div class=\"line\">\t\t\t\tarr[j + gap] = arr[j];</div><div class=\"line\">\t\t\tarr[j + gap] = temp;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>希尔排序，也称<strong>递减增量排序算法</strong>，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。<br>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>\n<p><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</li></p>\n<p><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位<br></li></p>","more":"<br>原始的算法实现在最坏的情况下需要进行O(n2)的比较和交换。之后对算法进行了少量修改，可以使得性能提升至O(n log2 n)。这比最好的比较算法的O(n log n)要差一些。<p></p>\n<p>希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。</p>\n<p>假设有一个很小的数据在一个已按升序排好序的数组的末端。如果用复杂度为O(n2)的排序（冒泡排序或插入排序），可能会进行n次的比较和交换才能将该数据移至正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。</p>\n<p>一个更好理解的希尔排序实现：将数组列在一个表中并对列排序（用插入排序）。重复这过程，不过每次用更长的列来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身仅仅对原数组进行排序（通过增加索引的步长，例如是用<code>i += step_size</code>而不是<code>i++</code>）。</p>\n<p>例如，假设有这样一组数<code>[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]</code>，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样：</p>\n<blockquote>\n<p>13 14 94 33 82<br>25 59 94 65 23<br>45 27 73 25 39<br>10</p>\n</blockquote>\n<p>然后我们对每列进行排序：</p>\n<blockquote>\n<p>10 14 73 25 23<br>13 27 94 33 39<br>25 59 94 65 82<br>45</p>\n</blockquote>\n<p>将上述四行数字，依序接在一起时我们得到：[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ].这时10已经移至正确位置了，然后再以3为步长进行排序：</p>\n<blockquote>\n<p>10 14 73<br>25 23 13<br>27 94 33<br>39 25 59<br>94 65 82<br>45</p>\n</blockquote>\n<p>排序之后变为：</p>\n<blockquote>\n<p>10 14 13<br>25 23 33<br>27 25 59<br>39 65 73<br>45 94 82<br>94</p>\n</blockquote>\n<p>最后以1步长进行排序（此时就是简单的插入排序了）。</p>\n<p>步长的选择是希尔排序的重要部分。只要最终步长为1任何步长序列都可以工作。算法最开始以一定的步长进行排序。然后会继续以一定步长进行排序，最终算法以步长为1进行排序。当步长为1时，算法变为插入排序，这就保证了数据一定会被排序。</p>\n<p>该算法最初建议步长选择为n/2并且对步长取半直到步长达到1。虽然这样取可以比O(n’2)类的算法（插入排序）更好，但这样仍然有减少平均时间和最差时间的余地。可能希尔排序最重要的地方在于当用较小步长排序后，以前用的较大步长仍然是有序的。</p>\n<p>比如，如果一个数列以步长5进行了排序然后再以步长3进行排序，那么该数列不仅是以步长3有序，而且是以步长5有序。如果不是这样，那么算法在迭代过程中会打乱以前的顺序，那就不会以如此短的时间完成排序了。</p>\n<p><strong>实现：</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shell_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> gap = <span class=\"number\">1</span>, i, j, len = arr.length;</div><div class=\"line\">\t<span class=\"keyword\">int</span> temp;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (gap &lt; len / <span class=\"number\">3</span>)</div><div class=\"line\">\t\tgap = gap * <span class=\"number\">3</span> + <span class=\"number\">1</span>; <span class=\"comment\">// 1, 4, 13, 40, 121, ...</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">3</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (i = gap; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t\ttemp = arr[i];</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i - gap; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)</div><div class=\"line\">\t\t\t\tarr[j + gap] = arr[j];</div><div class=\"line\">\t\t\tarr[j + gap] = temp;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"我们为什么要用Spring，SpringMVC","date":"2017-02-18T13:01:56.000Z","_content":"\n今天被公司派到别的公司谈项目，刚去就先被面试了一波（原来是把我外包到别的公司做项目了 -。-），面试时候问了我一个问题，很简单，就是问我java开发web项目为什么要用spring,springmvc？<br>\n好吧，当时我人直接懵逼了，什么鬼问我这个！！不就是可以省去很多功夫让我们踏踏实实写业务代码嘛? <br>\n<!--more-->\n当时就随便回答了一些，回到公司仔细想想，发现还有挺多可以想，可以讲的。我想起了之前项目的控制层从struts2转到springmvc，我就在想为什么我们现在做javaweb开发，要用struts2或者springMVC这样的框架，而不是使用servlet加jsp这样的技术呢？特别是现在我们web的前端页面都是使用freemaker这样的模板语言进行开发，抛弃了jsp，这样的选择又会给我们javaweb开发带来什么样的好处，延着这个问题的思路，我又发现新的疑问，为什么现在很多java企业级开发都会去选择spring框架，spring框架给我们开发的应用带来了什么？这么一想我人更加糊涂了，很难找带让自己完全信服的答案。<br>\n最终我发现，这些我认为**“用”**的很熟悉技术，其实还有很多让我陌生不解的地方，这些陌生和不解的地方也正是我是否能更高层次使用它们的关键。\n           \n 首先，软件里有很多优秀的框架，有一种类型的框架，它的特点是建立在一个现有技术的基础上，提供和现有技术一样业务功能的技术框架，这个新的技术框架比原技术更加易用，更加健壮同时功能更加强大，例如常用的jQuery，以及上面提到的spring和springMVC（其实是一个啦），深究这些框架都是很复杂的，但是它们的优点其实只有一个：**就是让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题**。像jQuery，springMVC这类框架之所以优秀，就是它们在这点上做的太好了，以至于很多使用它的程序员都已经不清楚原有技术的真实面目，因此我们要将springmvc理解的更好，使用的更加熟练和深入，这里我们就要跳出springmvc的技术，到springmvc技术的源头servlet，仔细研究下servlet的特点，只有这样我们才能把springmvc框架学的更好（所以才那么多人看springmvc的源码学习吧）。\n           \n先讲讲servlet吧，servlet的作用就是是接收浏览器传给服务端的请求（request），并将服务端处理完的响应（response）返回给用户的浏览器，浏览器和服务端之间通过http协议进行沟通，其过程是浏览器根据用户的选择将相关信息按http协议报文的规范组装请求的http报文，报文通过网络传输到指定的服务器，服务器通过特定的web容器接收这个报文信息，例如：tomcat，jetty，jboss这样的web容器，web容器会将http报文解析出来，如果是用户请求，最终解析出来的报文信息会用一个request对象存储起来，服务端使用这个request做完相应的处理后，服务端程序将结果信息封装到response对象里，然后将response对象交给web容器，web容器则把这个response对象转变为http协议的报文，并将报文回传给浏览器，浏览器最后解析这个响应报文，将最终结果展示给用户。\n\n而Web容器创造了servlet接口，servlet接口就是开发人员自己实现业务逻辑的地方，程序员开发servlet就好比做填空题，而填空题的语境或者说上下文提示就是由request和response对象，但是javaEE规范里的servlet接口很简单，就三个方法init，service和destory，但是这个接口太笼统了，所以规范里还提供了一个HttpServlet类，这个类根据http请求类型提供了doGet，doPost等方法，servlet接口最大的特点就是根据http协议的特点进行定义，因此做servlet开发时候如果使用者对http协议特点不是特别熟悉，都会碰到或多或少令人迷惑的问题，特别是碰到一些复杂特殊的请求时候：例如文件上传，返回特殊的文件格式到浏览器，这时候使用servlet开发就不是很方便了，servlet开发还有个问题可能大家常常被忽视，就是请求的数据的类型转化，http协议传输都是文本形式，到了web容器解析后也是文本类型，如果碰到货币，数字，日期这样的类型需要我们根据实际情况进行转化，如果页面传送的信息非常多，我们就不得不做大量类型转化，这种工作没有什么技术含量，是个体力活而且很容易导致程序错误。\n \nservlet另一个作用就是构造response对象，让页面获得正确的响应，其实现代的浏览器是一个多媒体工具，文字，图片，视屏等等东西都可以在浏览器里显示，资源的不同就会导致http响应报文的差别，如果我们使用servlet开发就要根据资源的不同在java程序里用硬编码的形式处理，这样的程序很难复用，而且如果程序员对某种资源的处理理解不到位，就会导致问题的出现。\n \n而在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。\n\nservlet里还有两个重要的技术：监听器和过滤器，对于监听器在web开发里使用的场景比较少，都是一些十分特别的情况才会使用，大部分web开发里可以忽略它的使用，我们用的最多的监听器可能就是对ServletContext创建和销毁的监听器，ServletContext是整个web应用的全局对象，它和Web应用的生命周期绑定在一起，因此使用这个监听器对Web应用的全局信息进行初始化和销毁操作，例如spring容器的初始化操作。而过滤器方面，使用SpringMVC拦截器和Struts2一样，Spring MVC也可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器来实现特定的功能，自定义的拦截器必须实现HandlerInterceptor接口。\n\n\n**下面再谈谈spring**<br>\nspring技术可以说是java企业开发里最重要的技术，不过真的理解spring的作用和意义还真是一件麻烦的事情，很多人对spring理解其实都是停留在使用阶段（例如：声明式事务很好用等等），当今的spring技术生态环境里可谓是蔚为壮观，spring已经包罗万象，它的内容之多完全不亚于它的本源java语言了，而spring这么大的框都是建立在ioc和aop技术之上，只有深入理解了这两个技术我们才能明白为什么spring这个框能装的下那么多东西了。\n\n首先是ioc，ioc技术第一个解释叫做控制反转，它还有个解释就是依赖注入，这两个名字很难从字面理解，但是当你理解它的原理后就会发现它们的描述是何等准确。Ioc技术的本质就是构建对象的技术换句话说就是将一个类实例化成对象的技术，在java里实例化类通过new关键字进行的，每次new一个类都会产生一个新的实例对象，这么做视乎很浪费，有时这种浪费还挺危险，因为在程序开发时候我们常常只需要某个类永远只能产生一个的实例对象这个时候就得使用单例模式，此外在设计模式里还可以通过工厂方式产生对象，使用过spring的人看到上面的文字就知道了，spring里bean的定义就和上面的内容一一对应，scope属性single产生单例对象，prototype产生新对象，bean还可以通过工厂方式产生对象，可以说spring的bean就是制造对象的工具。面向对象编程里对象相当于显示生活中的一个实体，例如我们有个对象作用是完成打猎的操作，那么打猎这个对象内部包含两个辅助对象：人和枪，只有人和枪赋予了打猎这个对象，那么打猎对象才能完成打猎的操作，但是构建一个人和枪的对象并不是看起来那么简单，这里以枪为例，要创造一把枪我们需要金属，需要机床，需要子弹，而机床和子弹又是两个新对象，这些对象一个个相互嵌套相互关联，大伙试想下如果我们在java代码里构建一个枪的对象那是何其的复杂，假如我们要构造的不是简单的枪对象而是更加复杂的航空母舰，那么构造这个对象的成本之高是让人难以想象的，怎么来消除这种对象相互嵌套相互依赖的关系了？spring提供了一种方式，这种方式就是spring提供一个容器，我们在xml文件里定义各个对象的依赖关系，由容器完成对象的构建，当我们java代码里需要使用某个实例的时候就可以从容器里获取，那么对象的构建操作就被spring容器接管，所以它被称为控制反转，控制反转的意思就是本来属于java程序里构建对象的功能交由容器接管，依赖注入就是当程序要使用某个对象时候，容器会把它注入到程序里，这就叫做依赖注入。在java开发里我们想使用某个类提供的功能，有两种方式，一种就是构造一个新的类，新的类继承该类，另一种方式则是将某个类定义在新类里，那么两个类之间就建立一种关联关系，spring的ioc容器就是实现了这种关联关系（记住不是继承关系哦），那么某个类要被赋予到新类有哪些办法了？一般只有两种：一种就是通过构造函数，一种就是通过setXXX方式，这也是spring容器使用到了两种标准的注入方式。\n\n不管是上面说的继承方式，还是关联方式其实都是增强目标对象能力的开发手段，在设计模式里有一种代理模式，代理模式将继承模式和关联模式结合在一起使用，代理模式就是继承模式和关联模式的综合体，不过这个综合体的作用倒不是解决对象注入的问题，而是为具体操作对象找到一个保姆或者是秘书，这就和小说里的二号首长一样，这个二号首长对外代表了具体的实例对象，实例对象的入口和出口都是通过这个二号首长，因为具体的实例对象是一号首长，一号首长是要干大事的，所以一些事务性，重复性的工作例如泡茶，安排车子，这样的工作是不用劳烦一号首长的大驾，而是二号首长帮忙解决的，这就是aop的思想，aop解决程序开发里事务性，和核心业务无关的问题，但这些问题对于业务场景的实现是很有必要的，在实际开发里aop也是节省代码的一种方式。\n\nSpring的核心技术的作用本质就是一个 沟通机制，spring总是尽全力的让沟通的双方信息畅通，同时降低双方的沟通成本，在现实机构里一个善于沟通的人肯定是该公司的领导，很会沟通的领导能调动起各种资源的积极性，善于沟通的领导就会做到海纳百川，让各种不同人追随他，所以当今的spring就是一个大框，什么都可以往里装。\n\nSpring很像银行，它不能直接创造物质财富，但是一切资源都要通过它进行流通，它能控制经济发展的走向，回到程序的世界，spring的作用是被标榜为程序之间的解耦，spring能降低不同模块之间的耦合度，原因就是在程序开发里不同模块之间信息的沟通是通过对象传递完成的，而对象能否顺利传递就是要合理的构建好对象，而管理好对象的构建方式就能管理好对象传递，这就是spring给系统架构设计带来的好处。\n\n\n写啊写，找啊找，抄啊抄，结果搞了这么多。。。\n\n\n\n","source":"_posts/我们为什么要用Spring，SpringMVC.md","raw":"---\ntitle: 我们为什么要用Spring，SpringMVC\ndate: 2017-02-18 21:01:56\ncategories: Java二三事\ntags: \n\t- Spring\n---\n\n今天被公司派到别的公司谈项目，刚去就先被面试了一波（原来是把我外包到别的公司做项目了 -。-），面试时候问了我一个问题，很简单，就是问我java开发web项目为什么要用spring,springmvc？<br>\n好吧，当时我人直接懵逼了，什么鬼问我这个！！不就是可以省去很多功夫让我们踏踏实实写业务代码嘛? <br>\n<!--more-->\n当时就随便回答了一些，回到公司仔细想想，发现还有挺多可以想，可以讲的。我想起了之前项目的控制层从struts2转到springmvc，我就在想为什么我们现在做javaweb开发，要用struts2或者springMVC这样的框架，而不是使用servlet加jsp这样的技术呢？特别是现在我们web的前端页面都是使用freemaker这样的模板语言进行开发，抛弃了jsp，这样的选择又会给我们javaweb开发带来什么样的好处，延着这个问题的思路，我又发现新的疑问，为什么现在很多java企业级开发都会去选择spring框架，spring框架给我们开发的应用带来了什么？这么一想我人更加糊涂了，很难找带让自己完全信服的答案。<br>\n最终我发现，这些我认为**“用”**的很熟悉技术，其实还有很多让我陌生不解的地方，这些陌生和不解的地方也正是我是否能更高层次使用它们的关键。\n           \n 首先，软件里有很多优秀的框架，有一种类型的框架，它的特点是建立在一个现有技术的基础上，提供和现有技术一样业务功能的技术框架，这个新的技术框架比原技术更加易用，更加健壮同时功能更加强大，例如常用的jQuery，以及上面提到的spring和springMVC（其实是一个啦），深究这些框架都是很复杂的，但是它们的优点其实只有一个：**就是让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题**。像jQuery，springMVC这类框架之所以优秀，就是它们在这点上做的太好了，以至于很多使用它的程序员都已经不清楚原有技术的真实面目，因此我们要将springmvc理解的更好，使用的更加熟练和深入，这里我们就要跳出springmvc的技术，到springmvc技术的源头servlet，仔细研究下servlet的特点，只有这样我们才能把springmvc框架学的更好（所以才那么多人看springmvc的源码学习吧）。\n           \n先讲讲servlet吧，servlet的作用就是是接收浏览器传给服务端的请求（request），并将服务端处理完的响应（response）返回给用户的浏览器，浏览器和服务端之间通过http协议进行沟通，其过程是浏览器根据用户的选择将相关信息按http协议报文的规范组装请求的http报文，报文通过网络传输到指定的服务器，服务器通过特定的web容器接收这个报文信息，例如：tomcat，jetty，jboss这样的web容器，web容器会将http报文解析出来，如果是用户请求，最终解析出来的报文信息会用一个request对象存储起来，服务端使用这个request做完相应的处理后，服务端程序将结果信息封装到response对象里，然后将response对象交给web容器，web容器则把这个response对象转变为http协议的报文，并将报文回传给浏览器，浏览器最后解析这个响应报文，将最终结果展示给用户。\n\n而Web容器创造了servlet接口，servlet接口就是开发人员自己实现业务逻辑的地方，程序员开发servlet就好比做填空题，而填空题的语境或者说上下文提示就是由request和response对象，但是javaEE规范里的servlet接口很简单，就三个方法init，service和destory，但是这个接口太笼统了，所以规范里还提供了一个HttpServlet类，这个类根据http请求类型提供了doGet，doPost等方法，servlet接口最大的特点就是根据http协议的特点进行定义，因此做servlet开发时候如果使用者对http协议特点不是特别熟悉，都会碰到或多或少令人迷惑的问题，特别是碰到一些复杂特殊的请求时候：例如文件上传，返回特殊的文件格式到浏览器，这时候使用servlet开发就不是很方便了，servlet开发还有个问题可能大家常常被忽视，就是请求的数据的类型转化，http协议传输都是文本形式，到了web容器解析后也是文本类型，如果碰到货币，数字，日期这样的类型需要我们根据实际情况进行转化，如果页面传送的信息非常多，我们就不得不做大量类型转化，这种工作没有什么技术含量，是个体力活而且很容易导致程序错误。\n \nservlet另一个作用就是构造response对象，让页面获得正确的响应，其实现代的浏览器是一个多媒体工具，文字，图片，视屏等等东西都可以在浏览器里显示，资源的不同就会导致http响应报文的差别，如果我们使用servlet开发就要根据资源的不同在java程序里用硬编码的形式处理，这样的程序很难复用，而且如果程序员对某种资源的处理理解不到位，就会导致问题的出现。\n \n而在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。\n\nservlet里还有两个重要的技术：监听器和过滤器，对于监听器在web开发里使用的场景比较少，都是一些十分特别的情况才会使用，大部分web开发里可以忽略它的使用，我们用的最多的监听器可能就是对ServletContext创建和销毁的监听器，ServletContext是整个web应用的全局对象，它和Web应用的生命周期绑定在一起，因此使用这个监听器对Web应用的全局信息进行初始化和销毁操作，例如spring容器的初始化操作。而过滤器方面，使用SpringMVC拦截器和Struts2一样，Spring MVC也可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器来实现特定的功能，自定义的拦截器必须实现HandlerInterceptor接口。\n\n\n**下面再谈谈spring**<br>\nspring技术可以说是java企业开发里最重要的技术，不过真的理解spring的作用和意义还真是一件麻烦的事情，很多人对spring理解其实都是停留在使用阶段（例如：声明式事务很好用等等），当今的spring技术生态环境里可谓是蔚为壮观，spring已经包罗万象，它的内容之多完全不亚于它的本源java语言了，而spring这么大的框都是建立在ioc和aop技术之上，只有深入理解了这两个技术我们才能明白为什么spring这个框能装的下那么多东西了。\n\n首先是ioc，ioc技术第一个解释叫做控制反转，它还有个解释就是依赖注入，这两个名字很难从字面理解，但是当你理解它的原理后就会发现它们的描述是何等准确。Ioc技术的本质就是构建对象的技术换句话说就是将一个类实例化成对象的技术，在java里实例化类通过new关键字进行的，每次new一个类都会产生一个新的实例对象，这么做视乎很浪费，有时这种浪费还挺危险，因为在程序开发时候我们常常只需要某个类永远只能产生一个的实例对象这个时候就得使用单例模式，此外在设计模式里还可以通过工厂方式产生对象，使用过spring的人看到上面的文字就知道了，spring里bean的定义就和上面的内容一一对应，scope属性single产生单例对象，prototype产生新对象，bean还可以通过工厂方式产生对象，可以说spring的bean就是制造对象的工具。面向对象编程里对象相当于显示生活中的一个实体，例如我们有个对象作用是完成打猎的操作，那么打猎这个对象内部包含两个辅助对象：人和枪，只有人和枪赋予了打猎这个对象，那么打猎对象才能完成打猎的操作，但是构建一个人和枪的对象并不是看起来那么简单，这里以枪为例，要创造一把枪我们需要金属，需要机床，需要子弹，而机床和子弹又是两个新对象，这些对象一个个相互嵌套相互关联，大伙试想下如果我们在java代码里构建一个枪的对象那是何其的复杂，假如我们要构造的不是简单的枪对象而是更加复杂的航空母舰，那么构造这个对象的成本之高是让人难以想象的，怎么来消除这种对象相互嵌套相互依赖的关系了？spring提供了一种方式，这种方式就是spring提供一个容器，我们在xml文件里定义各个对象的依赖关系，由容器完成对象的构建，当我们java代码里需要使用某个实例的时候就可以从容器里获取，那么对象的构建操作就被spring容器接管，所以它被称为控制反转，控制反转的意思就是本来属于java程序里构建对象的功能交由容器接管，依赖注入就是当程序要使用某个对象时候，容器会把它注入到程序里，这就叫做依赖注入。在java开发里我们想使用某个类提供的功能，有两种方式，一种就是构造一个新的类，新的类继承该类，另一种方式则是将某个类定义在新类里，那么两个类之间就建立一种关联关系，spring的ioc容器就是实现了这种关联关系（记住不是继承关系哦），那么某个类要被赋予到新类有哪些办法了？一般只有两种：一种就是通过构造函数，一种就是通过setXXX方式，这也是spring容器使用到了两种标准的注入方式。\n\n不管是上面说的继承方式，还是关联方式其实都是增强目标对象能力的开发手段，在设计模式里有一种代理模式，代理模式将继承模式和关联模式结合在一起使用，代理模式就是继承模式和关联模式的综合体，不过这个综合体的作用倒不是解决对象注入的问题，而是为具体操作对象找到一个保姆或者是秘书，这就和小说里的二号首长一样，这个二号首长对外代表了具体的实例对象，实例对象的入口和出口都是通过这个二号首长，因为具体的实例对象是一号首长，一号首长是要干大事的，所以一些事务性，重复性的工作例如泡茶，安排车子，这样的工作是不用劳烦一号首长的大驾，而是二号首长帮忙解决的，这就是aop的思想，aop解决程序开发里事务性，和核心业务无关的问题，但这些问题对于业务场景的实现是很有必要的，在实际开发里aop也是节省代码的一种方式。\n\nSpring的核心技术的作用本质就是一个 沟通机制，spring总是尽全力的让沟通的双方信息畅通，同时降低双方的沟通成本，在现实机构里一个善于沟通的人肯定是该公司的领导，很会沟通的领导能调动起各种资源的积极性，善于沟通的领导就会做到海纳百川，让各种不同人追随他，所以当今的spring就是一个大框，什么都可以往里装。\n\nSpring很像银行，它不能直接创造物质财富，但是一切资源都要通过它进行流通，它能控制经济发展的走向，回到程序的世界，spring的作用是被标榜为程序之间的解耦，spring能降低不同模块之间的耦合度，原因就是在程序开发里不同模块之间信息的沟通是通过对象传递完成的，而对象能否顺利传递就是要合理的构建好对象，而管理好对象的构建方式就能管理好对象传递，这就是spring给系统架构设计带来的好处。\n\n\n写啊写，找啊找，抄啊抄，结果搞了这么多。。。\n\n\n\n","slug":"我们为什么要用Spring，SpringMVC","published":1,"updated":"2017-02-18T13:11:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kg50039rhsoq8ekhmy7","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>今天被公司派到别的公司谈项目，刚去就先被面试了一波（原来是把我外包到别的公司做项目了 -。-），面试时候问了我一个问题，很简单，就是问我java开发web项目为什么要用spring,springmvc？<br><br>好吧，当时我人直接懵逼了，什么鬼问我这个！！不就是可以省去很多功夫让我们踏踏实实写业务代码嘛? <br><br><a id=\"more\"></a><br>当时就随便回答了一些，回到公司仔细想想，发现还有挺多可以想，可以讲的。我想起了之前项目的控制层从struts2转到springmvc，我就在想为什么我们现在做javaweb开发，要用struts2或者springMVC这样的框架，而不是使用servlet加jsp这样的技术呢？特别是现在我们web的前端页面都是使用freemaker这样的模板语言进行开发，抛弃了jsp，这样的选择又会给我们javaweb开发带来什么样的好处，延着这个问题的思路，我又发现新的疑问，为什么现在很多java企业级开发都会去选择spring框架，spring框架给我们开发的应用带来了什么？这么一想我人更加糊涂了，很难找带让自己完全信服的答案。<br><br>最终我发现，这些我认为<strong>“用”</strong>的很熟悉技术，其实还有很多让我陌生不解的地方，这些陌生和不解的地方也正是我是否能更高层次使用它们的关键。</p>\n<p> 首先，软件里有很多优秀的框架，有一种类型的框架，它的特点是建立在一个现有技术的基础上，提供和现有技术一样业务功能的技术框架，这个新的技术框架比原技术更加易用，更加健壮同时功能更加强大，例如常用的jQuery，以及上面提到的spring和springMVC（其实是一个啦），深究这些框架都是很复杂的，但是它们的优点其实只有一个：<strong>就是让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题</strong>。像jQuery，springMVC这类框架之所以优秀，就是它们在这点上做的太好了，以至于很多使用它的程序员都已经不清楚原有技术的真实面目，因此我们要将springmvc理解的更好，使用的更加熟练和深入，这里我们就要跳出springmvc的技术，到springmvc技术的源头servlet，仔细研究下servlet的特点，只有这样我们才能把springmvc框架学的更好（所以才那么多人看springmvc的源码学习吧）。</p>\n<p>先讲讲servlet吧，servlet的作用就是是接收浏览器传给服务端的请求（request），并将服务端处理完的响应（response）返回给用户的浏览器，浏览器和服务端之间通过http协议进行沟通，其过程是浏览器根据用户的选择将相关信息按http协议报文的规范组装请求的http报文，报文通过网络传输到指定的服务器，服务器通过特定的web容器接收这个报文信息，例如：tomcat，jetty，jboss这样的web容器，web容器会将http报文解析出来，如果是用户请求，最终解析出来的报文信息会用一个request对象存储起来，服务端使用这个request做完相应的处理后，服务端程序将结果信息封装到response对象里，然后将response对象交给web容器，web容器则把这个response对象转变为http协议的报文，并将报文回传给浏览器，浏览器最后解析这个响应报文，将最终结果展示给用户。</p>\n<p>而Web容器创造了servlet接口，servlet接口就是开发人员自己实现业务逻辑的地方，程序员开发servlet就好比做填空题，而填空题的语境或者说上下文提示就是由request和response对象，但是javaEE规范里的servlet接口很简单，就三个方法init，service和destory，但是这个接口太笼统了，所以规范里还提供了一个HttpServlet类，这个类根据http请求类型提供了doGet，doPost等方法，servlet接口最大的特点就是根据http协议的特点进行定义，因此做servlet开发时候如果使用者对http协议特点不是特别熟悉，都会碰到或多或少令人迷惑的问题，特别是碰到一些复杂特殊的请求时候：例如文件上传，返回特殊的文件格式到浏览器，这时候使用servlet开发就不是很方便了，servlet开发还有个问题可能大家常常被忽视，就是请求的数据的类型转化，http协议传输都是文本形式，到了web容器解析后也是文本类型，如果碰到货币，数字，日期这样的类型需要我们根据实际情况进行转化，如果页面传送的信息非常多，我们就不得不做大量类型转化，这种工作没有什么技术含量，是个体力活而且很容易导致程序错误。</p>\n<p>servlet另一个作用就是构造response对象，让页面获得正确的响应，其实现代的浏览器是一个多媒体工具，文字，图片，视屏等等东西都可以在浏览器里显示，资源的不同就会导致http响应报文的差别，如果我们使用servlet开发就要根据资源的不同在java程序里用硬编码的形式处理，这样的程序很难复用，而且如果程序员对某种资源的处理理解不到位，就会导致问题的出现。</p>\n<p>而在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。</p>\n<p>servlet里还有两个重要的技术：监听器和过滤器，对于监听器在web开发里使用的场景比较少，都是一些十分特别的情况才会使用，大部分web开发里可以忽略它的使用，我们用的最多的监听器可能就是对ServletContext创建和销毁的监听器，ServletContext是整个web应用的全局对象，它和Web应用的生命周期绑定在一起，因此使用这个监听器对Web应用的全局信息进行初始化和销毁操作，例如spring容器的初始化操作。而过滤器方面，使用SpringMVC拦截器和Struts2一样，Spring MVC也可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器来实现特定的功能，自定义的拦截器必须实现HandlerInterceptor接口。</p>\n<p><strong>下面再谈谈spring</strong><br><br>spring技术可以说是java企业开发里最重要的技术，不过真的理解spring的作用和意义还真是一件麻烦的事情，很多人对spring理解其实都是停留在使用阶段（例如：声明式事务很好用等等），当今的spring技术生态环境里可谓是蔚为壮观，spring已经包罗万象，它的内容之多完全不亚于它的本源java语言了，而spring这么大的框都是建立在ioc和aop技术之上，只有深入理解了这两个技术我们才能明白为什么spring这个框能装的下那么多东西了。</p>\n<p>首先是ioc，ioc技术第一个解释叫做控制反转，它还有个解释就是依赖注入，这两个名字很难从字面理解，但是当你理解它的原理后就会发现它们的描述是何等准确。Ioc技术的本质就是构建对象的技术换句话说就是将一个类实例化成对象的技术，在java里实例化类通过new关键字进行的，每次new一个类都会产生一个新的实例对象，这么做视乎很浪费，有时这种浪费还挺危险，因为在程序开发时候我们常常只需要某个类永远只能产生一个的实例对象这个时候就得使用单例模式，此外在设计模式里还可以通过工厂方式产生对象，使用过spring的人看到上面的文字就知道了，spring里bean的定义就和上面的内容一一对应，scope属性single产生单例对象，prototype产生新对象，bean还可以通过工厂方式产生对象，可以说spring的bean就是制造对象的工具。面向对象编程里对象相当于显示生活中的一个实体，例如我们有个对象作用是完成打猎的操作，那么打猎这个对象内部包含两个辅助对象：人和枪，只有人和枪赋予了打猎这个对象，那么打猎对象才能完成打猎的操作，但是构建一个人和枪的对象并不是看起来那么简单，这里以枪为例，要创造一把枪我们需要金属，需要机床，需要子弹，而机床和子弹又是两个新对象，这些对象一个个相互嵌套相互关联，大伙试想下如果我们在java代码里构建一个枪的对象那是何其的复杂，假如我们要构造的不是简单的枪对象而是更加复杂的航空母舰，那么构造这个对象的成本之高是让人难以想象的，怎么来消除这种对象相互嵌套相互依赖的关系了？spring提供了一种方式，这种方式就是spring提供一个容器，我们在xml文件里定义各个对象的依赖关系，由容器完成对象的构建，当我们java代码里需要使用某个实例的时候就可以从容器里获取，那么对象的构建操作就被spring容器接管，所以它被称为控制反转，控制反转的意思就是本来属于java程序里构建对象的功能交由容器接管，依赖注入就是当程序要使用某个对象时候，容器会把它注入到程序里，这就叫做依赖注入。在java开发里我们想使用某个类提供的功能，有两种方式，一种就是构造一个新的类，新的类继承该类，另一种方式则是将某个类定义在新类里，那么两个类之间就建立一种关联关系，spring的ioc容器就是实现了这种关联关系（记住不是继承关系哦），那么某个类要被赋予到新类有哪些办法了？一般只有两种：一种就是通过构造函数，一种就是通过setXXX方式，这也是spring容器使用到了两种标准的注入方式。</p>\n<p>不管是上面说的继承方式，还是关联方式其实都是增强目标对象能力的开发手段，在设计模式里有一种代理模式，代理模式将继承模式和关联模式结合在一起使用，代理模式就是继承模式和关联模式的综合体，不过这个综合体的作用倒不是解决对象注入的问题，而是为具体操作对象找到一个保姆或者是秘书，这就和小说里的二号首长一样，这个二号首长对外代表了具体的实例对象，实例对象的入口和出口都是通过这个二号首长，因为具体的实例对象是一号首长，一号首长是要干大事的，所以一些事务性，重复性的工作例如泡茶，安排车子，这样的工作是不用劳烦一号首长的大驾，而是二号首长帮忙解决的，这就是aop的思想，aop解决程序开发里事务性，和核心业务无关的问题，但这些问题对于业务场景的实现是很有必要的，在实际开发里aop也是节省代码的一种方式。</p>\n<p>Spring的核心技术的作用本质就是一个 沟通机制，spring总是尽全力的让沟通的双方信息畅通，同时降低双方的沟通成本，在现实机构里一个善于沟通的人肯定是该公司的领导，很会沟通的领导能调动起各种资源的积极性，善于沟通的领导就会做到海纳百川，让各种不同人追随他，所以当今的spring就是一个大框，什么都可以往里装。</p>\n<p>Spring很像银行，它不能直接创造物质财富，但是一切资源都要通过它进行流通，它能控制经济发展的走向，回到程序的世界，spring的作用是被标榜为程序之间的解耦，spring能降低不同模块之间的耦合度，原因就是在程序开发里不同模块之间信息的沟通是通过对象传递完成的，而对象能否顺利传递就是要合理的构建好对象，而管理好对象的构建方式就能管理好对象传递，这就是spring给系统架构设计带来的好处。</p>\n<p>写啊写，找啊找，抄啊抄，结果搞了这么多。。。</p>\n","excerpt":"<p>今天被公司派到别的公司谈项目，刚去就先被面试了一波（原来是把我外包到别的公司做项目了 -。-），面试时候问了我一个问题，很简单，就是问我java开发web项目为什么要用spring,springmvc？<br><br>好吧，当时我人直接懵逼了，什么鬼问我这个！！不就是可以省去很多功夫让我们踏踏实实写业务代码嘛? <br><br></p>","more":"<br>当时就随便回答了一些，回到公司仔细想想，发现还有挺多可以想，可以讲的。我想起了之前项目的控制层从struts2转到springmvc，我就在想为什么我们现在做javaweb开发，要用struts2或者springMVC这样的框架，而不是使用servlet加jsp这样的技术呢？特别是现在我们web的前端页面都是使用freemaker这样的模板语言进行开发，抛弃了jsp，这样的选择又会给我们javaweb开发带来什么样的好处，延着这个问题的思路，我又发现新的疑问，为什么现在很多java企业级开发都会去选择spring框架，spring框架给我们开发的应用带来了什么？这么一想我人更加糊涂了，很难找带让自己完全信服的答案。<br><br>最终我发现，这些我认为<strong>“用”</strong>的很熟悉技术，其实还有很多让我陌生不解的地方，这些陌生和不解的地方也正是我是否能更高层次使用它们的关键。<p></p>\n<p> 首先，软件里有很多优秀的框架，有一种类型的框架，它的特点是建立在一个现有技术的基础上，提供和现有技术一样业务功能的技术框架，这个新的技术框架比原技术更加易用，更加健壮同时功能更加强大，例如常用的jQuery，以及上面提到的spring和springMVC（其实是一个啦），深究这些框架都是很复杂的，但是它们的优点其实只有一个：<strong>就是让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题</strong>。像jQuery，springMVC这类框架之所以优秀，就是它们在这点上做的太好了，以至于很多使用它的程序员都已经不清楚原有技术的真实面目，因此我们要将springmvc理解的更好，使用的更加熟练和深入，这里我们就要跳出springmvc的技术，到springmvc技术的源头servlet，仔细研究下servlet的特点，只有这样我们才能把springmvc框架学的更好（所以才那么多人看springmvc的源码学习吧）。</p>\n<p>先讲讲servlet吧，servlet的作用就是是接收浏览器传给服务端的请求（request），并将服务端处理完的响应（response）返回给用户的浏览器，浏览器和服务端之间通过http协议进行沟通，其过程是浏览器根据用户的选择将相关信息按http协议报文的规范组装请求的http报文，报文通过网络传输到指定的服务器，服务器通过特定的web容器接收这个报文信息，例如：tomcat，jetty，jboss这样的web容器，web容器会将http报文解析出来，如果是用户请求，最终解析出来的报文信息会用一个request对象存储起来，服务端使用这个request做完相应的处理后，服务端程序将结果信息封装到response对象里，然后将response对象交给web容器，web容器则把这个response对象转变为http协议的报文，并将报文回传给浏览器，浏览器最后解析这个响应报文，将最终结果展示给用户。</p>\n<p>而Web容器创造了servlet接口，servlet接口就是开发人员自己实现业务逻辑的地方，程序员开发servlet就好比做填空题，而填空题的语境或者说上下文提示就是由request和response对象，但是javaEE规范里的servlet接口很简单，就三个方法init，service和destory，但是这个接口太笼统了，所以规范里还提供了一个HttpServlet类，这个类根据http请求类型提供了doGet，doPost等方法，servlet接口最大的特点就是根据http协议的特点进行定义，因此做servlet开发时候如果使用者对http协议特点不是特别熟悉，都会碰到或多或少令人迷惑的问题，特别是碰到一些复杂特殊的请求时候：例如文件上传，返回特殊的文件格式到浏览器，这时候使用servlet开发就不是很方便了，servlet开发还有个问题可能大家常常被忽视，就是请求的数据的类型转化，http协议传输都是文本形式，到了web容器解析后也是文本类型，如果碰到货币，数字，日期这样的类型需要我们根据实际情况进行转化，如果页面传送的信息非常多，我们就不得不做大量类型转化，这种工作没有什么技术含量，是个体力活而且很容易导致程序错误。</p>\n<p>servlet另一个作用就是构造response对象，让页面获得正确的响应，其实现代的浏览器是一个多媒体工具，文字，图片，视屏等等东西都可以在浏览器里显示，资源的不同就会导致http响应报文的差别，如果我们使用servlet开发就要根据资源的不同在java程序里用硬编码的形式处理，这样的程序很难复用，而且如果程序员对某种资源的处理理解不到位，就会导致问题的出现。</p>\n<p>而在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。</p>\n<p>servlet里还有两个重要的技术：监听器和过滤器，对于监听器在web开发里使用的场景比较少，都是一些十分特别的情况才会使用，大部分web开发里可以忽略它的使用，我们用的最多的监听器可能就是对ServletContext创建和销毁的监听器，ServletContext是整个web应用的全局对象，它和Web应用的生命周期绑定在一起，因此使用这个监听器对Web应用的全局信息进行初始化和销毁操作，例如spring容器的初始化操作。而过滤器方面，使用SpringMVC拦截器和Struts2一样，Spring MVC也可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器来实现特定的功能，自定义的拦截器必须实现HandlerInterceptor接口。</p>\n<p><strong>下面再谈谈spring</strong><br><br>spring技术可以说是java企业开发里最重要的技术，不过真的理解spring的作用和意义还真是一件麻烦的事情，很多人对spring理解其实都是停留在使用阶段（例如：声明式事务很好用等等），当今的spring技术生态环境里可谓是蔚为壮观，spring已经包罗万象，它的内容之多完全不亚于它的本源java语言了，而spring这么大的框都是建立在ioc和aop技术之上，只有深入理解了这两个技术我们才能明白为什么spring这个框能装的下那么多东西了。</p>\n<p>首先是ioc，ioc技术第一个解释叫做控制反转，它还有个解释就是依赖注入，这两个名字很难从字面理解，但是当你理解它的原理后就会发现它们的描述是何等准确。Ioc技术的本质就是构建对象的技术换句话说就是将一个类实例化成对象的技术，在java里实例化类通过new关键字进行的，每次new一个类都会产生一个新的实例对象，这么做视乎很浪费，有时这种浪费还挺危险，因为在程序开发时候我们常常只需要某个类永远只能产生一个的实例对象这个时候就得使用单例模式，此外在设计模式里还可以通过工厂方式产生对象，使用过spring的人看到上面的文字就知道了，spring里bean的定义就和上面的内容一一对应，scope属性single产生单例对象，prototype产生新对象，bean还可以通过工厂方式产生对象，可以说spring的bean就是制造对象的工具。面向对象编程里对象相当于显示生活中的一个实体，例如我们有个对象作用是完成打猎的操作，那么打猎这个对象内部包含两个辅助对象：人和枪，只有人和枪赋予了打猎这个对象，那么打猎对象才能完成打猎的操作，但是构建一个人和枪的对象并不是看起来那么简单，这里以枪为例，要创造一把枪我们需要金属，需要机床，需要子弹，而机床和子弹又是两个新对象，这些对象一个个相互嵌套相互关联，大伙试想下如果我们在java代码里构建一个枪的对象那是何其的复杂，假如我们要构造的不是简单的枪对象而是更加复杂的航空母舰，那么构造这个对象的成本之高是让人难以想象的，怎么来消除这种对象相互嵌套相互依赖的关系了？spring提供了一种方式，这种方式就是spring提供一个容器，我们在xml文件里定义各个对象的依赖关系，由容器完成对象的构建，当我们java代码里需要使用某个实例的时候就可以从容器里获取，那么对象的构建操作就被spring容器接管，所以它被称为控制反转，控制反转的意思就是本来属于java程序里构建对象的功能交由容器接管，依赖注入就是当程序要使用某个对象时候，容器会把它注入到程序里，这就叫做依赖注入。在java开发里我们想使用某个类提供的功能，有两种方式，一种就是构造一个新的类，新的类继承该类，另一种方式则是将某个类定义在新类里，那么两个类之间就建立一种关联关系，spring的ioc容器就是实现了这种关联关系（记住不是继承关系哦），那么某个类要被赋予到新类有哪些办法了？一般只有两种：一种就是通过构造函数，一种就是通过setXXX方式，这也是spring容器使用到了两种标准的注入方式。</p>\n<p>不管是上面说的继承方式，还是关联方式其实都是增强目标对象能力的开发手段，在设计模式里有一种代理模式，代理模式将继承模式和关联模式结合在一起使用，代理模式就是继承模式和关联模式的综合体，不过这个综合体的作用倒不是解决对象注入的问题，而是为具体操作对象找到一个保姆或者是秘书，这就和小说里的二号首长一样，这个二号首长对外代表了具体的实例对象，实例对象的入口和出口都是通过这个二号首长，因为具体的实例对象是一号首长，一号首长是要干大事的，所以一些事务性，重复性的工作例如泡茶，安排车子，这样的工作是不用劳烦一号首长的大驾，而是二号首长帮忙解决的，这就是aop的思想，aop解决程序开发里事务性，和核心业务无关的问题，但这些问题对于业务场景的实现是很有必要的，在实际开发里aop也是节省代码的一种方式。</p>\n<p>Spring的核心技术的作用本质就是一个 沟通机制，spring总是尽全力的让沟通的双方信息畅通，同时降低双方的沟通成本，在现实机构里一个善于沟通的人肯定是该公司的领导，很会沟通的领导能调动起各种资源的积极性，善于沟通的领导就会做到海纳百川，让各种不同人追随他，所以当今的spring就是一个大框，什么都可以往里装。</p>\n<p>Spring很像银行，它不能直接创造物质财富，但是一切资源都要通过它进行流通，它能控制经济发展的走向，回到程序的世界，spring的作用是被标榜为程序之间的解耦，spring能降低不同模块之间的耦合度，原因就是在程序开发里不同模块之间信息的沟通是通过对象传递完成的，而对象能否顺利传递就是要合理的构建好对象，而管理好对象的构建方式就能管理好对象传递，这就是spring给系统架构设计带来的好处。</p>\n<p>写啊写，找啊找，抄啊抄，结果搞了这么多。。。</p>"},{"title":"关于多线程的饥饿和公平","date":"2017-02-18T12:02:02.000Z","_content":"\n偶然学习到多线程，看到多线程的饥饿和公平，觉得可以写点什么。<br>\n什么是饥饿什么是公平呢？如果一个线程因为CPU运行时间全部被其他线程抢走而得不到CPU运行时间，这种状态被称之为“饥饿”。而该线程被“饥饿致死”正是因为它得不到CPU运行时间的机会。解决饥饿的方案被称之为“公平性”，即所有线程均能公平地获得运行机会。<br>\n<!--more-->\n&nbsp;&nbsp;**首先我们要知道，什么原因导致了“饥饿”？在Java方面我觉的分为了三种情况:**<br>\n&nbsp;&nbsp;①.线程中高优先级的吞噬所有的低优先级的CPU时间。<br>\n&nbsp;&nbsp;你能为每个线程设置独自的线程优先级，优先级越高的线程获得的CPU时间越多，线程优先级值设置在1到10之间，而这些优先级值所表示行为的准确解释则依赖于你的应用运行平台。所以对大多数应用来说，你最好是不要改变其优先级值。<br>\n&nbsp;&nbsp;②线程被永久堵塞在一个等待进入同步块的状态<br>\n&nbsp;&nbsp;Java的同步代码区也是一个导致饥饿的因素。Java的同步代码区对哪个线程允许进入的次序没有任何保障。这就意味着理论上存在一个试图进入该同步区的线程处于被永久堵塞的风险，因为其他线程总是能持续地先于它获得访问，这即是“饥饿”问题，而一个线程被“饥饿致死”正是因为它得不到CPU运行时间的机会。<br>\n&nbsp;&nbsp;③.线程被永久堵塞在一个等待进入同步块的状态<br>\n&nbsp;&nbsp;如果多个线程处在wait()方法执行上，而对其调用notify()不会保证哪一个线程会获得唤醒，任何线程都有可能处于继续等待的状态。因此存在这样一个风险：一个等待线程从来得不到唤醒，因为其他等待线程总是能被获得唤醒。\n\n&nbsp;&nbsp;**如何在Java中实现公平？**\n无论哪里都不可能实现100%公平，所以我们只能提出比较好的方案来达到目的，首先可以通过同步结构来实现公平性的提高。<br>\n先来一段简单的代码：\n```\npublic class Synchronizer{  \n  public synchronized void doSynchronized(){  \n    //需要运行很长时间的某些代码\n  }    \n}  \n```\n&nbsp;&nbsp;如果有多个线程调用了doSynchronized()方法，在第一个获得访问的线程未完成前，其他线程将一直处于阻塞状态，而且在这种多线程被阻塞的场景下，接下来将是哪个线程获得访问是没有保障的。<br>\n&nbsp;&nbsp;**现在我们使用<font color=red>锁方式替代同步块</font>来试试:**<br>\n```\npublic class Synchronizer{  \n  Lock lock = new Lock();   \n  public void doSynchronized() throws InterruptedException{  \n    this.lock.lock();  //当前线程锁住lock对象  \n      //时间临界区\n    this.lock.unlock();  //当前线程释放lock对象上的锁  \n  }  \n}  \n```\n&nbsp;&nbsp;我们可以注意到doSynchronized()不再声明为synchronized，而是用lock.lock()和lock.unlock()来替代。\n下面是用Lock类做的一个实现:\n```\npublic class Lock{  \n  private boolean isLocked      = false;  //是否加过锁的信号  \n  private Thread  lockingThread = null;   //进行加锁的线程  \n  \n  public synchronized void lock() throws InterruptedException{  \n    while(isLocked){  //如果lock对象已被其他线程加锁了（线程已经退出了本lock()方法）  \n      wait();  //当前线程阻塞，它释放锁对象上的锁，其他线程可以再进入本lock()  \n    }  \n    isLocked = true;  //如果没加锁，则当前线程对锁对象加锁  \n    lockingThread = Thread.currentThread();  \n  }  \n \n  public synchronized void unlock(){  \n    if(this.lockingThread != Thread.currentThread()){  //如果调用lock()加锁的不是当前线程  \n      throw new IllegalMonitorStateException(  \n        \"所调用线程尚未锁定\");  \n    }  \n    isLocked = false;  //释放锁，标记为未加锁  \n    lockingThread = null;  \n    notify();  //通知阻塞在锁对象上的线程队列，唤醒其中某一个线程  \n  }  \n}  \n```\n&nbsp;&nbsp;注意到上面对Lock的实现，如果存在多线程并发访问lock()，这些线程将阻塞在对lock()方法的访问上。另外，如果isLocked=true时，表示锁已被锁上，这些线程将阻塞在while(isLocked)循环的wait()调用里面。要注意的是，当线程正在等待进入lock() 时，可以调用wait()释放其锁实例对应的同步锁，使得其他多个线程可以进入lock()方法，并调用wait()方法。<br>\n&nbsp;&nbsp;我们回头看doSynchronized()方法，可以看到在lock()和unlock()之间：一段代码将长时间运行，和进入lock()并调用wait()来比较的话。这意味着大部分时间用在等待进入锁和进入临界区的过程是用在wait()的等待中，而不是被阻塞在试图进入lock()方法中。<br>\n&nbsp;&nbsp;由于同步块不会对等待进入的多个线程谁能获得访问做任何保障，同样当调用notify()时，wait()也不会做保障一定能唤醒线程。因此这个版本的Lock类和doSynchronized()那个版本就保障公平性而言，没有任何区别。<br>\n&nbsp;&nbsp;但我们能改变这种情况。当前的Lock类版本调用自己的wait()方法，如果每个线程在不同的对象上调用wait()，那么只有一个线程会在该对象上调用wait()，Lock类可以决定哪个对象能对其调用notify()，因此能做到有效的选择唤醒哪个线程。<br>\n&nbsp;&nbsp;**下面看看如何把Lock类转变为公平锁FairLock**。<br>\n&nbsp;&nbsp;新的实现和之前的Lock类中的同步和wait()/notify()将会稍有不同。\n每一个调用lock()的线程都会进入一个队列，当解锁后，只有队列里的第一个线程被允许锁住FairLock实例，所有其它的线程都将处于等待状态，直到他们处于队列头部。\n```\npublic class FairLock {  \n    private boolean isLocked = false;  //是否加锁的信号  \n    private Thread lockingThread = null;   //加锁的线程  \n    private List<QueueObject> waitingThreads =  \n            new ArrayList<QueueObject>();   //信号量队列  \n  \n  public void lock() throws InterruptedException{  //多个线程可同时进入  \n    QueueObject queueObject = new QueueObject();  //局部对象，线程安全  \n    boolean isLockedForThisThread = true;  //是否为当前线程加锁  \n    synchronized(this){  //将当前线程（用信号量）推入队列  \n        waitingThreads.add(queueObject);  \n    }  \n  \n    while(isLockedForThisThread){  \n        synchronized(this){  //加锁操作需要同步  \n          //锁状态依然被检查和设置，以避免出现滑漏条件  \n          isLockedForThisThread = isLocked || waitingThreads.get(0) != queueObject;  \n          if(!isLockedForThisThread){ //如果对象未加锁且队列头部是当前线程  \n              isLocked = true; //加锁  \n              waitingThreads.remove(queueObject); //从队列中移除当前线程  \n              lockingThread = Thread.currentThread(); return;   \n          }   \n        }   \n        try{ //放在同步块之外，避免monitor嵌套锁死   \n            queueObject.doWait(); //监视器对象（持有信号量isNotified）等待  \n        }catch(InterruptedException e){   \n           synchronized(this) { waitingThreads.remove(queueObject); }   \n            throw e;   \n        }   \n    }   \n  }   \n  \n  public synchronized void unlock(){   \n      if(this.lockingThread != Thread.currentThread()){ //加锁的不是当前线程   \n          throw new IllegalMonitorStateException( \"该线程尚未锁\");   \n      }   \n      isLocked = false; //解锁   \n      lockingThread = null;   \n      if(waitingThreads.size() > 0){ //唤醒第一个线程   \n          waitingThreads.get(0).doNotify();   \n      }   \n  }  \n}  \n\n```\n```\npublic class QueueObject {  \n  \n  private boolean isNotified = false;  \n  \n  public synchronized void doWait() throws InterruptedException {  \n    while(!isNotified){  \n        this.wait();  \n    }  \n    this.isNotified = false;  \n  }  \n  \n  public synchronized void doNotify() {  \n    this.isNotified = true;  \n    this.notify();  \n  }  \n  \n  public boolean equals(Object o) {  \n    return this == o;  \n  }  \n}  \n```\n&nbsp;&nbsp;首先注意到lock()方法不再声明为synchronized，取而代之的是对必需同步的代码，在synchronized中进行嵌套。<br>\n&nbsp;&nbsp;FairLock新创建了一个QueueObject的实例，并对每个调用lock()的线程都将其QueueObject实例推入队列。调用unlock()的线程将从队列头部获取QueueObject，并对其调用doNotify()，以唤醒在该对象上等待的线程。通过这种方式，在同一时间仅有一个等待线程获得唤醒，而不是所有的等待线程。这也是实现FairLock公平性的核心所在。<br>\n&nbsp;&nbsp;请注意，<font color=red>在同一个同步块中，锁状态依然被检查和设置，以避免出现滑漏条件</font>。<br>\n&nbsp;&nbsp;还需注意到，QueueObject实际是一个semaphore。doWait()和doNotify()方法在QueueObject中保存着信号。这样做以避免一个线程在调用queueObject.doWait()之前被另一个调用unlock()并随之调用queueObject.doNotify()的线程重入，从而导致信号丢失。queueObject.doWait()调用放置在synchronized(this)块之外，以避免被monitor嵌套锁死，所以另外的线程可以进入unlock()来解锁，只要当没有线程在lock方法的synchronized(this)块中执行即可。<br>\n&nbsp;&nbsp;最后，注意到queueObject.doWait()在try – catch块中是怎样调用的。在InterruptedException抛出的情况下，线程得以离开lock()，并需让它从队列中移除。<br>\n**性能考虑<br>**\n&nbsp;&nbsp;如果比较Lock和FairLock类，你会注意到在FairLock类中lock()和unlock()还有更多需要深入的地方。这些额外的代码会导致FairLock的同步机制实现比Lock要稍微慢些。究竟存在多少影响，还依赖于应用在FairLock临界区执行的时长。执行时长越大，FairLock带来的负担影响就越小，当然这也和代码执行的频繁度相关。\n","source":"_posts/关于多线程的饥饿和公平.md","raw":"---\ntitle: 关于多线程的饥饿和公平\ndate: 2017-02-18 20:02:02\ncategories: Java二三事\ntags: \n\t- 多线程\n\t- 饥饿\n\t- 公平\n---\n\n偶然学习到多线程，看到多线程的饥饿和公平，觉得可以写点什么。<br>\n什么是饥饿什么是公平呢？如果一个线程因为CPU运行时间全部被其他线程抢走而得不到CPU运行时间，这种状态被称之为“饥饿”。而该线程被“饥饿致死”正是因为它得不到CPU运行时间的机会。解决饥饿的方案被称之为“公平性”，即所有线程均能公平地获得运行机会。<br>\n<!--more-->\n&nbsp;&nbsp;**首先我们要知道，什么原因导致了“饥饿”？在Java方面我觉的分为了三种情况:**<br>\n&nbsp;&nbsp;①.线程中高优先级的吞噬所有的低优先级的CPU时间。<br>\n&nbsp;&nbsp;你能为每个线程设置独自的线程优先级，优先级越高的线程获得的CPU时间越多，线程优先级值设置在1到10之间，而这些优先级值所表示行为的准确解释则依赖于你的应用运行平台。所以对大多数应用来说，你最好是不要改变其优先级值。<br>\n&nbsp;&nbsp;②线程被永久堵塞在一个等待进入同步块的状态<br>\n&nbsp;&nbsp;Java的同步代码区也是一个导致饥饿的因素。Java的同步代码区对哪个线程允许进入的次序没有任何保障。这就意味着理论上存在一个试图进入该同步区的线程处于被永久堵塞的风险，因为其他线程总是能持续地先于它获得访问，这即是“饥饿”问题，而一个线程被“饥饿致死”正是因为它得不到CPU运行时间的机会。<br>\n&nbsp;&nbsp;③.线程被永久堵塞在一个等待进入同步块的状态<br>\n&nbsp;&nbsp;如果多个线程处在wait()方法执行上，而对其调用notify()不会保证哪一个线程会获得唤醒，任何线程都有可能处于继续等待的状态。因此存在这样一个风险：一个等待线程从来得不到唤醒，因为其他等待线程总是能被获得唤醒。\n\n&nbsp;&nbsp;**如何在Java中实现公平？**\n无论哪里都不可能实现100%公平，所以我们只能提出比较好的方案来达到目的，首先可以通过同步结构来实现公平性的提高。<br>\n先来一段简单的代码：\n```\npublic class Synchronizer{  \n  public synchronized void doSynchronized(){  \n    //需要运行很长时间的某些代码\n  }    \n}  \n```\n&nbsp;&nbsp;如果有多个线程调用了doSynchronized()方法，在第一个获得访问的线程未完成前，其他线程将一直处于阻塞状态，而且在这种多线程被阻塞的场景下，接下来将是哪个线程获得访问是没有保障的。<br>\n&nbsp;&nbsp;**现在我们使用<font color=red>锁方式替代同步块</font>来试试:**<br>\n```\npublic class Synchronizer{  \n  Lock lock = new Lock();   \n  public void doSynchronized() throws InterruptedException{  \n    this.lock.lock();  //当前线程锁住lock对象  \n      //时间临界区\n    this.lock.unlock();  //当前线程释放lock对象上的锁  \n  }  \n}  \n```\n&nbsp;&nbsp;我们可以注意到doSynchronized()不再声明为synchronized，而是用lock.lock()和lock.unlock()来替代。\n下面是用Lock类做的一个实现:\n```\npublic class Lock{  \n  private boolean isLocked      = false;  //是否加过锁的信号  \n  private Thread  lockingThread = null;   //进行加锁的线程  \n  \n  public synchronized void lock() throws InterruptedException{  \n    while(isLocked){  //如果lock对象已被其他线程加锁了（线程已经退出了本lock()方法）  \n      wait();  //当前线程阻塞，它释放锁对象上的锁，其他线程可以再进入本lock()  \n    }  \n    isLocked = true;  //如果没加锁，则当前线程对锁对象加锁  \n    lockingThread = Thread.currentThread();  \n  }  \n \n  public synchronized void unlock(){  \n    if(this.lockingThread != Thread.currentThread()){  //如果调用lock()加锁的不是当前线程  \n      throw new IllegalMonitorStateException(  \n        \"所调用线程尚未锁定\");  \n    }  \n    isLocked = false;  //释放锁，标记为未加锁  \n    lockingThread = null;  \n    notify();  //通知阻塞在锁对象上的线程队列，唤醒其中某一个线程  \n  }  \n}  \n```\n&nbsp;&nbsp;注意到上面对Lock的实现，如果存在多线程并发访问lock()，这些线程将阻塞在对lock()方法的访问上。另外，如果isLocked=true时，表示锁已被锁上，这些线程将阻塞在while(isLocked)循环的wait()调用里面。要注意的是，当线程正在等待进入lock() 时，可以调用wait()释放其锁实例对应的同步锁，使得其他多个线程可以进入lock()方法，并调用wait()方法。<br>\n&nbsp;&nbsp;我们回头看doSynchronized()方法，可以看到在lock()和unlock()之间：一段代码将长时间运行，和进入lock()并调用wait()来比较的话。这意味着大部分时间用在等待进入锁和进入临界区的过程是用在wait()的等待中，而不是被阻塞在试图进入lock()方法中。<br>\n&nbsp;&nbsp;由于同步块不会对等待进入的多个线程谁能获得访问做任何保障，同样当调用notify()时，wait()也不会做保障一定能唤醒线程。因此这个版本的Lock类和doSynchronized()那个版本就保障公平性而言，没有任何区别。<br>\n&nbsp;&nbsp;但我们能改变这种情况。当前的Lock类版本调用自己的wait()方法，如果每个线程在不同的对象上调用wait()，那么只有一个线程会在该对象上调用wait()，Lock类可以决定哪个对象能对其调用notify()，因此能做到有效的选择唤醒哪个线程。<br>\n&nbsp;&nbsp;**下面看看如何把Lock类转变为公平锁FairLock**。<br>\n&nbsp;&nbsp;新的实现和之前的Lock类中的同步和wait()/notify()将会稍有不同。\n每一个调用lock()的线程都会进入一个队列，当解锁后，只有队列里的第一个线程被允许锁住FairLock实例，所有其它的线程都将处于等待状态，直到他们处于队列头部。\n```\npublic class FairLock {  \n    private boolean isLocked = false;  //是否加锁的信号  \n    private Thread lockingThread = null;   //加锁的线程  \n    private List<QueueObject> waitingThreads =  \n            new ArrayList<QueueObject>();   //信号量队列  \n  \n  public void lock() throws InterruptedException{  //多个线程可同时进入  \n    QueueObject queueObject = new QueueObject();  //局部对象，线程安全  \n    boolean isLockedForThisThread = true;  //是否为当前线程加锁  \n    synchronized(this){  //将当前线程（用信号量）推入队列  \n        waitingThreads.add(queueObject);  \n    }  \n  \n    while(isLockedForThisThread){  \n        synchronized(this){  //加锁操作需要同步  \n          //锁状态依然被检查和设置，以避免出现滑漏条件  \n          isLockedForThisThread = isLocked || waitingThreads.get(0) != queueObject;  \n          if(!isLockedForThisThread){ //如果对象未加锁且队列头部是当前线程  \n              isLocked = true; //加锁  \n              waitingThreads.remove(queueObject); //从队列中移除当前线程  \n              lockingThread = Thread.currentThread(); return;   \n          }   \n        }   \n        try{ //放在同步块之外，避免monitor嵌套锁死   \n            queueObject.doWait(); //监视器对象（持有信号量isNotified）等待  \n        }catch(InterruptedException e){   \n           synchronized(this) { waitingThreads.remove(queueObject); }   \n            throw e;   \n        }   \n    }   \n  }   \n  \n  public synchronized void unlock(){   \n      if(this.lockingThread != Thread.currentThread()){ //加锁的不是当前线程   \n          throw new IllegalMonitorStateException( \"该线程尚未锁\");   \n      }   \n      isLocked = false; //解锁   \n      lockingThread = null;   \n      if(waitingThreads.size() > 0){ //唤醒第一个线程   \n          waitingThreads.get(0).doNotify();   \n      }   \n  }  \n}  \n\n```\n```\npublic class QueueObject {  \n  \n  private boolean isNotified = false;  \n  \n  public synchronized void doWait() throws InterruptedException {  \n    while(!isNotified){  \n        this.wait();  \n    }  \n    this.isNotified = false;  \n  }  \n  \n  public synchronized void doNotify() {  \n    this.isNotified = true;  \n    this.notify();  \n  }  \n  \n  public boolean equals(Object o) {  \n    return this == o;  \n  }  \n}  \n```\n&nbsp;&nbsp;首先注意到lock()方法不再声明为synchronized，取而代之的是对必需同步的代码，在synchronized中进行嵌套。<br>\n&nbsp;&nbsp;FairLock新创建了一个QueueObject的实例，并对每个调用lock()的线程都将其QueueObject实例推入队列。调用unlock()的线程将从队列头部获取QueueObject，并对其调用doNotify()，以唤醒在该对象上等待的线程。通过这种方式，在同一时间仅有一个等待线程获得唤醒，而不是所有的等待线程。这也是实现FairLock公平性的核心所在。<br>\n&nbsp;&nbsp;请注意，<font color=red>在同一个同步块中，锁状态依然被检查和设置，以避免出现滑漏条件</font>。<br>\n&nbsp;&nbsp;还需注意到，QueueObject实际是一个semaphore。doWait()和doNotify()方法在QueueObject中保存着信号。这样做以避免一个线程在调用queueObject.doWait()之前被另一个调用unlock()并随之调用queueObject.doNotify()的线程重入，从而导致信号丢失。queueObject.doWait()调用放置在synchronized(this)块之外，以避免被monitor嵌套锁死，所以另外的线程可以进入unlock()来解锁，只要当没有线程在lock方法的synchronized(this)块中执行即可。<br>\n&nbsp;&nbsp;最后，注意到queueObject.doWait()在try – catch块中是怎样调用的。在InterruptedException抛出的情况下，线程得以离开lock()，并需让它从队列中移除。<br>\n**性能考虑<br>**\n&nbsp;&nbsp;如果比较Lock和FairLock类，你会注意到在FairLock类中lock()和unlock()还有更多需要深入的地方。这些额外的代码会导致FairLock的同步机制实现比Lock要稍微慢些。究竟存在多少影响，还依赖于应用在FairLock临界区执行的时长。执行时长越大，FairLock带来的负担影响就越小，当然这也和代码执行的频繁度相关。\n","slug":"关于多线程的饥饿和公平","published":1,"updated":"2017-02-18T12:04:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kg6003crhsovekcvxah","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>偶然学习到多线程，看到多线程的饥饿和公平，觉得可以写点什么。<br><br>什么是饥饿什么是公平呢？如果一个线程因为CPU运行时间全部被其他线程抢走而得不到CPU运行时间，这种状态被称之为“饥饿”。而该线程被“饥饿致死”正是因为它得不到CPU运行时间的机会。解决饥饿的方案被称之为“公平性”，即所有线程均能公平地获得运行机会。<br><br><a id=\"more\"></a><br>&nbsp;&nbsp;<strong>首先我们要知道，什么原因导致了“饥饿”？在Java方面我觉的分为了三种情况:</strong><br><br>&nbsp;&nbsp;①.线程中高优先级的吞噬所有的低优先级的CPU时间。<br><br>&nbsp;&nbsp;你能为每个线程设置独自的线程优先级，优先级越高的线程获得的CPU时间越多，线程优先级值设置在1到10之间，而这些优先级值所表示行为的准确解释则依赖于你的应用运行平台。所以对大多数应用来说，你最好是不要改变其优先级值。<br><br>&nbsp;&nbsp;②线程被永久堵塞在一个等待进入同步块的状态<br><br>&nbsp;&nbsp;Java的同步代码区也是一个导致饥饿的因素。Java的同步代码区对哪个线程允许进入的次序没有任何保障。这就意味着理论上存在一个试图进入该同步区的线程处于被永久堵塞的风险，因为其他线程总是能持续地先于它获得访问，这即是“饥饿”问题，而一个线程被“饥饿致死”正是因为它得不到CPU运行时间的机会。<br><br>&nbsp;&nbsp;③.线程被永久堵塞在一个等待进入同步块的状态<br><br>&nbsp;&nbsp;如果多个线程处在wait()方法执行上，而对其调用notify()不会保证哪一个线程会获得唤醒，任何线程都有可能处于继续等待的状态。因此存在这样一个风险：一个等待线程从来得不到唤醒，因为其他等待线程总是能被获得唤醒。</p>\n<p>&nbsp;&nbsp;<strong>如何在Java中实现公平？</strong><br>无论哪里都不可能实现100%公平，所以我们只能提出比较好的方案来达到目的，首先可以通过同步结构来实现公平性的提高。<br><br>先来一段简单的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Synchronizer</span></span>&#123;  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doSynchronized</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//需要运行很长时间的某些代码</span></div><div class=\"line\">  &#125;    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&nbsp;&nbsp;如果有多个线程调用了doSynchronized()方法，在第一个获得访问的线程未完成前，其他线程将一直处于阻塞状态，而且在这种多线程被阻塞的场景下，接下来将是哪个线程获得访问是没有保障的。<br><br>&nbsp;&nbsp;<strong>现在我们使用<font color=\"red\">锁方式替代同步块</font>来试试:</strong><br><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Synchronizer</span>&#123;  </div><div class=\"line\">  Lock <span class=\"keyword\">lock</span> = <span class=\"keyword\">new</span> Lock();   </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSynchronized</span>(<span class=\"params\"></span>) throws InterruptedException</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.<span class=\"keyword\">lock</span>.<span class=\"keyword\">lock</span>();  <span class=\"comment\">//当前线程锁住lock对象  </span></div><div class=\"line\">      <span class=\"comment\">//时间临界区</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.<span class=\"keyword\">lock</span>.unlock();  <span class=\"comment\">//当前线程释放lock对象上的锁  </span></div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&nbsp;&nbsp;我们可以注意到doSynchronized()不再声明为synchronized，而是用lock.lock()和lock.unlock()来替代。<br>下面是用Lock类做的一个实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lock</span></span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isLocked      = <span class=\"keyword\">false</span>;  <span class=\"comment\">//是否加过锁的信号  </span></div><div class=\"line\">  <span class=\"keyword\">private</span> Thread  lockingThread = <span class=\"keyword\">null</span>;   <span class=\"comment\">//进行加锁的线程  </span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">while</span>(isLocked)&#123;  <span class=\"comment\">//如果lock对象已被其他线程加锁了（线程已经退出了本lock()方法）  </span></div><div class=\"line\">      wait();  <span class=\"comment\">//当前线程阻塞，它释放锁对象上的锁，其他线程可以再进入本lock()  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    isLocked = <span class=\"keyword\">true</span>;  <span class=\"comment\">//如果没加锁，则当前线程对锁对象加锁  </span></div><div class=\"line\">    lockingThread = Thread.currentThread();  </div><div class=\"line\">  &#125;  </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.lockingThread != Thread.currentThread())&#123;  <span class=\"comment\">//如果调用lock()加锁的不是当前线程  </span></div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalMonitorStateException(  </div><div class=\"line\">        <span class=\"string\">\"所调用线程尚未锁定\"</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    isLocked = <span class=\"keyword\">false</span>;  <span class=\"comment\">//释放锁，标记为未加锁  </span></div><div class=\"line\">    lockingThread = <span class=\"keyword\">null</span>;  </div><div class=\"line\">    notify();  <span class=\"comment\">//通知阻塞在锁对象上的线程队列，唤醒其中某一个线程  </span></div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&nbsp;&nbsp;注意到上面对Lock的实现，如果存在多线程并发访问lock()，这些线程将阻塞在对lock()方法的访问上。另外，如果isLocked=true时，表示锁已被锁上，这些线程将阻塞在while(isLocked)循环的wait()调用里面。要注意的是，当线程正在等待进入lock() 时，可以调用wait()释放其锁实例对应的同步锁，使得其他多个线程可以进入lock()方法，并调用wait()方法。<br><br>&nbsp;&nbsp;我们回头看doSynchronized()方法，可以看到在lock()和unlock()之间：一段代码将长时间运行，和进入lock()并调用wait()来比较的话。这意味着大部分时间用在等待进入锁和进入临界区的过程是用在wait()的等待中，而不是被阻塞在试图进入lock()方法中。<br><br>&nbsp;&nbsp;由于同步块不会对等待进入的多个线程谁能获得访问做任何保障，同样当调用notify()时，wait()也不会做保障一定能唤醒线程。因此这个版本的Lock类和doSynchronized()那个版本就保障公平性而言，没有任何区别。<br><br>&nbsp;&nbsp;但我们能改变这种情况。当前的Lock类版本调用自己的wait()方法，如果每个线程在不同的对象上调用wait()，那么只有一个线程会在该对象上调用wait()，Lock类可以决定哪个对象能对其调用notify()，因此能做到有效的选择唤醒哪个线程。<br><br>&nbsp;&nbsp;<strong>下面看看如何把Lock类转变为公平锁FairLock</strong>。<br><br>&nbsp;&nbsp;新的实现和之前的Lock类中的同步和wait()/notify()将会稍有不同。<br>每一个调用lock()的线程都会进入一个队列，当解锁后，只有队列里的第一个线程被允许锁住FairLock实例，所有其它的线程都将处于等待状态，直到他们处于队列头部。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FairLock</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isLocked = <span class=\"keyword\">false</span>;  <span class=\"comment\">//是否加锁的信号  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> Thread lockingThread = <span class=\"keyword\">null</span>;   <span class=\"comment\">//加锁的线程  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;QueueObject&gt; waitingThreads =  </div><div class=\"line\">            <span class=\"keyword\">new</span> ArrayList&lt;QueueObject&gt;();   <span class=\"comment\">//信号量队列  </span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;  <span class=\"comment\">//多个线程可同时进入  </span></div><div class=\"line\">    QueueObject queueObject = <span class=\"keyword\">new</span> QueueObject();  <span class=\"comment\">//局部对象，线程安全  </span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> isLockedForThisThread = <span class=\"keyword\">true</span>;  <span class=\"comment\">//是否为当前线程加锁  </span></div><div class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;  <span class=\"comment\">//将当前线程（用信号量）推入队列  </span></div><div class=\"line\">        waitingThreads.add(queueObject);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">while</span>(isLockedForThisThread)&#123;  </div><div class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;  <span class=\"comment\">//加锁操作需要同步  </span></div><div class=\"line\">          <span class=\"comment\">//锁状态依然被检查和设置，以避免出现滑漏条件  </span></div><div class=\"line\">          isLockedForThisThread = isLocked || waitingThreads.get(<span class=\"number\">0</span>) != queueObject;  </div><div class=\"line\">          <span class=\"keyword\">if</span>(!isLockedForThisThread)&#123; <span class=\"comment\">//如果对象未加锁且队列头部是当前线程  </span></div><div class=\"line\">              isLocked = <span class=\"keyword\">true</span>; <span class=\"comment\">//加锁  </span></div><div class=\"line\">              waitingThreads.remove(queueObject); <span class=\"comment\">//从队列中移除当前线程  </span></div><div class=\"line\">              lockingThread = Thread.currentThread(); <span class=\"keyword\">return</span>;   </div><div class=\"line\">          &#125;   </div><div class=\"line\">        &#125;   </div><div class=\"line\">        <span class=\"keyword\">try</span>&#123; <span class=\"comment\">//放在同步块之外，避免monitor嵌套锁死   </span></div><div class=\"line\">            queueObject.doWait(); <span class=\"comment\">//监视器对象（持有信号量isNotified）等待  </span></div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(InterruptedException e)&#123;   </div><div class=\"line\">           <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123; waitingThreads.remove(queueObject); &#125;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> e;   </div><div class=\"line\">        &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;   </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span></span>&#123;   </div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.lockingThread != Thread.currentThread())&#123; <span class=\"comment\">//加锁的不是当前线程   </span></div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalMonitorStateException( <span class=\"string\">\"该线程尚未锁\"</span>);   </div><div class=\"line\">      &#125;   </div><div class=\"line\">      isLocked = <span class=\"keyword\">false</span>; <span class=\"comment\">//解锁   </span></div><div class=\"line\">      lockingThread = <span class=\"keyword\">null</span>;   </div><div class=\"line\">      <span class=\"keyword\">if</span>(waitingThreads.size() &gt; <span class=\"number\">0</span>)&#123; <span class=\"comment\">//唤醒第一个线程   </span></div><div class=\"line\">          waitingThreads.get(<span class=\"number\">0</span>).doNotify();   </div><div class=\"line\">      &#125;   </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueueObject</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isNotified = <span class=\"keyword\">false</span>;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doWait</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">while</span>(!isNotified)&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.wait();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.isNotified = <span class=\"keyword\">false</span>;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doNotify</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.isNotified = <span class=\"keyword\">true</span>;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.notify();  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> == o;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;首先注意到lock()方法不再声明为synchronized，取而代之的是对必需同步的代码，在synchronized中进行嵌套。<br><br>&nbsp;&nbsp;FairLock新创建了一个QueueObject的实例，并对每个调用lock()的线程都将其QueueObject实例推入队列。调用unlock()的线程将从队列头部获取QueueObject，并对其调用doNotify()，以唤醒在该对象上等待的线程。通过这种方式，在同一时间仅有一个等待线程获得唤醒，而不是所有的等待线程。这也是实现FairLock公平性的核心所在。<br><br>&nbsp;&nbsp;请注意，<font color=\"red\">在同一个同步块中，锁状态依然被检查和设置，以避免出现滑漏条件</font>。<br><br>&nbsp;&nbsp;还需注意到，QueueObject实际是一个semaphore。doWait()和doNotify()方法在QueueObject中保存着信号。这样做以避免一个线程在调用queueObject.doWait()之前被另一个调用unlock()并随之调用queueObject.doNotify()的线程重入，从而导致信号丢失。queueObject.doWait()调用放置在synchronized(this)块之外，以避免被monitor嵌套锁死，所以另外的线程可以进入unlock()来解锁，只要当没有线程在lock方法的synchronized(this)块中执行即可。<br><br>&nbsp;&nbsp;最后，注意到queueObject.doWait()在try – catch块中是怎样调用的。在InterruptedException抛出的情况下，线程得以离开lock()，并需让它从队列中移除。<br><br><strong>性能考虑<br></strong><br>&nbsp;&nbsp;如果比较Lock和FairLock类，你会注意到在FairLock类中lock()和unlock()还有更多需要深入的地方。这些额外的代码会导致FairLock的同步机制实现比Lock要稍微慢些。究竟存在多少影响，还依赖于应用在FairLock临界区执行的时长。执行时长越大，FairLock带来的负担影响就越小，当然这也和代码执行的频繁度相关。</p>\n","excerpt":"<p>偶然学习到多线程，看到多线程的饥饿和公平，觉得可以写点什么。<br><br>什么是饥饿什么是公平呢？如果一个线程因为CPU运行时间全部被其他线程抢走而得不到CPU运行时间，这种状态被称之为“饥饿”。而该线程被“饥饿致死”正是因为它得不到CPU运行时间的机会。解决饥饿的方案被称之为“公平性”，即所有线程均能公平地获得运行机会。<br><br></p>","more":"<br>&nbsp;&nbsp;<strong>首先我们要知道，什么原因导致了“饥饿”？在Java方面我觉的分为了三种情况:</strong><br><br>&nbsp;&nbsp;①.线程中高优先级的吞噬所有的低优先级的CPU时间。<br><br>&nbsp;&nbsp;你能为每个线程设置独自的线程优先级，优先级越高的线程获得的CPU时间越多，线程优先级值设置在1到10之间，而这些优先级值所表示行为的准确解释则依赖于你的应用运行平台。所以对大多数应用来说，你最好是不要改变其优先级值。<br><br>&nbsp;&nbsp;②线程被永久堵塞在一个等待进入同步块的状态<br><br>&nbsp;&nbsp;Java的同步代码区也是一个导致饥饿的因素。Java的同步代码区对哪个线程允许进入的次序没有任何保障。这就意味着理论上存在一个试图进入该同步区的线程处于被永久堵塞的风险，因为其他线程总是能持续地先于它获得访问，这即是“饥饿”问题，而一个线程被“饥饿致死”正是因为它得不到CPU运行时间的机会。<br><br>&nbsp;&nbsp;③.线程被永久堵塞在一个等待进入同步块的状态<br><br>&nbsp;&nbsp;如果多个线程处在wait()方法执行上，而对其调用notify()不会保证哪一个线程会获得唤醒，任何线程都有可能处于继续等待的状态。因此存在这样一个风险：一个等待线程从来得不到唤醒，因为其他等待线程总是能被获得唤醒。<p></p>\n<p>&nbsp;&nbsp;<strong>如何在Java中实现公平？</strong><br>无论哪里都不可能实现100%公平，所以我们只能提出比较好的方案来达到目的，首先可以通过同步结构来实现公平性的提高。<br><br>先来一段简单的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Synchronizer</span></span>&#123;  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doSynchronized</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//需要运行很长时间的某些代码</span></div><div class=\"line\">  &#125;    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&nbsp;&nbsp;如果有多个线程调用了doSynchronized()方法，在第一个获得访问的线程未完成前，其他线程将一直处于阻塞状态，而且在这种多线程被阻塞的场景下，接下来将是哪个线程获得访问是没有保障的。<br><br>&nbsp;&nbsp;<strong>现在我们使用<font color=\"red\">锁方式替代同步块</font>来试试:</strong><br><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Synchronizer</span>&#123;  </div><div class=\"line\">  Lock <span class=\"keyword\">lock</span> = <span class=\"keyword\">new</span> Lock();   </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSynchronized</span>(<span class=\"params\"></span>) throws InterruptedException</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.<span class=\"keyword\">lock</span>.<span class=\"keyword\">lock</span>();  <span class=\"comment\">//当前线程锁住lock对象  </span></div><div class=\"line\">      <span class=\"comment\">//时间临界区</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.<span class=\"keyword\">lock</span>.unlock();  <span class=\"comment\">//当前线程释放lock对象上的锁  </span></div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&nbsp;&nbsp;我们可以注意到doSynchronized()不再声明为synchronized，而是用lock.lock()和lock.unlock()来替代。<br>下面是用Lock类做的一个实现:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lock</span></span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isLocked      = <span class=\"keyword\">false</span>;  <span class=\"comment\">//是否加过锁的信号  </span></div><div class=\"line\">  <span class=\"keyword\">private</span> Thread  lockingThread = <span class=\"keyword\">null</span>;   <span class=\"comment\">//进行加锁的线程  </span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">while</span>(isLocked)&#123;  <span class=\"comment\">//如果lock对象已被其他线程加锁了（线程已经退出了本lock()方法）  </span></div><div class=\"line\">      wait();  <span class=\"comment\">//当前线程阻塞，它释放锁对象上的锁，其他线程可以再进入本lock()  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    isLocked = <span class=\"keyword\">true</span>;  <span class=\"comment\">//如果没加锁，则当前线程对锁对象加锁  </span></div><div class=\"line\">    lockingThread = Thread.currentThread();  </div><div class=\"line\">  &#125;  </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.lockingThread != Thread.currentThread())&#123;  <span class=\"comment\">//如果调用lock()加锁的不是当前线程  </span></div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalMonitorStateException(  </div><div class=\"line\">        <span class=\"string\">\"所调用线程尚未锁定\"</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    isLocked = <span class=\"keyword\">false</span>;  <span class=\"comment\">//释放锁，标记为未加锁  </span></div><div class=\"line\">    lockingThread = <span class=\"keyword\">null</span>;  </div><div class=\"line\">    notify();  <span class=\"comment\">//通知阻塞在锁对象上的线程队列，唤醒其中某一个线程  </span></div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&nbsp;&nbsp;注意到上面对Lock的实现，如果存在多线程并发访问lock()，这些线程将阻塞在对lock()方法的访问上。另外，如果isLocked=true时，表示锁已被锁上，这些线程将阻塞在while(isLocked)循环的wait()调用里面。要注意的是，当线程正在等待进入lock() 时，可以调用wait()释放其锁实例对应的同步锁，使得其他多个线程可以进入lock()方法，并调用wait()方法。<br><br>&nbsp;&nbsp;我们回头看doSynchronized()方法，可以看到在lock()和unlock()之间：一段代码将长时间运行，和进入lock()并调用wait()来比较的话。这意味着大部分时间用在等待进入锁和进入临界区的过程是用在wait()的等待中，而不是被阻塞在试图进入lock()方法中。<br><br>&nbsp;&nbsp;由于同步块不会对等待进入的多个线程谁能获得访问做任何保障，同样当调用notify()时，wait()也不会做保障一定能唤醒线程。因此这个版本的Lock类和doSynchronized()那个版本就保障公平性而言，没有任何区别。<br><br>&nbsp;&nbsp;但我们能改变这种情况。当前的Lock类版本调用自己的wait()方法，如果每个线程在不同的对象上调用wait()，那么只有一个线程会在该对象上调用wait()，Lock类可以决定哪个对象能对其调用notify()，因此能做到有效的选择唤醒哪个线程。<br><br>&nbsp;&nbsp;<strong>下面看看如何把Lock类转变为公平锁FairLock</strong>。<br><br>&nbsp;&nbsp;新的实现和之前的Lock类中的同步和wait()/notify()将会稍有不同。<br>每一个调用lock()的线程都会进入一个队列，当解锁后，只有队列里的第一个线程被允许锁住FairLock实例，所有其它的线程都将处于等待状态，直到他们处于队列头部。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FairLock</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isLocked = <span class=\"keyword\">false</span>;  <span class=\"comment\">//是否加锁的信号  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> Thread lockingThread = <span class=\"keyword\">null</span>;   <span class=\"comment\">//加锁的线程  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;QueueObject&gt; waitingThreads =  </div><div class=\"line\">            <span class=\"keyword\">new</span> ArrayList&lt;QueueObject&gt;();   <span class=\"comment\">//信号量队列  </span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;  <span class=\"comment\">//多个线程可同时进入  </span></div><div class=\"line\">    QueueObject queueObject = <span class=\"keyword\">new</span> QueueObject();  <span class=\"comment\">//局部对象，线程安全  </span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> isLockedForThisThread = <span class=\"keyword\">true</span>;  <span class=\"comment\">//是否为当前线程加锁  </span></div><div class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;  <span class=\"comment\">//将当前线程（用信号量）推入队列  </span></div><div class=\"line\">        waitingThreads.add(queueObject);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">while</span>(isLockedForThisThread)&#123;  </div><div class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;  <span class=\"comment\">//加锁操作需要同步  </span></div><div class=\"line\">          <span class=\"comment\">//锁状态依然被检查和设置，以避免出现滑漏条件  </span></div><div class=\"line\">          isLockedForThisThread = isLocked || waitingThreads.get(<span class=\"number\">0</span>) != queueObject;  </div><div class=\"line\">          <span class=\"keyword\">if</span>(!isLockedForThisThread)&#123; <span class=\"comment\">//如果对象未加锁且队列头部是当前线程  </span></div><div class=\"line\">              isLocked = <span class=\"keyword\">true</span>; <span class=\"comment\">//加锁  </span></div><div class=\"line\">              waitingThreads.remove(queueObject); <span class=\"comment\">//从队列中移除当前线程  </span></div><div class=\"line\">              lockingThread = Thread.currentThread(); <span class=\"keyword\">return</span>;   </div><div class=\"line\">          &#125;   </div><div class=\"line\">        &#125;   </div><div class=\"line\">        <span class=\"keyword\">try</span>&#123; <span class=\"comment\">//放在同步块之外，避免monitor嵌套锁死   </span></div><div class=\"line\">            queueObject.doWait(); <span class=\"comment\">//监视器对象（持有信号量isNotified）等待  </span></div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(InterruptedException e)&#123;   </div><div class=\"line\">           <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123; waitingThreads.remove(queueObject); &#125;   </div><div class=\"line\">            <span class=\"keyword\">throw</span> e;   </div><div class=\"line\">        &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">  &#125;   </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span></span>&#123;   </div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.lockingThread != Thread.currentThread())&#123; <span class=\"comment\">//加锁的不是当前线程   </span></div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalMonitorStateException( <span class=\"string\">\"该线程尚未锁\"</span>);   </div><div class=\"line\">      &#125;   </div><div class=\"line\">      isLocked = <span class=\"keyword\">false</span>; <span class=\"comment\">//解锁   </span></div><div class=\"line\">      lockingThread = <span class=\"keyword\">null</span>;   </div><div class=\"line\">      <span class=\"keyword\">if</span>(waitingThreads.size() &gt; <span class=\"number\">0</span>)&#123; <span class=\"comment\">//唤醒第一个线程   </span></div><div class=\"line\">          waitingThreads.get(<span class=\"number\">0</span>).doNotify();   </div><div class=\"line\">      &#125;   </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueueObject</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isNotified = <span class=\"keyword\">false</span>;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doWait</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">while</span>(!isNotified)&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.wait();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.isNotified = <span class=\"keyword\">false</span>;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doNotify</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.isNotified = <span class=\"keyword\">true</span>;  </div><div class=\"line\">    <span class=\"keyword\">this</span>.notify();  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> == o;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;首先注意到lock()方法不再声明为synchronized，取而代之的是对必需同步的代码，在synchronized中进行嵌套。<br><br>&nbsp;&nbsp;FairLock新创建了一个QueueObject的实例，并对每个调用lock()的线程都将其QueueObject实例推入队列。调用unlock()的线程将从队列头部获取QueueObject，并对其调用doNotify()，以唤醒在该对象上等待的线程。通过这种方式，在同一时间仅有一个等待线程获得唤醒，而不是所有的等待线程。这也是实现FairLock公平性的核心所在。<br><br>&nbsp;&nbsp;请注意，<font color=\"red\">在同一个同步块中，锁状态依然被检查和设置，以避免出现滑漏条件</font>。<br><br>&nbsp;&nbsp;还需注意到，QueueObject实际是一个semaphore。doWait()和doNotify()方法在QueueObject中保存着信号。这样做以避免一个线程在调用queueObject.doWait()之前被另一个调用unlock()并随之调用queueObject.doNotify()的线程重入，从而导致信号丢失。queueObject.doWait()调用放置在synchronized(this)块之外，以避免被monitor嵌套锁死，所以另外的线程可以进入unlock()来解锁，只要当没有线程在lock方法的synchronized(this)块中执行即可。<br><br>&nbsp;&nbsp;最后，注意到queueObject.doWait()在try – catch块中是怎样调用的。在InterruptedException抛出的情况下，线程得以离开lock()，并需让它从队列中移除。<br><br><strong>性能考虑<br></strong><br>&nbsp;&nbsp;如果比较Lock和FairLock类，你会注意到在FairLock类中lock()和unlock()还有更多需要深入的地方。这些额外的代码会导致FairLock的同步机制实现比Lock要稍微慢些。究竟存在多少影响，还依赖于应用在FairLock临界区执行的时长。执行时长越大，FairLock带来的负担影响就越小，当然这也和代码执行的频繁度相关。</p>"},{"title":"数据库系统分层优化","date":"2017-02-24T06:26:42.000Z","_content":"网上有丰富的数据库优化方案，但是大多都是零零碎碎，系统地介绍数据库优化的很少。笔者根据自己的经验，以及参考了其他高手的优化文章，整理一份系统的优化方案。\n\n数据库优化的目的是提高DB的工作效率，减少响应时间。基于此，笔者认为应该从如下四个层次来优化数据库性能。\n<!--more-->\n<li>硬件层面优化\n<li>操作系统/DBMS层面优化\n<li>DB设计层面优化\n<li>程序设计层面的优化\n\n>1. 硬件层面优化 \n该层面的优化是最底层的，包括内存、CPU、磁盘/磁盘阵列等硬件的优化。虽然可优化的点并不多，但是在整个数据库优化中不可或缺。\n2. 操作系统/DBMS层面的优化 \n包括DBMS的选择、缓存的设置、数据文件的存储位置及方法(连续存储/随机存储)、存储引擎的选择(MySQL里面会有多个引擎)、I/O优化(磁盘I/O、逻辑I/O)。该层面的优化内容相对不多，但是数据库优化的瓶颈一般都在这里。\n3. DB设计层面优化 \n该层面可优化的点很多，包括数据库范式、数据表结构、数据类型、视图、索引、表/字段冗余、表分割(水平分割及垂直分割、分类分割)、表触发器、命名等多方面，而且每个方面又有很多的知识点，这是数据库优化的基础。\n4. 程序设计层面优化 \n这里由程序员控制层面的优化。包括SQL语句、存储过程、临时表、业务逻辑、算法设计、运算符、条件顺序、数据库函数。这层的知识点比较散，而且多。程序员应该下功夫的地方。\n","source":"_posts/数据库系统分层优化.md","raw":"---\ntitle: 数据库系统分层优化\ndate: 2017-02-24 14:26:42\ncategories: 数据库那点事\ntags:\n\t- 优化\n---\n网上有丰富的数据库优化方案，但是大多都是零零碎碎，系统地介绍数据库优化的很少。笔者根据自己的经验，以及参考了其他高手的优化文章，整理一份系统的优化方案。\n\n数据库优化的目的是提高DB的工作效率，减少响应时间。基于此，笔者认为应该从如下四个层次来优化数据库性能。\n<!--more-->\n<li>硬件层面优化\n<li>操作系统/DBMS层面优化\n<li>DB设计层面优化\n<li>程序设计层面的优化\n\n>1. 硬件层面优化 \n该层面的优化是最底层的，包括内存、CPU、磁盘/磁盘阵列等硬件的优化。虽然可优化的点并不多，但是在整个数据库优化中不可或缺。\n2. 操作系统/DBMS层面的优化 \n包括DBMS的选择、缓存的设置、数据文件的存储位置及方法(连续存储/随机存储)、存储引擎的选择(MySQL里面会有多个引擎)、I/O优化(磁盘I/O、逻辑I/O)。该层面的优化内容相对不多，但是数据库优化的瓶颈一般都在这里。\n3. DB设计层面优化 \n该层面可优化的点很多，包括数据库范式、数据表结构、数据类型、视图、索引、表/字段冗余、表分割(水平分割及垂直分割、分类分割)、表触发器、命名等多方面，而且每个方面又有很多的知识点，这是数据库优化的基础。\n4. 程序设计层面优化 \n这里由程序员控制层面的优化。包括SQL语句、存储过程、临时表、业务逻辑、算法设计、运算符、条件顺序、数据库函数。这层的知识点比较散，而且多。程序员应该下功夫的地方。\n","slug":"数据库系统分层优化","published":1,"updated":"2017-02-24T06:28:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kg7003grhso4y5lph0w","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>网上有丰富的数据库优化方案，但是大多都是零零碎碎，系统地介绍数据库优化的很少。笔者根据自己的经验，以及参考了其他高手的优化文章，整理一份系统的优化方案。</p>\n<p>数据库优化的目的是提高DB的工作效率，减少响应时间。基于此，笔者认为应该从如下四个层次来优化数据库性能。<br><a id=\"more\"></a></p>\n<p><li>硬件层面优化</li></p>\n<p><li>操作系统/DBMS层面优化</li></p>\n<p><li>DB设计层面优化</li></p>\n<p><li>程序设计层面的优化</li></p>\n<blockquote>\n<ol>\n<li>硬件层面优化<br>该层面的优化是最底层的，包括内存、CPU、磁盘/磁盘阵列等硬件的优化。虽然可优化的点并不多，但是在整个数据库优化中不可或缺。</li>\n<li>操作系统/DBMS层面的优化<br>包括DBMS的选择、缓存的设置、数据文件的存储位置及方法(连续存储/随机存储)、存储引擎的选择(MySQL里面会有多个引擎)、I/O优化(磁盘I/O、逻辑I/O)。该层面的优化内容相对不多，但是数据库优化的瓶颈一般都在这里。</li>\n<li>DB设计层面优化<br>该层面可优化的点很多，包括数据库范式、数据表结构、数据类型、视图、索引、表/字段冗余、表分割(水平分割及垂直分割、分类分割)、表触发器、命名等多方面，而且每个方面又有很多的知识点，这是数据库优化的基础。</li>\n<li>程序设计层面优化<br>这里由程序员控制层面的优化。包括SQL语句、存储过程、临时表、业务逻辑、算法设计、运算符、条件顺序、数据库函数。这层的知识点比较散，而且多。程序员应该下功夫的地方。</li>\n</ol>\n</blockquote>\n","excerpt":"<p>网上有丰富的数据库优化方案，但是大多都是零零碎碎，系统地介绍数据库优化的很少。笔者根据自己的经验，以及参考了其他高手的优化文章，整理一份系统的优化方案。</p>\n<p>数据库优化的目的是提高DB的工作效率，减少响应时间。基于此，笔者认为应该从如下四个层次来优化数据库性能。<br></p>","more":"<p></p>\n<p><li>硬件层面优化</li></p>\n<p><li>操作系统/DBMS层面优化</li></p>\n<p><li>DB设计层面优化</li></p>\n<p><li>程序设计层面的优化</li></p>\n<blockquote>\n<ol>\n<li>硬件层面优化<br>该层面的优化是最底层的，包括内存、CPU、磁盘/磁盘阵列等硬件的优化。虽然可优化的点并不多，但是在整个数据库优化中不可或缺。</li>\n<li>操作系统/DBMS层面的优化<br>包括DBMS的选择、缓存的设置、数据文件的存储位置及方法(连续存储/随机存储)、存储引擎的选择(MySQL里面会有多个引擎)、I/O优化(磁盘I/O、逻辑I/O)。该层面的优化内容相对不多，但是数据库优化的瓶颈一般都在这里。</li>\n<li>DB设计层面优化<br>该层面可优化的点很多，包括数据库范式、数据表结构、数据类型、视图、索引、表/字段冗余、表分割(水平分割及垂直分割、分类分割)、表触发器、命名等多方面，而且每个方面又有很多的知识点，这是数据库优化的基础。</li>\n<li>程序设计层面优化<br>这里由程序员控制层面的优化。包括SQL语句、存储过程、临时表、业务逻辑、算法设计、运算符、条件顺序、数据库函数。这层的知识点比较散，而且多。程序员应该下功夫的地方。</li>\n</ol>\n</blockquote>"},{"title":"时间复杂度和空间复杂度详解","date":"2017-02-18T14:01:54.000Z","_content":"\n>没有挤公交来上班过，就不知道生活的压力有多大。\n\n<!--more-->\n算法的时间复杂度和空间复杂度合称为算法的复杂度。<br>\n1.时间复杂度\n（1）时间频度 一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了。并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。<br>\n（2）时间复杂度 在刚才提到的时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。但有时我们想知道它变化时呈现什么规律。为此，我们引入时间复杂度概念。 一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T（n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。<br>\n     时间频度不同，但时间复杂度可能相同。如：T(n)=n2+3n+4与T(n)=4n2+2n+1它们的频度不同，但时间复杂度相同，都为O(n2)。<br>\n    按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)，立方阶O(n3),...， k次方阶O(nk),指数阶O(2n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。<br>\n （3）最坏时间复杂度和平均时间复杂度 　最坏情况下的时间复杂度称最坏时间复杂度。一般不特别说明，讨论的时间复杂度均是最坏情况下的时间复杂度。 这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的上界，这就保证了算法的运行时间不会比任何更长。<br>\n     在最坏情况下的时间复杂度为T(n)=0(n)，它表示对于任何输入实例,该算法的运行时间不可能大于0(n)。 平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，算法的期望运行时间。<br>\n    指数阶0(2n)，显然，时间复杂度为指数阶0(2n)的算法效率极低，当n值稍大时就无法应用。<br>\n（4）求时间复杂度<br>\n【1】如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。<br>\n\n>x=91; y=100;\nwhile(y>0) if(x>100) {x=x-10;y--;} else x++;\n\n解答： T(n)=O(1)，\n这个程序看起来有点吓人，总共循环运行了1100次，但是我们看到n没有?\n没。这段程序的运行是和n无关的，\n就算它再循环一万年，我们也不管他，只是一个常数阶的函数\n\n【2】当有若干个循环语句时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。\n\n> x=1; \nfor(i=1;i<=n;i++) \n        for(j=1;j<=i;j++)\n           for(k=1;k<=j;k++)\n               x++; 　\n\n该程序段中频度最大的语句是(5)，内循环的执行次数虽然与问题规模n没有直接关系，但是却与外层循环的变量取值有关，而最外层循环的次数直接与n有关，因此可以从内层循环向外层分析语句(5)的执行次数：  则该程序段的时间复杂度为T(n)=O(n3/6+低次项)=O(n3)\n\n【3】算法的时间复杂度不仅仅依赖于问题的规模，还与输入实例的初始状态有关。\n在数值A[0..n-1]中查找给定值K的算法大致如下： \n\n>i=n-1;            \nwhile(i>=0&&(A[i]!=k))       \n      i--;        \nreturn i;      \n\n此算法中的语句(3)的频度不仅与问题规模n有关，还与输入实例中A的各元素取值及K的取值有关: ①若A中没有与K相等的元素，则语句(3)的频度f(n)=n； ②若A的最后一个元素等于K,则语句(3)的频度f(n)是常数0。\n（5）时间复杂度评价性能 \n有两个算法A1和A2求解同一问题，时间复杂度分别是T1(n)=100n2，T2(n)=5n3。（1）当输入量n＜20时，有T1(n)＞T2(n)，后者花费的时间较少。（2）随着问题规模n的增大，两个算法的时间开销之比5n3/100n2=n/20亦随着增大。即当问题规模较大时，算法A1比算法A2要有效地多。它们的渐近时间复杂度O(n2)和O(n3)从宏观上评价了这两个算法在时间方面的质量。在算法分析时，往往对算法的时间复杂度和渐近时间复杂度不予区分，而经常是将渐近时间复杂度T(n)=O(f(n))简称为时间复杂度，其中的f(n)一般是算法中频度最大的语句频度。\n\n2.空间复杂度\n一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。程序执行时所需存储空间包括以下两部分。　\n\n（1）固定部分。这部分空间的大小与输入/输出的数据的个数多少、数值无关。主要包括指令空间（即代码空间）、数据空间（常量、简单变量）等所占的空间。这部分属于静态空间。<br>\n（2）可变空间，这部分空间的主要包括动态分配的空间，以及递归栈所需的空间等。这部分的空间大小与算法有关。<br>\n一个算法所需的存储空间用f(n)表示。S(n)=O(f(n))　　其中n为问题的规模，S(n)表示空间复杂度。","source":"_posts/时间复杂度和空间复杂度详解.md","raw":"---\ntitle: 时间复杂度和空间复杂度详解\ndate: 2017-02-18 22:01:54\ncategories: 算法\ntags:\n\t- 时间复杂度\n\t- 空间复杂度\n---\n\n>没有挤公交来上班过，就不知道生活的压力有多大。\n\n<!--more-->\n算法的时间复杂度和空间复杂度合称为算法的复杂度。<br>\n1.时间复杂度\n（1）时间频度 一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了。并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。<br>\n（2）时间复杂度 在刚才提到的时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。但有时我们想知道它变化时呈现什么规律。为此，我们引入时间复杂度概念。 一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T（n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。<br>\n     时间频度不同，但时间复杂度可能相同。如：T(n)=n2+3n+4与T(n)=4n2+2n+1它们的频度不同，但时间复杂度相同，都为O(n2)。<br>\n    按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)，立方阶O(n3),...， k次方阶O(nk),指数阶O(2n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。<br>\n （3）最坏时间复杂度和平均时间复杂度 　最坏情况下的时间复杂度称最坏时间复杂度。一般不特别说明，讨论的时间复杂度均是最坏情况下的时间复杂度。 这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的上界，这就保证了算法的运行时间不会比任何更长。<br>\n     在最坏情况下的时间复杂度为T(n)=0(n)，它表示对于任何输入实例,该算法的运行时间不可能大于0(n)。 平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，算法的期望运行时间。<br>\n    指数阶0(2n)，显然，时间复杂度为指数阶0(2n)的算法效率极低，当n值稍大时就无法应用。<br>\n（4）求时间复杂度<br>\n【1】如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。<br>\n\n>x=91; y=100;\nwhile(y>0) if(x>100) {x=x-10;y--;} else x++;\n\n解答： T(n)=O(1)，\n这个程序看起来有点吓人，总共循环运行了1100次，但是我们看到n没有?\n没。这段程序的运行是和n无关的，\n就算它再循环一万年，我们也不管他，只是一个常数阶的函数\n\n【2】当有若干个循环语句时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。\n\n> x=1; \nfor(i=1;i<=n;i++) \n        for(j=1;j<=i;j++)\n           for(k=1;k<=j;k++)\n               x++; 　\n\n该程序段中频度最大的语句是(5)，内循环的执行次数虽然与问题规模n没有直接关系，但是却与外层循环的变量取值有关，而最外层循环的次数直接与n有关，因此可以从内层循环向外层分析语句(5)的执行次数：  则该程序段的时间复杂度为T(n)=O(n3/6+低次项)=O(n3)\n\n【3】算法的时间复杂度不仅仅依赖于问题的规模，还与输入实例的初始状态有关。\n在数值A[0..n-1]中查找给定值K的算法大致如下： \n\n>i=n-1;            \nwhile(i>=0&&(A[i]!=k))       \n      i--;        \nreturn i;      \n\n此算法中的语句(3)的频度不仅与问题规模n有关，还与输入实例中A的各元素取值及K的取值有关: ①若A中没有与K相等的元素，则语句(3)的频度f(n)=n； ②若A的最后一个元素等于K,则语句(3)的频度f(n)是常数0。\n（5）时间复杂度评价性能 \n有两个算法A1和A2求解同一问题，时间复杂度分别是T1(n)=100n2，T2(n)=5n3。（1）当输入量n＜20时，有T1(n)＞T2(n)，后者花费的时间较少。（2）随着问题规模n的增大，两个算法的时间开销之比5n3/100n2=n/20亦随着增大。即当问题规模较大时，算法A1比算法A2要有效地多。它们的渐近时间复杂度O(n2)和O(n3)从宏观上评价了这两个算法在时间方面的质量。在算法分析时，往往对算法的时间复杂度和渐近时间复杂度不予区分，而经常是将渐近时间复杂度T(n)=O(f(n))简称为时间复杂度，其中的f(n)一般是算法中频度最大的语句频度。\n\n2.空间复杂度\n一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。程序执行时所需存储空间包括以下两部分。　\n\n（1）固定部分。这部分空间的大小与输入/输出的数据的个数多少、数值无关。主要包括指令空间（即代码空间）、数据空间（常量、简单变量）等所占的空间。这部分属于静态空间。<br>\n（2）可变空间，这部分空间的主要包括动态分配的空间，以及递归栈所需的空间等。这部分的空间大小与算法有关。<br>\n一个算法所需的存储空间用f(n)表示。S(n)=O(f(n))　　其中n为问题的规模，S(n)表示空间复杂度。","slug":"时间复杂度和空间复杂度详解","published":1,"updated":"2017-02-18T14:07:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kg9003jrhsovfu021q6","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><blockquote>\n<p>没有挤公交来上班过，就不知道生活的压力有多大。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>算法的时间复杂度和空间复杂度合称为算法的复杂度。<br><br>1.时间复杂度<br>（1）时间频度 一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了。并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。<br><br>（2）时间复杂度 在刚才提到的时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。但有时我们想知道它变化时呈现什么规律。为此，我们引入时间复杂度概念。 一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T（n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。<br><br>     时间频度不同，但时间复杂度可能相同。如：T(n)=n2+3n+4与T(n)=4n2+2n+1它们的频度不同，但时间复杂度相同，都为O(n2)。<br><br>    按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)，立方阶O(n3),…， k次方阶O(nk),指数阶O(2n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。<br><br> （3）最坏时间复杂度和平均时间复杂度 　最坏情况下的时间复杂度称最坏时间复杂度。一般不特别说明，讨论的时间复杂度均是最坏情况下的时间复杂度。 这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的上界，这就保证了算法的运行时间不会比任何更长。<br><br>     在最坏情况下的时间复杂度为T(n)=0(n)，它表示对于任何输入实例,该算法的运行时间不可能大于0(n)。 平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，算法的期望运行时间。<br><br>    指数阶0(2n)，显然，时间复杂度为指数阶0(2n)的算法效率极低，当n值稍大时就无法应用。<br><br>（4）求时间复杂度<br><br>【1】如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。<br></p>\n<blockquote>\n<p>x=91; y=100;<br>while(y&gt;0) if(x&gt;100) {x=x-10;y–;} else x++;</p>\n</blockquote>\n<p>解答： T(n)=O(1)，<br>这个程序看起来有点吓人，总共循环运行了1100次，但是我们看到n没有?<br>没。这段程序的运行是和n无关的，<br>就算它再循环一万年，我们也不管他，只是一个常数阶的函数</p>\n<p>【2】当有若干个循环语句时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。</p>\n<blockquote>\n<p>x=1;<br>for(i=1;i&lt;=n;i++)<br>        for(j=1;j&lt;=i;j++)<br>           for(k=1;k&lt;=j;k++)<br>               x++; 　</p>\n</blockquote>\n<p>该程序段中频度最大的语句是(5)，内循环的执行次数虽然与问题规模n没有直接关系，但是却与外层循环的变量取值有关，而最外层循环的次数直接与n有关，因此可以从内层循环向外层分析语句(5)的执行次数：  则该程序段的时间复杂度为T(n)=O(n3/6+低次项)=O(n3)</p>\n<p>【3】算法的时间复杂度不仅仅依赖于问题的规模，还与输入实例的初始状态有关。<br>在数值A[0..n-1]中查找给定值K的算法大致如下： </p>\n<blockquote>\n<p>i=n-1;<br>while(i&gt;=0&amp;&amp;(A[i]!=k))<br>      i–;<br>return i;      </p>\n</blockquote>\n<p>此算法中的语句(3)的频度不仅与问题规模n有关，还与输入实例中A的各元素取值及K的取值有关: ①若A中没有与K相等的元素，则语句(3)的频度f(n)=n； ②若A的最后一个元素等于K,则语句(3)的频度f(n)是常数0。<br>（5）时间复杂度评价性能<br>有两个算法A1和A2求解同一问题，时间复杂度分别是T1(n)=100n2，T2(n)=5n3。（1）当输入量n＜20时，有T1(n)＞T2(n)，后者花费的时间较少。（2）随着问题规模n的增大，两个算法的时间开销之比5n3/100n2=n/20亦随着增大。即当问题规模较大时，算法A1比算法A2要有效地多。它们的渐近时间复杂度O(n2)和O(n3)从宏观上评价了这两个算法在时间方面的质量。在算法分析时，往往对算法的时间复杂度和渐近时间复杂度不予区分，而经常是将渐近时间复杂度T(n)=O(f(n))简称为时间复杂度，其中的f(n)一般是算法中频度最大的语句频度。</p>\n<p>2.空间复杂度<br>一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。程序执行时所需存储空间包括以下两部分。　</p>\n<p>（1）固定部分。这部分空间的大小与输入/输出的数据的个数多少、数值无关。主要包括指令空间（即代码空间）、数据空间（常量、简单变量）等所占的空间。这部分属于静态空间。<br><br>（2）可变空间，这部分空间的主要包括动态分配的空间，以及递归栈所需的空间等。这部分的空间大小与算法有关。<br><br>一个算法所需的存储空间用f(n)表示。S(n)=O(f(n))　　其中n为问题的规模，S(n)表示空间复杂度。</p>\n","excerpt":"<blockquote>\n<p>没有挤公交来上班过，就不知道生活的压力有多大。</p>\n</blockquote>","more":"<p>算法的时间复杂度和空间复杂度合称为算法的复杂度。<br><br>1.时间复杂度<br>（1）时间频度 一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了。并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。<br><br>（2）时间复杂度 在刚才提到的时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。但有时我们想知道它变化时呈现什么规律。为此，我们引入时间复杂度概念。 一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T（n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。<br><br>     时间频度不同，但时间复杂度可能相同。如：T(n)=n2+3n+4与T(n)=4n2+2n+1它们的频度不同，但时间复杂度相同，都为O(n2)。<br><br>    按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)，立方阶O(n3),…， k次方阶O(nk),指数阶O(2n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。<br><br> （3）最坏时间复杂度和平均时间复杂度 　最坏情况下的时间复杂度称最坏时间复杂度。一般不特别说明，讨论的时间复杂度均是最坏情况下的时间复杂度。 这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的上界，这就保证了算法的运行时间不会比任何更长。<br><br>     在最坏情况下的时间复杂度为T(n)=0(n)，它表示对于任何输入实例,该算法的运行时间不可能大于0(n)。 平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，算法的期望运行时间。<br><br>    指数阶0(2n)，显然，时间复杂度为指数阶0(2n)的算法效率极低，当n值稍大时就无法应用。<br><br>（4）求时间复杂度<br><br>【1】如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。<br></p>\n<blockquote>\n<p>x=91; y=100;<br>while(y&gt;0) if(x&gt;100) {x=x-10;y–;} else x++;</p>\n</blockquote>\n<p>解答： T(n)=O(1)，<br>这个程序看起来有点吓人，总共循环运行了1100次，但是我们看到n没有?<br>没。这段程序的运行是和n无关的，<br>就算它再循环一万年，我们也不管他，只是一个常数阶的函数</p>\n<p>【2】当有若干个循环语句时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。</p>\n<blockquote>\n<p>x=1;<br>for(i=1;i&lt;=n;i++)<br>        for(j=1;j&lt;=i;j++)<br>           for(k=1;k&lt;=j;k++)<br>               x++; 　</p>\n</blockquote>\n<p>该程序段中频度最大的语句是(5)，内循环的执行次数虽然与问题规模n没有直接关系，但是却与外层循环的变量取值有关，而最外层循环的次数直接与n有关，因此可以从内层循环向外层分析语句(5)的执行次数：  则该程序段的时间复杂度为T(n)=O(n3/6+低次项)=O(n3)</p>\n<p>【3】算法的时间复杂度不仅仅依赖于问题的规模，还与输入实例的初始状态有关。<br>在数值A[0..n-1]中查找给定值K的算法大致如下： </p>\n<blockquote>\n<p>i=n-1;<br>while(i&gt;=0&amp;&amp;(A[i]!=k))<br>      i–;<br>return i;      </p>\n</blockquote>\n<p>此算法中的语句(3)的频度不仅与问题规模n有关，还与输入实例中A的各元素取值及K的取值有关: ①若A中没有与K相等的元素，则语句(3)的频度f(n)=n； ②若A的最后一个元素等于K,则语句(3)的频度f(n)是常数0。<br>（5）时间复杂度评价性能<br>有两个算法A1和A2求解同一问题，时间复杂度分别是T1(n)=100n2，T2(n)=5n3。（1）当输入量n＜20时，有T1(n)＞T2(n)，后者花费的时间较少。（2）随着问题规模n的增大，两个算法的时间开销之比5n3/100n2=n/20亦随着增大。即当问题规模较大时，算法A1比算法A2要有效地多。它们的渐近时间复杂度O(n2)和O(n3)从宏观上评价了这两个算法在时间方面的质量。在算法分析时，往往对算法的时间复杂度和渐近时间复杂度不予区分，而经常是将渐近时间复杂度T(n)=O(f(n))简称为时间复杂度，其中的f(n)一般是算法中频度最大的语句频度。</p>\n<p>2.空间复杂度<br>一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。程序执行时所需存储空间包括以下两部分。　</p>\n<p>（1）固定部分。这部分空间的大小与输入/输出的数据的个数多少、数值无关。主要包括指令空间（即代码空间）、数据空间（常量、简单变量）等所占的空间。这部分属于静态空间。<br><br>（2）可变空间，这部分空间的主要包括动态分配的空间，以及递归栈所需的空间等。这部分的空间大小与算法有关。<br><br>一个算法所需的存储空间用f(n)表示。S(n)=O(f(n))　　其中n为问题的规模，S(n)表示空间复杂度。</p>"},{"title":"浅谈HashMap","date":"2017-02-18T13:34:09.000Z","_content":"\n**什么是Map?**\n\n<font color=\"#008080\">Map用于保存具有key-value映射关系的数据</font>\n<!--more-->\n首先看图！\n\n![这里写图片描述](http://img.blog.csdn.net/20161224234534698)\n\n可以看出Java 中有四种常见的Map实现——HashMap, TreeMap, Hashtable和LinkedHashMap：\n\n·HashMap就是一张hash表，键和值都没有排序。<br>\n·TreeMap以红黑树结构为基础，键值可以设置按某种顺序排列。<br>\n·LinkedHashMap保存了插入时的顺序。<br>\n·Hashtable是同步的(而HashMap是不同步的)。所以如果在线程安全的环境下应该多使用HashMap，而不是Hashtable，因为Hashtable对同步有额外的开销。\n\n\n**我们在这里简单的说说HashMap：**\n\n(1)HashMap是基于哈希表实现的，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。\n\n(2)HashMap是非线程安全的，只用于单线程环境下，多线程环境下可以采用concurrent并发包下的concurrentHashMap。\n\n(3)HashMap 实现了Serializable接口，因此它支持序列化。\n\n(4)HashMap还实现了Cloneable接口，故能被克隆。\n\n<br>\n先从**HashMap的存储结构**说起：\n\n![这里写图片描述](http://img.blog.csdn.net/20161224235308725)\n\n蓝色部分即代表哈希表本身（其实是一个数组），数组的每个元素都是一个单链表的头节点，链表是用来解决hash地址冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中保存。\n\n**HashMap的构造方法中有两个很重要的参数：**<font color=\"#008080\">初始容量和加载因子</font>\n\n这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中槽的数量（即哈希数组的长度），初始容量是创建哈希表时的容量（默认为16），加载因子是哈希表当前key的数量和容量的比值，当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表提前进行 resize 操作（即扩容）。如果加载因子越大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）；如果加载因子太小，那么表中的数据将过于稀疏（很多空间还没用，就开始扩容了），严重浪费。\n\nJDK开发者规定的默认加载因子为0.75，因为这是一个比较理想的值。另外，无论指定初始容量为多少，构造方法都会将实际容量设为不小于指定容量的2的幂次方，且最大值不能超过2的30次方。\n\n\n\n**我们来分析一下HashMap中用的最多的两个方法put和get的源码**\n\n>get()：\n\n```\n// 获取key对应的value\n    public V get(Object key) {\n        if (key == null)\n            return getForNullKey();\n        // 获取key的hash值\n        int hash = hash(key.hashCode());\n        // 在“该hash值对应的链表”上查找“键值等于key”的元素\n        for (Entry<K, V> e = table[indexFor(hash, table.length)]; e != null; e = e.next) {\n            Object k;\n            // 判断key是否相同\n            if (e.hash == hash && ((k = e.key) == key || key.equals(k)))\n                return e.value;\n        }\n        // 没找到则返回null\n        return null;\n    }\n\n    // 获取“key为null”的元素的值，HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！\n    private V getForNullKey() {\n        for (Entry<K, V> e = table[0]; e != null; e = e.next) {\n            if (e.key == null)\n                return e.value;\n        }\n        return null;\n    }\n```\n\n首先，如果key为null，则直接从哈希表的第一个位置table[0]对应的链表上查找。记住，key为null的键值对永远都放在以table[0]为头结点的链表中，当然不一定是存放在头结点table[0]中。如果key不为null，则先求的key的hash值，根据hash值找到在table中的索引，在该索引对应的单链表中查找是否有键值对的key与目标key相等，有就返回对应的value，没有则返回null。\n\n\n>put()：<br>\n\n```\n// 将“key-value”添加到HashMap中\n    public V put(K key, V value) {\n        // 若“key为null”，则将该键值对添加到table[0]中。\n        if (key == null)\n            return putForNullKey(value);\n        // 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。\n        int hash = hash(key.hashCode());\n        int i = indexFor(hash, table.length);\n        for (Entry<K, V> e = table[i]; e != null; e = e.next) {\n            Object k;\n            // 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！\n            if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n                V oldValue = e.value;\n                e.value = value;\n                e.recordAccess(this);\n                return oldValue;\n            }\n        }\n\n        // 若“该key”对应的键值对不存在，则将“key-value”添加到table中\n        modCount++;\n        // 将key-value添加到table[i]处\n        addEntry(hash, key, value, i);\n        return null;\n    }\n```\n\n如果key为null，则将其添加到table[0]对应的链表中，如果key不为null，则同样先求出key的hash值，根据hash值得出在table中的索引，而后遍历对应的单链表，如果单链表中存在与目标key相等的键值对，则将新的value覆盖旧的value，且将旧的value返回，如果找不到与目标key相等的键值对，或者该单链表为空，则将该键值对插入到单链表的头结点位置（每次新插入的节点都是放在头结点的位置），该操作是有addEntry方法实现的，它的源码如下：\n\n```\n// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。\n    void addEntry(int hash, K key, V value, int bucketIndex) {\n        // 保存“bucketIndex”位置的值到“e”中\n        Entry<K, V> e = table[bucketIndex];\n        // 设置“bucketIndex”位置的元素为“新Entry”，\n        // 设置“e”为“新Entry的下一个节点”\n        table[bucketIndex] = new Entry<K, V>(hash, key, value, e);\n        // 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小\n        if (size++ >= threshold)\n            resize(2 * table.length);\n    }\n\n```\n\n注意这里倒数第三行的构造方法，将key-value键值对赋给table[bucketIndex]，并将其next指向元素e，这便将key-value放到了头结点中，并将之前的头结点接在了它的后面。该方法也说明，每次put键值对的时候，总是将新的该键值对放在table[bucketIndex]处（即头结点处）。两外注意最后两行代码，每次加入键值对时，都要判断当前已用的槽的数目是否大于等于阀值（容量*加载因子），如果大于等于，则进行扩容，将容量扩为原来容量的2倍。\n\n\n<font color=\"#008080\">**接下来重点来分析下求hash值和索引值的方法，这两个方法便是HashMap设计的最为核心的部分，二者结合能保证哈希表中的元素尽可能均匀地散列。**</font>\n\n>由hash值找到对应索引的方法如下：\n\n```\nstatic int indexFor(int h, int length) {\n        return h & (length-1);\n     }\n    \n```\n因为容量初始还是设定都会转化为2的幂次。故可以使用高效的位与运算替代模运算。\n\n>计算hash值的方法如下:\n\n```\n static int hash(int h) {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return h ^ (h >>> 7) ^ (h >>> 4);\n        }\n```\n\nJDK 的 HashMap 使用了一个 hash 方法对hash值使用位的操作，使hash值的计算效率很高。为什么这样做？主要是因为如果直接使用hashcode值，那么这是一个int值（8个16进制数，共32位），int值的范围正负21亿多，但是hash表没有那么长，一般比如初始16，自然散列地址需要对hash表长度取模运算，得到的余数才是地址下标。假设某个key的hashcode是0AAA0000，hash数组长默认16，如果不经过hash函数处理，该键值对会被存放在hash数组中下标为0处，因为0AAA0000 & (16-1) = 0。过了一会儿又存储另外一个键值对，其key的hashcode是0BBB0000，得到数组下标依然是0，这就说明这是个实现得很差的hash算法，因为hashcode的1位全集中在前16位了，导致算出来的数组下标一直是0。<font color=\"red\">于是明明key相差很大的键值对，却存放在了同一个链表里，导致以后查询起来比较慢（蜕化为了顺序查找）。故JDK的设计者使用hash函数的若干次的移位、异或操作，把hashcode的“1位”变得“松散”，非常巧妙。</font>\n\n\n\n\n\n","source":"_posts/浅谈HashMap.md","raw":"---\ntitle: 浅谈HashMap\ndate: 2017-02-18 21:34:09\ncategories: Java二三事\ntags:\n\t- Java\n\t- 集合\n---\n\n**什么是Map?**\n\n<font color=\"#008080\">Map用于保存具有key-value映射关系的数据</font>\n<!--more-->\n首先看图！\n\n![这里写图片描述](http://img.blog.csdn.net/20161224234534698)\n\n可以看出Java 中有四种常见的Map实现——HashMap, TreeMap, Hashtable和LinkedHashMap：\n\n·HashMap就是一张hash表，键和值都没有排序。<br>\n·TreeMap以红黑树结构为基础，键值可以设置按某种顺序排列。<br>\n·LinkedHashMap保存了插入时的顺序。<br>\n·Hashtable是同步的(而HashMap是不同步的)。所以如果在线程安全的环境下应该多使用HashMap，而不是Hashtable，因为Hashtable对同步有额外的开销。\n\n\n**我们在这里简单的说说HashMap：**\n\n(1)HashMap是基于哈希表实现的，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。\n\n(2)HashMap是非线程安全的，只用于单线程环境下，多线程环境下可以采用concurrent并发包下的concurrentHashMap。\n\n(3)HashMap 实现了Serializable接口，因此它支持序列化。\n\n(4)HashMap还实现了Cloneable接口，故能被克隆。\n\n<br>\n先从**HashMap的存储结构**说起：\n\n![这里写图片描述](http://img.blog.csdn.net/20161224235308725)\n\n蓝色部分即代表哈希表本身（其实是一个数组），数组的每个元素都是一个单链表的头节点，链表是用来解决hash地址冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中保存。\n\n**HashMap的构造方法中有两个很重要的参数：**<font color=\"#008080\">初始容量和加载因子</font>\n\n这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中槽的数量（即哈希数组的长度），初始容量是创建哈希表时的容量（默认为16），加载因子是哈希表当前key的数量和容量的比值，当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表提前进行 resize 操作（即扩容）。如果加载因子越大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）；如果加载因子太小，那么表中的数据将过于稀疏（很多空间还没用，就开始扩容了），严重浪费。\n\nJDK开发者规定的默认加载因子为0.75，因为这是一个比较理想的值。另外，无论指定初始容量为多少，构造方法都会将实际容量设为不小于指定容量的2的幂次方，且最大值不能超过2的30次方。\n\n\n\n**我们来分析一下HashMap中用的最多的两个方法put和get的源码**\n\n>get()：\n\n```\n// 获取key对应的value\n    public V get(Object key) {\n        if (key == null)\n            return getForNullKey();\n        // 获取key的hash值\n        int hash = hash(key.hashCode());\n        // 在“该hash值对应的链表”上查找“键值等于key”的元素\n        for (Entry<K, V> e = table[indexFor(hash, table.length)]; e != null; e = e.next) {\n            Object k;\n            // 判断key是否相同\n            if (e.hash == hash && ((k = e.key) == key || key.equals(k)))\n                return e.value;\n        }\n        // 没找到则返回null\n        return null;\n    }\n\n    // 获取“key为null”的元素的值，HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！\n    private V getForNullKey() {\n        for (Entry<K, V> e = table[0]; e != null; e = e.next) {\n            if (e.key == null)\n                return e.value;\n        }\n        return null;\n    }\n```\n\n首先，如果key为null，则直接从哈希表的第一个位置table[0]对应的链表上查找。记住，key为null的键值对永远都放在以table[0]为头结点的链表中，当然不一定是存放在头结点table[0]中。如果key不为null，则先求的key的hash值，根据hash值找到在table中的索引，在该索引对应的单链表中查找是否有键值对的key与目标key相等，有就返回对应的value，没有则返回null。\n\n\n>put()：<br>\n\n```\n// 将“key-value”添加到HashMap中\n    public V put(K key, V value) {\n        // 若“key为null”，则将该键值对添加到table[0]中。\n        if (key == null)\n            return putForNullKey(value);\n        // 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。\n        int hash = hash(key.hashCode());\n        int i = indexFor(hash, table.length);\n        for (Entry<K, V> e = table[i]; e != null; e = e.next) {\n            Object k;\n            // 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！\n            if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n                V oldValue = e.value;\n                e.value = value;\n                e.recordAccess(this);\n                return oldValue;\n            }\n        }\n\n        // 若“该key”对应的键值对不存在，则将“key-value”添加到table中\n        modCount++;\n        // 将key-value添加到table[i]处\n        addEntry(hash, key, value, i);\n        return null;\n    }\n```\n\n如果key为null，则将其添加到table[0]对应的链表中，如果key不为null，则同样先求出key的hash值，根据hash值得出在table中的索引，而后遍历对应的单链表，如果单链表中存在与目标key相等的键值对，则将新的value覆盖旧的value，且将旧的value返回，如果找不到与目标key相等的键值对，或者该单链表为空，则将该键值对插入到单链表的头结点位置（每次新插入的节点都是放在头结点的位置），该操作是有addEntry方法实现的，它的源码如下：\n\n```\n// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。\n    void addEntry(int hash, K key, V value, int bucketIndex) {\n        // 保存“bucketIndex”位置的值到“e”中\n        Entry<K, V> e = table[bucketIndex];\n        // 设置“bucketIndex”位置的元素为“新Entry”，\n        // 设置“e”为“新Entry的下一个节点”\n        table[bucketIndex] = new Entry<K, V>(hash, key, value, e);\n        // 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小\n        if (size++ >= threshold)\n            resize(2 * table.length);\n    }\n\n```\n\n注意这里倒数第三行的构造方法，将key-value键值对赋给table[bucketIndex]，并将其next指向元素e，这便将key-value放到了头结点中，并将之前的头结点接在了它的后面。该方法也说明，每次put键值对的时候，总是将新的该键值对放在table[bucketIndex]处（即头结点处）。两外注意最后两行代码，每次加入键值对时，都要判断当前已用的槽的数目是否大于等于阀值（容量*加载因子），如果大于等于，则进行扩容，将容量扩为原来容量的2倍。\n\n\n<font color=\"#008080\">**接下来重点来分析下求hash值和索引值的方法，这两个方法便是HashMap设计的最为核心的部分，二者结合能保证哈希表中的元素尽可能均匀地散列。**</font>\n\n>由hash值找到对应索引的方法如下：\n\n```\nstatic int indexFor(int h, int length) {\n        return h & (length-1);\n     }\n    \n```\n因为容量初始还是设定都会转化为2的幂次。故可以使用高效的位与运算替代模运算。\n\n>计算hash值的方法如下:\n\n```\n static int hash(int h) {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return h ^ (h >>> 7) ^ (h >>> 4);\n        }\n```\n\nJDK 的 HashMap 使用了一个 hash 方法对hash值使用位的操作，使hash值的计算效率很高。为什么这样做？主要是因为如果直接使用hashcode值，那么这是一个int值（8个16进制数，共32位），int值的范围正负21亿多，但是hash表没有那么长，一般比如初始16，自然散列地址需要对hash表长度取模运算，得到的余数才是地址下标。假设某个key的hashcode是0AAA0000，hash数组长默认16，如果不经过hash函数处理，该键值对会被存放在hash数组中下标为0处，因为0AAA0000 & (16-1) = 0。过了一会儿又存储另外一个键值对，其key的hashcode是0BBB0000，得到数组下标依然是0，这就说明这是个实现得很差的hash算法，因为hashcode的1位全集中在前16位了，导致算出来的数组下标一直是0。<font color=\"red\">于是明明key相差很大的键值对，却存放在了同一个链表里，导致以后查询起来比较慢（蜕化为了顺序查找）。故JDK的设计者使用hash函数的若干次的移位、异或操作，把hashcode的“1位”变得“松散”，非常巧妙。</font>\n\n\n\n\n\n","slug":"浅谈HashMap","published":1,"updated":"2017-02-18T13:38:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kga003nrhsohzd4nv7e","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p><strong>什么是Map?</strong></p>\n<font color=\"#008080\">Map用于保存具有key-value映射关系的数据</font><br><a id=\"more\"></a><br>首先看图！<br><br><img src=\"http://img.blog.csdn.net/20161224234534698\" alt=\"这里写图片描述\"><br><br>可以看出Java 中有四种常见的Map实现——HashMap, TreeMap, Hashtable和LinkedHashMap：<br><br>·HashMap就是一张hash表，键和值都没有排序。<br><br>·TreeMap以红黑树结构为基础，键值可以设置按某种顺序排列。<br><br>·LinkedHashMap保存了插入时的顺序。<br><br>·Hashtable是同步的(而HashMap是不同步的)。所以如果在线程安全的环境下应该多使用HashMap，而不是Hashtable，因为Hashtable对同步有额外的开销。<br><br><br><strong>我们在这里简单的说说HashMap：</strong><br><br>(1)HashMap是基于哈希表实现的，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。<br><br>(2)HashMap是非线程安全的，只用于单线程环境下，多线程环境下可以采用concurrent并发包下的concurrentHashMap。<br><br>(3)HashMap 实现了Serializable接口，因此它支持序列化。<br><br>(4)HashMap还实现了Cloneable接口，故能被克隆。<br><br><br><br>先从<strong>HashMap的存储结构</strong>说起：<br><br><img src=\"http://img.blog.csdn.net/20161224235308725\" alt=\"这里写图片描述\"><br><br>蓝色部分即代表哈希表本身（其实是一个数组），数组的每个元素都是一个单链表的头节点，链表是用来解决hash地址冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中保存。<br><br><strong>HashMap的构造方法中有两个很重要的参数：</strong><font color=\"#008080\">初始容量和加载因子</font>\n\n<p>这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中槽的数量（即哈希数组的长度），初始容量是创建哈希表时的容量（默认为16），加载因子是哈希表当前key的数量和容量的比值，当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表提前进行 resize 操作（即扩容）。如果加载因子越大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）；如果加载因子太小，那么表中的数据将过于稀疏（很多空间还没用，就开始扩容了），严重浪费。</p>\n<p>JDK开发者规定的默认加载因子为0.75，因为这是一个比较理想的值。另外，无论指定初始容量为多少，构造方法都会将实际容量设为不小于指定容量的2的幂次方，且最大值不能超过2的30次方。</p>\n<p><strong>我们来分析一下HashMap中用的最多的两个方法put和get的源码</strong></p>\n<blockquote>\n<p>get()：</p>\n</blockquote>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取key对应的value</span></div><div class=\"line\">    <span class=\"keyword\">public</span> V <span class=\"built_in\">get</span>(<span class=\"keyword\">Object</span> <span class=\"built_in\">key</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">key</span> == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> getForNullKey();</div><div class=\"line\">        <span class=\"comment\">// 获取key的hash值</span></div><div class=\"line\">        <span class=\"built_in\">int</span> hash = hash(<span class=\"built_in\">key</span>.hashCode());</div><div class=\"line\">        <span class=\"comment\">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Entry&lt;K, V&gt; e = table[indexFor(hash, table.length)]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</div><div class=\"line\">            <span class=\"keyword\">Object</span> k;</div><div class=\"line\">            <span class=\"comment\">// 判断key是否相同</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp; ((k = e.<span class=\"built_in\">key</span>) == <span class=\"built_in\">key</span> || <span class=\"built_in\">key</span>.equals(k)))</div><div class=\"line\">                <span class=\"keyword\">return</span> e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 没找到则返回null</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 获取“key为null”的元素的值，HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！</span></div><div class=\"line\">    <span class=\"keyword\">private</span> V getForNullKey() &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Entry&lt;K, V&gt; e = table[<span class=\"number\">0</span>]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (e.<span class=\"built_in\">key</span> == <span class=\"keyword\">null</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>首先，如果key为null，则直接从哈希表的第一个位置table[0]对应的链表上查找。记住，key为null的键值对永远都放在以table[0]为头结点的链表中，当然不一定是存放在头结点table[0]中。如果key不为null，则先求的key的hash值，根据hash值找到在table中的索引，在该索引对应的单链表中查找是否有键值对的key与目标key相等，有就返回对应的value，没有则返回null。</p>\n<blockquote>\n<p>put()：<br></p>\n</blockquote>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 将“key-value”添加到HashMap中</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span>(<span class=\"params\">K key, V <span class=\"keyword\">value</span></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 若“key为null”，则将该键值对添加到table[0]中。</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> putForNullKey(<span class=\"keyword\">value</span>);</div><div class=\"line\">        <span class=\"comment\">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。</span></div><div class=\"line\">        <span class=\"keyword\">int</span> hash = hash(key.hashCode());</div><div class=\"line\">        <span class=\"keyword\">int</span> i = indexFor(hash, table.length);</div><div class=\"line\">        <span class=\"keyword\">for</span> (Entry&lt;K, V&gt; e = table[i]; e != <span class=\"literal\">null</span>; e = e.next) &#123;</div><div class=\"line\">            Object k;</div><div class=\"line\">            <span class=\"comment\">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.<span class=\"keyword\">equals</span>(k))) &#123;</div><div class=\"line\">                V oldValue = e.<span class=\"keyword\">value</span>;</div><div class=\"line\">                e.<span class=\"keyword\">value</span> = <span class=\"keyword\">value</span>;</div><div class=\"line\">                e.recordAccess(<span class=\"keyword\">this</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中</span></div><div class=\"line\">        modCount++;</div><div class=\"line\">        <span class=\"comment\">// 将key-value添加到table[i]处</span></div><div class=\"line\">        addEntry(hash, key, <span class=\"keyword\">value</span>, i);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如果key为null，则将其添加到table[0]对应的链表中，如果key不为null，则同样先求出key的hash值，根据hash值得出在table中的索引，而后遍历对应的单链表，如果单链表中存在与目标key相等的键值对，则将新的value覆盖旧的value，且将旧的value返回，如果找不到与目标key相等的键值对，或者该单链表为空，则将该键值对插入到单链表的头结点位置（每次新插入的节点都是放在头结点的位置），该操作是有addEntry方法实现的，它的源码如下：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEntry</span>(<span class=\"params\"><span class=\"keyword\">int</span> hash, K key, V <span class=\"keyword\">value</span>, <span class=\"keyword\">int</span> bucketIndex</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 保存“bucketIndex”位置的值到“e”中</span></div><div class=\"line\">        Entry&lt;K, V&gt; e = table[bucketIndex];</div><div class=\"line\">        <span class=\"comment\">// 设置“bucketIndex”位置的元素为“新Entry”，</span></div><div class=\"line\">        <span class=\"comment\">// 设置“e”为“新Entry的下一个节点”</span></div><div class=\"line\">        table[bucketIndex] = <span class=\"keyword\">new</span> Entry&lt;K, V&gt;(hash, key, <span class=\"keyword\">value</span>, e);</div><div class=\"line\">        <span class=\"comment\">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (size++ &gt;= threshold)</div><div class=\"line\">            resize(<span class=\"number\">2</span> * table.length);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>注意这里倒数第三行的构造方法，将key-value键值对赋给table[bucketIndex]，并将其next指向元素e，这便将key-value放到了头结点中，并将之前的头结点接在了它的后面。该方法也说明，每次put键值对的时候，总是将新的该键值对放在table[bucketIndex]处（即头结点处）。两外注意最后两行代码，每次加入键值对时，都要判断当前已用的槽的数目是否大于等于阀值（容量*加载因子），如果大于等于，则进行扩容，将容量扩为原来容量的2倍。</p>\n<font color=\"#008080\"><strong>接下来重点来分析下求hash值和索引值的方法，这两个方法便是HashMap设计的最为核心的部分，二者结合能保证哈希表中的元素尽可能均匀地散列。</strong></font>\n\n<blockquote>\n<p>由hash值找到对应索引的方法如下：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span><span class=\"params\">(<span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> length)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> h &amp; (length<span class=\"number\">-1</span>);</div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure>\n<p>因为容量初始还是设定都会转化为2的幂次。故可以使用高效的位与运算替代模运算。</p>\n<blockquote>\n<p>计算hash值的方法如下:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">static</span> int hash(int h) &#123;</div><div class=\"line\">           <span class=\"attribute\">h</span><span class=\"regexp\"> ^=</span> (h &gt;&gt;&gt; <span class=\"number\">20</span>)<span class=\"regexp\"> ^</span> (h &gt;&gt;&gt; <span class=\"number\">12</span>);</div><div class=\"line\">           <span class=\"attribute\">return</span> h<span class=\"regexp\"> ^</span> (h &gt;&gt;&gt; <span class=\"number\">7</span>)<span class=\"regexp\"> ^</span> (h &gt;&gt;&gt; <span class=\"number\">4</span>);</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>JDK 的 HashMap 使用了一个 hash 方法对hash值使用位的操作，使hash值的计算效率很高。为什么这样做？主要是因为如果直接使用hashcode值，那么这是一个int值（8个16进制数，共32位），int值的范围正负21亿多，但是hash表没有那么长，一般比如初始16，自然散列地址需要对hash表长度取模运算，得到的余数才是地址下标。假设某个key的hashcode是0AAA0000，hash数组长默认16，如果不经过hash函数处理，该键值对会被存放在hash数组中下标为0处，因为0AAA0000 &amp; (16-1) = 0。过了一会儿又存储另外一个键值对，其key的hashcode是0BBB0000，得到数组下标依然是0，这就说明这是个实现得很差的hash算法，因为hashcode的1位全集中在前16位了，导致算出来的数组下标一直是0。<font color=\"red\">于是明明key相差很大的键值对，却存放在了同一个链表里，导致以后查询起来比较慢（蜕化为了顺序查找）。故JDK的设计者使用hash函数的若干次的移位、异或操作，把hashcode的“1位”变得“松散”，非常巧妙。</font></p>\n","excerpt":"<p><strong>什么是Map?</strong></p>\n<font color=\"#008080\">Map用于保存具有key-value映射关系的数据</font><br>","more":"<br>首先看图！<br><br><img src=\"http://img.blog.csdn.net/20161224234534698\" alt=\"这里写图片描述\"><br><br>可以看出Java 中有四种常见的Map实现——HashMap, TreeMap, Hashtable和LinkedHashMap：<br><br>·HashMap就是一张hash表，键和值都没有排序。<br><br>·TreeMap以红黑树结构为基础，键值可以设置按某种顺序排列。<br><br>·LinkedHashMap保存了插入时的顺序。<br><br>·Hashtable是同步的(而HashMap是不同步的)。所以如果在线程安全的环境下应该多使用HashMap，而不是Hashtable，因为Hashtable对同步有额外的开销。<br><br><br><strong>我们在这里简单的说说HashMap：</strong><br><br>(1)HashMap是基于哈希表实现的，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。<br><br>(2)HashMap是非线程安全的，只用于单线程环境下，多线程环境下可以采用concurrent并发包下的concurrentHashMap。<br><br>(3)HashMap 实现了Serializable接口，因此它支持序列化。<br><br>(4)HashMap还实现了Cloneable接口，故能被克隆。<br><br><br><br>先从<strong>HashMap的存储结构</strong>说起：<br><br><img src=\"http://img.blog.csdn.net/20161224235308725\" alt=\"这里写图片描述\"><br><br>蓝色部分即代表哈希表本身（其实是一个数组），数组的每个元素都是一个单链表的头节点，链表是用来解决hash地址冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中保存。<br><br><strong>HashMap的构造方法中有两个很重要的参数：</strong><font color=\"#008080\">初始容量和加载因子</font>\n\n<p>这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中槽的数量（即哈希数组的长度），初始容量是创建哈希表时的容量（默认为16），加载因子是哈希表当前key的数量和容量的比值，当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表提前进行 resize 操作（即扩容）。如果加载因子越大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）；如果加载因子太小，那么表中的数据将过于稀疏（很多空间还没用，就开始扩容了），严重浪费。</p>\n<p>JDK开发者规定的默认加载因子为0.75，因为这是一个比较理想的值。另外，无论指定初始容量为多少，构造方法都会将实际容量设为不小于指定容量的2的幂次方，且最大值不能超过2的30次方。</p>\n<p><strong>我们来分析一下HashMap中用的最多的两个方法put和get的源码</strong></p>\n<blockquote>\n<p>get()：</p>\n</blockquote>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取key对应的value</span></div><div class=\"line\">    <span class=\"keyword\">public</span> V <span class=\"built_in\">get</span>(<span class=\"keyword\">Object</span> <span class=\"built_in\">key</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">key</span> == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> getForNullKey();</div><div class=\"line\">        <span class=\"comment\">// 获取key的hash值</span></div><div class=\"line\">        <span class=\"built_in\">int</span> hash = hash(<span class=\"built_in\">key</span>.hashCode());</div><div class=\"line\">        <span class=\"comment\">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Entry&lt;K, V&gt; e = table[indexFor(hash, table.length)]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</div><div class=\"line\">            <span class=\"keyword\">Object</span> k;</div><div class=\"line\">            <span class=\"comment\">// 判断key是否相同</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp; ((k = e.<span class=\"built_in\">key</span>) == <span class=\"built_in\">key</span> || <span class=\"built_in\">key</span>.equals(k)))</div><div class=\"line\">                <span class=\"keyword\">return</span> e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 没找到则返回null</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 获取“key为null”的元素的值，HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！</span></div><div class=\"line\">    <span class=\"keyword\">private</span> V getForNullKey() &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Entry&lt;K, V&gt; e = table[<span class=\"number\">0</span>]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (e.<span class=\"built_in\">key</span> == <span class=\"keyword\">null</span>)</div><div class=\"line\">                <span class=\"keyword\">return</span> e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>首先，如果key为null，则直接从哈希表的第一个位置table[0]对应的链表上查找。记住，key为null的键值对永远都放在以table[0]为头结点的链表中，当然不一定是存放在头结点table[0]中。如果key不为null，则先求的key的hash值，根据hash值找到在table中的索引，在该索引对应的单链表中查找是否有键值对的key与目标key相等，有就返回对应的value，没有则返回null。</p>\n<blockquote>\n<p>put()：<br></p>\n</blockquote>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 将“key-value”添加到HashMap中</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span>(<span class=\"params\">K key, V <span class=\"keyword\">value</span></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 若“key为null”，则将该键值对添加到table[0]中。</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> putForNullKey(<span class=\"keyword\">value</span>);</div><div class=\"line\">        <span class=\"comment\">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。</span></div><div class=\"line\">        <span class=\"keyword\">int</span> hash = hash(key.hashCode());</div><div class=\"line\">        <span class=\"keyword\">int</span> i = indexFor(hash, table.length);</div><div class=\"line\">        <span class=\"keyword\">for</span> (Entry&lt;K, V&gt; e = table[i]; e != <span class=\"literal\">null</span>; e = e.next) &#123;</div><div class=\"line\">            Object k;</div><div class=\"line\">            <span class=\"comment\">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.<span class=\"keyword\">equals</span>(k))) &#123;</div><div class=\"line\">                V oldValue = e.<span class=\"keyword\">value</span>;</div><div class=\"line\">                e.<span class=\"keyword\">value</span> = <span class=\"keyword\">value</span>;</div><div class=\"line\">                e.recordAccess(<span class=\"keyword\">this</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中</span></div><div class=\"line\">        modCount++;</div><div class=\"line\">        <span class=\"comment\">// 将key-value添加到table[i]处</span></div><div class=\"line\">        addEntry(hash, key, <span class=\"keyword\">value</span>, i);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如果key为null，则将其添加到table[0]对应的链表中，如果key不为null，则同样先求出key的hash值，根据hash值得出在table中的索引，而后遍历对应的单链表，如果单链表中存在与目标key相等的键值对，则将新的value覆盖旧的value，且将旧的value返回，如果找不到与目标key相等的键值对，或者该单链表为空，则将该键值对插入到单链表的头结点位置（每次新插入的节点都是放在头结点的位置），该操作是有addEntry方法实现的，它的源码如下：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEntry</span>(<span class=\"params\"><span class=\"keyword\">int</span> hash, K key, V <span class=\"keyword\">value</span>, <span class=\"keyword\">int</span> bucketIndex</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 保存“bucketIndex”位置的值到“e”中</span></div><div class=\"line\">        Entry&lt;K, V&gt; e = table[bucketIndex];</div><div class=\"line\">        <span class=\"comment\">// 设置“bucketIndex”位置的元素为“新Entry”，</span></div><div class=\"line\">        <span class=\"comment\">// 设置“e”为“新Entry的下一个节点”</span></div><div class=\"line\">        table[bucketIndex] = <span class=\"keyword\">new</span> Entry&lt;K, V&gt;(hash, key, <span class=\"keyword\">value</span>, e);</div><div class=\"line\">        <span class=\"comment\">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (size++ &gt;= threshold)</div><div class=\"line\">            resize(<span class=\"number\">2</span> * table.length);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>注意这里倒数第三行的构造方法，将key-value键值对赋给table[bucketIndex]，并将其next指向元素e，这便将key-value放到了头结点中，并将之前的头结点接在了它的后面。该方法也说明，每次put键值对的时候，总是将新的该键值对放在table[bucketIndex]处（即头结点处）。两外注意最后两行代码，每次加入键值对时，都要判断当前已用的槽的数目是否大于等于阀值（容量*加载因子），如果大于等于，则进行扩容，将容量扩为原来容量的2倍。</p>\n<font color=\"#008080\"><strong>接下来重点来分析下求hash值和索引值的方法，这两个方法便是HashMap设计的最为核心的部分，二者结合能保证哈希表中的元素尽可能均匀地散列。</strong></font>\n\n<blockquote>\n<p>由hash值找到对应索引的方法如下：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span><span class=\"params\">(<span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> length)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> h &amp; (length<span class=\"number\">-1</span>);</div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure>\n<p>因为容量初始还是设定都会转化为2的幂次。故可以使用高效的位与运算替代模运算。</p>\n<blockquote>\n<p>计算hash值的方法如下:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">static</span> int hash(int h) &#123;</div><div class=\"line\">           <span class=\"attribute\">h</span><span class=\"regexp\"> ^=</span> (h &gt;&gt;&gt; <span class=\"number\">20</span>)<span class=\"regexp\"> ^</span> (h &gt;&gt;&gt; <span class=\"number\">12</span>);</div><div class=\"line\">           <span class=\"attribute\">return</span> h<span class=\"regexp\"> ^</span> (h &gt;&gt;&gt; <span class=\"number\">7</span>)<span class=\"regexp\"> ^</span> (h &gt;&gt;&gt; <span class=\"number\">4</span>);</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>JDK 的 HashMap 使用了一个 hash 方法对hash值使用位的操作，使hash值的计算效率很高。为什么这样做？主要是因为如果直接使用hashcode值，那么这是一个int值（8个16进制数，共32位），int值的范围正负21亿多，但是hash表没有那么长，一般比如初始16，自然散列地址需要对hash表长度取模运算，得到的余数才是地址下标。假设某个key的hashcode是0AAA0000，hash数组长默认16，如果不经过hash函数处理，该键值对会被存放在hash数组中下标为0处，因为0AAA0000 &amp; (16-1) = 0。过了一会儿又存储另外一个键值对，其key的hashcode是0BBB0000，得到数组下标依然是0，这就说明这是个实现得很差的hash算法，因为hashcode的1位全集中在前16位了，导致算出来的数组下标一直是0。<font color=\"red\">于是明明key相差很大的键值对，却存放在了同一个链表里，导致以后查询起来比较慢（蜕化为了顺序查找）。故JDK的设计者使用hash函数的若干次的移位、异或操作，把hashcode的“1位”变得“松散”，非常巧妙。</font></p>"},{"title":"高级for循环使用remove/add 问题","date":"2017-02-18T13:43:31.000Z","_content":"今天在高级for循环中用了一下remove发现报错，写了个demo测试看：\n```\n List<String> a = new ArrayList<String>();\n a.add(\"1\");\n a.add(\"2\");\n for (String temp : a) {\n     if(\"1\".equals(temp)){\n         a.remove(temp);\n} }\n```\n<!--more-->\n此时代码是没有问题的，运行正常；但是把\"1\".equals(temp)换成\"2\".equals(temp)之后，问题就出来了！\n\n```\nException in thread \"main\" java.util.ConcurrentModificationException\n\tat java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)\n\tat java.util.ArrayList$Itr.next(ArrayList.java:851)\n\tat main.exam.ForeachTest.main(ForeachTest.java:15)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)\n```\n\n 报了这么一堆异常。\n\n\n自己想了想画了个图：\n\n![这里写图片描述](http://img.blog.csdn.net/20161229172604530)\n\n看图就明白了，**该list每当删除一个元素时，集合的size方法的值都会减小1,这将直接导致集合中元素的索引重新排序**，进一步说，就是剩余所有元素的索引值都减1，正如上图所示，而for循环语句的局部变量i仍然在递增，这将导致删除操作发生跳跃。从而导致上述代码还有删除的问题。\n\n所以<font color=\"red\">不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。</font>如下：\n\n```\nIterator<String> it = a.iterator(); while(it.hasNext()){\nString temp = it.next(); if(删除元素的条件){\n        it.remove();\n       }\n}\n```\n\n","source":"_posts/高级for循环使用remove-add-问题.md","raw":"---\ntitle: 高级for循环使用remove/add 问题\ndate: 2017-02-18 21:43:31\ncategories: Java二三事\ntags: \n\t- Java\n---\n今天在高级for循环中用了一下remove发现报错，写了个demo测试看：\n```\n List<String> a = new ArrayList<String>();\n a.add(\"1\");\n a.add(\"2\");\n for (String temp : a) {\n     if(\"1\".equals(temp)){\n         a.remove(temp);\n} }\n```\n<!--more-->\n此时代码是没有问题的，运行正常；但是把\"1\".equals(temp)换成\"2\".equals(temp)之后，问题就出来了！\n\n```\nException in thread \"main\" java.util.ConcurrentModificationException\n\tat java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)\n\tat java.util.ArrayList$Itr.next(ArrayList.java:851)\n\tat main.exam.ForeachTest.main(ForeachTest.java:15)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)\n```\n\n 报了这么一堆异常。\n\n\n自己想了想画了个图：\n\n![这里写图片描述](http://img.blog.csdn.net/20161229172604530)\n\n看图就明白了，**该list每当删除一个元素时，集合的size方法的值都会减小1,这将直接导致集合中元素的索引重新排序**，进一步说，就是剩余所有元素的索引值都减1，正如上图所示，而for循环语句的局部变量i仍然在递增，这将导致删除操作发生跳跃。从而导致上述代码还有删除的问题。\n\n所以<font color=\"red\">不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。</font>如下：\n\n```\nIterator<String> it = a.iterator(); while(it.hasNext()){\nString temp = it.next(); if(删除元素的条件){\n        it.remove();\n       }\n}\n```\n\n","slug":"高级for循环使用remove-add-问题","published":1,"updated":"2017-02-18T13:47:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kge003prhso1l1c5qqt","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>今天在高级for循环中用了一下remove发现报错，写了个demo测试看：<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> List&lt;<span class=\"keyword\">String</span>&gt; a = <span class=\"keyword\">new</span> ArrayList&lt;<span class=\"keyword\">String</span>&gt;();</div><div class=\"line\"> a.<span class=\"built_in\">add</span>(<span class=\"string\">\"1\"</span>);</div><div class=\"line\"> a.<span class=\"built_in\">add</span>(<span class=\"string\">\"2\"</span>);</div><div class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">String</span> temp : a) &#123;</div><div class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"string\">\"1\"</span>.equals(temp))&#123;</div><div class=\"line\">         a.remove(temp);</div><div class=\"line\">&#125; &#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>此时代码是没有问题的，运行正常；但是把”1”.equals(temp)换成”2”.equals(temp)之后，问题就出来了！</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"main\"</span> java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.ConcurrentModificationException</span></div><div class=\"line\">\tat java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.ArrayList</span><span class=\"variable\">$Itr</span>.checkForComodification(ArrayList<span class=\"selector-class\">.java</span>:<span class=\"number\">901</span>)</div><div class=\"line\">\tat java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.ArrayList</span><span class=\"variable\">$Itr</span>.next(ArrayList<span class=\"selector-class\">.java</span>:<span class=\"number\">851</span>)</div><div class=\"line\">\tat main<span class=\"selector-class\">.exam</span><span class=\"selector-class\">.ForeachTest</span><span class=\"selector-class\">.main</span>(ForeachTest<span class=\"selector-class\">.java</span>:<span class=\"number\">15</span>)</div><div class=\"line\">\tat sun<span class=\"selector-class\">.reflect</span><span class=\"selector-class\">.NativeMethodAccessorImpl</span><span class=\"selector-class\">.invoke0</span>(Native Method)</div><div class=\"line\">\tat sun<span class=\"selector-class\">.reflect</span><span class=\"selector-class\">.NativeMethodAccessorImpl</span><span class=\"selector-class\">.invoke</span>(NativeMethodAccessorImpl<span class=\"selector-class\">.java</span>:<span class=\"number\">62</span>)</div><div class=\"line\">\tat sun<span class=\"selector-class\">.reflect</span><span class=\"selector-class\">.DelegatingMethodAccessorImpl</span><span class=\"selector-class\">.invoke</span>(DelegatingMethodAccessorImpl<span class=\"selector-class\">.java</span>:<span class=\"number\">43</span>)</div><div class=\"line\">\tat java<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.reflect</span><span class=\"selector-class\">.Method</span><span class=\"selector-class\">.invoke</span>(Method<span class=\"selector-class\">.java</span>:<span class=\"number\">497</span>)</div><div class=\"line\">\tat com<span class=\"selector-class\">.intellij</span><span class=\"selector-class\">.rt</span><span class=\"selector-class\">.execution</span><span class=\"selector-class\">.application</span><span class=\"selector-class\">.AppMain</span><span class=\"selector-class\">.main</span>(AppMain<span class=\"selector-class\">.java</span>:<span class=\"number\">147</span>)</div></pre></td></tr></table></figure>\n<p> 报了这么一堆异常。</p>\n<p>自己想了想画了个图：</p>\n<p><img src=\"http://img.blog.csdn.net/20161229172604530\" alt=\"这里写图片描述\"></p>\n<p>看图就明白了，<strong>该list每当删除一个元素时，集合的size方法的值都会减小1,这将直接导致集合中元素的索引重新排序</strong>，进一步说，就是剩余所有元素的索引值都减1，正如上图所示，而for循环语句的局部变量i仍然在递增，这将导致删除操作发生跳跃。从而导致上述代码还有删除的问题。</p>\n<p>所以<font color=\"red\">不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。</font>如下：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Iterator&lt;String&gt; </span><span class=\"keyword\">it </span>= a.<span class=\"keyword\">iterator(); </span><span class=\"meta\">while</span>(<span class=\"keyword\">it.hasNext())&#123;</span></div><div class=\"line\"><span class=\"keyword\">String </span>temp = <span class=\"keyword\">it.next(); </span><span class=\"meta\">if</span>(删除元素的条件)&#123;</div><div class=\"line\">        <span class=\"keyword\">it.remove();</span></div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>今天在高级for循环中用了一下remove发现报错，写了个demo测试看：<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> List&lt;<span class=\"keyword\">String</span>&gt; a = <span class=\"keyword\">new</span> ArrayList&lt;<span class=\"keyword\">String</span>&gt;();</div><div class=\"line\"> a.<span class=\"built_in\">add</span>(<span class=\"string\">\"1\"</span>);</div><div class=\"line\"> a.<span class=\"built_in\">add</span>(<span class=\"string\">\"2\"</span>);</div><div class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">String</span> temp : a) &#123;</div><div class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"string\">\"1\"</span>.equals(temp))&#123;</div><div class=\"line\">         a.remove(temp);</div><div class=\"line\">&#125; &#125;</div></pre></td></tr></table></figure></p>","more":"<p>此时代码是没有问题的，运行正常；但是把”1”.equals(temp)换成”2”.equals(temp)之后，问题就出来了！</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"main\"</span> java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.ConcurrentModificationException</span></div><div class=\"line\">\tat java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.ArrayList</span><span class=\"variable\">$Itr</span>.checkForComodification(ArrayList<span class=\"selector-class\">.java</span>:<span class=\"number\">901</span>)</div><div class=\"line\">\tat java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.ArrayList</span><span class=\"variable\">$Itr</span>.next(ArrayList<span class=\"selector-class\">.java</span>:<span class=\"number\">851</span>)</div><div class=\"line\">\tat main<span class=\"selector-class\">.exam</span><span class=\"selector-class\">.ForeachTest</span><span class=\"selector-class\">.main</span>(ForeachTest<span class=\"selector-class\">.java</span>:<span class=\"number\">15</span>)</div><div class=\"line\">\tat sun<span class=\"selector-class\">.reflect</span><span class=\"selector-class\">.NativeMethodAccessorImpl</span><span class=\"selector-class\">.invoke0</span>(Native Method)</div><div class=\"line\">\tat sun<span class=\"selector-class\">.reflect</span><span class=\"selector-class\">.NativeMethodAccessorImpl</span><span class=\"selector-class\">.invoke</span>(NativeMethodAccessorImpl<span class=\"selector-class\">.java</span>:<span class=\"number\">62</span>)</div><div class=\"line\">\tat sun<span class=\"selector-class\">.reflect</span><span class=\"selector-class\">.DelegatingMethodAccessorImpl</span><span class=\"selector-class\">.invoke</span>(DelegatingMethodAccessorImpl<span class=\"selector-class\">.java</span>:<span class=\"number\">43</span>)</div><div class=\"line\">\tat java<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.reflect</span><span class=\"selector-class\">.Method</span><span class=\"selector-class\">.invoke</span>(Method<span class=\"selector-class\">.java</span>:<span class=\"number\">497</span>)</div><div class=\"line\">\tat com<span class=\"selector-class\">.intellij</span><span class=\"selector-class\">.rt</span><span class=\"selector-class\">.execution</span><span class=\"selector-class\">.application</span><span class=\"selector-class\">.AppMain</span><span class=\"selector-class\">.main</span>(AppMain<span class=\"selector-class\">.java</span>:<span class=\"number\">147</span>)</div></pre></td></tr></table></figure>\n<p> 报了这么一堆异常。</p>\n<p>自己想了想画了个图：</p>\n<p><img src=\"http://img.blog.csdn.net/20161229172604530\" alt=\"这里写图片描述\"></p>\n<p>看图就明白了，<strong>该list每当删除一个元素时，集合的size方法的值都会减小1,这将直接导致集合中元素的索引重新排序</strong>，进一步说，就是剩余所有元素的索引值都减1，正如上图所示，而for循环语句的局部变量i仍然在递增，这将导致删除操作发生跳跃。从而导致上述代码还有删除的问题。</p>\n<p>所以<font color=\"red\">不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。</font>如下：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Iterator&lt;String&gt; </span><span class=\"keyword\">it </span>= a.<span class=\"keyword\">iterator(); </span><span class=\"meta\">while</span>(<span class=\"keyword\">it.hasNext())&#123;</span></div><div class=\"line\"><span class=\"keyword\">String </span>temp = <span class=\"keyword\">it.next(); </span><span class=\"meta\">if</span>(删除元素的条件)&#123;</div><div class=\"line\">        <span class=\"keyword\">it.remove();</span></div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"黑车司机发车器Java版","date":"2017-02-18T06:42:57.000Z","_content":"\n既然是发的黑车，磁力链接那套就不必仔细研究了，\n磁力链接其实类似于这样（下面的这个是真车）：\n\n>magnet:?xt=urn:btih:3AEA94481B0A406C66083F14C6F42635C14562C2\n\n<!--more-->\n\n说白了就是随机填充 40 个字母或数字，不过有一定几率会发出真车。\n\n <img src=\"https://ooo.0o0.ooo/2016/12/25/585f760101362.png \" width = \"300\" height = \"300\" alt=\"图片名称\" align=center />\n\n<hr>\n\n代码实现：\n```\n public class OldDriver {\n\tpublic static void main(String[] args) {\n\t\tjava.util.Scanner input = new java.util.Scanner(System.in);\n\t\tSystem.out.println(\"黑车司机虚假磁力链接发车器\");\n\t\tSystem.out.print(\"输入需要发的黑车数量：\");\n\t\tint ljs = input.nextInt();\n\t\tfor (int i=1;i<=ljs;i++){\n\t\t\tSystem.out.println(\"magnet:?xt=urn:btih:\"+CLSC());\n/*调用 CLSC 函数，获取 40 个随机生成的字符串（CLSC指 磁力生成）*/\n\t\t}\n\t}\n\tpublic static String CLSC(){\n\t\tString cllj = \"\";\n\t\tString randomchar;\n\t\tString chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\t\tfor (int i=0;i<40;i++){\n\t\t\tint RandomNumber = (int)(Math.random()*35);\n/*随机生成一个范围在 [0,35] 的数字*/\n\t\t\trandomchar = \"\" + chars.charAt(RandomNumber);\n/*随机选择一个字符，字符位置由上一步随机数字决定*/\n\t\t\tcllj = cllj+randomchar;\n/*将随机字符附到 cllj 字符串上，重复 40 次*/\n\t\t}\n\t\treturn cllj;\n\t}\n}\n```\n\n运行效果：\n```\n黑车司机虚假磁力链接发车器\n输入需要发的黑车数量：5\nmagnet:?xt=urn:btih:126XT8JCPZ6ZWV1Q77OSOAD2P2UOWOAZEIGNN0UH\nmagnet:?xt=urn:btih:VEKIXXTDDC6STSZN2IS1IQSW6RHJ6ZGC7NEGYIAJ\nmagnet:?xt=urn:btih:G8Z7O3AIGY2C1PRRNJEZ6Q1VY3HGZQ34E2MOQUWR\nmagnet:?xt=urn:btih:MRXYGZUFONLDPN5G4E5EDCWMWLI00PB8ZVK6IIKQ\nmagnet:?xt=urn:btih:3WQ1IYXW0MD3Z32DT80NCJBLTAJ0FC837TB2HW2M\n```","source":"_posts/黑车司机发车器Java版.md","raw":"---\ntitle: 黑车司机发车器Java版\ndate: 2017-02-18 14:42:57\ncategories: Java二三事\ntags: \n\t- Java\n\t- 黑车\n\t- 种子\n---\n\n既然是发的黑车，磁力链接那套就不必仔细研究了，\n磁力链接其实类似于这样（下面的这个是真车）：\n\n>magnet:?xt=urn:btih:3AEA94481B0A406C66083F14C6F42635C14562C2\n\n<!--more-->\n\n说白了就是随机填充 40 个字母或数字，不过有一定几率会发出真车。\n\n <img src=\"https://ooo.0o0.ooo/2016/12/25/585f760101362.png \" width = \"300\" height = \"300\" alt=\"图片名称\" align=center />\n\n<hr>\n\n代码实现：\n```\n public class OldDriver {\n\tpublic static void main(String[] args) {\n\t\tjava.util.Scanner input = new java.util.Scanner(System.in);\n\t\tSystem.out.println(\"黑车司机虚假磁力链接发车器\");\n\t\tSystem.out.print(\"输入需要发的黑车数量：\");\n\t\tint ljs = input.nextInt();\n\t\tfor (int i=1;i<=ljs;i++){\n\t\t\tSystem.out.println(\"magnet:?xt=urn:btih:\"+CLSC());\n/*调用 CLSC 函数，获取 40 个随机生成的字符串（CLSC指 磁力生成）*/\n\t\t}\n\t}\n\tpublic static String CLSC(){\n\t\tString cllj = \"\";\n\t\tString randomchar;\n\t\tString chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\t\tfor (int i=0;i<40;i++){\n\t\t\tint RandomNumber = (int)(Math.random()*35);\n/*随机生成一个范围在 [0,35] 的数字*/\n\t\t\trandomchar = \"\" + chars.charAt(RandomNumber);\n/*随机选择一个字符，字符位置由上一步随机数字决定*/\n\t\t\tcllj = cllj+randomchar;\n/*将随机字符附到 cllj 字符串上，重复 40 次*/\n\t\t}\n\t\treturn cllj;\n\t}\n}\n```\n\n运行效果：\n```\n黑车司机虚假磁力链接发车器\n输入需要发的黑车数量：5\nmagnet:?xt=urn:btih:126XT8JCPZ6ZWV1Q77OSOAD2P2UOWOAZEIGNN0UH\nmagnet:?xt=urn:btih:VEKIXXTDDC6STSZN2IS1IQSW6RHJ6ZGC7NEGYIAJ\nmagnet:?xt=urn:btih:G8Z7O3AIGY2C1PRRNJEZ6Q1VY3HGZQ34E2MOQUWR\nmagnet:?xt=urn:btih:MRXYGZUFONLDPN5G4E5EDCWMWLI00PB8ZVK6IIKQ\nmagnet:?xt=urn:btih:3WQ1IYXW0MD3Z32DT80NCJBLTAJ0FC837TB2HW2M\n```","slug":"黑车司机发车器Java版","published":1,"updated":"2017-02-18T07:33:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kgf003trhsoxqpyd3hd","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>既然是发的黑车，磁力链接那套就不必仔细研究了，<br>磁力链接其实类似于这样（下面的这个是真车）：</p>\n<blockquote>\n<p>magnet:?xt=urn:btih:3AEA94481B0A406C66083F14C6F42635C14562C2</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>说白了就是随机填充 40 个字母或数字，不过有一定几率会发出真车。</p>\n<p> <img src=\"https://ooo.0o0.ooo/2016/12/25/585f760101362.png \" width=\"300\" height=\"300\" alt=\"图片名称\" align=\"center\"></p>\n<hr>\n\n<p>代码实现：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> OldDriver &#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">\t\tjava.util.Scanner input = <span class=\"keyword\">new</span> java.util.Scanner(System.in);</div><div class=\"line\">\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"黑车司机虚假磁力链接发车器\"</span>);</div><div class=\"line\">\t\tSystem.out.<span class=\"built_in\">print</span>(<span class=\"string\">\"输入需要发的黑车数量：\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> ljs = input.nextInt();</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=ljs;i++)&#123;</div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"magnet:?xt=urn:btih:\"</span>+CLSC());</div><div class=\"line\"><span class=\"comment\">/*调用 CLSC 函数，获取 40 个随机生成的字符串（CLSC指 磁力生成）*/</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> CLSC()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">String</span> cllj = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">String</span> randomchar;</div><div class=\"line\">\t\t<span class=\"keyword\">String</span> chars = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">40</span>;i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> RandomNumber = (<span class=\"keyword\">int</span>)(Math.<span class=\"built_in\">random</span>()*<span class=\"number\">35</span>);</div><div class=\"line\"><span class=\"comment\">/*随机生成一个范围在 [0,35] 的数字*/</span></div><div class=\"line\">\t\t\trandomchar = <span class=\"string\">\"\"</span> + chars.charAt(RandomNumber);</div><div class=\"line\"><span class=\"comment\">/*随机选择一个字符，字符位置由上一步随机数字决定*/</span></div><div class=\"line\">\t\t\tcllj = cllj+randomchar;</div><div class=\"line\"><span class=\"comment\">/*将随机字符附到 cllj 字符串上，重复 40 次*/</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> cllj;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">黑车司机虚假磁力链接发车器</div><div class=\"line\">输入需要发的黑车数量：<span class=\"number\">5</span></div><div class=\"line\"><span class=\"string\">magnet:</span>?xt=urn:<span class=\"string\">btih:</span><span class=\"number\">126</span>XT8JCPZ6ZWV1Q77OSOAD2P2UOWOAZEIGNN0UH</div><div class=\"line\"><span class=\"string\">magnet:</span>?xt=urn:<span class=\"string\">btih:</span>VEKIXXTDDC6STSZN2IS1IQSW6RHJ6ZGC7NEGYIAJ</div><div class=\"line\"><span class=\"string\">magnet:</span>?xt=urn:<span class=\"string\">btih:</span>G8Z7O3AIGY2C1PRRNJEZ6Q1VY3HGZQ34E2MOQUWR</div><div class=\"line\"><span class=\"string\">magnet:</span>?xt=urn:<span class=\"string\">btih:</span>MRXYGZUFONLDPN5G4E5EDCWMWLI00PB8ZVK6IIKQ</div><div class=\"line\"><span class=\"string\">magnet:</span>?xt=urn:<span class=\"string\">btih:</span><span class=\"number\">3</span>WQ1IYXW0MD3Z32DT80NCJBLTAJ0FC837TB2HW2M</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>既然是发的黑车，磁力链接那套就不必仔细研究了，<br>磁力链接其实类似于这样（下面的这个是真车）：</p>\n<blockquote>\n<p>magnet:?xt=urn:btih:3AEA94481B0A406C66083F14C6F42635C14562C2</p>\n</blockquote>","more":"<p>说白了就是随机填充 40 个字母或数字，不过有一定几率会发出真车。</p>\n<p> <img src=\"https://ooo.0o0.ooo/2016/12/25/585f760101362.png \" width=\"300\" height=\"300\" alt=\"图片名称\" align=\"center\"></p>\n<hr>\n\n<p>代码实现：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> OldDriver &#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">\t\tjava.util.Scanner input = <span class=\"keyword\">new</span> java.util.Scanner(System.in);</div><div class=\"line\">\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"黑车司机虚假磁力链接发车器\"</span>);</div><div class=\"line\">\t\tSystem.out.<span class=\"built_in\">print</span>(<span class=\"string\">\"输入需要发的黑车数量：\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> ljs = input.nextInt();</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=ljs;i++)&#123;</div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"magnet:?xt=urn:btih:\"</span>+CLSC());</div><div class=\"line\"><span class=\"comment\">/*调用 CLSC 函数，获取 40 个随机生成的字符串（CLSC指 磁力生成）*/</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> CLSC()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">String</span> cllj = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">String</span> randomchar;</div><div class=\"line\">\t\t<span class=\"keyword\">String</span> chars = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">40</span>;i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> RandomNumber = (<span class=\"keyword\">int</span>)(Math.<span class=\"built_in\">random</span>()*<span class=\"number\">35</span>);</div><div class=\"line\"><span class=\"comment\">/*随机生成一个范围在 [0,35] 的数字*/</span></div><div class=\"line\">\t\t\trandomchar = <span class=\"string\">\"\"</span> + chars.charAt(RandomNumber);</div><div class=\"line\"><span class=\"comment\">/*随机选择一个字符，字符位置由上一步随机数字决定*/</span></div><div class=\"line\">\t\t\tcllj = cllj+randomchar;</div><div class=\"line\"><span class=\"comment\">/*将随机字符附到 cllj 字符串上，重复 40 次*/</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> cllj;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行效果：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">黑车司机虚假磁力链接发车器</div><div class=\"line\">输入需要发的黑车数量：<span class=\"number\">5</span></div><div class=\"line\"><span class=\"string\">magnet:</span>?xt=urn:<span class=\"string\">btih:</span><span class=\"number\">126</span>XT8JCPZ6ZWV1Q77OSOAD2P2UOWOAZEIGNN0UH</div><div class=\"line\"><span class=\"string\">magnet:</span>?xt=urn:<span class=\"string\">btih:</span>VEKIXXTDDC6STSZN2IS1IQSW6RHJ6ZGC7NEGYIAJ</div><div class=\"line\"><span class=\"string\">magnet:</span>?xt=urn:<span class=\"string\">btih:</span>G8Z7O3AIGY2C1PRRNJEZ6Q1VY3HGZQ34E2MOQUWR</div><div class=\"line\"><span class=\"string\">magnet:</span>?xt=urn:<span class=\"string\">btih:</span>MRXYGZUFONLDPN5G4E5EDCWMWLI00PB8ZVK6IIKQ</div><div class=\"line\"><span class=\"string\">magnet:</span>?xt=urn:<span class=\"string\">btih:</span><span class=\"number\">3</span>WQ1IYXW0MD3Z32DT80NCJBLTAJ0FC837TB2HW2M</div></pre></td></tr></table></figure></p>"},{"title":"系统学习Spring(三)——Bean的高级装配","date":"2017-05-15T08:50:55.000Z","_content":"在软件开发中，常常设置不同的运行环境：开发环境、预发环境、性能测试环境和生产环境等等。\n\n不同的环境下，应用程序的配置项也不同，例如数据库配置、远程服务地址等。<!--more-->以数据库配置为例子，在开发环境中你可能使用一个嵌入式的内存数据库，并将测试数据放在一个脚本文件中。例如，在一个Spring的配置类中，可能需要定义如下的bean：\n\n```\n@Bean(destroyMethod = \"shutdown\")\npublic DataSource dataSource() {\n    return new EmbeddedDatabaseBuilder()\n            .addScript(\"classpath:schema.sql\")\n            .addScript(\"classpath:test-data.sql\")\n            .build();\n}\n```\n使用EmbeddedDatabaseBuilder这个构建器可以建立一个内存数据库，通过指定路径下的schema.sql文件中的内容可以建立数据库的表定义，通过test-data.sql可以准备好测试数据。\n\n开发环境下可以这么用，但是在生产环境下不可以。在生产环境下，你可能需要从容器中使用JNDI获取DataSource对象，这中情况下，对应的创建代码是：\n\n```\n@Bean\npublic DataSource dataSource() {\n    JndiObjectFactoryBean jndiObjectFactoryBean =\n             new JndiObjectFactoryBean();\n    jndiObjectFactoryBean.setJndiName(\"jdbc/myDS\");\n    jndiObjectFactoryBean.setResourceRef(true);\n    jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class);\n    return (DataSource) jndiObjectFactoryBean.getObject();\n}\n```\n使用JNDI管理DataSource对象，很适合生产环境，但是对于日常开发环境来说太复杂了。\n\n另外，在QA环境下你也可以选择另外一种DataSource配置，可以选择使用普通的DBCP连接池，例如：\n\n```\n@Bean(destroyMethod = \"close\")\npublic DataSource dataSource() {\n    BasicDataSource dataSource = new BasicDataSource();\n    dataSource.setUrl(\"jdbc:h2:tcp://dbserver/~/test\");\n    dataSource.setDriverClassName(\"org.h2.Driver\");\n    dataSource.setUsername(\"sa\");\n    dataSource.setPassword(\"password\");\n    dataSource.setInitialSize(20);\n    dataSource.setMaxActive(30);\n    return dataSource;\n}\n\n```\n上述三种办法可以为不同环境创建各自需要的javax.sql.DataSource实例，这个例子很适合介绍不同环境下创建bean，那么有没有一种办法：只需要打包应用一次，然后部署到不同的开发环境下就会自动选择不同的bean创建策略。一种方法是创建三个独立的配置文件，然后利用Maven profiles的预编译命令处理在特定的环境下打包哪个配置文件到最终的应用中。这种解决方法有一个问题，即在切换到不同环境时，需要重新构建应用——从开发环境到测试环境没有问题，但是从测试环境到生产环境也需要重新构建则可能引入一定风险。\n\nSpring提供了对应的方法，使得在环境切换时不需要重新构建整个应用。\n\n<h2>配置profile beans</h2>\nSpring提供的方法不是在构件时针对不同的环境决策，而是在运行时，这样，一个应用只需要构建一次，就可以在开发、QA和生产环境运行。\n\n在Spring 3.1之中，可以使用@Profile注解来修饰JavaConfig类，当某个环境对应的profile被激活时，就使用对应环境下的配置类。\n\n在Spring3.2之后，则可以在函数级别使用@Profile注解（是的，跟@Bean注解同时作用在函数上），这样就可以将各个环境的下的bean定义都放在同一个配置类中，还是以之前的例子：\n\n利用注解配置\n\n```\npackage com.spring.sample.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;\nimport org.springframework.jndi.JndiObjectFactoryBean;\nimport javax.sql.DataSource;\n\n@Configuration\npublic class DataSourceConfig {\n    @Bean(destroyMethod = \"shutdown\")\n    @Profile(\"dev\")\n    public DataSource embeddedDataSource() {\n        return new EmbeddedDatabaseBuilder()\n                .setType(EmbeddedDatabaseType.H2)\n                .addScript(\"classpath:schema.sql\")\n                .addScript(\"classpath:test-data.sql\")\n                .build();\n    }\n    @Bean\n    @Profile(\"prod\")\n    public DataSource dataSource() {\n        JndiObjectFactoryBean jndiObjectFactoryBean =\n                new JndiObjectFactoryBean();\n        jndiObjectFactoryBean.setJndiName(\"jdbc/myDS\");\n        jndiObjectFactoryBean.setResourceRef(true); \n        jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class);\n        return (DataSource) jndiObjectFactoryBean.getObject();\n    }\n}\n```\n除了被@Profile修饰的其他bean，无论在什么开发环境下都会被创建。\n\n利用XML文件配置\n\n和在JavaConfig的用法一样，可以从文件级别定义环境信息，也可以将各个环境的bean放在一个XML配置文件中。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"\n       xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:jee=\"http://www.springframework.org/schema/jee\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \nhttp://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd\">\n\n       <beans profile=\"dev\">\n              <jdbc:embedded-database id=\"dataSource\">\n                     <jdbc:script location=\"classpath:schema.sql\"/>\n                     <jdbc:script location=\"classpath:test-data.sql\"/>\n              </jdbc:embedded-database>\n       </beans>\n\n       <beans profile=\"qa\">\n              <bean id=\"dataSource\"\n                    class=\"org.apache.commons.dbcp.BasicDataSource\"\n                    destroy-method=\"close\"\n                    p:url=\"jdbc:h2:tcp://dbserver/~/test\"\n                    p:driverClassName=\"org.h2.Driver\"\n                    p:username=\"sa\"\n                    p:password=\"password\"\n                    p:initialSize=\"20\"\n                    p:maxActive=\"30\" />\n       </beans>\n\n       <beans profile=\"prod\">\n              <jee:jndi-lookup id=\"dataSource\"\n                               jndi-name=\"jdbc/MyDatabase\"\n                               resource-ref=\"true\"\n                               proxy-interface=\"javax.sql.DataSource\"/>\n       </beans>\n</beans>\n```\n上述三个javax.sql.DataSource的bean，ID都是dataSource，但是在运行的时候只会创建一个bean。\n\n<h2>激活profiles</h2>\nSpring提供了spring.profiles.active和spring.profiles.default这两个配置项定义激活哪个profile。如果应用中设置了spring.profiles.active选项，则Spring根据该配置项的值激活对应的profile，如果没有设置spring.profiles.active，则Spring会再查看spring.profiles.default这个配置项的值，如果这两个变量都没有设置，则Spring只会创建没有被profile修饰的bean。\n\n有下列几种方法设置上述两个变量的值：\n<li>DispatcherServlet的初始化参数\n<li>web应用的上下文参数(context parameters)\n<li>JNDI项\n<li>环境变量\n<li>JVM系统属性\n<li>在集成测试类上使用@ActiveProfiles注解\n\n开发人员可以按自己的需求设置spring.profiles.active和spring.profiles.default这两个属性的组合。\n\n我推荐在web应用的web.xml文件中设置spring.profiles.default属性——通过设置DispatcherServlet的初始参数和<context-param>标签。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n         version=\"3.1\">\n    <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath*:applicationContext.xml</param-value>\n  </context-param>\n\n    <context-param>\n        <param-name>spring.profiles.default</param-name>\n        <param-value>dev</param-value>\n    </context-param>\n\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n    <servlet>\n        <servlet-name>appServletName</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>        <init-param>\n            <param-name>spring.profiles.default</param-name>\n            <param-value>dev</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>appServletName</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n按照上述方法设置spring.profiles.default属性，任何开发人员只需要下载源码就可以在开发环境中运行程序以及测试。\n\n然后，当应用需要进入QA、生产环境时，负责部署的开发者只需要通过系统属性、环境变量或者JNDI等方法设置spring.profiles.active属性即可，因为spring.profiles.active优先级更高。\n\n另外，在运行集成测试时，可能希望运行跟生产环境下相同的配置；但是，如果配置重需要的beans被profiles修饰的，则需要在跑单元测试之前激活对应的profiles。\n\nSpring提供了@ActiveProfiles注解来激活指定的profiles，用法如下：\n\n<h2>Conditional beans</h2>\n假设你希望只有在项目中引入特定的依赖库时、或者只有当特定的bean已经被创建时、或者是设置了某个环境变量时，某个bean才被创建。\n\nSpring 4之前很难实现这种需求，不过在Spring 4中提出了一个新的注解——@Conditional，该注解作用于@Bean注解修饰的方法上，通过判断指定的条件是否满足来决定是否创建该bean。\n\n举个例子，工程中有一个MagicBean，你希望只有当magic环境变量被赋值时才创建MagicBean，否则该Bean的创建函数被忽略。\n\n```\n@Bean\n@Conditional(MagicExistsCondition.class)\npublic MagicBean magicBean() {\n    return new MagicBean();\n}\n```\n这个例子表示：只有当MagicExistsCondition类已经存在时，才会创建MagicBean。\n\n@Conditional注解的源码列举如下：\n\n```\npackage org.springframework.context.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport org.springframework.context.annotation.Condition;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\npublic @interface Conditional {\n    Class<? extends Condition>[] value();\n}\n```\n可以看出，传入@Conditional注解的类一定要实现Condition接口，该接口提供matchs()方法——如果matches()方法返回true，则被@Conditional注解修饰的bean就会创建，否则对应的bean不会创建。\n\n在这个例子中，MagicExistsCondition类应该实现Condition接口，并在matches()方法中实现具体的判断条件，代码如下所示：\n\n```\npackage com.spring.sample.config;\n\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\npublic class MagicExistsCondition implements Condition {\n    public boolean matches(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata) {\n        Environment env = conditionContext.getEnvironment();\n        return env.containsProperty(\"magic\"); //检查magic环境变量是否被设置\n    }\n}\n```\n上述代码中的matchs()方法简单且有效：它首先获取环境变量，然后再判断环境变量中是否存在magic属性。在这个例子中，magic的值是多少并不重要，它只要存在就好。\n\nMagicExistsCondition的matchs()方法是通过ConditionContext获取了环境实例。matchs()方法的参数有两个：ConditionContext和AnnotatedTypeMetadata，分别看下这两个接口的源码：\n\n```\n//ConditionContext\npublic interface ConditionContext {\n    BeanDefinitionRegistry getRegistry();\n    ConfigurableListableBeanFactory getBeanFactory();\n    Environment getEnvironment();\n    ResourceLoader getResourceLoader();\n    ClassLoader getClassLoader();\n}\n```\n利用ConditionContext接口可做的事情很多，列举如下：\n\n<li>通过getRegistry()方法返回的BeanDefinitionRegistry实例，可以检查bean的定义；\n<li>通过getBeanFactory()方法返回的ConfigurableListableBeanFactory实例，可以检查某个bean是否存在于应用上下文中，还可以获得该bean的属性；\n<li>通过getEnvironment()方法返回的Environment实例，可以检查指定环境变量是否被设置，还可以获得该环境变量的值；\n<li>通过getResourceLoader()方法返回的ResourceLoader实例，可以得到应用加载的资源包含的内容；\n<li>通过getClassLoader()方法返回的ClassLoader实例，可以检查某个类是否存在。\n\n```\n//AnnotatedTypeMetadata\npublic interface AnnotatedTypeMetadata {\n    boolean isAnnotated(String var1);\n    Map<String, Object> getAnnotationAttributes(String var1);\n    Map<String, Object> getAnnotationAttributes(String var1, boolean var2);\n    MultiValueMap<String, Object> getAllAnnotationAttributes(String var1);\n    MultiValueMap<String, Object> getAllAnnotationAttributes(String var1, boolean var2);\n}\n\n```\n\n通过isAnnotated()方法可以检查@Bean方法是否被指定的注解类型修饰；通过其他方法可以获得修饰@Bean方法的注解的属性。\n\n从Spring 4开始，@Profile注解也利用@Conditional注解和Condition接口进行了重构。作为分析@Conditional注解和Condition接口的另一个例子，我们可以看下在Spring 4中@Profile注解的实现。\n\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Documented\n@Conditional({ProfileCondition.class})\npublic @interface Profile {\n    String[] value();\n}\n```\n可以看出，@Profile注解的实现被@Conditional注解修饰，并且依赖于ProfileCondition类——该类是Condition接口的实现。如下列代码所示，ProfileCondition利用ConditionContext和AnnotatedTypeMetadata两个接口提供的方法进行决策。\n\n```\nclass ProfileCondition implements Condition {\n    ProfileCondition() {\n    }\n\n    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n        if(context.getEnvironment() != null) {\n            MultiValueMap attrs = metadata.getAllAnnotationAttributes(Profile.class.getName());\n            if(attrs != null) {\n                Iterator var4 = ((List)attrs.get(\"value\")).iterator();\n\n                Object value;\n                do {\n                    if(!var4.hasNext()) {\n                        return false;\n                    }\n                    value = var4.next();\n                } while(!context.getEnvironment().acceptsProfiles((String[])((String[])value)));\n\n                return true;//传给@Profile注解的参数对应的环境profiles已激活\n            }\n        }\n\n        return true; //默认为true\n    }\n}\n\n```\n可以看出，这代码写得不太好理解:ProfileCondition通过AnnotatedTypeMetadata实例获取与@Profile注解相关的所有注解属性；然后检查每个属性的值（存放在value实例中），对应的profiles别激活——即context.getEnvironment().acceptsProfiles(((String[]) value))的返回值是true，则matchs()方法返回true。\n\nEnvironment类提供了可以检查profiles的相关方法，用于检查哪个profile被激活：\n\n<li>String[] getActiveProfiles()——返回被激活的profiles数组；\n<li>String[] getDefaultProfiles()——返回默认的profiles数组；\n<li>boolean acceptsProfiles(String... profiles)——如果某个profiles被激活，则返回true。\n\n<h2>处理自动装配的歧义</h2>\n在一文中介绍了如何通过自动装配让Spring自动简历bean之间的依赖关系——自动装配非常有用，通过自动装配可以减少大量显式配置代码。不过，自动装配（autowiring）要求bean的匹配具备唯一性，否则就会产生歧义，从而抛出异常。\n\n举个例子说明自动装配的歧义性，假设你有如下自动装配的代码：\n\n```\n@Autowired\npublic void setDessert(Dessert dessert) {\n    this.dessert = dessert;\n}\n```\nDessert是一个接口，有三个对应的实现：\n\n```\n@Component\npublic class Cake implements Dessert { ... }\n@Component\npublic class Cookies implements Dessert { ... }\n@Component\npublic class IceCream implements Dessert { ... }\n```\n因为上述三个类都被@Component注解修饰，因此都会被component-scanning发现并在应用上下文中创建类型为Dessert的bean；然后，当Spring试图为setDessert()方法装配对应的Dessert参数时，就会面临多个选择；然后Spring就会抛出异常——NoUniqueBeanDefinitionException。\n\n虽然在实际开发中并不会经常遇到这种歧义性，但是它确实是个问题，幸运的是Spring也提供了对应的解决办法。\n\n<h3> @Primary指定优先bean</h3>\n在定义bean时，可以通过指定一个优先级高的bean来消除自动装配过程中遇到的歧义问题。\n\n在上述例子中，可以选择一个最重要的Bean，用@Primary注解修饰：\n\n```\n@Component\n@Primary\npublic class IceCream implements Dessert { ... }\n```\n如果你没有使用自动扫描，而是使用基于Java的显式配置文件，则如下定义@Bean方法：\n\n```\n@Bean\n@Primary\npublic Dessert iceCream() {\n  return new IceCream();\n}\n```\n如果使用基于XML文件的显式配置，则如下定义：\n\n```\n<bean id=\"iceCream\"\n             class=\"com.dasserteater.IceCream\"\n             primary=\"true\" />\n```\n不论哪种形式，效果都一样：告诉Spring选择primary bean来消除歧义。不过，当应用中指定多个Primary bean时，Spring又不会选择了，再次遇到歧义。Spring还提供了功能更强大的歧义消除机制——@Qualifiers注解。\n\n<h3>@Qualifier指定bean的ID</h3>\n@Qualifier注解可以跟@Autowired或@Inject一起使用，指定需要导入的bean的ID，例如，上面例子中的setDessert()方法可以这么写：\n\n```\n@Autowired\n@Qualifier(\"iceCream\")\npublic void setDessert(Dessert dessert) {\n    this.dessert = dessert;\n}\n```\n每个bean都具备唯一的ID，因此此处彻底消除了歧义。\n\n如果进一步深究，@Qualifier(\"iceCream\")表示以\"iceCream\"字符串作为qualifier的bean。每个bean都有一个qualifier，内容与该bean的ID相同。因此，上述装配的实际含义是：setDessert()方法会装配一个以\"iceCream\"为qualifier的bean，只不过碰巧是该bean的ID也是iceCream。\n\n以默认的bean的ID作为qualifier非常简单，但是也会引发新的问题：如果将来对IceCream类进行重构，它的类名发生改变（例如Gelato）怎么办？在这种情况下，该bean对应的ID和默认的qualifier将变为\"gelato\"，然后自动装配就会失败。\n\n问题的关键在于：你需要指定一个qualifier，该内容不会受目标类的类名的限制和影响。\n\n**开发者可以给某个bean设定自定义的qualifier**，形式如下：\n\n```\n@Component\n@Qualifier(\"cold\")\npublic class IceCream implements Dessert { ... }\n```\n然后，在要注入的地方也使用\"cold\"作为qualifier来获得该bean：\n\n```\n@Autowired\n@Qualifier(\"cold\")\npublic void setDessert(Dessert dessert) {\n    this.dessert = dessert;\n}\n```\n即使在JavaConfig中，也可以使用@Qualifier指定某个bean的qualifier，例如：\n\n```\n@Bean\n@Qualifier(\"cold\")\npublic Dessert iceCream() {\n  return new IceCream();\n}\n```\n在使用自定义的@Qualifier值时，最好选择一个含义准确的名词，不要随意使用名词。在这个例子中，我们描述IceCream为\"cold\"bean，在装配时，可以读作：给我来一份cold dessert，恰好指定为IceCream。类似的，我们把Cake叫作\"soft\"，把Cookies*叫作\"crispy\"。\n\n\n**使用自定义的qualifiers优于使用基于bean的ID的默认qualifier**，但是当你有多个bean共享同一个qualifier时，还是会有歧义。例如，假设你定义一个新的Dessertbean：\n\n```\n@Component\n@Qualifier(\"cold\")\npublic class Popsicle implements Dessert { ... }\n```\n现在你又有两个\"cold\"为qualifier的bean了，再次遇到歧义：最直白的想法是多增加一个限制条件，例如IceCream会成为下面的定义：\n\n```\n@Component\n@Qualifier(\"cold\")\n@Qualifier(\"creamy\")\npublic class IceCream implements Dessert { ... }\n```\n而Posicle类则如下定义：\n\n```\n@Component\n@Qualifier(\"cold\")\n@Qualifier(\"fruity\")\npublic class Popsicle implements Dessert { ... }\n```\n在装配bean的时候，则需要使用两个限制条件，如下：\n\n```\n@Bean\n@Qualifier(\"cold\")\n@Qualifier(\"creamy\")\npublic Dessert iceCream() {\n  return new IceCream();\n}\n```\n这里有个小问题：Java 不允许在同一个item上加多个相同类型的注解（Java 8已经支持），但是这种写法显然很啰嗦。\n\n解决办法是：通过定义自己的qualifier注解，例如，可以创建一个@Cold注解来代替@Qualifier(\"cold\")：\n\n```\n@Target({ElementType.CONSTRUCTOR, ElementType.FIELD,\n                  ElementType.METHOD, ElementType.TYPE})\n@Rentention(RetentionPolicy.RUNTIME)\n@Qualifier\npublic @interface Cold { }\n```\n可以创建一个@Creamy注解来代替@Qualifier(\"creamy\")：\n\n```\n@Target({ElementType.CONSTRUCTOR, ElementType.FIELD,\n                  ElementType.METHOD, ElementType.TYPE})\n@Rentention(RetentionPolicy.RUNTIME)\n@Qualifier\npublic @interface Creamy { }\n```\n这样，就可以使用@Cold和@Creamy修饰IceCream类，例如：\n\n```\n@Component\n@Cold\n@Creamy\npublic class IceCream implements Dessert { ... }\n```\n类似的，可以使用@Cold和@Fruity修饰Popsicle类，例如：\n\n```\n@Component\n@Cold\n@Fruity\npublic class Popsicle implements Dessert { ... }\n```\n最后，在装配的时候，可以使用@Cold和@Creamy限定IceCream类对应的bean：\n\n```\n@Autowired\n@Cold\n@Creamy\npublic void setDessert(Dessert dessert) {\n    this.dessert = dessert;\n}\n```\n\n<h2>bean的作用域</h2>\n默认情况下，Spring应用上下文中的bean都是单例对象，也就是说，无论给某个bean被多少次装配给其他bean，都是指同一个实例。\n\n大部分情况下，单例bean很好用：如果一个对象没有状态并且可以在应用中重复使用，那么针对该对象的初始化和内存管理开销非常小。\n\n但是，有些情况下你必须使用某中可变对象来维护几种不同的状态，因此形成非线程安全。在这种情况下，把类定义为单例并不是一个好主意——该对象在重入使用的时候可能遇到线程安全问题。\n\nSpring定义了几种bean的作用域，列举如下：\n\n<li>Singleton——在整个应用中只有一个bean的实例；\n<li>Prototype——每次某个bean被装配给其他bean时，都会创建一个新的实例；\n<li>Session——在web应用中，在每次会话过程中只创建一个bean的实<li>例；\nRequest——在web应用中，在每次http请求中创建一个bean的实例。\nSingleton域是默认的作用域，如前所述，对于可变类型来说并不理想。我们可以使用@Scope注解——和@Component或@Bean注解都可以使用。\n\n例如，如果你依赖component-scanning发现和定义bean，则可以用如下代码定义prototype bean：\n\n```\n@Component\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic class Notepad{ ... }\n```\n除了使用SCOPE_PROTOTYPE字符串指定bean的作用域，还可以使用@Scope(\"prototype\")，但使用ConfigurableBeanFactory.SCOPE_PROTOTYPE更安全，不容易遇到拼写错误。\n\n另外，如果你使用JavaConfig定义Notepad的bean，也可以给出下列定义：\n\n```\n@Bean\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic Notepad notepad() {\n    return new Notepad();\n}\n```\n如果你使用xml文件定义Notepad的bean，则有如下定义：\n\n```\n<bean id=\"notepad\"\n            class=\"com.myapp.Notepad\"\n            scope=\"prototype\" />\n\n```\n无论你最后采取上述三种定义方式的哪一种定义prototype类型的bean，每次Notepad被装配到其他bean时，都会重新创建一个新的实例。\n\n<h3>request和session作用域</h3>\n在Web应用中，有时需要在某个request或者session的作用域范围内共享同一个bean的实例。举个例子，在一个典型的电子商务应用中，可能会有一个bean代表用户的购物车，如果购物车是单例对象，则所有的用户会把自己要买的商品添加到同一个购物车中；另外，如果购物车bean设置为prototype，则在应用中某个模块中添加的商品在另一个模块中将不能使用。\n\n对于这个例子，使用session scope更合适，因为一个会话（session）唯一对应一个用户，可以通过下列代码使用session scope:\n\n```\n@Bean\n@Scope(value=WebApplicationContext.SCOPE_SESSION,\n                proxyMode=ScopedProxyMode.INTERFACES)\npublic ShoppingCart cart() { ... }\n```\n在这里你通过value属性设置了WebApplicationContext.SCOPE_SESSION，这告诉Spring为web应用中的每个session创建一个ShoppingCartbean的实例。在整个应用中会有多个ShoppingCart实例，但是在某个会话的作用域中ShoppingCart是单例的。\n\n这里还用proxyMode属性设置了ScopedProxyMode.INTERFACES值，这涉及到另一个问题：把request/session scope的bean装配到singleton scope的bean时会遇到。首先看下这个问题的表现。\n\n假设在应用中需要将ShoppingCartbean装配给单例StoreServicebean的setter方法：\n\n```\n@Component\npublic class StoreService {\n\n    @Autowired\n    public void setShoppingCart(ShoppingCart shoppingCart) {\n        this.shoppingCart = shoppingCart;\n    }\n    ...\n}\n```\n因为StoreService是单例bean，因此在Spring应用上下文加载时该bean就会被创建。在创建这个bean时 ，Spring会试图装配对应的ShoppingCartbean，但是这个bean是session scope的，目前还没有创建——只有在用户访问时并创建session时，才会创建ShoppingCartbean。\n\n而且，之后肯定会有多个ShoppingCartbean：每个用户一个。理想的情景是：在需要StoreService操作购物车时，StoreService能够和ShoppingCartbean正常工作。\n\n针对这种需求，Spring应该给StoreServicebean装配一个ShoppingCartbean的代理，如下图所示。代理类对外暴露的接口和ShoppingCart中的一样，用于告诉StoreService关于ShoppingCart的接口信息——当StoreService调用对应的接口时，代理采取延迟解析策略，并把调用委派给实际的session-scoped ShoppingCartbean。\n\n<img src=\"http://upload-images.jianshu.io/upload_images/44770-c117d67ea67a9f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" height=\"300px\"/>\n\nScoped proxies enable deferred injected of request- and session-coped beans\n因为ShoppingCart是一个接口，因此这里工作正常，但是，如果ShoppingCart是具体的类，则Spring不能创建基于接口的代理。这里必须使用CGLib创建class-based的bean，即使用ScopedProxyMode.TARGET_CLASS指示代理类应该基础自目标类。\n\n这里使用session scope作为例子，在request scope中也有同样的问题，当然解决办法也相同。\n\n<h3> 在XML文件中定义scoped代理</h3>\n如果你在xml配置文件中定义session-scoped或者request-scoped bean，则不能使用@Scope注解以及对应的proxyMode属性。<bean>元素的scope属性可以用来指定bean的scope，但是如何指定代理模式？\n\n可以使用Spring aop指定代理模式：\n\n```\n<bean id=\"cart\"\n            class=\"com.myapp.ShoppingCart\"\n            scope=\"session\"\n      <aop: scoped-proxy />\n</bean>\n```\n<aop: scoped-proxy>在XML配置方式扮演的角色与proxyMode属性在注解配置方式中的相同，需要注意的是，这里默认使用CGLIB库创建代理，因此，如果需要创建接口代理，则需要设置proxy-target-class属性为false:\n\n```\n<bean id=\"cart\"\n            class=\"com.myapp.ShoppingCart\"\n            scope=\"session\"\n      <aop: scoped-proxy proxy-target-class=\"false\" />\n</bean>\n```\n为了使用<aop: scoped-proxy>元素，需要在XML配置文件中定义Spring的aop名字空间：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"htttp://www.springframework.org/schema/beans\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n              xmlns:aop=\"http://www.springframework.org/schema/aop\"\n              xsi:schemaLocations=\"\n                   http://www.springframework.org/schema/aop\n                   http://www.springframework.org/schema/aop/spring-aop.xsd\n                   http://www.springframework.org/schema/beans\n                   http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    ........\n```\n<h2>运行时值注入</h2>\n一般而言，讨论依赖注入和装配时，我们多关注的是如何（how）实现依赖注入（构造函数、setter方法），即如何建立对象之间的联系。\n\n依赖注入的另一个方面是何时（when）将值装配给bean的属性或者构造函数。在装配bean—依赖注入的本质一文中，我们执行了很多值装配的任务，例如有如下代码：\n\n```\n@Bean\npublic CompactDisc sgtPeppers() {\n    return new BlankDisc(\n             \"Sgt. Pepper's Lonely Hearts Club Band\",\n             \"The Beatles\");\n}\n```\n这种硬编码的方式有时可以，有时却需要避免硬编码——在运行时决定需要注入的值。Spring提供以下两种方式实现运行时注入：\n\n<li>Property placeholders\n<li>he Spring Expression Language(SpEL)\n\n<h3>注入外部的值</h3>\n在Spring中解析外部值的最好方法是定义一个配置文件，然后通过Spring的环境实例获取配置文件中的配置项的值。例如，下列代码展示如何在Spring 配置文件中使用外部配置项的值。\n\n```\npackage com.spring.sample.config;\n\nimport com.spring.sample.soundsystem.CompactDisc;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport org.springframework.core.env.Environment;\n\n@Configuration\n@PropertySource(\"classpath:/app.properties\")\npublic class ExpressiveConfig {\n        @Autowired\n        Environment env; \n\n       @Bean\n        public CompactDisc disc() {\n              return new BlankDisc(env.getProperty(\"disc.title\"),\n                env.getProperty(\"disc.artist\"));\n    }\n}\n```\n这里，@PropertySource注解引用的配置文件内容如下：\n\n```\ndisc.title=Sgt. Pepper's Lonely Hearts Club Band\ndisc.artist=The Beatles\n```\n属性文件被加载到Spring的Environment实例中，然后通过getProperty()方法解析对应配置项的值。\n\n**在Environment类中，getProperty()方法有如下几种重载形式**：\n<li>String getProperty(String var1);\n<li>String getProperty(String var1, String var2);\n<li><T> T getProperty(String var1, Class<T> var2);\n<li><T> T getProperty(String var1, Class<T> var2, T var3);\n\n前两个方法都是返回String值，利用第二个参数，可以设置默认值；后两个方法可以指定返回值的类型，举个例子：假设你需要从连接池中获取连接个数，如果你使用前两个方法，则返回的值是String，你需要手动完成类型转换；但是使用后两个方法，可以由Spring自动完成这个转换：\n\n```\nint connection = env.getProperty(\"db.connection.count\", Integer.class, 30)\n```\n除了getProperty()方法，还有其他方法可以获得配置项的值，如果不设置默认值参数，则在对应的配置项不存在的情况下对应的属性会配置为null，如果你不希望这种情况发生——即要求每个配置项必须存在，则可以使用getRequiredProperty()方法：\n\n```\n@Bean\npublic CompactDisc disc() {\n    return new BlankDisc(\n            env.getRequiredProperty(\"disc.title\"),\n            env.getRequiredProperty(\"disc.artist\"));\n}\n```\n在上述代码中，如果disc.title或者disc.artist配置项不存在，Spring都会抛出IllegalStateException异常。\n\n如果你希望检查某个配置项是否存在，则可以调用containsProperty()方法：<code>boolean titleExists = env.containsProperty(\"disc.title\");</code>。如果你需要将一个属性解析成某个类，则可以使用getPropertyAsClass()方法：<code>Class<CompactDisc> cdClass = env.getPropertyAsClass(\"disc.class\", CompactDisc.class);</code>\n\n**在Spring中，可以使用${ ... }将占位符包裹起来**，例如，在XML文件中可以定义如下代码从配置文件中解析对应配置项的值：\n\n```\n<bean id=\"sgtPeppers\"\n             class=\"soundsystem.BlankDisc\"\n             c:_title=\"${disc.title}\"\n             c:_artist=\"${disc.artist}\" />\n```\n如果你使用component-scanning和自动装配创建和初始化应用组件，则可以使用@Value注解获取配置文件中配置项的值，例如BlankDisc的构造函数可以定义如下：\n\n```\npublic BlankDisc(\n            @Value(\"${disc.title}\") String title,\n            @Value(\"${disc.artist}\") String artist) {\n      this.title = title;\n      this.artist = artist;\n}\n```\n为了使用占位符的值，需要配置PropertyPlaceholderConfigerbean或者PropertySourcesPlaceholderConfigurerbean。从Spring 3.1之后，更推荐使用PropertySourcesPlaceholderConfigurer，因为这个bean和Spring 的Environment的来源一样，例子代码如下：\n\n```\n@Bean\npublic static PropertySourcesPlaceholderConfigurer placeholderConfigurer() {\n    return new PropertySourcesPlaceholderConfigurer();\n}\n```\n如果使用XML配置文件，则通过<context:property-placeholder>元素可以获得PropertySourcesPlaceholderConfigurerbean：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:context=\"http://www.springframework.org/schema/context\"       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n       <context:property-placeholder location=\"classpath:/app.properties\" />\n</beans>\n\n```\n<h3>使用SpEL装配</h3>\nSpring 3引入了Spring Expression Language（SpEL），这是一种在运行时给bean的属性或者构造函数参数注入值的方法。\n\nSpEL有很多优点，简单列举如下：\n\n<li>可以通过bean的ID引用bean；\n<li>可以调用某个对象的方法或者访问它的属性；\n<li>支持数学、关系和逻辑操作；\n<li>正则表达式匹配；\n<li>支持集合操作\n在后续的文章中，可以看到SpEL被用到依赖注入的其他方面，例如在Spring Security中，可以使用SpEL表达式定义安全限制；如果在Spring MVC中使用Thymeleaf模板，在模板中可以使用SpEL表达式获取模型数据。\nSpEL是一门非常灵活的表达式语言，在这里不准备花大量篇幅来涵盖它的所有方面，可以通过一些例子来感受一下它的强大能力。\n\n首先，SpEL表达式被#{ ... }包围，跟placeholders中的${ ... }非常像，最简单的SpEL表达式可以写作<code>#{1}</code>。在应用中，你可能回使用更加有实际含义的SpEL表达式，例如<code>#{T(System).currentTimeMillis()}</code>——这个表达式负责获得当前的系统时间，而T()操作符负责将java.lang.System解析成类，以便可以调用currentTimeMillis()方法。\n\nSpEL表达式可以引用指定ID的bean或者某个bean的属性，例如下面这个例子可以获得ID为sgtPeppers的bean的artist属性的值：<code>#{sgtPeppers.artist}</code>；也可以通过<code>#{systemProperties['disc.title']}</code>引用系统属性。\n\n上述这些例子都非常简单，我们接下来看下如何在bean装配中使用SpEL表达式，之前提到过，如果你使用component-scanning和自动装配创建应用组件，则可以使用@Value注解获得配置文件中配置项的值；除了使用placeholder表达式，还可以使用SpEL表达式，例如BlankDisc的构造函数可以按照下面这种方式来写：\n\n```\npublic BlankDisc(\n            @Value(\"#{systemProperties['disc.title']}\") String title,\n            @Value(\"#{systemProperties['disc.artist']}\") String artist) {\n      this.title = title;\n      this.artist = artist;\n}\n```\nSpEL表达式可以表示整数值，也可以表示浮点数、String值和Boolean值。例如可以使用#{3.14159}表式浮点数3.14159，并且还支持科学计数法——<code>#{9.87E4}</code>表示98700；<code>#{'Hello'}</code>可以表示字符串值、<code>#{false}</code>可以表示Boolean值。\n\n单独使用字面值是乏味的，一般不会使用到只包含有字面值的SpEL表达式，不过在构造更有趣、更复杂的表达式时支持字面值这个特性非常有用。\n\nSpEL表达式可以通过bean的ID引用bean，例如<code>#{sgtPeppers}</code>；也可以引用指定bean的属性，例如<code>#{sgtPeppers.artist}</code>；还可以调用某个bean的方法，例如#<code>{artistSelector.selectArtist()}</code>表达式可以调用artistSelector这个bean的selectArtist()方法。\n\nSpEL表达式也支持方法的连续调用，例如#<code>{artistSelector.selectArtist().toUpperCase()}</code>,为了防止出现NullPointerException异常，最好使用类型安全的操作符，例如#<code>{artistSelector.selectArtist()?.toUpperCase()}</code>。?.操作符在调用右边的函数之前，会确保左边的函数返回的值不为null。\n\n在SpEL中能够调用类的方法或者常量的关键是T()操作符，例如通过<code>T(java.lang.Math)</code>可以访问Math类中的方法和属性——<code>#{(java.lang.Math).random()}</code>和<code>#{T(java.lang.Math).PI}</code>。\n\n在操作文本字符串时，最常用的是检查某个文本是否符合某种格式。SpEL通过matches操作符支持正则表达式匹配。例如：<code>#{admin.email matches '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.com'}</code>可以检查admin.email表示的邮件地址是否正确。\n\n通过SpEL表达式还可以操作集合和数组，例如<code>#{jukebox.songs[4].title}</code>这个表达式可以访问jukebox的songs数组的第5个元素。\n\n也可以实现更复杂的功能：随机选择一首歌——<code>#{jukebox.songs[T(java.lang.Math).random() * jukebox.songs.size()].title}</code>。\n\nSpEL提供了一个选择操作符——<code>.?[]</code>，可以获得某个集合的子集，举个例子，假设你获得jukebox中所有artist为Aerosmith的歌，则可以使用这个表达式：<code>#{jukebox.songs.?[artist eq 'Aerosmith']}</code>。可以看出，<code>.?[]</code>操作符支持在[]中嵌套另一个SpEL表达式。\n\nSpEL还提供了其他两个选择操作符：<code>.^[]</code>用于选择第一个匹配的元素；<code>.$[]</code>用于选择最后一个匹配的元素。\n\n最后，SpEL还提供了一个提取操作符：<code>.![]</code>，可以根据指定的集合新建一个符合某个条件的新集合，例如<code>#{jukebox.songs.![title]}</code>可以将songs的title都提取出来构成一个新的字符串集合。\n\nOK，SpEL的功能非常强大，但是这里需要给开发人员提个醒：别让你的SpEL表达式过于智能。你的表达式越智能，就越难对它们进行单元测试，因此，尽量保证你的SpEL表达式简单易理解。\n\n<h2>总结</h2>\n首先我们介绍了通过Spring的profiles解决多环境部署的问题，通过在运行时根据代表指定环境的profile选择性创建某个bean，Spring可以实现无需重新构建就可以在多个环境下部署同一个应用。\n\nProfiles bean是运行时创建bean的一种解决方案，不过Spring 4提供了一个更普遍的解决方案：利用@Conditional注解和Condition接口实现条件性创建bean。\n\n我们还介绍了两种机制来解决自动装配时可能遇到的歧义性问题：primary beans和qualifiers。尽管定义一个primary bean非常简单，但它仍然有局限，因此我们需要利用qualifier缩小自动装配的bean的范围，而且，我们也演示了如何创建自己的qualifiers。\n\n尽管大多数Spring bean是单例对象，但是在某些情况下具备其他作用域的对象更加合适。Spring 应用中可以创建singletons、prototypes、request-scoped或session-scoped。在使用request-scoped或者session-scoped类型的bean时，还需要解决将非单例对象注入到单例对象时遇到的问题——利用代理接口或代理类。\n\n最后，我们也介绍了Spring表达式语言（SpEL），利用SpEL可以实现在运行时给bean注入值。\n\n","source":"_posts/系统学习Spring-三-——Bean的高级装配.md","raw":"---\ntitle: 系统学习Spring(三)——Bean的高级装配\ndate: 2017-05-15 16:50:55\ncategories: Java二三事\ntags:\n\t- Spring\n\t- 框架\n---\n在软件开发中，常常设置不同的运行环境：开发环境、预发环境、性能测试环境和生产环境等等。\n\n不同的环境下，应用程序的配置项也不同，例如数据库配置、远程服务地址等。<!--more-->以数据库配置为例子，在开发环境中你可能使用一个嵌入式的内存数据库，并将测试数据放在一个脚本文件中。例如，在一个Spring的配置类中，可能需要定义如下的bean：\n\n```\n@Bean(destroyMethod = \"shutdown\")\npublic DataSource dataSource() {\n    return new EmbeddedDatabaseBuilder()\n            .addScript(\"classpath:schema.sql\")\n            .addScript(\"classpath:test-data.sql\")\n            .build();\n}\n```\n使用EmbeddedDatabaseBuilder这个构建器可以建立一个内存数据库，通过指定路径下的schema.sql文件中的内容可以建立数据库的表定义，通过test-data.sql可以准备好测试数据。\n\n开发环境下可以这么用，但是在生产环境下不可以。在生产环境下，你可能需要从容器中使用JNDI获取DataSource对象，这中情况下，对应的创建代码是：\n\n```\n@Bean\npublic DataSource dataSource() {\n    JndiObjectFactoryBean jndiObjectFactoryBean =\n             new JndiObjectFactoryBean();\n    jndiObjectFactoryBean.setJndiName(\"jdbc/myDS\");\n    jndiObjectFactoryBean.setResourceRef(true);\n    jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class);\n    return (DataSource) jndiObjectFactoryBean.getObject();\n}\n```\n使用JNDI管理DataSource对象，很适合生产环境，但是对于日常开发环境来说太复杂了。\n\n另外，在QA环境下你也可以选择另外一种DataSource配置，可以选择使用普通的DBCP连接池，例如：\n\n```\n@Bean(destroyMethod = \"close\")\npublic DataSource dataSource() {\n    BasicDataSource dataSource = new BasicDataSource();\n    dataSource.setUrl(\"jdbc:h2:tcp://dbserver/~/test\");\n    dataSource.setDriverClassName(\"org.h2.Driver\");\n    dataSource.setUsername(\"sa\");\n    dataSource.setPassword(\"password\");\n    dataSource.setInitialSize(20);\n    dataSource.setMaxActive(30);\n    return dataSource;\n}\n\n```\n上述三种办法可以为不同环境创建各自需要的javax.sql.DataSource实例，这个例子很适合介绍不同环境下创建bean，那么有没有一种办法：只需要打包应用一次，然后部署到不同的开发环境下就会自动选择不同的bean创建策略。一种方法是创建三个独立的配置文件，然后利用Maven profiles的预编译命令处理在特定的环境下打包哪个配置文件到最终的应用中。这种解决方法有一个问题，即在切换到不同环境时，需要重新构建应用——从开发环境到测试环境没有问题，但是从测试环境到生产环境也需要重新构建则可能引入一定风险。\n\nSpring提供了对应的方法，使得在环境切换时不需要重新构建整个应用。\n\n<h2>配置profile beans</h2>\nSpring提供的方法不是在构件时针对不同的环境决策，而是在运行时，这样，一个应用只需要构建一次，就可以在开发、QA和生产环境运行。\n\n在Spring 3.1之中，可以使用@Profile注解来修饰JavaConfig类，当某个环境对应的profile被激活时，就使用对应环境下的配置类。\n\n在Spring3.2之后，则可以在函数级别使用@Profile注解（是的，跟@Bean注解同时作用在函数上），这样就可以将各个环境的下的bean定义都放在同一个配置类中，还是以之前的例子：\n\n利用注解配置\n\n```\npackage com.spring.sample.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;\nimport org.springframework.jndi.JndiObjectFactoryBean;\nimport javax.sql.DataSource;\n\n@Configuration\npublic class DataSourceConfig {\n    @Bean(destroyMethod = \"shutdown\")\n    @Profile(\"dev\")\n    public DataSource embeddedDataSource() {\n        return new EmbeddedDatabaseBuilder()\n                .setType(EmbeddedDatabaseType.H2)\n                .addScript(\"classpath:schema.sql\")\n                .addScript(\"classpath:test-data.sql\")\n                .build();\n    }\n    @Bean\n    @Profile(\"prod\")\n    public DataSource dataSource() {\n        JndiObjectFactoryBean jndiObjectFactoryBean =\n                new JndiObjectFactoryBean();\n        jndiObjectFactoryBean.setJndiName(\"jdbc/myDS\");\n        jndiObjectFactoryBean.setResourceRef(true); \n        jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class);\n        return (DataSource) jndiObjectFactoryBean.getObject();\n    }\n}\n```\n除了被@Profile修饰的其他bean，无论在什么开发环境下都会被创建。\n\n利用XML文件配置\n\n和在JavaConfig的用法一样，可以从文件级别定义环境信息，也可以将各个环境的bean放在一个XML配置文件中。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"\n       xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:jee=\"http://www.springframework.org/schema/jee\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \nhttp://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd\">\n\n       <beans profile=\"dev\">\n              <jdbc:embedded-database id=\"dataSource\">\n                     <jdbc:script location=\"classpath:schema.sql\"/>\n                     <jdbc:script location=\"classpath:test-data.sql\"/>\n              </jdbc:embedded-database>\n       </beans>\n\n       <beans profile=\"qa\">\n              <bean id=\"dataSource\"\n                    class=\"org.apache.commons.dbcp.BasicDataSource\"\n                    destroy-method=\"close\"\n                    p:url=\"jdbc:h2:tcp://dbserver/~/test\"\n                    p:driverClassName=\"org.h2.Driver\"\n                    p:username=\"sa\"\n                    p:password=\"password\"\n                    p:initialSize=\"20\"\n                    p:maxActive=\"30\" />\n       </beans>\n\n       <beans profile=\"prod\">\n              <jee:jndi-lookup id=\"dataSource\"\n                               jndi-name=\"jdbc/MyDatabase\"\n                               resource-ref=\"true\"\n                               proxy-interface=\"javax.sql.DataSource\"/>\n       </beans>\n</beans>\n```\n上述三个javax.sql.DataSource的bean，ID都是dataSource，但是在运行的时候只会创建一个bean。\n\n<h2>激活profiles</h2>\nSpring提供了spring.profiles.active和spring.profiles.default这两个配置项定义激活哪个profile。如果应用中设置了spring.profiles.active选项，则Spring根据该配置项的值激活对应的profile，如果没有设置spring.profiles.active，则Spring会再查看spring.profiles.default这个配置项的值，如果这两个变量都没有设置，则Spring只会创建没有被profile修饰的bean。\n\n有下列几种方法设置上述两个变量的值：\n<li>DispatcherServlet的初始化参数\n<li>web应用的上下文参数(context parameters)\n<li>JNDI项\n<li>环境变量\n<li>JVM系统属性\n<li>在集成测试类上使用@ActiveProfiles注解\n\n开发人员可以按自己的需求设置spring.profiles.active和spring.profiles.default这两个属性的组合。\n\n我推荐在web应用的web.xml文件中设置spring.profiles.default属性——通过设置DispatcherServlet的初始参数和<context-param>标签。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n         version=\"3.1\">\n    <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath*:applicationContext.xml</param-value>\n  </context-param>\n\n    <context-param>\n        <param-name>spring.profiles.default</param-name>\n        <param-value>dev</param-value>\n    </context-param>\n\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n    <servlet>\n        <servlet-name>appServletName</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>        <init-param>\n            <param-name>spring.profiles.default</param-name>\n            <param-value>dev</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>appServletName</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n按照上述方法设置spring.profiles.default属性，任何开发人员只需要下载源码就可以在开发环境中运行程序以及测试。\n\n然后，当应用需要进入QA、生产环境时，负责部署的开发者只需要通过系统属性、环境变量或者JNDI等方法设置spring.profiles.active属性即可，因为spring.profiles.active优先级更高。\n\n另外，在运行集成测试时，可能希望运行跟生产环境下相同的配置；但是，如果配置重需要的beans被profiles修饰的，则需要在跑单元测试之前激活对应的profiles。\n\nSpring提供了@ActiveProfiles注解来激活指定的profiles，用法如下：\n\n<h2>Conditional beans</h2>\n假设你希望只有在项目中引入特定的依赖库时、或者只有当特定的bean已经被创建时、或者是设置了某个环境变量时，某个bean才被创建。\n\nSpring 4之前很难实现这种需求，不过在Spring 4中提出了一个新的注解——@Conditional，该注解作用于@Bean注解修饰的方法上，通过判断指定的条件是否满足来决定是否创建该bean。\n\n举个例子，工程中有一个MagicBean，你希望只有当magic环境变量被赋值时才创建MagicBean，否则该Bean的创建函数被忽略。\n\n```\n@Bean\n@Conditional(MagicExistsCondition.class)\npublic MagicBean magicBean() {\n    return new MagicBean();\n}\n```\n这个例子表示：只有当MagicExistsCondition类已经存在时，才会创建MagicBean。\n\n@Conditional注解的源码列举如下：\n\n```\npackage org.springframework.context.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport org.springframework.context.annotation.Condition;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\npublic @interface Conditional {\n    Class<? extends Condition>[] value();\n}\n```\n可以看出，传入@Conditional注解的类一定要实现Condition接口，该接口提供matchs()方法——如果matches()方法返回true，则被@Conditional注解修饰的bean就会创建，否则对应的bean不会创建。\n\n在这个例子中，MagicExistsCondition类应该实现Condition接口，并在matches()方法中实现具体的判断条件，代码如下所示：\n\n```\npackage com.spring.sample.config;\n\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\npublic class MagicExistsCondition implements Condition {\n    public boolean matches(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata) {\n        Environment env = conditionContext.getEnvironment();\n        return env.containsProperty(\"magic\"); //检查magic环境变量是否被设置\n    }\n}\n```\n上述代码中的matchs()方法简单且有效：它首先获取环境变量，然后再判断环境变量中是否存在magic属性。在这个例子中，magic的值是多少并不重要，它只要存在就好。\n\nMagicExistsCondition的matchs()方法是通过ConditionContext获取了环境实例。matchs()方法的参数有两个：ConditionContext和AnnotatedTypeMetadata，分别看下这两个接口的源码：\n\n```\n//ConditionContext\npublic interface ConditionContext {\n    BeanDefinitionRegistry getRegistry();\n    ConfigurableListableBeanFactory getBeanFactory();\n    Environment getEnvironment();\n    ResourceLoader getResourceLoader();\n    ClassLoader getClassLoader();\n}\n```\n利用ConditionContext接口可做的事情很多，列举如下：\n\n<li>通过getRegistry()方法返回的BeanDefinitionRegistry实例，可以检查bean的定义；\n<li>通过getBeanFactory()方法返回的ConfigurableListableBeanFactory实例，可以检查某个bean是否存在于应用上下文中，还可以获得该bean的属性；\n<li>通过getEnvironment()方法返回的Environment实例，可以检查指定环境变量是否被设置，还可以获得该环境变量的值；\n<li>通过getResourceLoader()方法返回的ResourceLoader实例，可以得到应用加载的资源包含的内容；\n<li>通过getClassLoader()方法返回的ClassLoader实例，可以检查某个类是否存在。\n\n```\n//AnnotatedTypeMetadata\npublic interface AnnotatedTypeMetadata {\n    boolean isAnnotated(String var1);\n    Map<String, Object> getAnnotationAttributes(String var1);\n    Map<String, Object> getAnnotationAttributes(String var1, boolean var2);\n    MultiValueMap<String, Object> getAllAnnotationAttributes(String var1);\n    MultiValueMap<String, Object> getAllAnnotationAttributes(String var1, boolean var2);\n}\n\n```\n\n通过isAnnotated()方法可以检查@Bean方法是否被指定的注解类型修饰；通过其他方法可以获得修饰@Bean方法的注解的属性。\n\n从Spring 4开始，@Profile注解也利用@Conditional注解和Condition接口进行了重构。作为分析@Conditional注解和Condition接口的另一个例子，我们可以看下在Spring 4中@Profile注解的实现。\n\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Documented\n@Conditional({ProfileCondition.class})\npublic @interface Profile {\n    String[] value();\n}\n```\n可以看出，@Profile注解的实现被@Conditional注解修饰，并且依赖于ProfileCondition类——该类是Condition接口的实现。如下列代码所示，ProfileCondition利用ConditionContext和AnnotatedTypeMetadata两个接口提供的方法进行决策。\n\n```\nclass ProfileCondition implements Condition {\n    ProfileCondition() {\n    }\n\n    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n        if(context.getEnvironment() != null) {\n            MultiValueMap attrs = metadata.getAllAnnotationAttributes(Profile.class.getName());\n            if(attrs != null) {\n                Iterator var4 = ((List)attrs.get(\"value\")).iterator();\n\n                Object value;\n                do {\n                    if(!var4.hasNext()) {\n                        return false;\n                    }\n                    value = var4.next();\n                } while(!context.getEnvironment().acceptsProfiles((String[])((String[])value)));\n\n                return true;//传给@Profile注解的参数对应的环境profiles已激活\n            }\n        }\n\n        return true; //默认为true\n    }\n}\n\n```\n可以看出，这代码写得不太好理解:ProfileCondition通过AnnotatedTypeMetadata实例获取与@Profile注解相关的所有注解属性；然后检查每个属性的值（存放在value实例中），对应的profiles别激活——即context.getEnvironment().acceptsProfiles(((String[]) value))的返回值是true，则matchs()方法返回true。\n\nEnvironment类提供了可以检查profiles的相关方法，用于检查哪个profile被激活：\n\n<li>String[] getActiveProfiles()——返回被激活的profiles数组；\n<li>String[] getDefaultProfiles()——返回默认的profiles数组；\n<li>boolean acceptsProfiles(String... profiles)——如果某个profiles被激活，则返回true。\n\n<h2>处理自动装配的歧义</h2>\n在一文中介绍了如何通过自动装配让Spring自动简历bean之间的依赖关系——自动装配非常有用，通过自动装配可以减少大量显式配置代码。不过，自动装配（autowiring）要求bean的匹配具备唯一性，否则就会产生歧义，从而抛出异常。\n\n举个例子说明自动装配的歧义性，假设你有如下自动装配的代码：\n\n```\n@Autowired\npublic void setDessert(Dessert dessert) {\n    this.dessert = dessert;\n}\n```\nDessert是一个接口，有三个对应的实现：\n\n```\n@Component\npublic class Cake implements Dessert { ... }\n@Component\npublic class Cookies implements Dessert { ... }\n@Component\npublic class IceCream implements Dessert { ... }\n```\n因为上述三个类都被@Component注解修饰，因此都会被component-scanning发现并在应用上下文中创建类型为Dessert的bean；然后，当Spring试图为setDessert()方法装配对应的Dessert参数时，就会面临多个选择；然后Spring就会抛出异常——NoUniqueBeanDefinitionException。\n\n虽然在实际开发中并不会经常遇到这种歧义性，但是它确实是个问题，幸运的是Spring也提供了对应的解决办法。\n\n<h3> @Primary指定优先bean</h3>\n在定义bean时，可以通过指定一个优先级高的bean来消除自动装配过程中遇到的歧义问题。\n\n在上述例子中，可以选择一个最重要的Bean，用@Primary注解修饰：\n\n```\n@Component\n@Primary\npublic class IceCream implements Dessert { ... }\n```\n如果你没有使用自动扫描，而是使用基于Java的显式配置文件，则如下定义@Bean方法：\n\n```\n@Bean\n@Primary\npublic Dessert iceCream() {\n  return new IceCream();\n}\n```\n如果使用基于XML文件的显式配置，则如下定义：\n\n```\n<bean id=\"iceCream\"\n             class=\"com.dasserteater.IceCream\"\n             primary=\"true\" />\n```\n不论哪种形式，效果都一样：告诉Spring选择primary bean来消除歧义。不过，当应用中指定多个Primary bean时，Spring又不会选择了，再次遇到歧义。Spring还提供了功能更强大的歧义消除机制——@Qualifiers注解。\n\n<h3>@Qualifier指定bean的ID</h3>\n@Qualifier注解可以跟@Autowired或@Inject一起使用，指定需要导入的bean的ID，例如，上面例子中的setDessert()方法可以这么写：\n\n```\n@Autowired\n@Qualifier(\"iceCream\")\npublic void setDessert(Dessert dessert) {\n    this.dessert = dessert;\n}\n```\n每个bean都具备唯一的ID，因此此处彻底消除了歧义。\n\n如果进一步深究，@Qualifier(\"iceCream\")表示以\"iceCream\"字符串作为qualifier的bean。每个bean都有一个qualifier，内容与该bean的ID相同。因此，上述装配的实际含义是：setDessert()方法会装配一个以\"iceCream\"为qualifier的bean，只不过碰巧是该bean的ID也是iceCream。\n\n以默认的bean的ID作为qualifier非常简单，但是也会引发新的问题：如果将来对IceCream类进行重构，它的类名发生改变（例如Gelato）怎么办？在这种情况下，该bean对应的ID和默认的qualifier将变为\"gelato\"，然后自动装配就会失败。\n\n问题的关键在于：你需要指定一个qualifier，该内容不会受目标类的类名的限制和影响。\n\n**开发者可以给某个bean设定自定义的qualifier**，形式如下：\n\n```\n@Component\n@Qualifier(\"cold\")\npublic class IceCream implements Dessert { ... }\n```\n然后，在要注入的地方也使用\"cold\"作为qualifier来获得该bean：\n\n```\n@Autowired\n@Qualifier(\"cold\")\npublic void setDessert(Dessert dessert) {\n    this.dessert = dessert;\n}\n```\n即使在JavaConfig中，也可以使用@Qualifier指定某个bean的qualifier，例如：\n\n```\n@Bean\n@Qualifier(\"cold\")\npublic Dessert iceCream() {\n  return new IceCream();\n}\n```\n在使用自定义的@Qualifier值时，最好选择一个含义准确的名词，不要随意使用名词。在这个例子中，我们描述IceCream为\"cold\"bean，在装配时，可以读作：给我来一份cold dessert，恰好指定为IceCream。类似的，我们把Cake叫作\"soft\"，把Cookies*叫作\"crispy\"。\n\n\n**使用自定义的qualifiers优于使用基于bean的ID的默认qualifier**，但是当你有多个bean共享同一个qualifier时，还是会有歧义。例如，假设你定义一个新的Dessertbean：\n\n```\n@Component\n@Qualifier(\"cold\")\npublic class Popsicle implements Dessert { ... }\n```\n现在你又有两个\"cold\"为qualifier的bean了，再次遇到歧义：最直白的想法是多增加一个限制条件，例如IceCream会成为下面的定义：\n\n```\n@Component\n@Qualifier(\"cold\")\n@Qualifier(\"creamy\")\npublic class IceCream implements Dessert { ... }\n```\n而Posicle类则如下定义：\n\n```\n@Component\n@Qualifier(\"cold\")\n@Qualifier(\"fruity\")\npublic class Popsicle implements Dessert { ... }\n```\n在装配bean的时候，则需要使用两个限制条件，如下：\n\n```\n@Bean\n@Qualifier(\"cold\")\n@Qualifier(\"creamy\")\npublic Dessert iceCream() {\n  return new IceCream();\n}\n```\n这里有个小问题：Java 不允许在同一个item上加多个相同类型的注解（Java 8已经支持），但是这种写法显然很啰嗦。\n\n解决办法是：通过定义自己的qualifier注解，例如，可以创建一个@Cold注解来代替@Qualifier(\"cold\")：\n\n```\n@Target({ElementType.CONSTRUCTOR, ElementType.FIELD,\n                  ElementType.METHOD, ElementType.TYPE})\n@Rentention(RetentionPolicy.RUNTIME)\n@Qualifier\npublic @interface Cold { }\n```\n可以创建一个@Creamy注解来代替@Qualifier(\"creamy\")：\n\n```\n@Target({ElementType.CONSTRUCTOR, ElementType.FIELD,\n                  ElementType.METHOD, ElementType.TYPE})\n@Rentention(RetentionPolicy.RUNTIME)\n@Qualifier\npublic @interface Creamy { }\n```\n这样，就可以使用@Cold和@Creamy修饰IceCream类，例如：\n\n```\n@Component\n@Cold\n@Creamy\npublic class IceCream implements Dessert { ... }\n```\n类似的，可以使用@Cold和@Fruity修饰Popsicle类，例如：\n\n```\n@Component\n@Cold\n@Fruity\npublic class Popsicle implements Dessert { ... }\n```\n最后，在装配的时候，可以使用@Cold和@Creamy限定IceCream类对应的bean：\n\n```\n@Autowired\n@Cold\n@Creamy\npublic void setDessert(Dessert dessert) {\n    this.dessert = dessert;\n}\n```\n\n<h2>bean的作用域</h2>\n默认情况下，Spring应用上下文中的bean都是单例对象，也就是说，无论给某个bean被多少次装配给其他bean，都是指同一个实例。\n\n大部分情况下，单例bean很好用：如果一个对象没有状态并且可以在应用中重复使用，那么针对该对象的初始化和内存管理开销非常小。\n\n但是，有些情况下你必须使用某中可变对象来维护几种不同的状态，因此形成非线程安全。在这种情况下，把类定义为单例并不是一个好主意——该对象在重入使用的时候可能遇到线程安全问题。\n\nSpring定义了几种bean的作用域，列举如下：\n\n<li>Singleton——在整个应用中只有一个bean的实例；\n<li>Prototype——每次某个bean被装配给其他bean时，都会创建一个新的实例；\n<li>Session——在web应用中，在每次会话过程中只创建一个bean的实<li>例；\nRequest——在web应用中，在每次http请求中创建一个bean的实例。\nSingleton域是默认的作用域，如前所述，对于可变类型来说并不理想。我们可以使用@Scope注解——和@Component或@Bean注解都可以使用。\n\n例如，如果你依赖component-scanning发现和定义bean，则可以用如下代码定义prototype bean：\n\n```\n@Component\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic class Notepad{ ... }\n```\n除了使用SCOPE_PROTOTYPE字符串指定bean的作用域，还可以使用@Scope(\"prototype\")，但使用ConfigurableBeanFactory.SCOPE_PROTOTYPE更安全，不容易遇到拼写错误。\n\n另外，如果你使用JavaConfig定义Notepad的bean，也可以给出下列定义：\n\n```\n@Bean\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic Notepad notepad() {\n    return new Notepad();\n}\n```\n如果你使用xml文件定义Notepad的bean，则有如下定义：\n\n```\n<bean id=\"notepad\"\n            class=\"com.myapp.Notepad\"\n            scope=\"prototype\" />\n\n```\n无论你最后采取上述三种定义方式的哪一种定义prototype类型的bean，每次Notepad被装配到其他bean时，都会重新创建一个新的实例。\n\n<h3>request和session作用域</h3>\n在Web应用中，有时需要在某个request或者session的作用域范围内共享同一个bean的实例。举个例子，在一个典型的电子商务应用中，可能会有一个bean代表用户的购物车，如果购物车是单例对象，则所有的用户会把自己要买的商品添加到同一个购物车中；另外，如果购物车bean设置为prototype，则在应用中某个模块中添加的商品在另一个模块中将不能使用。\n\n对于这个例子，使用session scope更合适，因为一个会话（session）唯一对应一个用户，可以通过下列代码使用session scope:\n\n```\n@Bean\n@Scope(value=WebApplicationContext.SCOPE_SESSION,\n                proxyMode=ScopedProxyMode.INTERFACES)\npublic ShoppingCart cart() { ... }\n```\n在这里你通过value属性设置了WebApplicationContext.SCOPE_SESSION，这告诉Spring为web应用中的每个session创建一个ShoppingCartbean的实例。在整个应用中会有多个ShoppingCart实例，但是在某个会话的作用域中ShoppingCart是单例的。\n\n这里还用proxyMode属性设置了ScopedProxyMode.INTERFACES值，这涉及到另一个问题：把request/session scope的bean装配到singleton scope的bean时会遇到。首先看下这个问题的表现。\n\n假设在应用中需要将ShoppingCartbean装配给单例StoreServicebean的setter方法：\n\n```\n@Component\npublic class StoreService {\n\n    @Autowired\n    public void setShoppingCart(ShoppingCart shoppingCart) {\n        this.shoppingCart = shoppingCart;\n    }\n    ...\n}\n```\n因为StoreService是单例bean，因此在Spring应用上下文加载时该bean就会被创建。在创建这个bean时 ，Spring会试图装配对应的ShoppingCartbean，但是这个bean是session scope的，目前还没有创建——只有在用户访问时并创建session时，才会创建ShoppingCartbean。\n\n而且，之后肯定会有多个ShoppingCartbean：每个用户一个。理想的情景是：在需要StoreService操作购物车时，StoreService能够和ShoppingCartbean正常工作。\n\n针对这种需求，Spring应该给StoreServicebean装配一个ShoppingCartbean的代理，如下图所示。代理类对外暴露的接口和ShoppingCart中的一样，用于告诉StoreService关于ShoppingCart的接口信息——当StoreService调用对应的接口时，代理采取延迟解析策略，并把调用委派给实际的session-scoped ShoppingCartbean。\n\n<img src=\"http://upload-images.jianshu.io/upload_images/44770-c117d67ea67a9f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" height=\"300px\"/>\n\nScoped proxies enable deferred injected of request- and session-coped beans\n因为ShoppingCart是一个接口，因此这里工作正常，但是，如果ShoppingCart是具体的类，则Spring不能创建基于接口的代理。这里必须使用CGLib创建class-based的bean，即使用ScopedProxyMode.TARGET_CLASS指示代理类应该基础自目标类。\n\n这里使用session scope作为例子，在request scope中也有同样的问题，当然解决办法也相同。\n\n<h3> 在XML文件中定义scoped代理</h3>\n如果你在xml配置文件中定义session-scoped或者request-scoped bean，则不能使用@Scope注解以及对应的proxyMode属性。<bean>元素的scope属性可以用来指定bean的scope，但是如何指定代理模式？\n\n可以使用Spring aop指定代理模式：\n\n```\n<bean id=\"cart\"\n            class=\"com.myapp.ShoppingCart\"\n            scope=\"session\"\n      <aop: scoped-proxy />\n</bean>\n```\n<aop: scoped-proxy>在XML配置方式扮演的角色与proxyMode属性在注解配置方式中的相同，需要注意的是，这里默认使用CGLIB库创建代理，因此，如果需要创建接口代理，则需要设置proxy-target-class属性为false:\n\n```\n<bean id=\"cart\"\n            class=\"com.myapp.ShoppingCart\"\n            scope=\"session\"\n      <aop: scoped-proxy proxy-target-class=\"false\" />\n</bean>\n```\n为了使用<aop: scoped-proxy>元素，需要在XML配置文件中定义Spring的aop名字空间：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"htttp://www.springframework.org/schema/beans\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n              xmlns:aop=\"http://www.springframework.org/schema/aop\"\n              xsi:schemaLocations=\"\n                   http://www.springframework.org/schema/aop\n                   http://www.springframework.org/schema/aop/spring-aop.xsd\n                   http://www.springframework.org/schema/beans\n                   http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    ........\n```\n<h2>运行时值注入</h2>\n一般而言，讨论依赖注入和装配时，我们多关注的是如何（how）实现依赖注入（构造函数、setter方法），即如何建立对象之间的联系。\n\n依赖注入的另一个方面是何时（when）将值装配给bean的属性或者构造函数。在装配bean—依赖注入的本质一文中，我们执行了很多值装配的任务，例如有如下代码：\n\n```\n@Bean\npublic CompactDisc sgtPeppers() {\n    return new BlankDisc(\n             \"Sgt. Pepper's Lonely Hearts Club Band\",\n             \"The Beatles\");\n}\n```\n这种硬编码的方式有时可以，有时却需要避免硬编码——在运行时决定需要注入的值。Spring提供以下两种方式实现运行时注入：\n\n<li>Property placeholders\n<li>he Spring Expression Language(SpEL)\n\n<h3>注入外部的值</h3>\n在Spring中解析外部值的最好方法是定义一个配置文件，然后通过Spring的环境实例获取配置文件中的配置项的值。例如，下列代码展示如何在Spring 配置文件中使用外部配置项的值。\n\n```\npackage com.spring.sample.config;\n\nimport com.spring.sample.soundsystem.CompactDisc;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport org.springframework.core.env.Environment;\n\n@Configuration\n@PropertySource(\"classpath:/app.properties\")\npublic class ExpressiveConfig {\n        @Autowired\n        Environment env; \n\n       @Bean\n        public CompactDisc disc() {\n              return new BlankDisc(env.getProperty(\"disc.title\"),\n                env.getProperty(\"disc.artist\"));\n    }\n}\n```\n这里，@PropertySource注解引用的配置文件内容如下：\n\n```\ndisc.title=Sgt. Pepper's Lonely Hearts Club Band\ndisc.artist=The Beatles\n```\n属性文件被加载到Spring的Environment实例中，然后通过getProperty()方法解析对应配置项的值。\n\n**在Environment类中，getProperty()方法有如下几种重载形式**：\n<li>String getProperty(String var1);\n<li>String getProperty(String var1, String var2);\n<li><T> T getProperty(String var1, Class<T> var2);\n<li><T> T getProperty(String var1, Class<T> var2, T var3);\n\n前两个方法都是返回String值，利用第二个参数，可以设置默认值；后两个方法可以指定返回值的类型，举个例子：假设你需要从连接池中获取连接个数，如果你使用前两个方法，则返回的值是String，你需要手动完成类型转换；但是使用后两个方法，可以由Spring自动完成这个转换：\n\n```\nint connection = env.getProperty(\"db.connection.count\", Integer.class, 30)\n```\n除了getProperty()方法，还有其他方法可以获得配置项的值，如果不设置默认值参数，则在对应的配置项不存在的情况下对应的属性会配置为null，如果你不希望这种情况发生——即要求每个配置项必须存在，则可以使用getRequiredProperty()方法：\n\n```\n@Bean\npublic CompactDisc disc() {\n    return new BlankDisc(\n            env.getRequiredProperty(\"disc.title\"),\n            env.getRequiredProperty(\"disc.artist\"));\n}\n```\n在上述代码中，如果disc.title或者disc.artist配置项不存在，Spring都会抛出IllegalStateException异常。\n\n如果你希望检查某个配置项是否存在，则可以调用containsProperty()方法：<code>boolean titleExists = env.containsProperty(\"disc.title\");</code>。如果你需要将一个属性解析成某个类，则可以使用getPropertyAsClass()方法：<code>Class<CompactDisc> cdClass = env.getPropertyAsClass(\"disc.class\", CompactDisc.class);</code>\n\n**在Spring中，可以使用${ ... }将占位符包裹起来**，例如，在XML文件中可以定义如下代码从配置文件中解析对应配置项的值：\n\n```\n<bean id=\"sgtPeppers\"\n             class=\"soundsystem.BlankDisc\"\n             c:_title=\"${disc.title}\"\n             c:_artist=\"${disc.artist}\" />\n```\n如果你使用component-scanning和自动装配创建和初始化应用组件，则可以使用@Value注解获取配置文件中配置项的值，例如BlankDisc的构造函数可以定义如下：\n\n```\npublic BlankDisc(\n            @Value(\"${disc.title}\") String title,\n            @Value(\"${disc.artist}\") String artist) {\n      this.title = title;\n      this.artist = artist;\n}\n```\n为了使用占位符的值，需要配置PropertyPlaceholderConfigerbean或者PropertySourcesPlaceholderConfigurerbean。从Spring 3.1之后，更推荐使用PropertySourcesPlaceholderConfigurer，因为这个bean和Spring 的Environment的来源一样，例子代码如下：\n\n```\n@Bean\npublic static PropertySourcesPlaceholderConfigurer placeholderConfigurer() {\n    return new PropertySourcesPlaceholderConfigurer();\n}\n```\n如果使用XML配置文件，则通过<context:property-placeholder>元素可以获得PropertySourcesPlaceholderConfigurerbean：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:context=\"http://www.springframework.org/schema/context\"       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n       <context:property-placeholder location=\"classpath:/app.properties\" />\n</beans>\n\n```\n<h3>使用SpEL装配</h3>\nSpring 3引入了Spring Expression Language（SpEL），这是一种在运行时给bean的属性或者构造函数参数注入值的方法。\n\nSpEL有很多优点，简单列举如下：\n\n<li>可以通过bean的ID引用bean；\n<li>可以调用某个对象的方法或者访问它的属性；\n<li>支持数学、关系和逻辑操作；\n<li>正则表达式匹配；\n<li>支持集合操作\n在后续的文章中，可以看到SpEL被用到依赖注入的其他方面，例如在Spring Security中，可以使用SpEL表达式定义安全限制；如果在Spring MVC中使用Thymeleaf模板，在模板中可以使用SpEL表达式获取模型数据。\nSpEL是一门非常灵活的表达式语言，在这里不准备花大量篇幅来涵盖它的所有方面，可以通过一些例子来感受一下它的强大能力。\n\n首先，SpEL表达式被#{ ... }包围，跟placeholders中的${ ... }非常像，最简单的SpEL表达式可以写作<code>#{1}</code>。在应用中，你可能回使用更加有实际含义的SpEL表达式，例如<code>#{T(System).currentTimeMillis()}</code>——这个表达式负责获得当前的系统时间，而T()操作符负责将java.lang.System解析成类，以便可以调用currentTimeMillis()方法。\n\nSpEL表达式可以引用指定ID的bean或者某个bean的属性，例如下面这个例子可以获得ID为sgtPeppers的bean的artist属性的值：<code>#{sgtPeppers.artist}</code>；也可以通过<code>#{systemProperties['disc.title']}</code>引用系统属性。\n\n上述这些例子都非常简单，我们接下来看下如何在bean装配中使用SpEL表达式，之前提到过，如果你使用component-scanning和自动装配创建应用组件，则可以使用@Value注解获得配置文件中配置项的值；除了使用placeholder表达式，还可以使用SpEL表达式，例如BlankDisc的构造函数可以按照下面这种方式来写：\n\n```\npublic BlankDisc(\n            @Value(\"#{systemProperties['disc.title']}\") String title,\n            @Value(\"#{systemProperties['disc.artist']}\") String artist) {\n      this.title = title;\n      this.artist = artist;\n}\n```\nSpEL表达式可以表示整数值，也可以表示浮点数、String值和Boolean值。例如可以使用#{3.14159}表式浮点数3.14159，并且还支持科学计数法——<code>#{9.87E4}</code>表示98700；<code>#{'Hello'}</code>可以表示字符串值、<code>#{false}</code>可以表示Boolean值。\n\n单独使用字面值是乏味的，一般不会使用到只包含有字面值的SpEL表达式，不过在构造更有趣、更复杂的表达式时支持字面值这个特性非常有用。\n\nSpEL表达式可以通过bean的ID引用bean，例如<code>#{sgtPeppers}</code>；也可以引用指定bean的属性，例如<code>#{sgtPeppers.artist}</code>；还可以调用某个bean的方法，例如#<code>{artistSelector.selectArtist()}</code>表达式可以调用artistSelector这个bean的selectArtist()方法。\n\nSpEL表达式也支持方法的连续调用，例如#<code>{artistSelector.selectArtist().toUpperCase()}</code>,为了防止出现NullPointerException异常，最好使用类型安全的操作符，例如#<code>{artistSelector.selectArtist()?.toUpperCase()}</code>。?.操作符在调用右边的函数之前，会确保左边的函数返回的值不为null。\n\n在SpEL中能够调用类的方法或者常量的关键是T()操作符，例如通过<code>T(java.lang.Math)</code>可以访问Math类中的方法和属性——<code>#{(java.lang.Math).random()}</code>和<code>#{T(java.lang.Math).PI}</code>。\n\n在操作文本字符串时，最常用的是检查某个文本是否符合某种格式。SpEL通过matches操作符支持正则表达式匹配。例如：<code>#{admin.email matches '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.com'}</code>可以检查admin.email表示的邮件地址是否正确。\n\n通过SpEL表达式还可以操作集合和数组，例如<code>#{jukebox.songs[4].title}</code>这个表达式可以访问jukebox的songs数组的第5个元素。\n\n也可以实现更复杂的功能：随机选择一首歌——<code>#{jukebox.songs[T(java.lang.Math).random() * jukebox.songs.size()].title}</code>。\n\nSpEL提供了一个选择操作符——<code>.?[]</code>，可以获得某个集合的子集，举个例子，假设你获得jukebox中所有artist为Aerosmith的歌，则可以使用这个表达式：<code>#{jukebox.songs.?[artist eq 'Aerosmith']}</code>。可以看出，<code>.?[]</code>操作符支持在[]中嵌套另一个SpEL表达式。\n\nSpEL还提供了其他两个选择操作符：<code>.^[]</code>用于选择第一个匹配的元素；<code>.$[]</code>用于选择最后一个匹配的元素。\n\n最后，SpEL还提供了一个提取操作符：<code>.![]</code>，可以根据指定的集合新建一个符合某个条件的新集合，例如<code>#{jukebox.songs.![title]}</code>可以将songs的title都提取出来构成一个新的字符串集合。\n\nOK，SpEL的功能非常强大，但是这里需要给开发人员提个醒：别让你的SpEL表达式过于智能。你的表达式越智能，就越难对它们进行单元测试，因此，尽量保证你的SpEL表达式简单易理解。\n\n<h2>总结</h2>\n首先我们介绍了通过Spring的profiles解决多环境部署的问题，通过在运行时根据代表指定环境的profile选择性创建某个bean，Spring可以实现无需重新构建就可以在多个环境下部署同一个应用。\n\nProfiles bean是运行时创建bean的一种解决方案，不过Spring 4提供了一个更普遍的解决方案：利用@Conditional注解和Condition接口实现条件性创建bean。\n\n我们还介绍了两种机制来解决自动装配时可能遇到的歧义性问题：primary beans和qualifiers。尽管定义一个primary bean非常简单，但它仍然有局限，因此我们需要利用qualifier缩小自动装配的bean的范围，而且，我们也演示了如何创建自己的qualifiers。\n\n尽管大多数Spring bean是单例对象，但是在某些情况下具备其他作用域的对象更加合适。Spring 应用中可以创建singletons、prototypes、request-scoped或session-scoped。在使用request-scoped或者session-scoped类型的bean时，还需要解决将非单例对象注入到单例对象时遇到的问题——利用代理接口或代理类。\n\n最后，我们也介绍了Spring表达式语言（SpEL），利用SpEL可以实现在运行时给bean注入值。\n\n","slug":"系统学习Spring-三-——Bean的高级装配","published":1,"updated":"2018-06-30T13:47:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kgg003wrhso74hmea8x","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>在软件开发中，常常设置不同的运行环境：开发环境、预发环境、性能测试环境和生产环境等等。</p>\n<p>不同的环境下，应用程序的配置项也不同，例如数据库配置、远程服务地址等。<a id=\"more\"></a>以数据库配置为例子，在开发环境中你可能使用一个嵌入式的内存数据库，并将测试数据放在一个脚本文件中。例如，在一个Spring的配置类中，可能需要定义如下的bean：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">Bean</span>(<span class=\"keyword\">destroyMethod</span> = <span class=\"string\">\"shutdown\"</span>)</div><div class=\"line\">public DataSource dataSource() &#123;</div><div class=\"line\">    <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">EmbeddedDatabaseBuilder</span>()</div><div class=\"line\">            <span class=\"selector-class\">.addScript</span>(\"<span class=\"selector-tag\">classpath</span><span class=\"selector-pseudo\">:schema.sql\")</span></div><div class=\"line\">            <span class=\"selector-class\">.addScript</span>(\"<span class=\"selector-tag\">classpath</span><span class=\"selector-pseudo\">:test-data.sql\")</span></div><div class=\"line\">            <span class=\"selector-class\">.build</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用EmbeddedDatabaseBuilder这个构建器可以建立一个内存数据库，通过指定路径下的schema.sql文件中的内容可以建立数据库的表定义，通过test-data.sql可以准备好测试数据。</p>\n<p>开发环境下可以这么用，但是在生产环境下不可以。在生产环境下，你可能需要从容器中使用JNDI获取DataSource对象，这中情况下，对应的创建代码是：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">Bean</span></div><div class=\"line\">public DataSource dataSource() &#123;</div><div class=\"line\">    <span class=\"keyword\">JndiObjectFactoryBean </span><span class=\"keyword\">jndiObjectFactoryBean </span>=</div><div class=\"line\">             new <span class=\"keyword\">JndiObjectFactoryBean();</span></div><div class=\"line\">    <span class=\"keyword\">jndiObjectFactoryBean.setJndiName(\"jdbc/myDS\");</span></div><div class=\"line\">    <span class=\"keyword\">jndiObjectFactoryBean.setResourceRef(true);</span></div><div class=\"line\">    <span class=\"keyword\">jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class);</span></div><div class=\"line\">    return (DataSource) <span class=\"keyword\">jndiObjectFactoryBean.getObject();</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用JNDI管理DataSource对象，很适合生产环境，但是对于日常开发环境来说太复杂了。</p>\n<p>另外，在QA环境下你也可以选择另外一种DataSource配置，可以选择使用普通的DBCP连接池，例如：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">Bean(destroyMethod </span>= <span class=\"string\">\"close\"</span>)</div><div class=\"line\">public DataSource dataSource() &#123;</div><div class=\"line\">    <span class=\"keyword\">BasicDataSource </span>dataSource = new <span class=\"keyword\">BasicDataSource();</span></div><div class=\"line\">    dataSource.setUrl(<span class=\"string\">\"jdbc:h2:tcp://dbserver/~/test\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dataSource.setDriverClassName(<span class=\"string\">\"org.h2.Driver\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dataSource.setUsername(<span class=\"string\">\"sa\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dataSource.setPassword(<span class=\"string\">\"password\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dataSource.setInitialSize(<span class=\"number\">20</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dataSource.setMaxActive(<span class=\"number\">30</span>)<span class=\"comment\">;</span></div><div class=\"line\">    return dataSource<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述三种办法可以为不同环境创建各自需要的javax.sql.DataSource实例，这个例子很适合介绍不同环境下创建bean，那么有没有一种办法：只需要打包应用一次，然后部署到不同的开发环境下就会自动选择不同的bean创建策略。一种方法是创建三个独立的配置文件，然后利用Maven profiles的预编译命令处理在特定的环境下打包哪个配置文件到最终的应用中。这种解决方法有一个问题，即在切换到不同环境时，需要重新构建应用——从开发环境到测试环境没有问题，但是从测试环境到生产环境也需要重新构建则可能引入一定风险。</p>\n<p>Spring提供了对应的方法，使得在环境切换时不需要重新构建整个应用。</p>\n<p></p><h2>配置profile beans</h2><br>Spring提供的方法不是在构件时针对不同的环境决策，而是在运行时，这样，一个应用只需要构建一次，就可以在开发、QA和生产环境运行。<p></p>\n<p>在Spring 3.1之中，可以使用@Profile注解来修饰JavaConfig类，当某个环境对应的profile被激活时，就使用对应环境下的配置类。</p>\n<p>在Spring3.2之后，则可以在函数级别使用@Profile注解（是的，跟@Bean注解同时作用在函数上），这样就可以将各个环境的下的bean定义都放在同一个配置类中，还是以之前的例子：</p>\n<p>利用注解配置</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.sample.config;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Bean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Profile;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.jndi.JndiObjectFactoryBean;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceConfig</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Bean(destroyMethod = <span class=\"meta-string\">\"shutdown\"</span>)</span></div><div class=\"line\">    <span class=\"meta\">@Profile(<span class=\"meta-string\">\"dev\"</span>)</span></div><div class=\"line\">    <span class=\"keyword\">public</span> DataSource embeddedDataSource() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> new EmbeddedDatabaseBuilder()</div><div class=\"line\">                .setType(EmbeddedDatabaseType.H2)</div><div class=\"line\">                .addScript(<span class=\"string\">\"classpath:schema.sql\"</span>)</div><div class=\"line\">                .addScript(<span class=\"string\">\"classpath:test-data.sql\"</span>)</div><div class=\"line\">                .build();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"meta\">@Profile(<span class=\"meta-string\">\"prod\"</span>)</span></div><div class=\"line\">    <span class=\"keyword\">public</span> DataSource dataSource() &#123;</div><div class=\"line\">        JndiObjectFactoryBean jndiObjectFactoryBean =</div><div class=\"line\">                new JndiObjectFactoryBean();</div><div class=\"line\">        jndiObjectFactoryBean.setJndiName(<span class=\"string\">\"jdbc/myDS\"</span>);</div><div class=\"line\">        jndiObjectFactoryBean.setResourceRef(<span class=\"literal\">true</span>); </div><div class=\"line\">        jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.<span class=\"keyword\">class</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> (DataSource) jndiObjectFactoryBean.getObject();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>除了被@Profile修饰的其他bean，无论在什么开发环境下都会被创建。</p>\n<p>利用XML文件配置</p>\n<p>和在JavaConfig的用法一样，可以从文件级别定义环境信息，也可以将各个环境的bean放在一个XML配置文件中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:jdbc</span>=<span class=\"string\">\"http://www.springframework.org/schema/jdbc\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:jee</span>=<span class=\"string\">\"http://www.springframework.org/schema/jee\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans </span></div><div class=\"line\">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">profile</span>=<span class=\"string\">\"dev\"</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">jdbc:embedded-database</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span>&gt;</span></div><div class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">jdbc:script</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:schema.sql\"</span>/&gt;</span></div><div class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">jdbc:script</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:test-data.sql\"</span>/&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">jdbc:embedded-database</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">profile</span>=<span class=\"string\">\"qa\"</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span></span></div><div class=\"line\">                    <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span></div><div class=\"line\">                    <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span></div><div class=\"line\">                    <span class=\"attr\">p:url</span>=<span class=\"string\">\"jdbc:h2:tcp://dbserver/~/test\"</span></div><div class=\"line\">                    <span class=\"attr\">p:driverClassName</span>=<span class=\"string\">\"org.h2.Driver\"</span></div><div class=\"line\">                    <span class=\"attr\">p:username</span>=<span class=\"string\">\"sa\"</span></div><div class=\"line\">                    <span class=\"attr\">p:password</span>=<span class=\"string\">\"password\"</span></div><div class=\"line\">                    <span class=\"attr\">p:initialSize</span>=<span class=\"string\">\"20\"</span></div><div class=\"line\">                    <span class=\"attr\">p:maxActive</span>=<span class=\"string\">\"30\"</span> /&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">profile</span>=<span class=\"string\">\"prod\"</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">jee:jndi-lookup</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span></span></div><div class=\"line\">                               <span class=\"attr\">jndi-name</span>=<span class=\"string\">\"jdbc/MyDatabase\"</span></div><div class=\"line\">                               <span class=\"attr\">resource-ref</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">                               <span class=\"attr\">proxy-interface</span>=<span class=\"string\">\"javax.sql.DataSource\"</span>/&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上述三个javax.sql.DataSource的bean，ID都是dataSource，但是在运行的时候只会创建一个bean。</p>\n<p></p><h2>激活profiles</h2><br>Spring提供了spring.profiles.active和spring.profiles.default这两个配置项定义激活哪个profile。如果应用中设置了spring.profiles.active选项，则Spring根据该配置项的值激活对应的profile，如果没有设置spring.profiles.active，则Spring会再查看spring.profiles.default这个配置项的值，如果这两个变量都没有设置，则Spring只会创建没有被profile修饰的bean。<p></p>\n<p>有下列几种方法设置上述两个变量的值：</p>\n<p><li>DispatcherServlet的初始化参数</li></p>\n<p><li>web应用的上下文参数(context parameters)</li></p>\n<p><li>JNDI项</li></p>\n<p><li>环境变量</li></p>\n<p><li>JVM系统属性<br></li><li>在集成测试类上使用@ActiveProfiles注解</li></p>\n<p>开发人员可以按自己的需求设置spring.profiles.active和spring.profiles.default这两个属性的组合。</p>\n<p>我推荐在web应用的web.xml文件中设置spring.profiles.default属性——通过设置DispatcherServlet的初始参数和<context-param>标签。</context-param></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"</span></div><div class=\"line\">         <span class=\"attr\">version</span>=<span class=\"string\">\"3.1\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath*:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>spring.profiles.default<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>appServletName<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>spring.profiles.default<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>appServletName<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>按照上述方法设置spring.profiles.default属性，任何开发人员只需要下载源码就可以在开发环境中运行程序以及测试。</p>\n<p>然后，当应用需要进入QA、生产环境时，负责部署的开发者只需要通过系统属性、环境变量或者JNDI等方法设置spring.profiles.active属性即可，因为spring.profiles.active优先级更高。</p>\n<p>另外，在运行集成测试时，可能希望运行跟生产环境下相同的配置；但是，如果配置重需要的beans被profiles修饰的，则需要在跑单元测试之前激活对应的profiles。</p>\n<p>Spring提供了@ActiveProfiles注解来激活指定的profiles，用法如下：</p>\n<p></p><h2>Conditional beans</h2><br>假设你希望只有在项目中引入特定的依赖库时、或者只有当特定的bean已经被创建时、或者是设置了某个环境变量时，某个bean才被创建。<p></p>\n<p>Spring 4之前很难实现这种需求，不过在Spring 4中提出了一个新的注解——@Conditional，该注解作用于@Bean注解修饰的方法上，通过判断指定的条件是否满足来决定是否创建该bean。</p>\n<p>举个例子，工程中有一个MagicBean，你希望只有当magic环境变量被赋值时才创建MagicBean，否则该Bean的创建函数被忽略。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Bean</span></div><div class=\"line\"><span class=\"variable\">@Conditional</span>(MagicExistsCondition.class)</div><div class=\"line\">public MagicBean magicBean() &#123;</div><div class=\"line\">    <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">MagicBean</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子表示：只有当MagicExistsCondition类已经存在时，才会创建MagicBean。</p>\n<p>@Conditional注解的源码列举如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">package</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.annotation</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">java</span><span class=\"selector-class\">.lang</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.ElementType</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">java</span><span class=\"selector-class\">.lang</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Retention</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">java</span><span class=\"selector-class\">.lang</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.RetentionPolicy</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">java</span><span class=\"selector-class\">.lang</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Target</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Condition</span>;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">Retention</span>(<span class=\"keyword\">RetentionPolicy</span>.<span class=\"keyword\">RUNTIME</span>)</div><div class=\"line\">@Target(&#123;<span class=\"selector-tag\">ElementType</span><span class=\"selector-class\">.TYPE</span>, <span class=\"selector-tag\">ElementType</span><span class=\"selector-class\">.METHOD</span>&#125;)</div><div class=\"line\"><span class=\"selector-tag\">public</span> @<span class=\"keyword\">interface</span> Conditional &#123;</div><div class=\"line\">    <span class=\"selector-tag\">Class</span>&lt;? <span class=\"selector-tag\">extends</span> <span class=\"selector-tag\">Condition</span>&gt;<span class=\"selector-attr\">[]</span> <span class=\"selector-tag\">value</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，传入@Conditional注解的类一定要实现Condition接口，该接口提供matchs()方法——如果matches()方法返回true，则被@Conditional注解修饰的bean就会创建，否则对应的bean不会创建。</p>\n<p>在这个例子中，MagicExistsCondition类应该实现Condition接口，并在matches()方法中实现具体的判断条件，代码如下所示：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.sample.config;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Condition;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ConditionContext;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.env.Environment;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MagicExistsCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</div><div class=\"line\">        Environment env = conditionContext.getEnvironment();</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">return</span> env.<span class=\"title\">containsProperty</span><span class=\"params\">(<span class=\"string\">\"magic\"</span>)</span></span>; <span class=\"comment\">//检查magic环境变量是否被设置</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码中的matchs()方法简单且有效：它首先获取环境变量，然后再判断环境变量中是否存在magic属性。在这个例子中，magic的值是多少并不重要，它只要存在就好。</p>\n<p>MagicExistsCondition的matchs()方法是通过ConditionContext获取了环境实例。matchs()方法的参数有两个：ConditionContext和AnnotatedTypeMetadata，分别看下这两个接口的源码：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ConditionContext</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ConditionContext</span> &#123;</div><div class=\"line\">    <span class=\"function\">BeanDefinitionRegistry <span class=\"title\">getRegistry</span>(<span class=\"params\"></span>)</span>;</div><div class=\"line\">    <span class=\"function\">ConfigurableListableBeanFactory <span class=\"title\">getBeanFactory</span>(<span class=\"params\"></span>)</span>;</div><div class=\"line\">    <span class=\"function\">Environment <span class=\"title\">getEnvironment</span>(<span class=\"params\"></span>)</span>;</div><div class=\"line\">    <span class=\"function\">ResourceLoader <span class=\"title\">getResourceLoader</span>(<span class=\"params\"></span>)</span>;</div><div class=\"line\">    <span class=\"function\">ClassLoader <span class=\"title\">getClassLoader</span>(<span class=\"params\"></span>)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>利用ConditionContext接口可做的事情很多，列举如下：</p>\n<p><li>通过getRegistry()方法返回的BeanDefinitionRegistry实例，可以检查bean的定义；</li></p>\n<p><li>通过getBeanFactory()方法返回的ConfigurableListableBeanFactory实例，可以检查某个bean是否存在于应用上下文中，还可以获得该bean的属性；</li></p>\n<p><li>通过getEnvironment()方法返回的Environment实例，可以检查指定环境变量是否被设置，还可以获得该环境变量的值；</li></p>\n<p><li>通过getResourceLoader()方法返回的ResourceLoader实例，可以得到应用加载的资源包含的内容；</li></p>\n<p><li>通过getClassLoader()方法返回的ClassLoader实例，可以检查某个类是否存在。</li></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//AnnotatedTypeMetadata</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> AnnotatedTypeMetadata &#123;</div><div class=\"line\">    <span class=\"built_in\">boolean</span> isAnnotated(<span class=\"built_in\">String</span> var1);</div><div class=\"line\">    Map&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; getAnnotationAttributes(<span class=\"built_in\">String</span> var1);</div><div class=\"line\">    Map&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; getAnnotationAttributes(<span class=\"built_in\">String</span> var1, <span class=\"built_in\">boolean</span> var2);</div><div class=\"line\">    MultiValueMap&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; getAllAnnotationAttributes(<span class=\"built_in\">String</span> var1);</div><div class=\"line\">    MultiValueMap&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; getAllAnnotationAttributes(<span class=\"built_in\">String</span> var1, <span class=\"built_in\">boolean</span> var2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过isAnnotated()方法可以检查@Bean方法是否被指定的注解类型修饰；通过其他方法可以获得修饰@Bean方法的注解的属性。</p>\n<p>从Spring 4开始，@Profile注解也利用@Conditional注解和Condition接口进行了重构。作为分析@Conditional注解和Condition接口的另一个例子，我们可以看下在Spring 4中@Profile注解的实现。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"variable\">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</div><div class=\"line\"><span class=\"variable\">@Documented</span></div><div class=\"line\"><span class=\"variable\">@Conditional</span>(&#123;ProfileCondition.class&#125;)</div><div class=\"line\">public <span class=\"variable\">@interface</span> Profile &#123;</div><div class=\"line\">    <span class=\"selector-tag\">String</span><span class=\"selector-attr\">[]</span> <span class=\"selector-tag\">value</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，@Profile注解的实现被@Conditional注解修饰，并且依赖于ProfileCondition类——该类是Condition接口的实现。如下列代码所示，ProfileCondition利用ConditionContext和AnnotatedTypeMetadata两个接口提供的方法进行决策。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProfileCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span> </span>&#123;</div><div class=\"line\">    ProfileCondition() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(context.getEnvironment() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            MultiValueMap attrs = metadata.getAllAnnotationAttributes(Profile.<span class=\"keyword\">class</span>.getName());</div><div class=\"line\">            <span class=\"keyword\">if</span>(attrs != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">Iterator</span> var4 = ((<span class=\"built_in\">List</span>)attrs.<span class=\"keyword\">get</span>(<span class=\"string\">\"value\"</span>)).iterator();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"built_in\">Object</span> value;</div><div class=\"line\">                <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(!var4.hasNext()) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    value = var4.next();</div><div class=\"line\">                &#125; <span class=\"keyword\">while</span>(!context.getEnvironment().acceptsProfiles((<span class=\"built_in\">String</span>[])((<span class=\"built_in\">String</span>[])value)));</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;<span class=\"comment\">//传给@Profile注解的参数对应的环境profiles已激活</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; <span class=\"comment\">//默认为true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，这代码写得不太好理解:ProfileCondition通过AnnotatedTypeMetadata实例获取与@Profile注解相关的所有注解属性；然后检查每个属性的值（存放在value实例中），对应的profiles别激活——即context.getEnvironment().acceptsProfiles(((String[]) value))的返回值是true，则matchs()方法返回true。</p>\n<p>Environment类提供了可以检查profiles的相关方法，用于检查哪个profile被激活：</p>\n<p><li>String[] getActiveProfiles()——返回被激活的profiles数组；</li></p>\n<p><li>String[] getDefaultProfiles()——返回默认的profiles数组；</li></p>\n<p><li>boolean acceptsProfiles(String… profiles)——如果某个profiles被激活，则返回true。</li></p>\n<p></p><h2>处理自动装配的歧义</h2><br>在一文中介绍了如何通过自动装配让Spring自动简历bean之间的依赖关系——自动装配非常有用，通过自动装配可以减少大量显式配置代码。不过，自动装配（autowiring）要求bean的匹配具备唯一性，否则就会产生歧义，从而抛出异常。<p></p>\n<p>举个例子说明自动装配的歧义性，假设你有如下自动装配的代码：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDessert</span><span class=\"params\">(Dessert dessert)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dessert = dessert;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Dessert是一个接口，有三个对应的实现：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\">public class Cake implements Dessert &#123; ... &#125;</div><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\">public class Cookies implements Dessert &#123; ... &#125;</div><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\">public class IceCream implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>因为上述三个类都被@Component注解修饰，因此都会被component-scanning发现并在应用上下文中创建类型为Dessert的bean；然后，当Spring试图为setDessert()方法装配对应的Dessert参数时，就会面临多个选择；然后Spring就会抛出异常——NoUniqueBeanDefinitionException。</p>\n<p>虽然在实际开发中并不会经常遇到这种歧义性，但是它确实是个问题，幸运的是Spring也提供了对应的解决办法。</p>\n<p></p><h3> @Primary指定优先bean</h3><br>在定义bean时，可以通过指定一个优先级高的bean来消除自动装配过程中遇到的歧义问题。<p></p>\n<p>在上述例子中，可以选择一个最重要的Bean，用@Primary注解修饰：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Primary</span></div><div class=\"line\">public class IceCream implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>如果你没有使用自动扫描，而是使用基于Java的显式配置文件，则如下定义@Bean方法：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Bean</span></div><div class=\"line\"><span class=\"variable\">@Primary</span></div><div class=\"line\">public Dessert iceCream() &#123;</div><div class=\"line\">  <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">IceCream</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果使用基于XML文件的显式配置，则如下定义：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean <span class=\"built_in\">id</span>=<span class=\"string\">\"iceCream\"</span></div><div class=\"line\">             <span class=\"built_in\">class</span>=<span class=\"string\">\"com.dasserteater.IceCream\"</span></div><div class=\"line\">             primary=<span class=\"string\">\"true\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>不论哪种形式，效果都一样：告诉Spring选择primary bean来消除歧义。不过，当应用中指定多个Primary bean时，Spring又不会选择了，再次遇到歧义。Spring还提供了功能更强大的歧义消除机制——@Qualifiers注解。</p>\n<p></p><h3>@Qualifier指定bean的ID</h3><br>@Qualifier注解可以跟@Autowired或@Inject一起使用，指定需要导入的bean的ID，例如，上面例子中的setDessert()方法可以这么写：<p></p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"iceCream\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDessert</span><span class=\"params\">(Dessert dessert)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dessert = dessert;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>每个bean都具备唯一的ID，因此此处彻底消除了歧义。</p>\n<p>如果进一步深究，@Qualifier(“iceCream”)表示以”iceCream”字符串作为qualifier的bean。每个bean都有一个qualifier，内容与该bean的ID相同。因此，上述装配的实际含义是：setDessert()方法会装配一个以”iceCream”为qualifier的bean，只不过碰巧是该bean的ID也是iceCream。</p>\n<p>以默认的bean的ID作为qualifier非常简单，但是也会引发新的问题：如果将来对IceCream类进行重构，它的类名发生改变（例如Gelato）怎么办？在这种情况下，该bean对应的ID和默认的qualifier将变为”gelato”，然后自动装配就会失败。</p>\n<p>问题的关键在于：你需要指定一个qualifier，该内容不会受目标类的类名的限制和影响。</p>\n<p><strong>开发者可以给某个bean设定自定义的qualifier</strong>，形式如下：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\">public class IceCream implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>然后，在要注入的地方也使用”cold”作为qualifier来获得该bean：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDessert</span><span class=\"params\">(Dessert dessert)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dessert = dessert;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>即使在JavaConfig中，也可以使用@Qualifier指定某个bean的qualifier，例如：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Bean</span></div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\">public Dessert iceCream() &#123;</div><div class=\"line\">  <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">IceCream</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在使用自定义的@Qualifier值时，最好选择一个含义准确的名词，不要随意使用名词。在这个例子中，我们描述IceCream为”cold”bean，在装配时，可以读作：给我来一份cold dessert，恰好指定为IceCream。类似的，我们把Cake叫作”soft”，把Cookies*叫作”crispy”。</p>\n<p><strong>使用自定义的qualifiers优于使用基于bean的ID的默认qualifier</strong>，但是当你有多个bean共享同一个qualifier时，还是会有歧义。例如，假设你定义一个新的Dessertbean：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\">public class Popsicle implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>现在你又有两个”cold”为qualifier的bean了，再次遇到歧义：最直白的想法是多增加一个限制条件，例如IceCream会成为下面的定义：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"creamy\"</span>)</div><div class=\"line\">public class IceCream implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>而Posicle类则如下定义：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"fruity\"</span>)</div><div class=\"line\">public class Popsicle implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>在装配bean的时候，则需要使用两个限制条件，如下：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Bean</span></div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"creamy\"</span>)</div><div class=\"line\">public Dessert iceCream() &#123;</div><div class=\"line\">  <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">IceCream</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里有个小问题：Java 不允许在同一个item上加多个相同类型的注解（Java 8已经支持），但是这种写法显然很啰嗦。</p>\n<p>解决办法是：通过定义自己的qualifier注解，例如，可以创建一个@Cold注解来代替@Qualifier(“cold”)：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD,</div><div class=\"line\">                  ElementType.METHOD, ElementType.TYPE&#125;)</div><div class=\"line\"><span class=\"variable\">@Rentention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"variable\">@Qualifier</span></div><div class=\"line\">public <span class=\"variable\">@interface</span> Cold &#123; &#125;</div></pre></td></tr></table></figure>\n<p>可以创建一个@Creamy注解来代替@Qualifier(“creamy”)：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD,</div><div class=\"line\">                  ElementType.METHOD, ElementType.TYPE&#125;)</div><div class=\"line\"><span class=\"variable\">@Rentention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"variable\">@Qualifier</span></div><div class=\"line\">public <span class=\"variable\">@interface</span> Creamy &#123; &#125;</div></pre></td></tr></table></figure>\n<p>这样，就可以使用@Cold和@Creamy修饰IceCream类，例如：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Cold</span></div><div class=\"line\"><span class=\"variable\">@Creamy</span></div><div class=\"line\">public class IceCream implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>类似的，可以使用@Cold和@Fruity修饰Popsicle类，例如：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Cold</span></div><div class=\"line\"><span class=\"variable\">@Fruity</span></div><div class=\"line\">public class Popsicle implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>最后，在装配的时候，可以使用@Cold和@Creamy限定IceCream类对应的bean：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"meta\">@Cold</span></div><div class=\"line\"><span class=\"meta\">@Creamy</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDessert</span><span class=\"params\">(Dessert dessert)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dessert = dessert;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p></p><h2>bean的作用域</h2><br>默认情况下，Spring应用上下文中的bean都是单例对象，也就是说，无论给某个bean被多少次装配给其他bean，都是指同一个实例。<p></p>\n<p>大部分情况下，单例bean很好用：如果一个对象没有状态并且可以在应用中重复使用，那么针对该对象的初始化和内存管理开销非常小。</p>\n<p>但是，有些情况下你必须使用某中可变对象来维护几种不同的状态，因此形成非线程安全。在这种情况下，把类定义为单例并不是一个好主意——该对象在重入使用的时候可能遇到线程安全问题。</p>\n<p>Spring定义了几种bean的作用域，列举如下：</p>\n<p><li>Singleton——在整个应用中只有一个bean的实例；</li></p>\n<p><li>Prototype——每次某个bean被装配给其他bean时，都会创建一个新的实例；</li></p>\n<p><li>Session——在web应用中，在每次会话过程中只创建一个bean的实</li><li>例；<br>Request——在web应用中，在每次http请求中创建一个bean的实例。<br>Singleton域是默认的作用域，如前所述，对于可变类型来说并不理想。我们可以使用@Scope注解——和@Component或@Bean注解都可以使用。</li></p>\n<p>例如，如果你依赖component-scanning发现和定义bean，则可以用如下代码定义prototype bean：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</div><div class=\"line\">public class Notepad&#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>除了使用SCOPE_PROTOTYPE字符串指定bean的作用域，还可以使用@Scope(“prototype”)，但使用ConfigurableBeanFactory.SCOPE_PROTOTYPE更安全，不容易遇到拼写错误。</p>\n<p>另外，如果你使用JavaConfig定义Notepad的bean，也可以给出下列定义：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Bean</span></div><div class=\"line\"><span class=\"variable\">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</div><div class=\"line\">public Notepad notepad() &#123;</div><div class=\"line\">    <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">Notepad</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你使用xml文件定义Notepad的bean，则有如下定义：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean <span class=\"built_in\">id</span>=<span class=\"string\">\"notepad\"</span></div><div class=\"line\">            <span class=\"built_in\">class</span>=<span class=\"string\">\"com.myapp.Notepad\"</span></div><div class=\"line\">            scope=<span class=\"string\">\"prototype\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>无论你最后采取上述三种定义方式的哪一种定义prototype类型的bean，每次Notepad被装配到其他bean时，都会重新创建一个新的实例。</p>\n<p></p><h3>request和session作用域</h3><br>在Web应用中，有时需要在某个request或者session的作用域范围内共享同一个bean的实例。举个例子，在一个典型的电子商务应用中，可能会有一个bean代表用户的购物车，如果购物车是单例对象，则所有的用户会把自己要买的商品添加到同一个购物车中；另外，如果购物车bean设置为prototype，则在应用中某个模块中添加的商品在另一个模块中将不能使用。<p></p>\n<p>对于这个例子，使用session scope更合适，因为一个会话（session）唯一对应一个用户，可以通过下列代码使用session scope:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Bean</span></div><div class=\"line\"><span class=\"variable\">@Scope</span>(value=WebApplicationContext.SCOPE_SESSION,</div><div class=\"line\">                proxyMode=ScopedProxyMode.INTERFACES)</div><div class=\"line\">public ShoppingCart cart() &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>在这里你通过value属性设置了WebApplicationContext.SCOPE_SESSION，这告诉Spring为web应用中的每个session创建一个ShoppingCartbean的实例。在整个应用中会有多个ShoppingCart实例，但是在某个会话的作用域中ShoppingCart是单例的。</p>\n<p>这里还用proxyMode属性设置了ScopedProxyMode.INTERFACES值，这涉及到另一个问题：把request/session scope的bean装配到singleton scope的bean时会遇到。首先看下这个问题的表现。</p>\n<p>假设在应用中需要将ShoppingCartbean装配给单例StoreServicebean的setter方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StoreService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setShoppingCart</span><span class=\"params\">(ShoppingCart shoppingCart)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.shoppingCart = shoppingCart;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为StoreService是单例bean，因此在Spring应用上下文加载时该bean就会被创建。在创建这个bean时 ，Spring会试图装配对应的ShoppingCartbean，但是这个bean是session scope的，目前还没有创建——只有在用户访问时并创建session时，才会创建ShoppingCartbean。</p>\n<p>而且，之后肯定会有多个ShoppingCartbean：每个用户一个。理想的情景是：在需要StoreService操作购物车时，StoreService能够和ShoppingCartbean正常工作。</p>\n<p>针对这种需求，Spring应该给StoreServicebean装配一个ShoppingCartbean的代理，如下图所示。代理类对外暴露的接口和ShoppingCart中的一样，用于告诉StoreService关于ShoppingCart的接口信息——当StoreService调用对应的接口时，代理采取延迟解析策略，并把调用委派给实际的session-scoped ShoppingCartbean。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/44770-c117d67ea67a9f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" height=\"300px\"></p>\n<p>Scoped proxies enable deferred injected of request- and session-coped beans<br>因为ShoppingCart是一个接口，因此这里工作正常，但是，如果ShoppingCart是具体的类，则Spring不能创建基于接口的代理。这里必须使用CGLib创建class-based的bean，即使用ScopedProxyMode.TARGET_CLASS指示代理类应该基础自目标类。</p>\n<p>这里使用session scope作为例子，在request scope中也有同样的问题，当然解决办法也相同。</p>\n<p></p><h3> 在XML文件中定义scoped代理</h3><br>如果你在xml配置文件中定义session-scoped或者request-scoped bean，则不能使用@Scope注解以及对应的proxyMode属性。<bean>元素的scope属性可以用来指定bean的scope，但是如何指定代理模式？<p></p>\n<p>可以使用Spring aop指定代理模式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=<span class=\"string\">\"cart\"</span></div><div class=\"line\">            <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.myapp.ShoppingCart\"</span></div><div class=\"line\">            scope=<span class=\"string\">\"session\"</span></div><div class=\"line\">      &lt;aop: scoped-proxy /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p><aop: scoped-proxy=\"\">在XML配置方式扮演的角色与proxyMode属性在注解配置方式中的相同，需要注意的是，这里默认使用CGLIB库创建代理，因此，如果需要创建接口代理，则需要设置proxy-target-class属性为false:</aop:></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=<span class=\"string\">\"cart\"</span></div><div class=\"line\">            <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.myapp.ShoppingCart\"</span></div><div class=\"line\">            scope=<span class=\"string\">\"session\"</span></div><div class=\"line\">      &lt;aop: scoped-proxy proxy-target-<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"false\"</span> /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>为了使用<aop: scoped-proxy=\"\">元素，需要在XML配置文件中定义Spring的aop名字空间：</aop:></p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</div><div class=\"line\">&lt;beans xmlns=<span class=\"string\">\"htttp://www.springframework.org/schema/beans\"</span></div><div class=\"line\">              xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">              xmlns:aop=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">              xsi:schemaLocations=<span class=\"string\">\"</span></div><div class=\"line\">                   http:<span class=\"comment\">//www.springframework.org/schema/aop</span></div><div class=\"line\">                   http:<span class=\"comment\">//www.springframework.org/schema/aop/spring-aop.xsd</span></div><div class=\"line\">                   http:<span class=\"comment\">//www.springframework.org/schema/beans</span></div><div class=\"line\">                   http:<span class=\"comment\">//www.springframework.org/schema/beans/spring-beans.xsd\"&gt;</span></div><div class=\"line\">    ........</div></pre></td></tr></table></figure>\n<p></p><h2>运行时值注入</h2><br>一般而言，讨论依赖注入和装配时，我们多关注的是如何（how）实现依赖注入（构造函数、setter方法），即如何建立对象之间的联系。<p></p>\n<p>依赖注入的另一个方面是何时（when）将值装配给bean的属性或者构造函数。在装配bean—依赖注入的本质一文中，我们执行了很多值装配的任务，例如有如下代码：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CompactDisc <span class=\"title\">sgtPeppers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BlankDisc(</div><div class=\"line\">             <span class=\"string\">\"Sgt. Pepper's Lonely Hearts Club Band\"</span>,</div><div class=\"line\">             <span class=\"string\">\"The Beatles\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种硬编码的方式有时可以，有时却需要避免硬编码——在运行时决定需要注入的值。Spring提供以下两种方式实现运行时注入：</p>\n<p><li>Property placeholders</li></p>\n<p><li>he Spring Expression Language(SpEL)</li></p>\n<p></p><h3>注入外部的值</h3><br>在Spring中解析外部值的最好方法是定义一个配置文件，然后通过Spring的环境实例获取配置文件中的配置项的值。例如，下列代码展示如何在Spring 配置文件中使用外部配置项的值。<p></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">package</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.spring</span><span class=\"selector-class\">.sample</span><span class=\"selector-class\">.config</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.spring</span><span class=\"selector-class\">.sample</span><span class=\"selector-class\">.soundsystem</span><span class=\"selector-class\">.CompactDisc</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.beans</span><span class=\"selector-class\">.factory</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Autowired</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Bean</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Configuration</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.PropertySource</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.core</span><span class=\"selector-class\">.env</span><span class=\"selector-class\">.Environment</span>;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">Configuration</span></div><div class=\"line\">@PropertySource(<span class=\"string\">\"classpath:/app.properties\"</span>)</div><div class=\"line\">public class ExpressiveConfig &#123;</div><div class=\"line\">        @<span class=\"keyword\">Autowired</span></div><div class=\"line\">        Environment env; </div><div class=\"line\"></div><div class=\"line\">       @<span class=\"keyword\">Bean</span></div><div class=\"line\">        public CompactDisc disc() &#123;</div><div class=\"line\">              <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">BlankDisc</span>(<span class=\"selector-tag\">env</span><span class=\"selector-class\">.getProperty</span>(\"<span class=\"selector-tag\">disc</span><span class=\"selector-class\">.title</span>\"),</div><div class=\"line\">                <span class=\"selector-tag\">env</span><span class=\"selector-class\">.getProperty</span>(\"<span class=\"selector-tag\">disc</span><span class=\"selector-class\">.artist</span>\"));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里，@PropertySource注解引用的配置文件内容如下：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">disc.<span class=\"built_in\">title</span>=Sgt. Pepper's Lonely Hearts Club <span class=\"built_in\">Band</span></div><div class=\"line\">disc.artist=The Beatles</div></pre></td></tr></table></figure>\n<p>属性文件被加载到Spring的Environment实例中，然后通过getProperty()方法解析对应配置项的值。</p>\n<p><strong>在Environment类中，getProperty()方法有如下几种重载形式</strong>：</p>\n<p><li>String getProperty(String var1);</li></p>\n<p><li>String getProperty(String var1, String var2);</li></p>\n<p><li><t> T getProperty(String var1, Class<t> var2);</t></t></li></p>\n<p><li><t> T getProperty(String var1, Class<t> var2, T var3);</t></t></li></p>\n<p>前两个方法都是返回String值，利用第二个参数，可以设置默认值；后两个方法可以指定返回值的类型，举个例子：假设你需要从连接池中获取连接个数，如果你使用前两个方法，则返回的值是String，你需要手动完成类型转换；但是使用后两个方法，可以由Spring自动完成这个转换：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> connection = env.getProperty(<span class=\"string\">\"db.connection.count\"</span>, Integer.<span class=\"keyword\">class</span>, <span class=\"number\">30</span>)</div></pre></td></tr></table></figure>\n<p>除了getProperty()方法，还有其他方法可以获得配置项的值，如果不设置默认值参数，则在对应的配置项不存在的情况下对应的属性会配置为null，如果你不希望这种情况发生——即要求每个配置项必须存在，则可以使用getRequiredProperty()方法：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CompactDisc <span class=\"title\">disc</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BlankDisc(</div><div class=\"line\">            env.getRequiredProperty(<span class=\"string\">\"disc.title\"</span>),</div><div class=\"line\">            env.getRequiredProperty(<span class=\"string\">\"disc.artist\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上述代码中，如果disc.title或者disc.artist配置项不存在，Spring都会抛出IllegalStateException异常。</p>\n<p>如果你希望检查某个配置项是否存在，则可以调用containsProperty()方法：<code>boolean titleExists = env.containsProperty(“disc.title”);</code>。如果你需要将一个属性解析成某个类，则可以使用getPropertyAsClass()方法：<code>Class<compactdisc> cdClass = env.getPropertyAsClass(“disc.class”, CompactDisc.class);</compactdisc></code></p>\n<p><strong>在Spring中，可以使用${ … }将占位符包裹起来</strong>，例如，在XML文件中可以定义如下代码从配置文件中解析对应配置项的值：</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sgtPeppers\"</span></span></span></div><div class=\"line\">             <span class=\"attr\">class</span>=<span class=\"string\">\"soundsystem.BlankDisc\"</span></div><div class=\"line\">             <span class=\"attr\">c:_title</span>=<span class=\"string\">\"$</span><span class=\"template-variable\">&#123;disc.title&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span></span></span></div><div class=\"line\">             <span class=\"attr\">c:_artist</span>=<span class=\"string\">\"$</span><span class=\"template-variable\">&#123;disc.artist&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div></pre></td></tr></table></figure>\n<p>如果你使用component-scanning和自动装配创建和初始化应用组件，则可以使用@Value注解获取配置文件中配置项的值，例如BlankDisc的构造函数可以定义如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> BlankDisc(</div><div class=\"line\">            <span class=\"meta\">@Value(<span class=\"meta-string\">\"<span class=\"subst\">$&#123;disc.title&#125;</span>\"</span>)</span> String title,</div><div class=\"line\">            <span class=\"meta\">@Value(<span class=\"meta-string\">\"<span class=\"subst\">$&#123;disc.artist&#125;</span>\"</span>)</span> String artist) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.title = title;</div><div class=\"line\">      <span class=\"keyword\">this</span>.artist = artist;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了使用占位符的值，需要配置PropertyPlaceholderConfigerbean或者PropertySourcesPlaceholderConfigurerbean。从Spring 3.1之后，更推荐使用PropertySourcesPlaceholderConfigurer，因为这个bean和Spring 的Environment的来源一样，例子代码如下：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">PropertySourcesPlaceholderConfigurer <span class=\"title\">placeholderConfigurer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PropertySourcesPlaceholderConfigurer();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果使用XML配置文件，则通过<context:property-placeholder>元素可以获得PropertySourcesPlaceholderConfigurerbean：</context:property-placeholder></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">      <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:/app.properties\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p></p><h3>使用SpEL装配</h3><br>Spring 3引入了Spring Expression Language（SpEL），这是一种在运行时给bean的属性或者构造函数参数注入值的方法。<p></p>\n<p>SpEL有很多优点，简单列举如下：</p>\n<p><li>可以通过bean的ID引用bean；</li></p>\n<p><li>可以调用某个对象的方法或者访问它的属性；</li></p>\n<p><li>支持数学、关系和逻辑操作；</li></p>\n<p><li>正则表达式匹配；</li></p>\n<p><li>支持集合操作<br>在后续的文章中，可以看到SpEL被用到依赖注入的其他方面，例如在Spring Security中，可以使用SpEL表达式定义安全限制；如果在Spring MVC中使用Thymeleaf模板，在模板中可以使用SpEL表达式获取模型数据。<br>SpEL是一门非常灵活的表达式语言，在这里不准备花大量篇幅来涵盖它的所有方面，可以通过一些例子来感受一下它的强大能力。</li></p>\n<p>首先，SpEL表达式被#{ … }包围，跟placeholders中的${ … }非常像，最简单的SpEL表达式可以写作<code>#{1}</code>。在应用中，你可能回使用更加有实际含义的SpEL表达式，例如<code>#{T(System).currentTimeMillis()}</code>——这个表达式负责获得当前的系统时间，而T()操作符负责将java.lang.System解析成类，以便可以调用currentTimeMillis()方法。</p>\n<p>SpEL表达式可以引用指定ID的bean或者某个bean的属性，例如下面这个例子可以获得ID为sgtPeppers的bean的artist属性的值：<code>#{sgtPeppers.artist}</code>；也可以通过<code>#{systemProperties[‘disc.title’]}</code>引用系统属性。</p>\n<p>上述这些例子都非常简单，我们接下来看下如何在bean装配中使用SpEL表达式，之前提到过，如果你使用component-scanning和自动装配创建应用组件，则可以使用@Value注解获得配置文件中配置项的值；除了使用placeholder表达式，还可以使用SpEL表达式，例如BlankDisc的构造函数可以按照下面这种方式来写：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> BlankDisc(</div><div class=\"line\">            <span class=\"meta\">@Value(<span class=\"meta-string\">\"#&#123;systemProperties['disc.title']&#125;\"</span>)</span> String title,</div><div class=\"line\">            <span class=\"meta\">@Value(<span class=\"meta-string\">\"#&#123;systemProperties['disc.artist']&#125;\"</span>)</span> String artist) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.title = title;</div><div class=\"line\">      <span class=\"keyword\">this</span>.artist = artist;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SpEL表达式可以表示整数值，也可以表示浮点数、String值和Boolean值。例如可以使用#{3.14159}表式浮点数3.14159，并且还支持科学计数法——<code>#{9.87E4}</code>表示98700；<code>#{‘Hello’}</code>可以表示字符串值、<code>#{false}</code>可以表示Boolean值。</p>\n<p>单独使用字面值是乏味的，一般不会使用到只包含有字面值的SpEL表达式，不过在构造更有趣、更复杂的表达式时支持字面值这个特性非常有用。</p>\n<p>SpEL表达式可以通过bean的ID引用bean，例如<code>#{sgtPeppers}</code>；也可以引用指定bean的属性，例如<code>#{sgtPeppers.artist}</code>；还可以调用某个bean的方法，例如#<code>{artistSelector.selectArtist()}</code>表达式可以调用artistSelector这个bean的selectArtist()方法。</p>\n<p>SpEL表达式也支持方法的连续调用，例如#<code>{artistSelector.selectArtist().toUpperCase()}</code>,为了防止出现NullPointerException异常，最好使用类型安全的操作符，例如#<code>{artistSelector.selectArtist()?.toUpperCase()}</code>。?.操作符在调用右边的函数之前，会确保左边的函数返回的值不为null。</p>\n<p>在SpEL中能够调用类的方法或者常量的关键是T()操作符，例如通过<code>T(java.lang.Math)</code>可以访问Math类中的方法和属性——<code>#{(java.lang.Math).random()}</code>和<code>#{T(java.lang.Math).PI}</code>。</p>\n<p>在操作文本字符串时，最常用的是检查某个文本是否符合某种格式。SpEL通过matches操作符支持正则表达式匹配。例如：<code>#{admin.email matches ‘[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.com’}</code>可以检查admin.email表示的邮件地址是否正确。</p>\n<p>通过SpEL表达式还可以操作集合和数组，例如<code>#{jukebox.songs[4].title}</code>这个表达式可以访问jukebox的songs数组的第5个元素。</p>\n<p>也可以实现更复杂的功能：随机选择一首歌——<code>#{jukebox.songs[T(java.lang.Math).random() * jukebox.songs.size()].title}</code>。</p>\n<p>SpEL提供了一个选择操作符——<code>.?[]</code>，可以获得某个集合的子集，举个例子，假设你获得jukebox中所有artist为Aerosmith的歌，则可以使用这个表达式：<code>#{jukebox.songs.?[artist eq ‘Aerosmith’]}</code>。可以看出，<code>.?[]</code>操作符支持在[]中嵌套另一个SpEL表达式。</p>\n<p>SpEL还提供了其他两个选择操作符：<code>.^[]</code>用于选择第一个匹配的元素；<code>.$[]</code>用于选择最后一个匹配的元素。</p>\n<p>最后，SpEL还提供了一个提取操作符：<code>.![]</code>，可以根据指定的集合新建一个符合某个条件的新集合，例如<code>#{jukebox.songs.![title]}</code>可以将songs的title都提取出来构成一个新的字符串集合。</p>\n<p>OK，SpEL的功能非常强大，但是这里需要给开发人员提个醒：别让你的SpEL表达式过于智能。你的表达式越智能，就越难对它们进行单元测试，因此，尽量保证你的SpEL表达式简单易理解。</p>\n<p></p><h2>总结</h2><br>首先我们介绍了通过Spring的profiles解决多环境部署的问题，通过在运行时根据代表指定环境的profile选择性创建某个bean，Spring可以实现无需重新构建就可以在多个环境下部署同一个应用。<p></p>\n<p>Profiles bean是运行时创建bean的一种解决方案，不过Spring 4提供了一个更普遍的解决方案：利用@Conditional注解和Condition接口实现条件性创建bean。</p>\n<p>我们还介绍了两种机制来解决自动装配时可能遇到的歧义性问题：primary beans和qualifiers。尽管定义一个primary bean非常简单，但它仍然有局限，因此我们需要利用qualifier缩小自动装配的bean的范围，而且，我们也演示了如何创建自己的qualifiers。</p>\n<p>尽管大多数Spring bean是单例对象，但是在某些情况下具备其他作用域的对象更加合适。Spring 应用中可以创建singletons、prototypes、request-scoped或session-scoped。在使用request-scoped或者session-scoped类型的bean时，还需要解决将非单例对象注入到单例对象时遇到的问题——利用代理接口或代理类。</p>\n<p>最后，我们也介绍了Spring表达式语言（SpEL），利用SpEL可以实现在运行时给bean注入值。</p>\n</bean>","excerpt":"<p>在软件开发中，常常设置不同的运行环境：开发环境、预发环境、性能测试环境和生产环境等等。</p>\n<p>不同的环境下，应用程序的配置项也不同，例如数据库配置、远程服务地址等。</p>","more":"以数据库配置为例子，在开发环境中你可能使用一个嵌入式的内存数据库，并将测试数据放在一个脚本文件中。例如，在一个Spring的配置类中，可能需要定义如下的bean：<p></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">Bean</span>(<span class=\"keyword\">destroyMethod</span> = <span class=\"string\">\"shutdown\"</span>)</div><div class=\"line\">public DataSource dataSource() &#123;</div><div class=\"line\">    <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">EmbeddedDatabaseBuilder</span>()</div><div class=\"line\">            <span class=\"selector-class\">.addScript</span>(\"<span class=\"selector-tag\">classpath</span><span class=\"selector-pseudo\">:schema.sql\")</span></div><div class=\"line\">            <span class=\"selector-class\">.addScript</span>(\"<span class=\"selector-tag\">classpath</span><span class=\"selector-pseudo\">:test-data.sql\")</span></div><div class=\"line\">            <span class=\"selector-class\">.build</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用EmbeddedDatabaseBuilder这个构建器可以建立一个内存数据库，通过指定路径下的schema.sql文件中的内容可以建立数据库的表定义，通过test-data.sql可以准备好测试数据。</p>\n<p>开发环境下可以这么用，但是在生产环境下不可以。在生产环境下，你可能需要从容器中使用JNDI获取DataSource对象，这中情况下，对应的创建代码是：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">Bean</span></div><div class=\"line\">public DataSource dataSource() &#123;</div><div class=\"line\">    <span class=\"keyword\">JndiObjectFactoryBean </span><span class=\"keyword\">jndiObjectFactoryBean </span>=</div><div class=\"line\">             new <span class=\"keyword\">JndiObjectFactoryBean();</span></div><div class=\"line\">    <span class=\"keyword\">jndiObjectFactoryBean.setJndiName(\"jdbc/myDS\");</span></div><div class=\"line\">    <span class=\"keyword\">jndiObjectFactoryBean.setResourceRef(true);</span></div><div class=\"line\">    <span class=\"keyword\">jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class);</span></div><div class=\"line\">    return (DataSource) <span class=\"keyword\">jndiObjectFactoryBean.getObject();</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用JNDI管理DataSource对象，很适合生产环境，但是对于日常开发环境来说太复杂了。</p>\n<p>另外，在QA环境下你也可以选择另外一种DataSource配置，可以选择使用普通的DBCP连接池，例如：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">Bean(destroyMethod </span>= <span class=\"string\">\"close\"</span>)</div><div class=\"line\">public DataSource dataSource() &#123;</div><div class=\"line\">    <span class=\"keyword\">BasicDataSource </span>dataSource = new <span class=\"keyword\">BasicDataSource();</span></div><div class=\"line\">    dataSource.setUrl(<span class=\"string\">\"jdbc:h2:tcp://dbserver/~/test\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dataSource.setDriverClassName(<span class=\"string\">\"org.h2.Driver\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dataSource.setUsername(<span class=\"string\">\"sa\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dataSource.setPassword(<span class=\"string\">\"password\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dataSource.setInitialSize(<span class=\"number\">20</span>)<span class=\"comment\">;</span></div><div class=\"line\">    dataSource.setMaxActive(<span class=\"number\">30</span>)<span class=\"comment\">;</span></div><div class=\"line\">    return dataSource<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述三种办法可以为不同环境创建各自需要的javax.sql.DataSource实例，这个例子很适合介绍不同环境下创建bean，那么有没有一种办法：只需要打包应用一次，然后部署到不同的开发环境下就会自动选择不同的bean创建策略。一种方法是创建三个独立的配置文件，然后利用Maven profiles的预编译命令处理在特定的环境下打包哪个配置文件到最终的应用中。这种解决方法有一个问题，即在切换到不同环境时，需要重新构建应用——从开发环境到测试环境没有问题，但是从测试环境到生产环境也需要重新构建则可能引入一定风险。</p>\n<p>Spring提供了对应的方法，使得在环境切换时不需要重新构建整个应用。</p>\n<p></p><h2>配置profile beans</h2><br>Spring提供的方法不是在构件时针对不同的环境决策，而是在运行时，这样，一个应用只需要构建一次，就可以在开发、QA和生产环境运行。<p></p>\n<p>在Spring 3.1之中，可以使用@Profile注解来修饰JavaConfig类，当某个环境对应的profile被激活时，就使用对应环境下的配置类。</p>\n<p>在Spring3.2之后，则可以在函数级别使用@Profile注解（是的，跟@Bean注解同时作用在函数上），这样就可以将各个环境的下的bean定义都放在同一个配置类中，还是以之前的例子：</p>\n<p>利用注解配置</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.sample.config;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Bean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Profile;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.jndi.JndiObjectFactoryBean;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceConfig</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Bean(destroyMethod = <span class=\"meta-string\">\"shutdown\"</span>)</span></div><div class=\"line\">    <span class=\"meta\">@Profile(<span class=\"meta-string\">\"dev\"</span>)</span></div><div class=\"line\">    <span class=\"keyword\">public</span> DataSource embeddedDataSource() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> new EmbeddedDatabaseBuilder()</div><div class=\"line\">                .setType(EmbeddedDatabaseType.H2)</div><div class=\"line\">                .addScript(<span class=\"string\">\"classpath:schema.sql\"</span>)</div><div class=\"line\">                .addScript(<span class=\"string\">\"classpath:test-data.sql\"</span>)</div><div class=\"line\">                .build();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"meta\">@Profile(<span class=\"meta-string\">\"prod\"</span>)</span></div><div class=\"line\">    <span class=\"keyword\">public</span> DataSource dataSource() &#123;</div><div class=\"line\">        JndiObjectFactoryBean jndiObjectFactoryBean =</div><div class=\"line\">                new JndiObjectFactoryBean();</div><div class=\"line\">        jndiObjectFactoryBean.setJndiName(<span class=\"string\">\"jdbc/myDS\"</span>);</div><div class=\"line\">        jndiObjectFactoryBean.setResourceRef(<span class=\"literal\">true</span>); </div><div class=\"line\">        jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.<span class=\"keyword\">class</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> (DataSource) jndiObjectFactoryBean.getObject();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>除了被@Profile修饰的其他bean，无论在什么开发环境下都会被创建。</p>\n<p>利用XML文件配置</p>\n<p>和在JavaConfig的用法一样，可以从文件级别定义环境信息，也可以将各个环境的bean放在一个XML配置文件中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:jdbc</span>=<span class=\"string\">\"http://www.springframework.org/schema/jdbc\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:jee</span>=<span class=\"string\">\"http://www.springframework.org/schema/jee\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans </span></div><div class=\"line\">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">profile</span>=<span class=\"string\">\"dev\"</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">jdbc:embedded-database</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span>&gt;</span></div><div class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">jdbc:script</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:schema.sql\"</span>/&gt;</span></div><div class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">jdbc:script</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:test-data.sql\"</span>/&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">jdbc:embedded-database</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">profile</span>=<span class=\"string\">\"qa\"</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span></span></div><div class=\"line\">                    <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span></div><div class=\"line\">                    <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span></div><div class=\"line\">                    <span class=\"attr\">p:url</span>=<span class=\"string\">\"jdbc:h2:tcp://dbserver/~/test\"</span></div><div class=\"line\">                    <span class=\"attr\">p:driverClassName</span>=<span class=\"string\">\"org.h2.Driver\"</span></div><div class=\"line\">                    <span class=\"attr\">p:username</span>=<span class=\"string\">\"sa\"</span></div><div class=\"line\">                    <span class=\"attr\">p:password</span>=<span class=\"string\">\"password\"</span></div><div class=\"line\">                    <span class=\"attr\">p:initialSize</span>=<span class=\"string\">\"20\"</span></div><div class=\"line\">                    <span class=\"attr\">p:maxActive</span>=<span class=\"string\">\"30\"</span> /&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">profile</span>=<span class=\"string\">\"prod\"</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">jee:jndi-lookup</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span></span></div><div class=\"line\">                               <span class=\"attr\">jndi-name</span>=<span class=\"string\">\"jdbc/MyDatabase\"</span></div><div class=\"line\">                               <span class=\"attr\">resource-ref</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">                               <span class=\"attr\">proxy-interface</span>=<span class=\"string\">\"javax.sql.DataSource\"</span>/&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上述三个javax.sql.DataSource的bean，ID都是dataSource，但是在运行的时候只会创建一个bean。</p>\n<p></p><h2>激活profiles</h2><br>Spring提供了spring.profiles.active和spring.profiles.default这两个配置项定义激活哪个profile。如果应用中设置了spring.profiles.active选项，则Spring根据该配置项的值激活对应的profile，如果没有设置spring.profiles.active，则Spring会再查看spring.profiles.default这个配置项的值，如果这两个变量都没有设置，则Spring只会创建没有被profile修饰的bean。<p></p>\n<p>有下列几种方法设置上述两个变量的值：</p>\n<p><li>DispatcherServlet的初始化参数</li></p>\n<p><li>web应用的上下文参数(context parameters)</li></p>\n<p><li>JNDI项</li></p>\n<p><li>环境变量</li></p>\n<p><li>JVM系统属性<br></li><li>在集成测试类上使用@ActiveProfiles注解</li></p>\n<p>开发人员可以按自己的需求设置spring.profiles.active和spring.profiles.default这两个属性的组合。</p>\n<p>我推荐在web应用的web.xml文件中设置spring.profiles.default属性——通过设置DispatcherServlet的初始参数和<context-param>标签。</context-param></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"</span></div><div class=\"line\">         <span class=\"attr\">version</span>=<span class=\"string\">\"3.1\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath*:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>spring.profiles.default<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>appServletName<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span>        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>spring.profiles.default<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>appServletName<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>按照上述方法设置spring.profiles.default属性，任何开发人员只需要下载源码就可以在开发环境中运行程序以及测试。</p>\n<p>然后，当应用需要进入QA、生产环境时，负责部署的开发者只需要通过系统属性、环境变量或者JNDI等方法设置spring.profiles.active属性即可，因为spring.profiles.active优先级更高。</p>\n<p>另外，在运行集成测试时，可能希望运行跟生产环境下相同的配置；但是，如果配置重需要的beans被profiles修饰的，则需要在跑单元测试之前激活对应的profiles。</p>\n<p>Spring提供了@ActiveProfiles注解来激活指定的profiles，用法如下：</p>\n<p></p><h2>Conditional beans</h2><br>假设你希望只有在项目中引入特定的依赖库时、或者只有当特定的bean已经被创建时、或者是设置了某个环境变量时，某个bean才被创建。<p></p>\n<p>Spring 4之前很难实现这种需求，不过在Spring 4中提出了一个新的注解——@Conditional，该注解作用于@Bean注解修饰的方法上，通过判断指定的条件是否满足来决定是否创建该bean。</p>\n<p>举个例子，工程中有一个MagicBean，你希望只有当magic环境变量被赋值时才创建MagicBean，否则该Bean的创建函数被忽略。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Bean</span></div><div class=\"line\"><span class=\"variable\">@Conditional</span>(MagicExistsCondition.class)</div><div class=\"line\">public MagicBean magicBean() &#123;</div><div class=\"line\">    <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">MagicBean</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子表示：只有当MagicExistsCondition类已经存在时，才会创建MagicBean。</p>\n<p>@Conditional注解的源码列举如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">package</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.annotation</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">java</span><span class=\"selector-class\">.lang</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.ElementType</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">java</span><span class=\"selector-class\">.lang</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Retention</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">java</span><span class=\"selector-class\">.lang</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.RetentionPolicy</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">java</span><span class=\"selector-class\">.lang</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Target</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Condition</span>;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">Retention</span>(<span class=\"keyword\">RetentionPolicy</span>.<span class=\"keyword\">RUNTIME</span>)</div><div class=\"line\">@Target(&#123;<span class=\"selector-tag\">ElementType</span><span class=\"selector-class\">.TYPE</span>, <span class=\"selector-tag\">ElementType</span><span class=\"selector-class\">.METHOD</span>&#125;)</div><div class=\"line\"><span class=\"selector-tag\">public</span> @<span class=\"keyword\">interface</span> Conditional &#123;</div><div class=\"line\">    <span class=\"selector-tag\">Class</span>&lt;? <span class=\"selector-tag\">extends</span> <span class=\"selector-tag\">Condition</span>&gt;<span class=\"selector-attr\">[]</span> <span class=\"selector-tag\">value</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，传入@Conditional注解的类一定要实现Condition接口，该接口提供matchs()方法——如果matches()方法返回true，则被@Conditional注解修饰的bean就会创建，否则对应的bean不会创建。</p>\n<p>在这个例子中，MagicExistsCondition类应该实现Condition接口，并在matches()方法中实现具体的判断条件，代码如下所示：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.sample.config;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Condition;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ConditionContext;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.env.Environment;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MagicExistsCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</div><div class=\"line\">        Environment env = conditionContext.getEnvironment();</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">return</span> env.<span class=\"title\">containsProperty</span><span class=\"params\">(<span class=\"string\">\"magic\"</span>)</span></span>; <span class=\"comment\">//检查magic环境变量是否被设置</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码中的matchs()方法简单且有效：它首先获取环境变量，然后再判断环境变量中是否存在magic属性。在这个例子中，magic的值是多少并不重要，它只要存在就好。</p>\n<p>MagicExistsCondition的matchs()方法是通过ConditionContext获取了环境实例。matchs()方法的参数有两个：ConditionContext和AnnotatedTypeMetadata，分别看下这两个接口的源码：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ConditionContext</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ConditionContext</span> &#123;</div><div class=\"line\">    <span class=\"function\">BeanDefinitionRegistry <span class=\"title\">getRegistry</span>(<span class=\"params\"></span>)</span>;</div><div class=\"line\">    <span class=\"function\">ConfigurableListableBeanFactory <span class=\"title\">getBeanFactory</span>(<span class=\"params\"></span>)</span>;</div><div class=\"line\">    <span class=\"function\">Environment <span class=\"title\">getEnvironment</span>(<span class=\"params\"></span>)</span>;</div><div class=\"line\">    <span class=\"function\">ResourceLoader <span class=\"title\">getResourceLoader</span>(<span class=\"params\"></span>)</span>;</div><div class=\"line\">    <span class=\"function\">ClassLoader <span class=\"title\">getClassLoader</span>(<span class=\"params\"></span>)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>利用ConditionContext接口可做的事情很多，列举如下：</p>\n<p><li>通过getRegistry()方法返回的BeanDefinitionRegistry实例，可以检查bean的定义；</li></p>\n<p><li>通过getBeanFactory()方法返回的ConfigurableListableBeanFactory实例，可以检查某个bean是否存在于应用上下文中，还可以获得该bean的属性；</li></p>\n<p><li>通过getEnvironment()方法返回的Environment实例，可以检查指定环境变量是否被设置，还可以获得该环境变量的值；</li></p>\n<p><li>通过getResourceLoader()方法返回的ResourceLoader实例，可以得到应用加载的资源包含的内容；</li></p>\n<p><li>通过getClassLoader()方法返回的ClassLoader实例，可以检查某个类是否存在。</li></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//AnnotatedTypeMetadata</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> AnnotatedTypeMetadata &#123;</div><div class=\"line\">    <span class=\"built_in\">boolean</span> isAnnotated(<span class=\"built_in\">String</span> var1);</div><div class=\"line\">    Map&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; getAnnotationAttributes(<span class=\"built_in\">String</span> var1);</div><div class=\"line\">    Map&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; getAnnotationAttributes(<span class=\"built_in\">String</span> var1, <span class=\"built_in\">boolean</span> var2);</div><div class=\"line\">    MultiValueMap&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; getAllAnnotationAttributes(<span class=\"built_in\">String</span> var1);</div><div class=\"line\">    MultiValueMap&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; getAllAnnotationAttributes(<span class=\"built_in\">String</span> var1, <span class=\"built_in\">boolean</span> var2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过isAnnotated()方法可以检查@Bean方法是否被指定的注解类型修饰；通过其他方法可以获得修饰@Bean方法的注解的属性。</p>\n<p>从Spring 4开始，@Profile注解也利用@Conditional注解和Condition接口进行了重构。作为分析@Conditional注解和Condition接口的另一个例子，我们可以看下在Spring 4中@Profile注解的实现。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"variable\">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</div><div class=\"line\"><span class=\"variable\">@Documented</span></div><div class=\"line\"><span class=\"variable\">@Conditional</span>(&#123;ProfileCondition.class&#125;)</div><div class=\"line\">public <span class=\"variable\">@interface</span> Profile &#123;</div><div class=\"line\">    <span class=\"selector-tag\">String</span><span class=\"selector-attr\">[]</span> <span class=\"selector-tag\">value</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，@Profile注解的实现被@Conditional注解修饰，并且依赖于ProfileCondition类——该类是Condition接口的实现。如下列代码所示，ProfileCondition利用ConditionContext和AnnotatedTypeMetadata两个接口提供的方法进行决策。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProfileCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span> </span>&#123;</div><div class=\"line\">    ProfileCondition() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(context.getEnvironment() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            MultiValueMap attrs = metadata.getAllAnnotationAttributes(Profile.<span class=\"keyword\">class</span>.getName());</div><div class=\"line\">            <span class=\"keyword\">if</span>(attrs != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">Iterator</span> var4 = ((<span class=\"built_in\">List</span>)attrs.<span class=\"keyword\">get</span>(<span class=\"string\">\"value\"</span>)).iterator();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"built_in\">Object</span> value;</div><div class=\"line\">                <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(!var4.hasNext()) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    value = var4.next();</div><div class=\"line\">                &#125; <span class=\"keyword\">while</span>(!context.getEnvironment().acceptsProfiles((<span class=\"built_in\">String</span>[])((<span class=\"built_in\">String</span>[])value)));</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;<span class=\"comment\">//传给@Profile注解的参数对应的环境profiles已激活</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; <span class=\"comment\">//默认为true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，这代码写得不太好理解:ProfileCondition通过AnnotatedTypeMetadata实例获取与@Profile注解相关的所有注解属性；然后检查每个属性的值（存放在value实例中），对应的profiles别激活——即context.getEnvironment().acceptsProfiles(((String[]) value))的返回值是true，则matchs()方法返回true。</p>\n<p>Environment类提供了可以检查profiles的相关方法，用于检查哪个profile被激活：</p>\n<p><li>String[] getActiveProfiles()——返回被激活的profiles数组；</li></p>\n<p><li>String[] getDefaultProfiles()——返回默认的profiles数组；</li></p>\n<p><li>boolean acceptsProfiles(String… profiles)——如果某个profiles被激活，则返回true。</li></p>\n<p></p><h2>处理自动装配的歧义</h2><br>在一文中介绍了如何通过自动装配让Spring自动简历bean之间的依赖关系——自动装配非常有用，通过自动装配可以减少大量显式配置代码。不过，自动装配（autowiring）要求bean的匹配具备唯一性，否则就会产生歧义，从而抛出异常。<p></p>\n<p>举个例子说明自动装配的歧义性，假设你有如下自动装配的代码：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDessert</span><span class=\"params\">(Dessert dessert)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dessert = dessert;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Dessert是一个接口，有三个对应的实现：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\">public class Cake implements Dessert &#123; ... &#125;</div><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\">public class Cookies implements Dessert &#123; ... &#125;</div><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\">public class IceCream implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>因为上述三个类都被@Component注解修饰，因此都会被component-scanning发现并在应用上下文中创建类型为Dessert的bean；然后，当Spring试图为setDessert()方法装配对应的Dessert参数时，就会面临多个选择；然后Spring就会抛出异常——NoUniqueBeanDefinitionException。</p>\n<p>虽然在实际开发中并不会经常遇到这种歧义性，但是它确实是个问题，幸运的是Spring也提供了对应的解决办法。</p>\n<p></p><h3> @Primary指定优先bean</h3><br>在定义bean时，可以通过指定一个优先级高的bean来消除自动装配过程中遇到的歧义问题。<p></p>\n<p>在上述例子中，可以选择一个最重要的Bean，用@Primary注解修饰：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Primary</span></div><div class=\"line\">public class IceCream implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>如果你没有使用自动扫描，而是使用基于Java的显式配置文件，则如下定义@Bean方法：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Bean</span></div><div class=\"line\"><span class=\"variable\">@Primary</span></div><div class=\"line\">public Dessert iceCream() &#123;</div><div class=\"line\">  <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">IceCream</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果使用基于XML文件的显式配置，则如下定义：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean <span class=\"built_in\">id</span>=<span class=\"string\">\"iceCream\"</span></div><div class=\"line\">             <span class=\"built_in\">class</span>=<span class=\"string\">\"com.dasserteater.IceCream\"</span></div><div class=\"line\">             primary=<span class=\"string\">\"true\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>不论哪种形式，效果都一样：告诉Spring选择primary bean来消除歧义。不过，当应用中指定多个Primary bean时，Spring又不会选择了，再次遇到歧义。Spring还提供了功能更强大的歧义消除机制——@Qualifiers注解。</p>\n<p></p><h3>@Qualifier指定bean的ID</h3><br>@Qualifier注解可以跟@Autowired或@Inject一起使用，指定需要导入的bean的ID，例如，上面例子中的setDessert()方法可以这么写：<p></p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"iceCream\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDessert</span><span class=\"params\">(Dessert dessert)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dessert = dessert;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>每个bean都具备唯一的ID，因此此处彻底消除了歧义。</p>\n<p>如果进一步深究，@Qualifier(“iceCream”)表示以”iceCream”字符串作为qualifier的bean。每个bean都有一个qualifier，内容与该bean的ID相同。因此，上述装配的实际含义是：setDessert()方法会装配一个以”iceCream”为qualifier的bean，只不过碰巧是该bean的ID也是iceCream。</p>\n<p>以默认的bean的ID作为qualifier非常简单，但是也会引发新的问题：如果将来对IceCream类进行重构，它的类名发生改变（例如Gelato）怎么办？在这种情况下，该bean对应的ID和默认的qualifier将变为”gelato”，然后自动装配就会失败。</p>\n<p>问题的关键在于：你需要指定一个qualifier，该内容不会受目标类的类名的限制和影响。</p>\n<p><strong>开发者可以给某个bean设定自定义的qualifier</strong>，形式如下：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\">public class IceCream implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>然后，在要注入的地方也使用”cold”作为qualifier来获得该bean：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"meta\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDessert</span><span class=\"params\">(Dessert dessert)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dessert = dessert;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>即使在JavaConfig中，也可以使用@Qualifier指定某个bean的qualifier，例如：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Bean</span></div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\">public Dessert iceCream() &#123;</div><div class=\"line\">  <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">IceCream</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在使用自定义的@Qualifier值时，最好选择一个含义准确的名词，不要随意使用名词。在这个例子中，我们描述IceCream为”cold”bean，在装配时，可以读作：给我来一份cold dessert，恰好指定为IceCream。类似的，我们把Cake叫作”soft”，把Cookies*叫作”crispy”。</p>\n<p><strong>使用自定义的qualifiers优于使用基于bean的ID的默认qualifier</strong>，但是当你有多个bean共享同一个qualifier时，还是会有歧义。例如，假设你定义一个新的Dessertbean：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\">public class Popsicle implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>现在你又有两个”cold”为qualifier的bean了，再次遇到歧义：最直白的想法是多增加一个限制条件，例如IceCream会成为下面的定义：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"creamy\"</span>)</div><div class=\"line\">public class IceCream implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>而Posicle类则如下定义：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"fruity\"</span>)</div><div class=\"line\">public class Popsicle implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>在装配bean的时候，则需要使用两个限制条件，如下：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Bean</span></div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"cold\"</span>)</div><div class=\"line\"><span class=\"variable\">@Qualifier</span>(<span class=\"string\">\"creamy\"</span>)</div><div class=\"line\">public Dessert iceCream() &#123;</div><div class=\"line\">  <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">IceCream</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里有个小问题：Java 不允许在同一个item上加多个相同类型的注解（Java 8已经支持），但是这种写法显然很啰嗦。</p>\n<p>解决办法是：通过定义自己的qualifier注解，例如，可以创建一个@Cold注解来代替@Qualifier(“cold”)：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD,</div><div class=\"line\">                  ElementType.METHOD, ElementType.TYPE&#125;)</div><div class=\"line\"><span class=\"variable\">@Rentention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"variable\">@Qualifier</span></div><div class=\"line\">public <span class=\"variable\">@interface</span> Cold &#123; &#125;</div></pre></td></tr></table></figure>\n<p>可以创建一个@Creamy注解来代替@Qualifier(“creamy”)：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD,</div><div class=\"line\">                  ElementType.METHOD, ElementType.TYPE&#125;)</div><div class=\"line\"><span class=\"variable\">@Rentention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"variable\">@Qualifier</span></div><div class=\"line\">public <span class=\"variable\">@interface</span> Creamy &#123; &#125;</div></pre></td></tr></table></figure>\n<p>这样，就可以使用@Cold和@Creamy修饰IceCream类，例如：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Cold</span></div><div class=\"line\"><span class=\"variable\">@Creamy</span></div><div class=\"line\">public class IceCream implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>类似的，可以使用@Cold和@Fruity修饰Popsicle类，例如：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Cold</span></div><div class=\"line\"><span class=\"variable\">@Fruity</span></div><div class=\"line\">public class Popsicle implements Dessert &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>最后，在装配的时候，可以使用@Cold和@Creamy限定IceCream类对应的bean：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"meta\">@Cold</span></div><div class=\"line\"><span class=\"meta\">@Creamy</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDessert</span><span class=\"params\">(Dessert dessert)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dessert = dessert;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p></p><h2>bean的作用域</h2><br>默认情况下，Spring应用上下文中的bean都是单例对象，也就是说，无论给某个bean被多少次装配给其他bean，都是指同一个实例。<p></p>\n<p>大部分情况下，单例bean很好用：如果一个对象没有状态并且可以在应用中重复使用，那么针对该对象的初始化和内存管理开销非常小。</p>\n<p>但是，有些情况下你必须使用某中可变对象来维护几种不同的状态，因此形成非线程安全。在这种情况下，把类定义为单例并不是一个好主意——该对象在重入使用的时候可能遇到线程安全问题。</p>\n<p>Spring定义了几种bean的作用域，列举如下：</p>\n<p><li>Singleton——在整个应用中只有一个bean的实例；</li></p>\n<p><li>Prototype——每次某个bean被装配给其他bean时，都会创建一个新的实例；</li></p>\n<p><li>Session——在web应用中，在每次会话过程中只创建一个bean的实</li><li>例；<br>Request——在web应用中，在每次http请求中创建一个bean的实例。<br>Singleton域是默认的作用域，如前所述，对于可变类型来说并不理想。我们可以使用@Scope注解——和@Component或@Bean注解都可以使用。</li></p>\n<p>例如，如果你依赖component-scanning发现和定义bean，则可以用如下代码定义prototype bean：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Component</span></div><div class=\"line\"><span class=\"variable\">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</div><div class=\"line\">public class Notepad&#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>除了使用SCOPE_PROTOTYPE字符串指定bean的作用域，还可以使用@Scope(“prototype”)，但使用ConfigurableBeanFactory.SCOPE_PROTOTYPE更安全，不容易遇到拼写错误。</p>\n<p>另外，如果你使用JavaConfig定义Notepad的bean，也可以给出下列定义：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Bean</span></div><div class=\"line\"><span class=\"variable\">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</div><div class=\"line\">public Notepad notepad() &#123;</div><div class=\"line\">    <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">Notepad</span>();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你使用xml文件定义Notepad的bean，则有如下定义：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean <span class=\"built_in\">id</span>=<span class=\"string\">\"notepad\"</span></div><div class=\"line\">            <span class=\"built_in\">class</span>=<span class=\"string\">\"com.myapp.Notepad\"</span></div><div class=\"line\">            scope=<span class=\"string\">\"prototype\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>无论你最后采取上述三种定义方式的哪一种定义prototype类型的bean，每次Notepad被装配到其他bean时，都会重新创建一个新的实例。</p>\n<p></p><h3>request和session作用域</h3><br>在Web应用中，有时需要在某个request或者session的作用域范围内共享同一个bean的实例。举个例子，在一个典型的电子商务应用中，可能会有一个bean代表用户的购物车，如果购物车是单例对象，则所有的用户会把自己要买的商品添加到同一个购物车中；另外，如果购物车bean设置为prototype，则在应用中某个模块中添加的商品在另一个模块中将不能使用。<p></p>\n<p>对于这个例子，使用session scope更合适，因为一个会话（session）唯一对应一个用户，可以通过下列代码使用session scope:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Bean</span></div><div class=\"line\"><span class=\"variable\">@Scope</span>(value=WebApplicationContext.SCOPE_SESSION,</div><div class=\"line\">                proxyMode=ScopedProxyMode.INTERFACES)</div><div class=\"line\">public ShoppingCart cart() &#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>在这里你通过value属性设置了WebApplicationContext.SCOPE_SESSION，这告诉Spring为web应用中的每个session创建一个ShoppingCartbean的实例。在整个应用中会有多个ShoppingCart实例，但是在某个会话的作用域中ShoppingCart是单例的。</p>\n<p>这里还用proxyMode属性设置了ScopedProxyMode.INTERFACES值，这涉及到另一个问题：把request/session scope的bean装配到singleton scope的bean时会遇到。首先看下这个问题的表现。</p>\n<p>假设在应用中需要将ShoppingCartbean装配给单例StoreServicebean的setter方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StoreService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setShoppingCart</span><span class=\"params\">(ShoppingCart shoppingCart)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.shoppingCart = shoppingCart;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为StoreService是单例bean，因此在Spring应用上下文加载时该bean就会被创建。在创建这个bean时 ，Spring会试图装配对应的ShoppingCartbean，但是这个bean是session scope的，目前还没有创建——只有在用户访问时并创建session时，才会创建ShoppingCartbean。</p>\n<p>而且，之后肯定会有多个ShoppingCartbean：每个用户一个。理想的情景是：在需要StoreService操作购物车时，StoreService能够和ShoppingCartbean正常工作。</p>\n<p>针对这种需求，Spring应该给StoreServicebean装配一个ShoppingCartbean的代理，如下图所示。代理类对外暴露的接口和ShoppingCart中的一样，用于告诉StoreService关于ShoppingCart的接口信息——当StoreService调用对应的接口时，代理采取延迟解析策略，并把调用委派给实际的session-scoped ShoppingCartbean。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/44770-c117d67ea67a9f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" height=\"300px\"></p>\n<p>Scoped proxies enable deferred injected of request- and session-coped beans<br>因为ShoppingCart是一个接口，因此这里工作正常，但是，如果ShoppingCart是具体的类，则Spring不能创建基于接口的代理。这里必须使用CGLib创建class-based的bean，即使用ScopedProxyMode.TARGET_CLASS指示代理类应该基础自目标类。</p>\n<p>这里使用session scope作为例子，在request scope中也有同样的问题，当然解决办法也相同。</p>\n<p></p><h3> 在XML文件中定义scoped代理</h3><br>如果你在xml配置文件中定义session-scoped或者request-scoped bean，则不能使用@Scope注解以及对应的proxyMode属性。<bean>元素的scope属性可以用来指定bean的scope，但是如何指定代理模式？<p></p>\n<p>可以使用Spring aop指定代理模式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=<span class=\"string\">\"cart\"</span></div><div class=\"line\">            <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.myapp.ShoppingCart\"</span></div><div class=\"line\">            scope=<span class=\"string\">\"session\"</span></div><div class=\"line\">      &lt;aop: scoped-proxy /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p><aop: scoped-proxy=\"\">在XML配置方式扮演的角色与proxyMode属性在注解配置方式中的相同，需要注意的是，这里默认使用CGLIB库创建代理，因此，如果需要创建接口代理，则需要设置proxy-target-class属性为false:</aop:></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=<span class=\"string\">\"cart\"</span></div><div class=\"line\">            <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.myapp.ShoppingCart\"</span></div><div class=\"line\">            scope=<span class=\"string\">\"session\"</span></div><div class=\"line\">      &lt;aop: scoped-proxy proxy-target-<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"false\"</span> /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>为了使用<aop: scoped-proxy=\"\">元素，需要在XML配置文件中定义Spring的aop名字空间：</aop:></p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</div><div class=\"line\">&lt;beans xmlns=<span class=\"string\">\"htttp://www.springframework.org/schema/beans\"</span></div><div class=\"line\">              xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">              xmlns:aop=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">              xsi:schemaLocations=<span class=\"string\">\"</span></div><div class=\"line\">                   http:<span class=\"comment\">//www.springframework.org/schema/aop</span></div><div class=\"line\">                   http:<span class=\"comment\">//www.springframework.org/schema/aop/spring-aop.xsd</span></div><div class=\"line\">                   http:<span class=\"comment\">//www.springframework.org/schema/beans</span></div><div class=\"line\">                   http:<span class=\"comment\">//www.springframework.org/schema/beans/spring-beans.xsd\"&gt;</span></div><div class=\"line\">    ........</div></pre></td></tr></table></figure>\n<p></p><h2>运行时值注入</h2><br>一般而言，讨论依赖注入和装配时，我们多关注的是如何（how）实现依赖注入（构造函数、setter方法），即如何建立对象之间的联系。<p></p>\n<p>依赖注入的另一个方面是何时（when）将值装配给bean的属性或者构造函数。在装配bean—依赖注入的本质一文中，我们执行了很多值装配的任务，例如有如下代码：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CompactDisc <span class=\"title\">sgtPeppers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BlankDisc(</div><div class=\"line\">             <span class=\"string\">\"Sgt. Pepper's Lonely Hearts Club Band\"</span>,</div><div class=\"line\">             <span class=\"string\">\"The Beatles\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种硬编码的方式有时可以，有时却需要避免硬编码——在运行时决定需要注入的值。Spring提供以下两种方式实现运行时注入：</p>\n<p><li>Property placeholders</li></p>\n<p><li>he Spring Expression Language(SpEL)</li></p>\n<p></p><h3>注入外部的值</h3><br>在Spring中解析外部值的最好方法是定义一个配置文件，然后通过Spring的环境实例获取配置文件中的配置项的值。例如，下列代码展示如何在Spring 配置文件中使用外部配置项的值。<p></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">package</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.spring</span><span class=\"selector-class\">.sample</span><span class=\"selector-class\">.config</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.spring</span><span class=\"selector-class\">.sample</span><span class=\"selector-class\">.soundsystem</span><span class=\"selector-class\">.CompactDisc</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.beans</span><span class=\"selector-class\">.factory</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Autowired</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Bean</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Configuration</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.PropertySource</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.core</span><span class=\"selector-class\">.env</span><span class=\"selector-class\">.Environment</span>;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">Configuration</span></div><div class=\"line\">@PropertySource(<span class=\"string\">\"classpath:/app.properties\"</span>)</div><div class=\"line\">public class ExpressiveConfig &#123;</div><div class=\"line\">        @<span class=\"keyword\">Autowired</span></div><div class=\"line\">        Environment env; </div><div class=\"line\"></div><div class=\"line\">       @<span class=\"keyword\">Bean</span></div><div class=\"line\">        public CompactDisc disc() &#123;</div><div class=\"line\">              <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">BlankDisc</span>(<span class=\"selector-tag\">env</span><span class=\"selector-class\">.getProperty</span>(\"<span class=\"selector-tag\">disc</span><span class=\"selector-class\">.title</span>\"),</div><div class=\"line\">                <span class=\"selector-tag\">env</span><span class=\"selector-class\">.getProperty</span>(\"<span class=\"selector-tag\">disc</span><span class=\"selector-class\">.artist</span>\"));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里，@PropertySource注解引用的配置文件内容如下：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">disc.<span class=\"built_in\">title</span>=Sgt. Pepper's Lonely Hearts Club <span class=\"built_in\">Band</span></div><div class=\"line\">disc.artist=The Beatles</div></pre></td></tr></table></figure>\n<p>属性文件被加载到Spring的Environment实例中，然后通过getProperty()方法解析对应配置项的值。</p>\n<p><strong>在Environment类中，getProperty()方法有如下几种重载形式</strong>：</p>\n<p><li>String getProperty(String var1);</li></p>\n<p><li>String getProperty(String var1, String var2);</li></p>\n<p><li><T> T getProperty(String var1, Class<T> var2);</T></T></li></p>\n<p><li><T> T getProperty(String var1, Class<T> var2, T var3);</T></T></li></p>\n<p>前两个方法都是返回String值，利用第二个参数，可以设置默认值；后两个方法可以指定返回值的类型，举个例子：假设你需要从连接池中获取连接个数，如果你使用前两个方法，则返回的值是String，你需要手动完成类型转换；但是使用后两个方法，可以由Spring自动完成这个转换：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> connection = env.getProperty(<span class=\"string\">\"db.connection.count\"</span>, Integer.<span class=\"keyword\">class</span>, <span class=\"number\">30</span>)</div></pre></td></tr></table></figure>\n<p>除了getProperty()方法，还有其他方法可以获得配置项的值，如果不设置默认值参数，则在对应的配置项不存在的情况下对应的属性会配置为null，如果你不希望这种情况发生——即要求每个配置项必须存在，则可以使用getRequiredProperty()方法：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CompactDisc <span class=\"title\">disc</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BlankDisc(</div><div class=\"line\">            env.getRequiredProperty(<span class=\"string\">\"disc.title\"</span>),</div><div class=\"line\">            env.getRequiredProperty(<span class=\"string\">\"disc.artist\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上述代码中，如果disc.title或者disc.artist配置项不存在，Spring都会抛出IllegalStateException异常。</p>\n<p>如果你希望检查某个配置项是否存在，则可以调用containsProperty()方法：<code>boolean titleExists = env.containsProperty(“disc.title”);</code>。如果你需要将一个属性解析成某个类，则可以使用getPropertyAsClass()方法：<code>Class<CompactDisc> cdClass = env.getPropertyAsClass(“disc.class”, CompactDisc.class);</CompactDisc></code></p>\n<p><strong>在Spring中，可以使用${ … }将占位符包裹起来</strong>，例如，在XML文件中可以定义如下代码从配置文件中解析对应配置项的值：</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sgtPeppers\"</span></span></span></div><div class=\"line\">             <span class=\"attr\">class</span>=<span class=\"string\">\"soundsystem.BlankDisc\"</span></div><div class=\"line\">             <span class=\"attr\">c:_title</span>=<span class=\"string\">\"$</span><span class=\"template-variable\">&#123;disc.title&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span></span></span></div><div class=\"line\">             <span class=\"attr\">c:_artist</span>=<span class=\"string\">\"$</span><span class=\"template-variable\">&#123;disc.artist&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> /&gt;</span></span></div></pre></td></tr></table></figure>\n<p>如果你使用component-scanning和自动装配创建和初始化应用组件，则可以使用@Value注解获取配置文件中配置项的值，例如BlankDisc的构造函数可以定义如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> BlankDisc(</div><div class=\"line\">            <span class=\"meta\">@Value(<span class=\"meta-string\">\"<span class=\"subst\">$&#123;disc.title&#125;</span>\"</span>)</span> String title,</div><div class=\"line\">            <span class=\"meta\">@Value(<span class=\"meta-string\">\"<span class=\"subst\">$&#123;disc.artist&#125;</span>\"</span>)</span> String artist) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.title = title;</div><div class=\"line\">      <span class=\"keyword\">this</span>.artist = artist;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了使用占位符的值，需要配置PropertyPlaceholderConfigerbean或者PropertySourcesPlaceholderConfigurerbean。从Spring 3.1之后，更推荐使用PropertySourcesPlaceholderConfigurer，因为这个bean和Spring 的Environment的来源一样，例子代码如下：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">PropertySourcesPlaceholderConfigurer <span class=\"title\">placeholderConfigurer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PropertySourcesPlaceholderConfigurer();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果使用XML配置文件，则通过<context:property-placeholder>元素可以获得PropertySourcesPlaceholderConfigurerbean：</context:property-placeholder></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">      <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:/app.properties\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p></p><h3>使用SpEL装配</h3><br>Spring 3引入了Spring Expression Language（SpEL），这是一种在运行时给bean的属性或者构造函数参数注入值的方法。<p></p>\n<p>SpEL有很多优点，简单列举如下：</p>\n<p><li>可以通过bean的ID引用bean；</li></p>\n<p><li>可以调用某个对象的方法或者访问它的属性；</li></p>\n<p><li>支持数学、关系和逻辑操作；</li></p>\n<p><li>正则表达式匹配；</li></p>\n<p><li>支持集合操作<br>在后续的文章中，可以看到SpEL被用到依赖注入的其他方面，例如在Spring Security中，可以使用SpEL表达式定义安全限制；如果在Spring MVC中使用Thymeleaf模板，在模板中可以使用SpEL表达式获取模型数据。<br>SpEL是一门非常灵活的表达式语言，在这里不准备花大量篇幅来涵盖它的所有方面，可以通过一些例子来感受一下它的强大能力。</li></p>\n<p>首先，SpEL表达式被#{ … }包围，跟placeholders中的${ … }非常像，最简单的SpEL表达式可以写作<code>#{1}</code>。在应用中，你可能回使用更加有实际含义的SpEL表达式，例如<code>#{T(System).currentTimeMillis()}</code>——这个表达式负责获得当前的系统时间，而T()操作符负责将java.lang.System解析成类，以便可以调用currentTimeMillis()方法。</p>\n<p>SpEL表达式可以引用指定ID的bean或者某个bean的属性，例如下面这个例子可以获得ID为sgtPeppers的bean的artist属性的值：<code>#{sgtPeppers.artist}</code>；也可以通过<code>#{systemProperties[‘disc.title’]}</code>引用系统属性。</p>\n<p>上述这些例子都非常简单，我们接下来看下如何在bean装配中使用SpEL表达式，之前提到过，如果你使用component-scanning和自动装配创建应用组件，则可以使用@Value注解获得配置文件中配置项的值；除了使用placeholder表达式，还可以使用SpEL表达式，例如BlankDisc的构造函数可以按照下面这种方式来写：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> BlankDisc(</div><div class=\"line\">            <span class=\"meta\">@Value(<span class=\"meta-string\">\"#&#123;systemProperties['disc.title']&#125;\"</span>)</span> String title,</div><div class=\"line\">            <span class=\"meta\">@Value(<span class=\"meta-string\">\"#&#123;systemProperties['disc.artist']&#125;\"</span>)</span> String artist) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.title = title;</div><div class=\"line\">      <span class=\"keyword\">this</span>.artist = artist;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SpEL表达式可以表示整数值，也可以表示浮点数、String值和Boolean值。例如可以使用#{3.14159}表式浮点数3.14159，并且还支持科学计数法——<code>#{9.87E4}</code>表示98700；<code>#{‘Hello’}</code>可以表示字符串值、<code>#{false}</code>可以表示Boolean值。</p>\n<p>单独使用字面值是乏味的，一般不会使用到只包含有字面值的SpEL表达式，不过在构造更有趣、更复杂的表达式时支持字面值这个特性非常有用。</p>\n<p>SpEL表达式可以通过bean的ID引用bean，例如<code>#{sgtPeppers}</code>；也可以引用指定bean的属性，例如<code>#{sgtPeppers.artist}</code>；还可以调用某个bean的方法，例如#<code>{artistSelector.selectArtist()}</code>表达式可以调用artistSelector这个bean的selectArtist()方法。</p>\n<p>SpEL表达式也支持方法的连续调用，例如#<code>{artistSelector.selectArtist().toUpperCase()}</code>,为了防止出现NullPointerException异常，最好使用类型安全的操作符，例如#<code>{artistSelector.selectArtist()?.toUpperCase()}</code>。?.操作符在调用右边的函数之前，会确保左边的函数返回的值不为null。</p>\n<p>在SpEL中能够调用类的方法或者常量的关键是T()操作符，例如通过<code>T(java.lang.Math)</code>可以访问Math类中的方法和属性——<code>#{(java.lang.Math).random()}</code>和<code>#{T(java.lang.Math).PI}</code>。</p>\n<p>在操作文本字符串时，最常用的是检查某个文本是否符合某种格式。SpEL通过matches操作符支持正则表达式匹配。例如：<code>#{admin.email matches ‘[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.com’}</code>可以检查admin.email表示的邮件地址是否正确。</p>\n<p>通过SpEL表达式还可以操作集合和数组，例如<code>#{jukebox.songs[4].title}</code>这个表达式可以访问jukebox的songs数组的第5个元素。</p>\n<p>也可以实现更复杂的功能：随机选择一首歌——<code>#{jukebox.songs[T(java.lang.Math).random() * jukebox.songs.size()].title}</code>。</p>\n<p>SpEL提供了一个选择操作符——<code>.?[]</code>，可以获得某个集合的子集，举个例子，假设你获得jukebox中所有artist为Aerosmith的歌，则可以使用这个表达式：<code>#{jukebox.songs.?[artist eq ‘Aerosmith’]}</code>。可以看出，<code>.?[]</code>操作符支持在[]中嵌套另一个SpEL表达式。</p>\n<p>SpEL还提供了其他两个选择操作符：<code>.^[]</code>用于选择第一个匹配的元素；<code>.$[]</code>用于选择最后一个匹配的元素。</p>\n<p>最后，SpEL还提供了一个提取操作符：<code>.![]</code>，可以根据指定的集合新建一个符合某个条件的新集合，例如<code>#{jukebox.songs.![title]}</code>可以将songs的title都提取出来构成一个新的字符串集合。</p>\n<p>OK，SpEL的功能非常强大，但是这里需要给开发人员提个醒：别让你的SpEL表达式过于智能。你的表达式越智能，就越难对它们进行单元测试，因此，尽量保证你的SpEL表达式简单易理解。</p>\n<p></p><h2>总结</h2><br>首先我们介绍了通过Spring的profiles解决多环境部署的问题，通过在运行时根据代表指定环境的profile选择性创建某个bean，Spring可以实现无需重新构建就可以在多个环境下部署同一个应用。<p></p>\n<p>Profiles bean是运行时创建bean的一种解决方案，不过Spring 4提供了一个更普遍的解决方案：利用@Conditional注解和Condition接口实现条件性创建bean。</p>\n<p>我们还介绍了两种机制来解决自动装配时可能遇到的歧义性问题：primary beans和qualifiers。尽管定义一个primary bean非常简单，但它仍然有局限，因此我们需要利用qualifier缩小自动装配的bean的范围，而且，我们也演示了如何创建自己的qualifiers。</p>\n<p>尽管大多数Spring bean是单例对象，但是在某些情况下具备其他作用域的对象更加合适。Spring 应用中可以创建singletons、prototypes、request-scoped或session-scoped。在使用request-scoped或者session-scoped类型的bean时，还需要解决将非单例对象注入到单例对象时遇到的问题——利用代理接口或代理类。</p>\n<p>最后，我们也介绍了Spring表达式语言（SpEL），利用SpEL可以实现在运行时给bean注入值。</p></bean>"},{"title":"系统学习Spring（二）——装配Bean","date":"2017-05-10T04:42:32.000Z","_content":"任何一个成功的应用都是由多个为了实现某个业务目标而相互协作的组件构成的，这些组件必须相互了解、能够相互协作完成工作。<!--more-->\n例如，在一个在线购物系统中，订单管理组件需要与产品管理组件以及信用卡认证组件协作；这些组件还需要跟数据库组件协作从而进行数据库读写操作。\n在Spring应用中，对象无需自己负责查找或者创建与其关联的其他对象，由容器负责将创建各个对象，并创建各个对象之间的依赖关系。\n通俗的来说，Spring就是一个工厂，Bean就是Spring工厂的产品，对于Spring工厂能够生产那些产品，这个取决于领导的决策，也就是配置文件中配置。\n因此，**对于开发者来说，我们需要关注的只是告诉Spring容器需要创建哪些bean以及如何将各个bean装配到一起**。**对于Spring来说，它要做的就是根据配置文件来创建Bean实例，并调用Bean实例的方法完成“依赖注入”**。\n\n<h2>Bean的定义</h2>\n<li>   < beans/>是Sring配置文件的根节点\n<li> 一个< beans/>节点里面可以有多个<bean>节点\n在定义Bean的时候，通常要指定两个属性：id和class。其中id用来指明bean的标识符，这个标识符具有唯一性，Spring对bean的管理以及bean之间这种依赖关系都需要这个属性；而class指明该bean的具体实现类，这里不能是接口（可以是接口实现类）全路径包名.类名。\n\n```\n//一个Bean的配置\n    <bean id=\"bean\" class=\"实现类\" />  \n```\n或者\n```\n@Component(\"bean\")\npublic class Bean {\n  ...\n}\n```\n当我们用XML配置了这个bean的时候，该bean实现类中必须有一个无参构造器，故Spring底层相当于调用了如下代码：\n```\nbean = new 实现类（）;\n```\n如果在bean的配置文件中，通过构造注入如：\n```\n\t<bean id=\"bean\" class=\"实现类\" />  \n        <constructor-arg value=\"bean\"/>  \n    </bean>  \n```\n那么Spring相当于调用了\n```\n\tBean bean = new 实现类（\"bean\"）;\n```\n<h2>Spring的配置方法</h2>\nSpring容器负责创建应用中的bean，并通过DI维护这些bean之间的协作关系。作为开发人员，你应该负责告诉Spring容器需要创建哪些bean以及如何将各个bean装配到一起。Spring提供三种装配bean的方式：\n\n<li>基于XML文件的显式装配\n<li>基于Java文件的显式装配\n<li>隐式bean发现机制和自动装配\n\n绝大多数情况下，开发人员可以根据个人品味选择这三种装配方式中的一种。Spring也支持在同一个项目中混合使用不同的装配方式。\n\n《Spring实战》的建议是：尽可能使用自动装配，越少写显式的配置文件越好；当你必须使用显式配置时（例如，你要配置一个bean，但是该bean的源码不是由你维护），尽可能使用类型安全、功能更强大的基于Java文件的装配方式；最后，在某些情况下只有XML文件中才又你需要使用的名字空间时，再选择使用基于XML文件的装配方式。\n\n<h2>自动装配Bean</h2>\n\nSpring通过两个角度来实现自动装配：\n<li>组件扫描，Spring会自动发现应用上下文中所创建的bean\n<li>自动装配，Spring自动满足bean之间的依赖\n\n《Spring实战》中用了一个例子来说明，假设你需要实现一个音响系统，该系统中包含CDPlayer和CompactDisc两个组件，Spring将自动发现这两个bean，并将CompactDisc的引用注入到CDPlayer中。\n\n首先创建CD的概念——CompactDisc接口，如下所示：\n```\npackage soundsystem;\n\n/**\n * @author 李智\n * @date 2017/5/9\n */\npublic interface CompactDisc {\n    void play();\n}\n\n```\nCompactDisc接口的作用是将CDPlayer与具体的CD实现解耦合，即面向接口编程。这里还需定义一个具体的CD实现，如下所示：\n```\npackage soundsystem;\n\nimport org.springframework.stereotype.Component;\n\n/**\n * @author 李智\n * @date 2017/5/9\n */\n@Component\npublic class SgtPeppers implements CompactDisc {\n    private String title = \"Sgt.Pepper's Lonely Hearts Club Band\";\n    private String artist = \"The Beatles\";\n\n    public void play() {\n        System.out.println(\"Playing\" + title + \"by\" + artist);\n    }\n}\n```\n这里最重要的是@Component注解，它告诉Spring需要创建SgtPeppers bean。除此之外，还需要启动自动扫描机制，有两种方法：基于XML配置文件；基于Java配置文件，代码如下（二选一）：\n```\n//这是XML配置\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:component-scan base-package=\"soundsystem\"/>\n</beans>\n```\n或\n```\n//这是Java配置\npackage soundsystem;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author 李智\n * @date 2017/5/9\n */\n@Configuration\n@ComponentScan()\npublic class CDPlayerConfig {\n}\n```\n在这个Java配置文件中有两个注解值得注意：@Configuration表示这个.java文件是一个配置文件；@ComponentScan表示开启Component扫描，Spring将会设置该目录以及子目录下所有被@Component注解修饰的类。\n\n自动配置的另一个关键注解是@Autowired，基于之前的两个类和一个Java配置文件，可以写个测试\n```\npackage com.spring.sample.soundsystem;\n\nimport com.spring.sample.config.SoundSystemConfig;\nimport org.junit.Assert;import org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n/**\n * @author 李智\n * @date 2017/5/9\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = SoundSystemConfig.class)\npublic class SoundSystemTest {\n    @Autowired\n    private CompactDisc cd;\n\n    @Test\n    public void cdShouldNotBeNull() {\n        Assert.assertNotNull(cd);\n    }\n}\n```\n运行测试，看到绿色就成功了，说明@Autowired注解起作用了：自动将扫描机制创建的CompactDisc类型的bean注入到SoundSystemTest这个bean中。\n\n这里需要注意两个点，一个是junit需要用高级一点的版本，之前用3.8一直有问题，换成4.12之后就好了；还一个是SpringTest的测试包。\n```\n<dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n    <!-- Sprint-test 相关测试包 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>3.2.11.RELEASE</version>\n      <exclusions>\n        <exclusion>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-core</artifactId>\n        </exclusion>\n      </exclusions>\n      <scope>test</scope>\n    </dependency>\n\n```\n\n简单得说，自动装配的意思就是让Spring从应用上下文中找到对应的bean的引用，并将它们注入到指定的bean。通过@Autowired注解可以完成自动装配。\n\n例如，考虑下面代码中的CDPlayer类，它的构造函数被@Autowired修饰，表明当Spring创建CDPlayer的bean时，会给这个构造函数传入一个CompactDisc的bean对应的引用。\n\n```\npackage soundsystem;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author 李智\n * @date 2017/5/9\n */\n@Component\npublic class CDPlayer implements MediaPlay {\n    private CompactDisc cd;\n\n    @Autowired\n    public CDPlayer(CompactDisc cd) {\n        this.cd = cd;\n    }\n\n    public void play() {\n        cd.play();\n    }\n}\n```\n还有别的实现方法，例如将@Autowired注解作用在setCompactDisc()方法上:\n\n```\n@Autowired\npublic void setCd(CompactDisc cd) {\n    this.cd = cd;\n}\n```\n或者是其他名字的方法上，例如：\n```\n@Autowired\npublic void insertCD(CompactDisc cd) {\n    this.cd = cd;\n}\n```\n更简单的用法是，可以将@Autowired注解直接作用在成员变量之上，我们开发一般都是直接这么用的吧，例如：\n```\n@Autowired\nprivate CompactDisc cd;\n```\n\n只要对应类型的bean有且只有一个，则会自动装配到该属性上。如果没有找到对应的bean，应用会抛出对应的异常，如果想避免抛出这个异常，则需要设置**@Autowired(required=false)**。不过，在应用程序设计中，应该谨慎设置这个属性，因为这会使得你必须面对**NullPointerException**的问题。\n\n如果存在多个同一类型的bean，则Spring会抛出异常，表示装配有歧义，解决办法有两个：\n（1）通过@Qualifier注解指定需要的bean的ID；\n（2）通过@Resource注解指定注入特定ID的bean；\n\n现在我们验证一下上述代码，通过下列代码，可以验证：CompactDisc的bean已经注入到CDPlayer的bean中，同时在测试用例中是将CDPlayer的bean注入到当前测试用例。\n\n```\nimport static org.junit.Assert.*;\n\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.contrib.java.lang.system.StandardOutputStreamLog;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport soundsystem.CDPlayerConfig;\nimport soundsystem.CompactDisc;\nimport soundsystem.MediaPlay;\n\n/**\n * @author 李智\n * @date 2017/5/9\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = CDPlayerConfig.class)\n//@ContextConfiguration(locations = {\"classpath:/applicationContext.xml\"})\npublic class CDPlayerTest {\n    @Rule\n    public final StandardOutputStreamLog log = new StandardOutputStreamLog();\n    @Autowired\n    private CompactDisc cd;\n    @Autowired\n    private MediaPlay player;\n\n    @Test\n    public void cdShouldNotBeNull() {\n        assertNotNull(cd);\n    }\n\n    @Test\n    public void play() {\n        player.play();\n        assertEquals(\"Playing\" + \"Sgt.Pepper's Lonely Hearts Club Band\" + \"by\" + \"The Beatles\\n\", log.getLog());\n    }\n}\n\n```\n这里可以使用<code> public final Logger log = LoggerFactory.getLogger(CDPlayerTest.class);</code>来替代<code> public final StandardOutputStreamLog log = new StandardOutputStreamLog();</code>，要使用StandardOutputStreamLog，需要添加Jar包如下：\n\n```\n<dependency>\n      <groupId>com.github.stefanbirkner</groupId>\n      <artifactId>system-rules</artifactId>\n      <version>1.16.0</version>\n    </dependency>\n```\n\n<h2>基于Java配置文件装配Bean</h2>\nJava配置文件不同于其他用于实现业务逻辑的Java代码，因此不能将Java配置文件业务逻辑代码混在一起。一般都会给Java配置文件新建一个单独的package，实际上之前就用了Java配置的。\n\n```\n@Configuration\n@ComponentScan(basePackageClasses = {CDPlayer.class, DVDPlayer.class})\npublic class SoundSystemConfig {\n}\n```\n@Configuration注解表示这个类是配置类，之前我们是通过@ComponentScan注解实现bean的自动扫描和创建，这里我们重点是学习如何显式创建bean，因此首先将**@ComponentScan(basePackageClasses = {CDPlayer.class, DVDPlayer.class})**这行代码去掉。\n\n我们先通过@Bean注解创建一个Spring bean，该bean的默认ID和函数的方法名相同，即sgtPeppers。例如：\n\n```\n@Bean\npublic CompactDisc sgtPeppers() {\n    return new SgtPeppers();\n}\n//或注明id\n@Bean(name = \"lonelyHeartsClub\")\npublic CompactDisc sgtPeppers() {\n    return new SgtPeppers();\n}\n\n```\n可以利用Java语言的表达能力，实现类似工厂模式的代码如下：\n\n```\n@Bean\npublic CompactDisc randomBeatlesCD() {\n    int choice = (int)Math.floor(Math.random() * 4);\n\n    if (choice == 0) {\n        return new SgtPeppers();\n    } else if (choice == 1) {\n        return new WhiteAlbum();\n    } else if (choice == 2) {\n        return new HardDaysNight();\n    } else if (choice == 3) {\n        return new Revolover();\n    }\n}\n```\n然后在JavaConfig中的属性注入：\n\n```\n@Bean\npublic CDPlayer cdPlayer() {\n    return new CDPlayer(sgtPeppers());\n}\n```\n看起来是函数调用，实际上不是：由于sgtPeppers()方法被@Bean注解修饰，所以Spring会拦截这个函数调用，并返回之前已经创建好的bean——确保该SgtPeppers bean为单例。\n\n```\n@Bean\npublic CDPlayer cdPlayer() {\n    return new CDPlayer(sgtPeppers());\n}\n\n@Bean\npublic CDPlayer anotherCDPlayer() {\n    return new CDPlayer(sgtPeppers());\n}\n```\n如上代码所示：如果把sgtPeppers()方法当作普通Java方法对待，则cdPlayerbean和anotherCDPlayerbean会持有不同的SgtPeppers实例——结合CDPlayer的业务场景看：就相当于将一片CD同时装入两个CD播放机中，显然这不可能。\n\n默认情况下，Spring中所有的bean都是单例模式，因此cdPlayer和anotherCDPlayer这俩bean持有相同的SgtPeppers实例。\n\n当然，还有一种更清楚的写法：\n\n```\n@Bean\npublic CDPlayer cdPlayer(CompactDisc compactDisc) {\n    return new CDPlayer(compactDisc);\n}\n\n@Bean\npublic CDPlayer anotherCDPlayer() {\n    return new CDPlayer(sgtPeppers());\n}\n```\n这种情况下，cdPlayer和anotherCDPlayer这俩bean持有相同的SgtPeppers实例，该实例的ID为lonelyHeartsClub。这种方法最值得使用，因为它不要求CompactDisc bean在同一个配置文件中定义——只要在应用上下文容器中即可（不管是基于自动扫描发现还是基于XML配置文件定义）。\n\n<h2>基于XML的配置方法</h2>\n在之前Bean的定义有提到过，这里就不复述了。\n\n<h2>混合使用多种配置方法</h2>\n之前有提到过，开发过程中也可能使用混合配置，首先明确一点：对于自动配置，它从整个容器上下文中查找合适的bean，无论这个bean是来自JavaConfig还是XML配置。\n\n**在JavaConfig中解析XML配置**\n\n```\n//通过@Import注解导入其他的JavaConfig，并且支持同时导入多个配置文件；\n@Configuration\n@Import({CDPlayerConfig.class, CDConfig.class})\npublic class SoundSystemConfig {\n}\n\n//通过@ImportResource注解导入XML配置文件；\n@Configuration\n@Import(CDPlayerConfig.class)\n@ImportResource(\"classpath: cd-config.xml\")\npublic class SoundSystemConfig {\n}\n```\n**在XML配置文件中应用JavaConfig**\n\n```\n//通过<import>标签引入其他的XML配置文件；\n//通过<bean>标签导入Java配置文件到XML配置文件，例如\n<bean class=\"soundsystem.CDConfig\" />\n```\n通常的做法是：无论使用JavaConfig或者XML装配，都要创建一个root configuration，即模块化配置定义；并且在这个配置文件中开启自动扫描机制：<context:component-scan>或者@ComponentScan。\n\n<h2>总结</h2>\n\n由于自动装配几乎不需要手动定义bean，建议优先选择自动装配；如何必须使用显式配置，则优先选择基于Java文件装配这种方式，因为相比于XML文件，Java文件具备更多的能力、类型安全等特点；但是也有一种情况必须使用XML配置文件，即你需要使用某个名字空间（name space），该名字空间只在XML文件中可以使用。\n\nps:上述例子都是直接用的《Spring实战》","source":"_posts/系统学习Spring（二）——装配Bean.md","raw":"---\ntitle: 系统学习Spring（二）——装配Bean\ndate: 2017-05-10 12:42:32\ncategories: Java二三事\ntags:\n\t- Spring\n\t- 框架\n---\n任何一个成功的应用都是由多个为了实现某个业务目标而相互协作的组件构成的，这些组件必须相互了解、能够相互协作完成工作。<!--more-->\n例如，在一个在线购物系统中，订单管理组件需要与产品管理组件以及信用卡认证组件协作；这些组件还需要跟数据库组件协作从而进行数据库读写操作。\n在Spring应用中，对象无需自己负责查找或者创建与其关联的其他对象，由容器负责将创建各个对象，并创建各个对象之间的依赖关系。\n通俗的来说，Spring就是一个工厂，Bean就是Spring工厂的产品，对于Spring工厂能够生产那些产品，这个取决于领导的决策，也就是配置文件中配置。\n因此，**对于开发者来说，我们需要关注的只是告诉Spring容器需要创建哪些bean以及如何将各个bean装配到一起**。**对于Spring来说，它要做的就是根据配置文件来创建Bean实例，并调用Bean实例的方法完成“依赖注入”**。\n\n<h2>Bean的定义</h2>\n<li>   < beans/>是Sring配置文件的根节点\n<li> 一个< beans/>节点里面可以有多个<bean>节点\n在定义Bean的时候，通常要指定两个属性：id和class。其中id用来指明bean的标识符，这个标识符具有唯一性，Spring对bean的管理以及bean之间这种依赖关系都需要这个属性；而class指明该bean的具体实现类，这里不能是接口（可以是接口实现类）全路径包名.类名。\n\n```\n//一个Bean的配置\n    <bean id=\"bean\" class=\"实现类\" />  \n```\n或者\n```\n@Component(\"bean\")\npublic class Bean {\n  ...\n}\n```\n当我们用XML配置了这个bean的时候，该bean实现类中必须有一个无参构造器，故Spring底层相当于调用了如下代码：\n```\nbean = new 实现类（）;\n```\n如果在bean的配置文件中，通过构造注入如：\n```\n\t<bean id=\"bean\" class=\"实现类\" />  \n        <constructor-arg value=\"bean\"/>  \n    </bean>  \n```\n那么Spring相当于调用了\n```\n\tBean bean = new 实现类（\"bean\"）;\n```\n<h2>Spring的配置方法</h2>\nSpring容器负责创建应用中的bean，并通过DI维护这些bean之间的协作关系。作为开发人员，你应该负责告诉Spring容器需要创建哪些bean以及如何将各个bean装配到一起。Spring提供三种装配bean的方式：\n\n<li>基于XML文件的显式装配\n<li>基于Java文件的显式装配\n<li>隐式bean发现机制和自动装配\n\n绝大多数情况下，开发人员可以根据个人品味选择这三种装配方式中的一种。Spring也支持在同一个项目中混合使用不同的装配方式。\n\n《Spring实战》的建议是：尽可能使用自动装配，越少写显式的配置文件越好；当你必须使用显式配置时（例如，你要配置一个bean，但是该bean的源码不是由你维护），尽可能使用类型安全、功能更强大的基于Java文件的装配方式；最后，在某些情况下只有XML文件中才又你需要使用的名字空间时，再选择使用基于XML文件的装配方式。\n\n<h2>自动装配Bean</h2>\n\nSpring通过两个角度来实现自动装配：\n<li>组件扫描，Spring会自动发现应用上下文中所创建的bean\n<li>自动装配，Spring自动满足bean之间的依赖\n\n《Spring实战》中用了一个例子来说明，假设你需要实现一个音响系统，该系统中包含CDPlayer和CompactDisc两个组件，Spring将自动发现这两个bean，并将CompactDisc的引用注入到CDPlayer中。\n\n首先创建CD的概念——CompactDisc接口，如下所示：\n```\npackage soundsystem;\n\n/**\n * @author 李智\n * @date 2017/5/9\n */\npublic interface CompactDisc {\n    void play();\n}\n\n```\nCompactDisc接口的作用是将CDPlayer与具体的CD实现解耦合，即面向接口编程。这里还需定义一个具体的CD实现，如下所示：\n```\npackage soundsystem;\n\nimport org.springframework.stereotype.Component;\n\n/**\n * @author 李智\n * @date 2017/5/9\n */\n@Component\npublic class SgtPeppers implements CompactDisc {\n    private String title = \"Sgt.Pepper's Lonely Hearts Club Band\";\n    private String artist = \"The Beatles\";\n\n    public void play() {\n        System.out.println(\"Playing\" + title + \"by\" + artist);\n    }\n}\n```\n这里最重要的是@Component注解，它告诉Spring需要创建SgtPeppers bean。除此之外，还需要启动自动扫描机制，有两种方法：基于XML配置文件；基于Java配置文件，代码如下（二选一）：\n```\n//这是XML配置\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:component-scan base-package=\"soundsystem\"/>\n</beans>\n```\n或\n```\n//这是Java配置\npackage soundsystem;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author 李智\n * @date 2017/5/9\n */\n@Configuration\n@ComponentScan()\npublic class CDPlayerConfig {\n}\n```\n在这个Java配置文件中有两个注解值得注意：@Configuration表示这个.java文件是一个配置文件；@ComponentScan表示开启Component扫描，Spring将会设置该目录以及子目录下所有被@Component注解修饰的类。\n\n自动配置的另一个关键注解是@Autowired，基于之前的两个类和一个Java配置文件，可以写个测试\n```\npackage com.spring.sample.soundsystem;\n\nimport com.spring.sample.config.SoundSystemConfig;\nimport org.junit.Assert;import org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n/**\n * @author 李智\n * @date 2017/5/9\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = SoundSystemConfig.class)\npublic class SoundSystemTest {\n    @Autowired\n    private CompactDisc cd;\n\n    @Test\n    public void cdShouldNotBeNull() {\n        Assert.assertNotNull(cd);\n    }\n}\n```\n运行测试，看到绿色就成功了，说明@Autowired注解起作用了：自动将扫描机制创建的CompactDisc类型的bean注入到SoundSystemTest这个bean中。\n\n这里需要注意两个点，一个是junit需要用高级一点的版本，之前用3.8一直有问题，换成4.12之后就好了；还一个是SpringTest的测试包。\n```\n<dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n    <!-- Sprint-test 相关测试包 -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>3.2.11.RELEASE</version>\n      <exclusions>\n        <exclusion>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-core</artifactId>\n        </exclusion>\n      </exclusions>\n      <scope>test</scope>\n    </dependency>\n\n```\n\n简单得说，自动装配的意思就是让Spring从应用上下文中找到对应的bean的引用，并将它们注入到指定的bean。通过@Autowired注解可以完成自动装配。\n\n例如，考虑下面代码中的CDPlayer类，它的构造函数被@Autowired修饰，表明当Spring创建CDPlayer的bean时，会给这个构造函数传入一个CompactDisc的bean对应的引用。\n\n```\npackage soundsystem;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author 李智\n * @date 2017/5/9\n */\n@Component\npublic class CDPlayer implements MediaPlay {\n    private CompactDisc cd;\n\n    @Autowired\n    public CDPlayer(CompactDisc cd) {\n        this.cd = cd;\n    }\n\n    public void play() {\n        cd.play();\n    }\n}\n```\n还有别的实现方法，例如将@Autowired注解作用在setCompactDisc()方法上:\n\n```\n@Autowired\npublic void setCd(CompactDisc cd) {\n    this.cd = cd;\n}\n```\n或者是其他名字的方法上，例如：\n```\n@Autowired\npublic void insertCD(CompactDisc cd) {\n    this.cd = cd;\n}\n```\n更简单的用法是，可以将@Autowired注解直接作用在成员变量之上，我们开发一般都是直接这么用的吧，例如：\n```\n@Autowired\nprivate CompactDisc cd;\n```\n\n只要对应类型的bean有且只有一个，则会自动装配到该属性上。如果没有找到对应的bean，应用会抛出对应的异常，如果想避免抛出这个异常，则需要设置**@Autowired(required=false)**。不过，在应用程序设计中，应该谨慎设置这个属性，因为这会使得你必须面对**NullPointerException**的问题。\n\n如果存在多个同一类型的bean，则Spring会抛出异常，表示装配有歧义，解决办法有两个：\n（1）通过@Qualifier注解指定需要的bean的ID；\n（2）通过@Resource注解指定注入特定ID的bean；\n\n现在我们验证一下上述代码，通过下列代码，可以验证：CompactDisc的bean已经注入到CDPlayer的bean中，同时在测试用例中是将CDPlayer的bean注入到当前测试用例。\n\n```\nimport static org.junit.Assert.*;\n\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.contrib.java.lang.system.StandardOutputStreamLog;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport soundsystem.CDPlayerConfig;\nimport soundsystem.CompactDisc;\nimport soundsystem.MediaPlay;\n\n/**\n * @author 李智\n * @date 2017/5/9\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = CDPlayerConfig.class)\n//@ContextConfiguration(locations = {\"classpath:/applicationContext.xml\"})\npublic class CDPlayerTest {\n    @Rule\n    public final StandardOutputStreamLog log = new StandardOutputStreamLog();\n    @Autowired\n    private CompactDisc cd;\n    @Autowired\n    private MediaPlay player;\n\n    @Test\n    public void cdShouldNotBeNull() {\n        assertNotNull(cd);\n    }\n\n    @Test\n    public void play() {\n        player.play();\n        assertEquals(\"Playing\" + \"Sgt.Pepper's Lonely Hearts Club Band\" + \"by\" + \"The Beatles\\n\", log.getLog());\n    }\n}\n\n```\n这里可以使用<code> public final Logger log = LoggerFactory.getLogger(CDPlayerTest.class);</code>来替代<code> public final StandardOutputStreamLog log = new StandardOutputStreamLog();</code>，要使用StandardOutputStreamLog，需要添加Jar包如下：\n\n```\n<dependency>\n      <groupId>com.github.stefanbirkner</groupId>\n      <artifactId>system-rules</artifactId>\n      <version>1.16.0</version>\n    </dependency>\n```\n\n<h2>基于Java配置文件装配Bean</h2>\nJava配置文件不同于其他用于实现业务逻辑的Java代码，因此不能将Java配置文件业务逻辑代码混在一起。一般都会给Java配置文件新建一个单独的package，实际上之前就用了Java配置的。\n\n```\n@Configuration\n@ComponentScan(basePackageClasses = {CDPlayer.class, DVDPlayer.class})\npublic class SoundSystemConfig {\n}\n```\n@Configuration注解表示这个类是配置类，之前我们是通过@ComponentScan注解实现bean的自动扫描和创建，这里我们重点是学习如何显式创建bean，因此首先将**@ComponentScan(basePackageClasses = {CDPlayer.class, DVDPlayer.class})**这行代码去掉。\n\n我们先通过@Bean注解创建一个Spring bean，该bean的默认ID和函数的方法名相同，即sgtPeppers。例如：\n\n```\n@Bean\npublic CompactDisc sgtPeppers() {\n    return new SgtPeppers();\n}\n//或注明id\n@Bean(name = \"lonelyHeartsClub\")\npublic CompactDisc sgtPeppers() {\n    return new SgtPeppers();\n}\n\n```\n可以利用Java语言的表达能力，实现类似工厂模式的代码如下：\n\n```\n@Bean\npublic CompactDisc randomBeatlesCD() {\n    int choice = (int)Math.floor(Math.random() * 4);\n\n    if (choice == 0) {\n        return new SgtPeppers();\n    } else if (choice == 1) {\n        return new WhiteAlbum();\n    } else if (choice == 2) {\n        return new HardDaysNight();\n    } else if (choice == 3) {\n        return new Revolover();\n    }\n}\n```\n然后在JavaConfig中的属性注入：\n\n```\n@Bean\npublic CDPlayer cdPlayer() {\n    return new CDPlayer(sgtPeppers());\n}\n```\n看起来是函数调用，实际上不是：由于sgtPeppers()方法被@Bean注解修饰，所以Spring会拦截这个函数调用，并返回之前已经创建好的bean——确保该SgtPeppers bean为单例。\n\n```\n@Bean\npublic CDPlayer cdPlayer() {\n    return new CDPlayer(sgtPeppers());\n}\n\n@Bean\npublic CDPlayer anotherCDPlayer() {\n    return new CDPlayer(sgtPeppers());\n}\n```\n如上代码所示：如果把sgtPeppers()方法当作普通Java方法对待，则cdPlayerbean和anotherCDPlayerbean会持有不同的SgtPeppers实例——结合CDPlayer的业务场景看：就相当于将一片CD同时装入两个CD播放机中，显然这不可能。\n\n默认情况下，Spring中所有的bean都是单例模式，因此cdPlayer和anotherCDPlayer这俩bean持有相同的SgtPeppers实例。\n\n当然，还有一种更清楚的写法：\n\n```\n@Bean\npublic CDPlayer cdPlayer(CompactDisc compactDisc) {\n    return new CDPlayer(compactDisc);\n}\n\n@Bean\npublic CDPlayer anotherCDPlayer() {\n    return new CDPlayer(sgtPeppers());\n}\n```\n这种情况下，cdPlayer和anotherCDPlayer这俩bean持有相同的SgtPeppers实例，该实例的ID为lonelyHeartsClub。这种方法最值得使用，因为它不要求CompactDisc bean在同一个配置文件中定义——只要在应用上下文容器中即可（不管是基于自动扫描发现还是基于XML配置文件定义）。\n\n<h2>基于XML的配置方法</h2>\n在之前Bean的定义有提到过，这里就不复述了。\n\n<h2>混合使用多种配置方法</h2>\n之前有提到过，开发过程中也可能使用混合配置，首先明确一点：对于自动配置，它从整个容器上下文中查找合适的bean，无论这个bean是来自JavaConfig还是XML配置。\n\n**在JavaConfig中解析XML配置**\n\n```\n//通过@Import注解导入其他的JavaConfig，并且支持同时导入多个配置文件；\n@Configuration\n@Import({CDPlayerConfig.class, CDConfig.class})\npublic class SoundSystemConfig {\n}\n\n//通过@ImportResource注解导入XML配置文件；\n@Configuration\n@Import(CDPlayerConfig.class)\n@ImportResource(\"classpath: cd-config.xml\")\npublic class SoundSystemConfig {\n}\n```\n**在XML配置文件中应用JavaConfig**\n\n```\n//通过<import>标签引入其他的XML配置文件；\n//通过<bean>标签导入Java配置文件到XML配置文件，例如\n<bean class=\"soundsystem.CDConfig\" />\n```\n通常的做法是：无论使用JavaConfig或者XML装配，都要创建一个root configuration，即模块化配置定义；并且在这个配置文件中开启自动扫描机制：<context:component-scan>或者@ComponentScan。\n\n<h2>总结</h2>\n\n由于自动装配几乎不需要手动定义bean，建议优先选择自动装配；如何必须使用显式配置，则优先选择基于Java文件装配这种方式，因为相比于XML文件，Java文件具备更多的能力、类型安全等特点；但是也有一种情况必须使用XML配置文件，即你需要使用某个名字空间（name space），该名字空间只在XML文件中可以使用。\n\nps:上述例子都是直接用的《Spring实战》","slug":"系统学习Spring（二）——装配Bean","published":1,"updated":"2017-05-10T06:34:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjiq3kgi0040rhsofvi0pcr9","content":"<script src=\"/assets/js/DPlayer.min.js\"> </script><script src=\"/assets/js/APlayer.min.js\"> </script><p>任何一个成功的应用都是由多个为了实现某个业务目标而相互协作的组件构成的，这些组件必须相互了解、能够相互协作完成工作。<a id=\"more\"></a><br>例如，在一个在线购物系统中，订单管理组件需要与产品管理组件以及信用卡认证组件协作；这些组件还需要跟数据库组件协作从而进行数据库读写操作。<br>在Spring应用中，对象无需自己负责查找或者创建与其关联的其他对象，由容器负责将创建各个对象，并创建各个对象之间的依赖关系。<br>通俗的来说，Spring就是一个工厂，Bean就是Spring工厂的产品，对于Spring工厂能够生产那些产品，这个取决于领导的决策，也就是配置文件中配置。<br>因此，<strong>对于开发者来说，我们需要关注的只是告诉Spring容器需要创建哪些bean以及如何将各个bean装配到一起</strong>。<strong>对于Spring来说，它要做的就是根据配置文件来创建Bean实例，并调用Bean实例的方法完成“依赖注入”</strong>。</p>\n<h2>Bean的定义</h2><br><li>   &lt; beans/&gt;是Sring配置文件的根节点<br></li><li> 一个&lt; beans/&gt;节点里面可以有多个<bean>节点<br>在定义Bean的时候，通常要指定两个属性：id和class。其中id用来指明bean的标识符，这个标识符具有唯一性，Spring对bean的管理以及bean之间这种依赖关系都需要这个属性；而class指明该bean的具体实现类，这里不能是接口（可以是接口实现类）全路径包名.类名。<br><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一个Bean的配置</span></div><div class=\"line\">    &lt;bean id=<span class=\"string\">\"bean\"</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"实现类\"</span> /&gt;</div></pre></td></tr></table></figure><br><br>或者<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component(<span class=\"meta-string\">\"bean\"</span>)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bean</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>当我们用XML配置了这个bean的时候，该bean实现类中必须有一个无参构造器，故Spring底层相当于调用了如下代码：<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">bean</span> = new 实现类（）<span class=\"comment\">;</span></div></pre></td></tr></table></figure><br><br>如果在bean的配置文件中，通过构造注入如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=<span class=\"string\">\"bean\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"实现类\"</span> /&gt;  </div><div class=\"line\">       <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"bean\"</span>/&gt;</span>  </span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure><br><br>那么Spring相当于调用了<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Bean </span><span class=\"keyword\">bean </span>= new 实现类（<span class=\"string\">\"bean\"</span>）<span class=\"comment\">;</span></div></pre></td></tr></table></figure><br><br><h2>Spring的配置方法</h2><br>Spring容器负责创建应用中的bean，并通过DI维护这些bean之间的协作关系。作为开发人员，你应该负责告诉Spring容器需要创建哪些bean以及如何将各个bean装配到一起。Spring提供三种装配bean的方式：<br><br><li>基于XML文件的显式装配<br></li><li>基于Java文件的显式装配<br></li><li>隐式bean发现机制和自动装配<br><br>绝大多数情况下，开发人员可以根据个人品味选择这三种装配方式中的一种。Spring也支持在同一个项目中混合使用不同的装配方式。<br><br>《Spring实战》的建议是：尽可能使用自动装配，越少写显式的配置文件越好；当你必须使用显式配置时（例如，你要配置一个bean，但是该bean的源码不是由你维护），尽可能使用类型安全、功能更强大的基于Java文件的装配方式；最后，在某些情况下只有XML文件中才又你需要使用的名字空间时，再选择使用基于XML文件的装配方式。<br><br><h2>自动装配Bean</h2>\n\n<p>Spring通过两个角度来实现自动装配：</p>\n<p><li>组件扫描，Spring会自动发现应用上下文中所创建的bean</li></p>\n<p><li>自动装配，Spring自动满足bean之间的依赖</li></p>\n<p>《Spring实战》中用了一个例子来说明，假设你需要实现一个音响系统，该系统中包含CDPlayer和CompactDisc两个组件，Spring将自动发现这两个bean，并将CompactDisc的引用注入到CDPlayer中。</p>\n<p>首先创建CD的概念——CompactDisc接口，如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> soundsystem;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017/5/9</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CompactDisc</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>CompactDisc接口的作用是将CDPlayer与具体的CD实现解耦合，即面向接口编程。这里还需定义一个具体的CD实现，如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> soundsystem;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017/5/9</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SgtPeppers</span> <span class=\"keyword\">implements</span> <span class=\"title\">CompactDisc</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String title = <span class=\"string\">\"Sgt.Pepper's Lonely Hearts Club Band\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String artist = <span class=\"string\">\"The Beatles\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Playing\"</span> + title + <span class=\"string\">\"by\"</span> + artist);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里最重要的是@Component注解，它告诉Spring需要创建SgtPeppers bean。除此之外，还需要启动自动扫描机制，有两种方法：基于XML配置文件；基于Java配置文件，代码如下（二选一）：<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/<span class=\"regexp\">/这是XML配置</span></div><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\">&lt;beans xmlns=\"http:/<span class=\"regexp\">/www.springframework.org/schema</span><span class=\"regexp\">/beans\"</span></div><div class=\"line\">       xmlns:xsi=\"http:/<span class=\"regexp\">/www.w3.org/</span><span class=\"number\">2001</span>/XMLSchema-instance<span class=\"string\">\"</span></div><div class=\"line\">       xmlns:context=\"<span class=\"symbol\">http:</span>/<span class=\"regexp\">/www.springframework.org/schema</span><span class=\"regexp\">/context\"</span></div><div class=\"line\">       xsi:schemaLocation=\"http:/<span class=\"regexp\">/www.springframework.org/schema</span><span class=\"regexp\">/beans http:/</span><span class=\"regexp\">/www.springframework.org/schema</span><span class=\"regexp\">/beans/spring</span>-beans.xsd <span class=\"symbol\">http:</span>/<span class=\"regexp\">/www.springframework.org/schema</span><span class=\"regexp\">/context http:/</span><span class=\"regexp\">/www.springframework.org/schema</span><span class=\"regexp\">/context/spring</span>-context.xsd<span class=\"string\">\"&gt;</span></div><div class=\"line\"></div><div class=\"line\">    &lt;context:component-scan base-package=\"soundsystem<span class=\"string\">\"/&gt;</span></div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这是Java配置</span></div><div class=\"line\"><span class=\"keyword\">package</span> soundsystem;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.ComponentScan;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Configuration;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017/5/9</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@ComponentScan()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDPlayerConfig</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在这个Java配置文件中有两个注解值得注意：@Configuration表示这个.java文件是一个配置文件；@ComponentScan表示开启Component扫描，Spring将会设置该目录以及子目录下所有被@Component注解修饰的类。</p>\n<p>自动配置的另一个关键注解是@Autowired，基于之前的两个类和一个Java配置文件，可以写个测试<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">package</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.spring</span><span class=\"selector-class\">.sample</span><span class=\"selector-class\">.soundsystem</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.spring</span><span class=\"selector-class\">.sample</span><span class=\"selector-class\">.config</span><span class=\"selector-class\">.SoundSystemConfig</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.junit</span><span class=\"selector-class\">.Assert</span>;<span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.junit</span><span class=\"selector-class\">.Test</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.junit</span><span class=\"selector-class\">.runner</span><span class=\"selector-class\">.RunWith</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.beans</span><span class=\"selector-class\">.factory</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Autowired</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.ContextConfiguration</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.junit4</span><span class=\"selector-class\">.SpringJUnit4ClassRunner</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2017/5/9</div><div class=\"line\"> */</div><div class=\"line\">@<span class=\"keyword\">RunWith</span>(<span class=\"keyword\">SpringJUnit4ClassRunner</span>.<span class=\"keyword\">class</span>)</div><div class=\"line\">@ContextConfiguration(classes = SoundSystemConfig.class)</div><div class=\"line\">public class SoundSystemTest &#123;</div><div class=\"line\">    @<span class=\"keyword\">Autowired</span></div><div class=\"line\">    private CompactDisc cd;</div><div class=\"line\"></div><div class=\"line\">    @<span class=\"keyword\">Test</span></div><div class=\"line\">    public void cdShouldNotBeNull() &#123;</div><div class=\"line\">        <span class=\"selector-tag\">Assert</span><span class=\"selector-class\">.assertNotNull</span>(<span class=\"selector-tag\">cd</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行测试，看到绿色就成功了，说明@Autowired注解起作用了：自动将扫描机制创建的CompactDisc类型的bean注入到SoundSystemTest这个bean中。</p>\n<p>这里需要注意两个点，一个是junit需要用高级一点的版本，之前用3.8一直有问题，换成4.12之后就好了；还一个是SpringTest的测试包。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Sprint-test 相关测试包 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.11.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>简单得说，自动装配的意思就是让Spring从应用上下文中找到对应的bean的引用，并将它们注入到指定的bean。通过@Autowired注解可以完成自动装配。</p>\n<p>例如，考虑下面代码中的CDPlayer类，它的构造函数被@Autowired修饰，表明当Spring创建CDPlayer的bean时，会给这个构造函数传入一个CompactDisc的bean对应的引用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> soundsystem;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017/5/9</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDPlayer</span> <span class=\"keyword\">implements</span> <span class=\"title\">MediaPlay</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> CompactDisc cd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CDPlayer</span><span class=\"params\">(CompactDisc cd)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd = cd;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        cd.play();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>还有别的实现方法，例如将@Autowired注解作用在setCompactDisc()方法上:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCd</span><span class=\"params\">(CompactDisc cd)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.cd = cd;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者是其他名字的方法上，例如：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertCD</span><span class=\"params\">(CompactDisc cd)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.cd = cd;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>更简单的用法是，可以将@Autowired注解直接作用在成员变量之上，我们开发一般都是直接这么用的吧，例如：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"keyword\">private</span> CompactDisc cd;</div></pre></td></tr></table></figure></p>\n<p>只要对应类型的bean有且只有一个，则会自动装配到该属性上。如果没有找到对应的bean，应用会抛出对应的异常，如果想避免抛出这个异常，则需要设置<strong>@Autowired(required=false)</strong>。不过，在应用程序设计中，应该谨慎设置这个属性，因为这会使得你必须面对<strong>NullPointerException</strong>的问题。</p>\n<p>如果存在多个同一类型的bean，则Spring会抛出异常，表示装配有歧义，解决办法有两个：<br>（1）通过@Qualifier注解指定需要的bean的ID；<br>（2）通过@Resource注解指定注入特定ID的bean；</p>\n<p>现在我们验证一下上述代码，通过下列代码，可以验证：CompactDisc的bean已经注入到CDPlayer的bean中，同时在测试用例中是将CDPlayer的bean注入到当前测试用例。</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> static org.junit.Assert.*;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.junit.Rule;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.junit.Test;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.junit.contrib.java.lang.system.StandardOutputStreamLog;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.junit.runner.RunWith;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.springframework.test.context.ContextConfiguration;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> soundsystem.CDPlayerConfig;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> soundsystem.CompactDisc;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> soundsystem.MediaPlay;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2017/5/9</div><div class=\"line\"> */</div><div class=\"line\">@RunWith(SpringJUnit4ClassRunner.class)</div><div class=\"line\">@ContextConfiguration(classes = CDPlayerConfig.class)</div><div class=\"line\"><span class=\"comment\">//@ContextConfiguration(locations = &#123;\"classpath:/applicationContext.xml\"&#125;)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDPlayerTest</span> </span>&#123;</div><div class=\"line\">    @Rule</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> StandardOutputStreamLog log = <span class=\"keyword\">new</span> StandardOutputStreamLog();</div><div class=\"line\">    @Autowired</div><div class=\"line\">    <span class=\"keyword\">private</span> CompactDisc cd;</div><div class=\"line\">    @Autowired</div><div class=\"line\">    <span class=\"keyword\">private</span> MediaPlay player;</div><div class=\"line\"></div><div class=\"line\">    @Test</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> cdShouldNotBeNull() &#123;</div><div class=\"line\">        assertNotNull(cd);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Test</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> play() &#123;</div><div class=\"line\">        player.play();</div><div class=\"line\">        assertEquals(<span class=\"string\">\"Playing\"</span> + <span class=\"string\">\"Sgt.Pepper's Lonely Hearts Club Band\"</span> + <span class=\"string\">\"by\"</span> + <span class=\"string\">\"The Beatles\\n\"</span>, log.getLog());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里可以使用<code> public final Logger log = LoggerFactory.getLogger(CDPlayerTest.class);</code>来替代<code> public final StandardOutputStreamLog log = new StandardOutputStreamLog();</code>，要使用StandardOutputStreamLog，需要添加Jar包如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.stefanbirkner<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>system-rules<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.16.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2>基于Java配置文件装配Bean</h2><br>Java配置文件不同于其他用于实现业务逻辑的Java代码，因此不能将Java配置文件业务逻辑代码混在一起。一般都会给Java配置文件新建一个单独的package，实际上之前就用了Java配置的。<br><br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Configuration</span></div><div class=\"line\"><span class=\"variable\">@ComponentScan</span>(basePackageClasses = &#123;CDPlayer.class, DVDPlayer.class&#125;)</div><div class=\"line\">public class SoundSystemConfig &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>@Configuration注解表示这个类是配置类，之前我们是通过@ComponentScan注解实现bean的自动扫描和创建，这里我们重点是学习如何显式创建bean，因此首先将<strong>@ComponentScan(basePackageClasses = {CDPlayer.class, DVDPlayer.class})</strong>这行代码去掉。<br><br>我们先通过@Bean注解创建一个Spring bean，该bean的默认ID和函数的方法名相同，即sgtPeppers。例如：<br><br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CompactDisc <span class=\"title\">sgtPeppers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SgtPeppers();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//或注明id</span></div><div class=\"line\"><span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"lonelyHeartsClub\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CompactDisc <span class=\"title\">sgtPeppers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SgtPeppers();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>可以利用Java语言的表达能力，实现类似工厂模式的代码如下：<br><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"function\">Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> CompactDisc <span class=\"title\">randomBeatlesCD</span><span class=\"params\">()</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> choice = (<span class=\"keyword\">int</span>)Math.<span class=\"built_in\">floor</span>(Math.random() * <span class=\"number\">4</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (choice == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SgtPeppers();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (choice == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WhiteAlbum();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (choice == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HardDaysNight();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (choice == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Revolover();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>然后在JavaConfig中的属性注入：<br><br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CDPlayer <span class=\"title\">cdPlayer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CDPlayer(sgtPeppers());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>看起来是函数调用，实际上不是：由于sgtPeppers()方法被@Bean注解修饰，所以Spring会拦截这个函数调用，并返回之前已经创建好的bean——确保该SgtPeppers bean为单例。<br><br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CDPlayer <span class=\"title\">cdPlayer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CDPlayer(sgtPeppers());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CDPlayer <span class=\"title\">anotherCDPlayer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CDPlayer(sgtPeppers());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>如上代码所示：如果把sgtPeppers()方法当作普通Java方法对待，则cdPlayerbean和anotherCDPlayerbean会持有不同的SgtPeppers实例——结合CDPlayer的业务场景看：就相当于将一片CD同时装入两个CD播放机中，显然这不可能。<br><br>默认情况下，Spring中所有的bean都是单例模式，因此cdPlayer和anotherCDPlayer这俩bean持有相同的SgtPeppers实例。<br><br>当然，还有一种更清楚的写法：<br><br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CDPlayer <span class=\"title\">cdPlayer</span><span class=\"params\">(CompactDisc compactDisc)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CDPlayer(compactDisc);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CDPlayer <span class=\"title\">anotherCDPlayer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CDPlayer(sgtPeppers());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>这种情况下，cdPlayer和anotherCDPlayer这俩bean持有相同的SgtPeppers实例，该实例的ID为lonelyHeartsClub。这种方法最值得使用，因为它不要求CompactDisc bean在同一个配置文件中定义——只要在应用上下文容器中即可（不管是基于自动扫描发现还是基于XML配置文件定义）。<br><br><h2>基于XML的配置方法</h2><br>在之前Bean的定义有提到过，这里就不复述了。<br><br><h2>混合使用多种配置方法</h2><br>之前有提到过，开发过程中也可能使用混合配置，首先明确一点：对于自动配置，它从整个容器上下文中查找合适的bean，无论这个bean是来自JavaConfig还是XML配置。<br><br><strong>在JavaConfig中解析XML配置</strong><br><br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//通过@Import注解导入其他的JavaConfig，并且支持同时导入多个配置文件；</span></div><div class=\"line\"><span class=\"variable\">@Configuration</span></div><div class=\"line\"><span class=\"variable\">@Import</span>(&#123;CDPlayerConfig.class, CDConfig.class&#125;)</div><div class=\"line\">public class SoundSystemConfig &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//通过@ImportResource注解导入XML配置文件；</span></div><div class=\"line\"><span class=\"variable\">@Configuration</span></div><div class=\"line\"><span class=\"variable\">@Import</span>(CDPlayerConfig.class)</div><div class=\"line\"><span class=\"variable\">@ImportResource</span>(<span class=\"string\">\"classpath: cd-config.xml\"</span>)</div><div class=\"line\">public class SoundSystemConfig &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br><strong>在XML配置文件中应用JavaConfig</strong><br><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//通过&lt;import&gt;标签引入其他的XML配置文件；</span></div><div class=\"line\"><span class=\"comment\">//通过&lt;bean&gt;标签导入Java配置文件到XML配置文件，例如</span></div><div class=\"line\">&lt;bean <span class=\"keyword\">class</span>=<span class=\"string\">\"soundsystem.CDConfig\"</span> /&gt;</div></pre></td></tr></table></figure><br><br>通常的做法是：无论使用JavaConfig或者XML装配，都要创建一个root configuration，即模块化配置定义；并且在这个配置文件中开启自动扫描机制：<context:component-scan>或者@ComponentScan。<br><br><h2>总结</h2>\n\n<p>由于自动装配几乎不需要手动定义bean，建议优先选择自动装配；如何必须使用显式配置，则优先选择基于Java文件装配这种方式，因为相比于XML文件，Java文件具备更多的能力、类型安全等特点；但是也有一种情况必须使用XML配置文件，即你需要使用某个名字空间（name space），该名字空间只在XML文件中可以使用。</p>\n<p>ps:上述例子都是直接用的《Spring实战》</p>\n</context:component-scan></li></bean></li>","excerpt":"<p>任何一个成功的应用都是由多个为了实现某个业务目标而相互协作的组件构成的，这些组件必须相互了解、能够相互协作完成工作。</p>","more":"<br>例如，在一个在线购物系统中，订单管理组件需要与产品管理组件以及信用卡认证组件协作；这些组件还需要跟数据库组件协作从而进行数据库读写操作。<br>在Spring应用中，对象无需自己负责查找或者创建与其关联的其他对象，由容器负责将创建各个对象，并创建各个对象之间的依赖关系。<br>通俗的来说，Spring就是一个工厂，Bean就是Spring工厂的产品，对于Spring工厂能够生产那些产品，这个取决于领导的决策，也就是配置文件中配置。<br>因此，<strong>对于开发者来说，我们需要关注的只是告诉Spring容器需要创建哪些bean以及如何将各个bean装配到一起</strong>。<strong>对于Spring来说，它要做的就是根据配置文件来创建Bean实例，并调用Bean实例的方法完成“依赖注入”</strong>。<p></p>\n<h2>Bean的定义</h2><br><li>   &lt; beans/&gt;是Sring配置文件的根节点<br></li><li> 一个&lt; beans/&gt;节点里面可以有多个<bean>节点<br>在定义Bean的时候，通常要指定两个属性：id和class。其中id用来指明bean的标识符，这个标识符具有唯一性，Spring对bean的管理以及bean之间这种依赖关系都需要这个属性；而class指明该bean的具体实现类，这里不能是接口（可以是接口实现类）全路径包名.类名。<br><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一个Bean的配置</span></div><div class=\"line\">    &lt;bean id=<span class=\"string\">\"bean\"</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"实现类\"</span> /&gt;</div></pre></td></tr></table></figure><br><br>或者<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component(<span class=\"meta-string\">\"bean\"</span>)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bean</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>当我们用XML配置了这个bean的时候，该bean实现类中必须有一个无参构造器，故Spring底层相当于调用了如下代码：<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">bean</span> = new 实现类（）<span class=\"comment\">;</span></div></pre></td></tr></table></figure><br><br>如果在bean的配置文件中，通过构造注入如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=<span class=\"string\">\"bean\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"实现类\"</span> /&gt;  </div><div class=\"line\">       <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"bean\"</span>/&gt;</span>  </span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure><br><br>那么Spring相当于调用了<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Bean </span><span class=\"keyword\">bean </span>= new 实现类（<span class=\"string\">\"bean\"</span>）<span class=\"comment\">;</span></div></pre></td></tr></table></figure><br><br><h2>Spring的配置方法</h2><br>Spring容器负责创建应用中的bean，并通过DI维护这些bean之间的协作关系。作为开发人员，你应该负责告诉Spring容器需要创建哪些bean以及如何将各个bean装配到一起。Spring提供三种装配bean的方式：<br><br><li>基于XML文件的显式装配<br></li><li>基于Java文件的显式装配<br></li><li>隐式bean发现机制和自动装配<br><br>绝大多数情况下，开发人员可以根据个人品味选择这三种装配方式中的一种。Spring也支持在同一个项目中混合使用不同的装配方式。<br><br>《Spring实战》的建议是：尽可能使用自动装配，越少写显式的配置文件越好；当你必须使用显式配置时（例如，你要配置一个bean，但是该bean的源码不是由你维护），尽可能使用类型安全、功能更强大的基于Java文件的装配方式；最后，在某些情况下只有XML文件中才又你需要使用的名字空间时，再选择使用基于XML文件的装配方式。<br><br><h2>自动装配Bean</h2>\n\n<p>Spring通过两个角度来实现自动装配：</p>\n<p><li>组件扫描，Spring会自动发现应用上下文中所创建的bean</li></p>\n<p><li>自动装配，Spring自动满足bean之间的依赖</li></p>\n<p>《Spring实战》中用了一个例子来说明，假设你需要实现一个音响系统，该系统中包含CDPlayer和CompactDisc两个组件，Spring将自动发现这两个bean，并将CompactDisc的引用注入到CDPlayer中。</p>\n<p>首先创建CD的概念——CompactDisc接口，如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> soundsystem;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017/5/9</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CompactDisc</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>CompactDisc接口的作用是将CDPlayer与具体的CD实现解耦合，即面向接口编程。这里还需定义一个具体的CD实现，如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> soundsystem;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017/5/9</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SgtPeppers</span> <span class=\"keyword\">implements</span> <span class=\"title\">CompactDisc</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String title = <span class=\"string\">\"Sgt.Pepper's Lonely Hearts Club Band\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String artist = <span class=\"string\">\"The Beatles\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Playing\"</span> + title + <span class=\"string\">\"by\"</span> + artist);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里最重要的是@Component注解，它告诉Spring需要创建SgtPeppers bean。除此之外，还需要启动自动扫描机制，有两种方法：基于XML配置文件；基于Java配置文件，代码如下（二选一）：<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/<span class=\"regexp\">/这是XML配置</span></div><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\">&lt;beans xmlns=\"http:/<span class=\"regexp\">/www.springframework.org/schema</span><span class=\"regexp\">/beans\"</span></div><div class=\"line\">       xmlns:xsi=\"http:/<span class=\"regexp\">/www.w3.org/</span><span class=\"number\">2001</span>/XMLSchema-instance<span class=\"string\">\"</span></div><div class=\"line\">       xmlns:context=\"<span class=\"symbol\">http:</span>/<span class=\"regexp\">/www.springframework.org/schema</span><span class=\"regexp\">/context\"</span></div><div class=\"line\">       xsi:schemaLocation=\"http:/<span class=\"regexp\">/www.springframework.org/schema</span><span class=\"regexp\">/beans http:/</span><span class=\"regexp\">/www.springframework.org/schema</span><span class=\"regexp\">/beans/spring</span>-beans.xsd <span class=\"symbol\">http:</span>/<span class=\"regexp\">/www.springframework.org/schema</span><span class=\"regexp\">/context http:/</span><span class=\"regexp\">/www.springframework.org/schema</span><span class=\"regexp\">/context/spring</span>-context.xsd<span class=\"string\">\"&gt;</span></div><div class=\"line\"></div><div class=\"line\">    &lt;context:component-scan base-package=\"soundsystem<span class=\"string\">\"/&gt;</span></div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这是Java配置</span></div><div class=\"line\"><span class=\"keyword\">package</span> soundsystem;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.ComponentScan;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.<span class=\"keyword\">annotation</span>.Configuration;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017/5/9</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@ComponentScan()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDPlayerConfig</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在这个Java配置文件中有两个注解值得注意：@Configuration表示这个.java文件是一个配置文件；@ComponentScan表示开启Component扫描，Spring将会设置该目录以及子目录下所有被@Component注解修饰的类。</p>\n<p>自动配置的另一个关键注解是@Autowired，基于之前的两个类和一个Java配置文件，可以写个测试<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">package</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.spring</span><span class=\"selector-class\">.sample</span><span class=\"selector-class\">.soundsystem</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">com</span><span class=\"selector-class\">.spring</span><span class=\"selector-class\">.sample</span><span class=\"selector-class\">.config</span><span class=\"selector-class\">.SoundSystemConfig</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.junit</span><span class=\"selector-class\">.Assert</span>;<span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.junit</span><span class=\"selector-class\">.Test</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.junit</span><span class=\"selector-class\">.runner</span><span class=\"selector-class\">.RunWith</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.beans</span><span class=\"selector-class\">.factory</span><span class=\"selector-class\">.annotation</span><span class=\"selector-class\">.Autowired</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.ContextConfiguration</span>;</div><div class=\"line\"><span class=\"selector-tag\">import</span> <span class=\"selector-tag\">org</span><span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.test</span><span class=\"selector-class\">.context</span><span class=\"selector-class\">.junit4</span><span class=\"selector-class\">.SpringJUnit4ClassRunner</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2017/5/9</div><div class=\"line\"> */</div><div class=\"line\">@<span class=\"keyword\">RunWith</span>(<span class=\"keyword\">SpringJUnit4ClassRunner</span>.<span class=\"keyword\">class</span>)</div><div class=\"line\">@ContextConfiguration(classes = SoundSystemConfig.class)</div><div class=\"line\">public class SoundSystemTest &#123;</div><div class=\"line\">    @<span class=\"keyword\">Autowired</span></div><div class=\"line\">    private CompactDisc cd;</div><div class=\"line\"></div><div class=\"line\">    @<span class=\"keyword\">Test</span></div><div class=\"line\">    public void cdShouldNotBeNull() &#123;</div><div class=\"line\">        <span class=\"selector-tag\">Assert</span><span class=\"selector-class\">.assertNotNull</span>(<span class=\"selector-tag\">cd</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行测试，看到绿色就成功了，说明@Autowired注解起作用了：自动将扫描机制创建的CompactDisc类型的bean注入到SoundSystemTest这个bean中。</p>\n<p>这里需要注意两个点，一个是junit需要用高级一点的版本，之前用3.8一直有问题，换成4.12之后就好了；还一个是SpringTest的测试包。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Sprint-test 相关测试包 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.11.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>简单得说，自动装配的意思就是让Spring从应用上下文中找到对应的bean的引用，并将它们注入到指定的bean。通过@Autowired注解可以完成自动装配。</p>\n<p>例如，考虑下面代码中的CDPlayer类，它的构造函数被@Autowired修饰，表明当Spring创建CDPlayer的bean时，会给这个构造函数传入一个CompactDisc的bean对应的引用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> soundsystem;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span> 李智</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017/5/9</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDPlayer</span> <span class=\"keyword\">implements</span> <span class=\"title\">MediaPlay</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> CompactDisc cd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CDPlayer</span><span class=\"params\">(CompactDisc cd)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd = cd;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        cd.play();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>还有别的实现方法，例如将@Autowired注解作用在setCompactDisc()方法上:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCd</span><span class=\"params\">(CompactDisc cd)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.cd = cd;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者是其他名字的方法上，例如：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertCD</span><span class=\"params\">(CompactDisc cd)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.cd = cd;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>更简单的用法是，可以将@Autowired注解直接作用在成员变量之上，我们开发一般都是直接这么用的吧，例如：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\"><span class=\"keyword\">private</span> CompactDisc cd;</div></pre></td></tr></table></figure></p>\n<p>只要对应类型的bean有且只有一个，则会自动装配到该属性上。如果没有找到对应的bean，应用会抛出对应的异常，如果想避免抛出这个异常，则需要设置<strong>@Autowired(required=false)</strong>。不过，在应用程序设计中，应该谨慎设置这个属性，因为这会使得你必须面对<strong>NullPointerException</strong>的问题。</p>\n<p>如果存在多个同一类型的bean，则Spring会抛出异常，表示装配有歧义，解决办法有两个：<br>（1）通过@Qualifier注解指定需要的bean的ID；<br>（2）通过@Resource注解指定注入特定ID的bean；</p>\n<p>现在我们验证一下上述代码，通过下列代码，可以验证：CompactDisc的bean已经注入到CDPlayer的bean中，同时在测试用例中是将CDPlayer的bean注入到当前测试用例。</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> static org.junit.Assert.*;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.junit.Rule;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.junit.Test;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.junit.contrib.java.lang.system.StandardOutputStreamLog;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.junit.runner.RunWith;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.springframework.test.context.ContextConfiguration;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> soundsystem.CDPlayerConfig;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> soundsystem.CompactDisc;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> soundsystem.MediaPlay;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @author 李智</div><div class=\"line\"> * @date 2017/5/9</div><div class=\"line\"> */</div><div class=\"line\">@RunWith(SpringJUnit4ClassRunner.class)</div><div class=\"line\">@ContextConfiguration(classes = CDPlayerConfig.class)</div><div class=\"line\"><span class=\"comment\">//@ContextConfiguration(locations = &#123;\"classpath:/applicationContext.xml\"&#125;)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDPlayerTest</span> </span>&#123;</div><div class=\"line\">    @Rule</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> StandardOutputStreamLog log = <span class=\"keyword\">new</span> StandardOutputStreamLog();</div><div class=\"line\">    @Autowired</div><div class=\"line\">    <span class=\"keyword\">private</span> CompactDisc cd;</div><div class=\"line\">    @Autowired</div><div class=\"line\">    <span class=\"keyword\">private</span> MediaPlay player;</div><div class=\"line\"></div><div class=\"line\">    @Test</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> cdShouldNotBeNull() &#123;</div><div class=\"line\">        assertNotNull(cd);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Test</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> play() &#123;</div><div class=\"line\">        player.play();</div><div class=\"line\">        assertEquals(<span class=\"string\">\"Playing\"</span> + <span class=\"string\">\"Sgt.Pepper's Lonely Hearts Club Band\"</span> + <span class=\"string\">\"by\"</span> + <span class=\"string\">\"The Beatles\\n\"</span>, log.getLog());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里可以使用<code> public final Logger log = LoggerFactory.getLogger(CDPlayerTest.class);</code>来替代<code> public final StandardOutputStreamLog log = new StandardOutputStreamLog();</code>，要使用StandardOutputStreamLog，需要添加Jar包如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.stefanbirkner<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>system-rules<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.16.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2>基于Java配置文件装配Bean</h2><br>Java配置文件不同于其他用于实现业务逻辑的Java代码，因此不能将Java配置文件业务逻辑代码混在一起。一般都会给Java配置文件新建一个单独的package，实际上之前就用了Java配置的。<br><br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@Configuration</span></div><div class=\"line\"><span class=\"variable\">@ComponentScan</span>(basePackageClasses = &#123;CDPlayer.class, DVDPlayer.class&#125;)</div><div class=\"line\">public class SoundSystemConfig &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>@Configuration注解表示这个类是配置类，之前我们是通过@ComponentScan注解实现bean的自动扫描和创建，这里我们重点是学习如何显式创建bean，因此首先将<strong>@ComponentScan(basePackageClasses = {CDPlayer.class, DVDPlayer.class})</strong>这行代码去掉。<br><br>我们先通过@Bean注解创建一个Spring bean，该bean的默认ID和函数的方法名相同，即sgtPeppers。例如：<br><br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CompactDisc <span class=\"title\">sgtPeppers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SgtPeppers();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//或注明id</span></div><div class=\"line\"><span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"lonelyHeartsClub\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CompactDisc <span class=\"title\">sgtPeppers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SgtPeppers();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>可以利用Java语言的表达能力，实现类似工厂模式的代码如下：<br><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"function\">Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> CompactDisc <span class=\"title\">randomBeatlesCD</span><span class=\"params\">()</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> choice = (<span class=\"keyword\">int</span>)Math.<span class=\"built_in\">floor</span>(Math.random() * <span class=\"number\">4</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (choice == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SgtPeppers();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (choice == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WhiteAlbum();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (choice == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HardDaysNight();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (choice == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Revolover();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>然后在JavaConfig中的属性注入：<br><br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CDPlayer <span class=\"title\">cdPlayer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CDPlayer(sgtPeppers());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>看起来是函数调用，实际上不是：由于sgtPeppers()方法被@Bean注解修饰，所以Spring会拦截这个函数调用，并返回之前已经创建好的bean——确保该SgtPeppers bean为单例。<br><br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CDPlayer <span class=\"title\">cdPlayer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CDPlayer(sgtPeppers());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CDPlayer <span class=\"title\">anotherCDPlayer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CDPlayer(sgtPeppers());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>如上代码所示：如果把sgtPeppers()方法当作普通Java方法对待，则cdPlayerbean和anotherCDPlayerbean会持有不同的SgtPeppers实例——结合CDPlayer的业务场景看：就相当于将一片CD同时装入两个CD播放机中，显然这不可能。<br><br>默认情况下，Spring中所有的bean都是单例模式，因此cdPlayer和anotherCDPlayer这俩bean持有相同的SgtPeppers实例。<br><br>当然，还有一种更清楚的写法：<br><br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CDPlayer <span class=\"title\">cdPlayer</span><span class=\"params\">(CompactDisc compactDisc)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CDPlayer(compactDisc);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">CDPlayer <span class=\"title\">anotherCDPlayer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CDPlayer(sgtPeppers());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>这种情况下，cdPlayer和anotherCDPlayer这俩bean持有相同的SgtPeppers实例，该实例的ID为lonelyHeartsClub。这种方法最值得使用，因为它不要求CompactDisc bean在同一个配置文件中定义——只要在应用上下文容器中即可（不管是基于自动扫描发现还是基于XML配置文件定义）。<br><br><h2>基于XML的配置方法</h2><br>在之前Bean的定义有提到过，这里就不复述了。<br><br><h2>混合使用多种配置方法</h2><br>之前有提到过，开发过程中也可能使用混合配置，首先明确一点：对于自动配置，它从整个容器上下文中查找合适的bean，无论这个bean是来自JavaConfig还是XML配置。<br><br><strong>在JavaConfig中解析XML配置</strong><br><br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//通过@Import注解导入其他的JavaConfig，并且支持同时导入多个配置文件；</span></div><div class=\"line\"><span class=\"variable\">@Configuration</span></div><div class=\"line\"><span class=\"variable\">@Import</span>(&#123;CDPlayerConfig.class, CDConfig.class&#125;)</div><div class=\"line\">public class SoundSystemConfig &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//通过@ImportResource注解导入XML配置文件；</span></div><div class=\"line\"><span class=\"variable\">@Configuration</span></div><div class=\"line\"><span class=\"variable\">@Import</span>(CDPlayerConfig.class)</div><div class=\"line\"><span class=\"variable\">@ImportResource</span>(<span class=\"string\">\"classpath: cd-config.xml\"</span>)</div><div class=\"line\">public class SoundSystemConfig &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br><strong>在XML配置文件中应用JavaConfig</strong><br><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//通过&lt;import&gt;标签引入其他的XML配置文件；</span></div><div class=\"line\"><span class=\"comment\">//通过&lt;bean&gt;标签导入Java配置文件到XML配置文件，例如</span></div><div class=\"line\">&lt;bean <span class=\"keyword\">class</span>=<span class=\"string\">\"soundsystem.CDConfig\"</span> /&gt;</div></pre></td></tr></table></figure><br><br>通常的做法是：无论使用JavaConfig或者XML装配，都要创建一个root configuration，即模块化配置定义；并且在这个配置文件中开启自动扫描机制：<context:component-scan>或者@ComponentScan。<br><br><h2>总结</h2>\n\n<p>由于自动装配几乎不需要手动定义bean，建议优先选择自动装配；如何必须使用显式配置，则优先选择基于Java文件装配这种方式，因为相比于XML文件，Java文件具备更多的能力、类型安全等特点；但是也有一种情况必须使用XML配置文件，即你需要使用某个名字空间（name space），该名字空间只在XML文件中可以使用。</p>\n<p>ps:上述例子都是直接用的《Spring实战》</p></context:component-scan></li></bean></li>"}],"PostAsset":[{"_id":"source/_posts/Mac下docker搭建hadoop集群/1.png","slug":"1.png","post":"cjjiq3kfa001xrhsomzpj3ukf","modified":0,"renderable":0},{"_id":"source/_posts/Mac下docker搭建hadoop集群/2.png","slug":"2.png","post":"cjjiq3kfa001xrhsomzpj3ukf","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjjiq3kdq0000rhsoz7fg22s9","category_id":"cjjiq3ke10004rhsova8t9kw4","_id":"cjjiq3keg000frhsoiysvyfu9"},{"post_id":"cjjiq3kdy0002rhsouud2ne8t","category_id":"cjjiq3ked000brhsotkl0haog","_id":"cjjiq3kel000mrhsovrg3ka4o"},{"post_id":"cjjiq3kek000jrhsodx71n2bk","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3ken000rrhsoqx95julv"},{"post_id":"cjjiq3ke40006rhsoq9ftx4j8","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3ken000urhso7jch61nc"},{"post_id":"cjjiq3kel000lrhsoli1obwz2","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kep000zrhsotteb24w3"},{"post_id":"cjjiq3kem000qrhsoiu2x9xot","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kep0011rhso7yvk639t"},{"post_id":"cjjiq3ke80008rhsog1yulz46","category_id":"cjjiq3kel000nrhsoastu2ddf","_id":"cjjiq3kev0015rhsomg9d44gx"},{"post_id":"cjjiq3ken000trhso3m5ks5fz","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kew0018rhsog3ps6ag0"},{"post_id":"cjjiq3keo000xrhso3auyp4me","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kf0001drhsoe9zlz1vr"},{"post_id":"cjjiq3kep0010rhso4qwt1bdv","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kf1001grhso45ntperv"},{"post_id":"cjjiq3kec000arhsohzfiv9eg","category_id":"cjjiq3keo000vrhsoi1o5lk8g","_id":"cjjiq3kf2001krhsoe5yyg40j"},{"post_id":"cjjiq3keq0012rhsohh3vrvpu","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kf4001nrhsoe8g0wc9e"},{"post_id":"cjjiq3kev0017rhsouh07p1ly","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kf7001qrhsonks24ftc"},{"post_id":"cjjiq3kee000erhsomy6nvsjv","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kf8001srhso6mbjho3k"},{"post_id":"cjjiq3kez001arhsobz2c9pf9","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kfa001vrhsohrwoqsqc"},{"post_id":"cjjiq3kf0001frhso0ufj26vr","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kfb001yrhsoppj44r71"},{"post_id":"cjjiq3kei000grhsozl4to0ny","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kfd0021rhsoewdq5itr"},{"post_id":"cjjiq3kf1001irhsol0fxzl3v","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kfg0025rhso36b30z0d"},{"post_id":"cjjiq3kf3001lrhsopr64hb45","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kfj0028rhso1wym3n5a"},{"post_id":"cjjiq3kf5001orhsopkkycz1b","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kfl002crhsodzzqpwmj"},{"post_id":"cjjiq3kf7001rrhsossvnklvn","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kfo002frhsobewntu1j"},{"post_id":"cjjiq3kf9001trhsol6qo49vi","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kfp002jrhso77gd516v"},{"post_id":"cjjiq3kfc001zrhso5z52fcn6","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kfs002mrhsordr63sh1"},{"post_id":"cjjiq3kfg0026rhsomjoel2lr","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kft002rrhsoz8ealf6n"},{"post_id":"cjjiq3kfa001xrhsomzpj3ukf","category_id":"cjjiq3kfd0020rhsoou3p7oc3","_id":"cjjiq3kfu002urhso4auznjjq"},{"post_id":"cjjiq3kfj0029rhsoy8j3bm6q","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kg1002wrhsoz1f38pk1"},{"post_id":"cjjiq3kfl002drhso3iuwgot5","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kg20030rhsobqlwksyh"},{"post_id":"cjjiq3kfo002grhsou6g8909r","category_id":"cjjiq3ked000brhsotkl0haog","_id":"cjjiq3kg30033rhso028bejkg"},{"post_id":"cjjiq3kfs002nrhso59dprzkr","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kg50038rhso0qmx2u4w"},{"post_id":"cjjiq3kft002srhsof6dtb947","category_id":"cjjiq3ked000brhsotkl0haog","_id":"cjjiq3kg6003brhsotvik5nkl"},{"post_id":"cjjiq3kfu002vrhsod4bsxxx8","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kg7003erhsoww7tkqpv"},{"post_id":"cjjiq3kfq002krhsordmgg14l","category_id":"cjjiq3kft002prhsokjuhu0uf","_id":"cjjiq3kg8003irhsojsug0hfd"},{"post_id":"cjjiq3kg1002yrhsooub8ggzq","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kg9003lrhsoi3dzqzud"},{"post_id":"cjjiq3kg50039rhsoq8ekhmy7","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kge003orhso2lf56162"},{"post_id":"cjjiq3kg6003crhsovekcvxah","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kgf003srhsocddsg15k"},{"post_id":"cjjiq3kg30031rhsow94p839n","category_id":"cjjiq3kg50037rhsovi3o62mb","_id":"cjjiq3kgg003vrhso66iee3cc"},{"post_id":"cjjiq3kg7003grhso4y5lph0w","category_id":"cjjiq3ked000brhsotkl0haog","_id":"cjjiq3kgi003zrhsorwmc6pq0"},{"post_id":"cjjiq3kg9003jrhsovfu021q6","category_id":"cjjiq3kg8003hrhsoobxbc5rm","_id":"cjjiq3kgj0042rhsoiq0cea6o"},{"post_id":"cjjiq3kg40034rhsop5jpp7yc","category_id":"cjjiq3kg8003hrhsoobxbc5rm","_id":"cjjiq3kgk0045rhsobeopxn43"},{"post_id":"cjjiq3kga003nrhsohzd4nv7e","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kgk0047rhsop59ipaj6"},{"post_id":"cjjiq3kge003prhso1l1c5qqt","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kgk004arhsot8370d47"},{"post_id":"cjjiq3kgf003trhsoxqpyd3hd","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kgl004brhso5eo37qtd"},{"post_id":"cjjiq3kgg003wrhso74hmea8x","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kgl004crhsopncou44d"},{"post_id":"cjjiq3kgi0040rhsofvi0pcr9","category_id":"cjjiq3kej000hrhsokvguzxai","_id":"cjjiq3kgm004frhsocatji6fd"}],"PostTag":[{"post_id":"cjjiq3kdq0000rhsoz7fg22s9","tag_id":"cjjiq3ke40005rhsohykqk30d","_id":"cjjiq3ked000drhsosllww09x"},{"post_id":"cjjiq3kdy0002rhsouud2ne8t","tag_id":"cjjiq3ked000crhsoi6lve6fo","_id":"cjjiq3kek000krhso46qd4l88"},{"post_id":"cjjiq3kek000jrhsodx71n2bk","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kem000prhsowrqu8vnv"},{"post_id":"cjjiq3kel000lrhsoli1obwz2","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3ken000srhsofsbiub7b"},{"post_id":"cjjiq3ken000trhso3m5ks5fz","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kep000yrhso4145yx56"},{"post_id":"cjjiq3ke40006rhsoq9ftx4j8","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kev0016rhsorigynk3t"},{"post_id":"cjjiq3ke40006rhsoq9ftx4j8","tag_id":"cjjiq3kem000orhsoawp3alj2","_id":"cjjiq3kez0019rhsorchbhtrn"},{"post_id":"cjjiq3ke40006rhsoq9ftx4j8","tag_id":"cjjiq3keo000wrhsocg2j11ng","_id":"cjjiq3kf0001erhso4u9k00uo"},{"post_id":"cjjiq3ke80008rhsog1yulz46","tag_id":"cjjiq3keq0014rhsoy8chwvkw","_id":"cjjiq3kf1001hrhsoal10l3pz"},{"post_id":"cjjiq3kec000arhsohzfiv9eg","tag_id":"cjjiq3kf0001crhso393x2nn7","_id":"cjjiq3kf4001mrhsoqzhaimuf"},{"post_id":"cjjiq3kf7001rrhsossvnklvn","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kfa001urhsoau8r89xt"},{"post_id":"cjjiq3kfc001zrhso5z52fcn6","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kfg0024rhso94y2l205"},{"post_id":"cjjiq3kee000erhsomy6nvsjv","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kfj0027rhsoobbzwfg8"},{"post_id":"cjjiq3kee000erhsomy6nvsjv","tag_id":"cjjiq3kf6001prhsokfujmj1t","_id":"cjjiq3kfl002brhsor0ahac0e"},{"post_id":"cjjiq3kee000erhsomy6nvsjv","tag_id":"cjjiq3kfa001wrhsoairri26n","_id":"cjjiq3kfo002erhso2nazxul4"},{"post_id":"cjjiq3kfj0029rhsoy8j3bm6q","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kfp002irhsoxglekiy4"},{"post_id":"cjjiq3kfl002drhso3iuwgot5","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kfs002lrhso86kt0u4s"},{"post_id":"cjjiq3kei000grhsozl4to0ny","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kft002qrhso5ll1vmdo"},{"post_id":"cjjiq3kei000grhsozl4to0ny","tag_id":"cjjiq3kfk002arhsoecrait8f","_id":"cjjiq3kfu002trhsotrv132go"},{"post_id":"cjjiq3kem000qrhsoiu2x9xot","tag_id":"cjjiq3kfp002hrhso6qroo269","_id":"cjjiq3kg2002zrhso6snhb8re"},{"post_id":"cjjiq3kem000qrhsoiu2x9xot","tag_id":"cjjiq3kft002orhsoev10n1uv","_id":"cjjiq3kg30032rhsob3rluusi"},{"post_id":"cjjiq3kfu002vrhsod4bsxxx8","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kg50036rhsog221uqgb"},{"post_id":"cjjiq3keo000xrhso3auyp4me","tag_id":"cjjiq3kg1002xrhsoeixh7l38","_id":"cjjiq3kg6003arhsoojfkcda8"},{"post_id":"cjjiq3kep0010rhso4qwt1bdv","tag_id":"cjjiq3kg1002xrhsoeixh7l38","_id":"cjjiq3kg7003frhsonxddmrsf"},{"post_id":"cjjiq3keq0012rhsohh3vrvpu","tag_id":"cjjiq3kg1002xrhsoeixh7l38","_id":"cjjiq3kg9003mrhsol8x6edzo"},{"post_id":"cjjiq3kga003nrhsohzd4nv7e","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kgf003rrhsolbqqw4i0"},{"post_id":"cjjiq3kga003nrhsohzd4nv7e","tag_id":"cjjiq3kfk002arhsoecrait8f","_id":"cjjiq3kgg003urhso1z2qogwg"},{"post_id":"cjjiq3kev0017rhsouh07p1ly","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kgi003yrhsonkg9oumg"},{"post_id":"cjjiq3kev0017rhsouh07p1ly","tag_id":"cjjiq3kg9003krhsozxxrahr4","_id":"cjjiq3kgj0041rhsof836v24y"},{"post_id":"cjjiq3kge003prhso1l1c5qqt","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kgk0044rhsoeqwzxmh5"},{"post_id":"cjjiq3kez001arhsobz2c9pf9","tag_id":"cjjiq3kg1002xrhsoeixh7l38","_id":"cjjiq3kgk0046rhsozhtnawcm"},{"post_id":"cjjiq3kf0001frhso0ufj26vr","tag_id":"cjjiq3kg1002xrhsoeixh7l38","_id":"cjjiq3kgk0049rhsoy137xejg"},{"post_id":"cjjiq3kf1001irhsol0fxzl3v","tag_id":"cjjiq3kgk0043rhsoyg1batw8","_id":"cjjiq3kgm004erhsomaw9y6os"},{"post_id":"cjjiq3kf1001irhsol0fxzl3v","tag_id":"cjjiq3kgk0048rhsouryo3g65","_id":"cjjiq3kgm004grhsoc1s2x06q"},{"post_id":"cjjiq3kf3001lrhsopr64hb45","tag_id":"cjjiq3kgl004drhsoszvwekys","_id":"cjjiq3kgn004irhsoc4cx9ab2"},{"post_id":"cjjiq3kf5001orhsopkkycz1b","tag_id":"cjjiq3kgn004hrhsoxfn4404u","_id":"cjjiq3kgo004krhsomuvzym2r"},{"post_id":"cjjiq3kf9001trhsol6qo49vi","tag_id":"cjjiq3kgn004jrhsovudnaqip","_id":"cjjiq3kgo004mrhsohgzz4m6k"},{"post_id":"cjjiq3kfa001xrhsomzpj3ukf","tag_id":"cjjiq3kgo004lrhsojqazhke1","_id":"cjjiq3kgp004qrhsoybtawxl3"},{"post_id":"cjjiq3kfa001xrhsomzpj3ukf","tag_id":"cjjiq3kgo004nrhsodj14vnvw","_id":"cjjiq3kgp004rrhsozfopnifq"},{"post_id":"cjjiq3kfa001xrhsomzpj3ukf","tag_id":"cjjiq3kgo004orhsommfgjcrt","_id":"cjjiq3kgp004trhsojfbmnodw"},{"post_id":"cjjiq3kfg0026rhsomjoel2lr","tag_id":"cjjiq3kgp004prhso0oioozm3","_id":"cjjiq3kgq004vrhsocmplfjjw"},{"post_id":"cjjiq3kfg0026rhsomjoel2lr","tag_id":"cjjiq3kgp004srhsozdiioh9f","_id":"cjjiq3kgq004wrhso06kgeuxh"},{"post_id":"cjjiq3kfo002grhsou6g8909r","tag_id":"cjjiq3kgp004urhsou3gt2flk","_id":"cjjiq3kgr004zrhso97zkzwfw"},{"post_id":"cjjiq3kfo002grhsou6g8909r","tag_id":"cjjiq3kgq004xrhsor2s59p0p","_id":"cjjiq3kgr0050rhsowkx9kemc"},{"post_id":"cjjiq3kfq002krhsordmgg14l","tag_id":"cjjiq3kgq004yrhsow8xbxozx","_id":"cjjiq3kgs0052rhsopsmwhxe1"},{"post_id":"cjjiq3kfs002nrhso59dprzkr","tag_id":"cjjiq3kgp004prhso0oioozm3","_id":"cjjiq3kgt0055rhsosjn0zk9h"},{"post_id":"cjjiq3kfs002nrhso59dprzkr","tag_id":"cjjiq3kgp004srhsozdiioh9f","_id":"cjjiq3kgt0056rhsov6ofc8yc"},{"post_id":"cjjiq3kft002srhsof6dtb947","tag_id":"cjjiq3kgs0054rhso7cnonoh6","_id":"cjjiq3kgt0058rhso9sgkp3cz"},{"post_id":"cjjiq3kg1002yrhsooub8ggzq","tag_id":"cjjiq3kgt0057rhso29ui1ni5","_id":"cjjiq3kgu005crhsorg68fjjc"},{"post_id":"cjjiq3kg1002yrhsooub8ggzq","tag_id":"cjjiq3kgt0059rhso73urxqcx","_id":"cjjiq3kgu005drhsooe3jruev"},{"post_id":"cjjiq3kg1002yrhsooub8ggzq","tag_id":"cjjiq3kgu005arhsoxah8roq1","_id":"cjjiq3kgv005frhsoqjdbtipb"},{"post_id":"cjjiq3kg30031rhsow94p839n","tag_id":"cjjiq3kgu005brhso0iad4uvg","_id":"cjjiq3kgv005grhsoncrqtj2f"},{"post_id":"cjjiq3kg40034rhsop5jpp7yc","tag_id":"cjjiq3kgv005erhsomkvimucs","_id":"cjjiq3kgw005irhsoxwc2yn3m"},{"post_id":"cjjiq3kg50039rhsoq8ekhmy7","tag_id":"cjjiq3kgp004prhso0oioozm3","_id":"cjjiq3kgx005krhso9vb7rzi2"},{"post_id":"cjjiq3kg6003crhsovekcvxah","tag_id":"cjjiq3kgx005jrhsoo1iwcz9i","_id":"cjjiq3kgy005orhsouodmpw2p"},{"post_id":"cjjiq3kg6003crhsovekcvxah","tag_id":"cjjiq3kgx005lrhso4hh8d5o6","_id":"cjjiq3kgy005prhso0qrw63ix"},{"post_id":"cjjiq3kg6003crhsovekcvxah","tag_id":"cjjiq3kgy005mrhso4yp6kbly","_id":"cjjiq3kgz005rrhsoe2yto1d1"},{"post_id":"cjjiq3kg7003grhso4y5lph0w","tag_id":"cjjiq3kgy005nrhsoiq4tsm9i","_id":"cjjiq3kgz005srhsoy4p00msg"},{"post_id":"cjjiq3kg9003jrhsovfu021q6","tag_id":"cjjiq3kgz005qrhsortfkky7r","_id":"cjjiq3kh0005vrhso4icpe0wo"},{"post_id":"cjjiq3kg9003jrhsovfu021q6","tag_id":"cjjiq3kgz005trhsojd37ea1m","_id":"cjjiq3kh0005wrhsoddh4uc15"},{"post_id":"cjjiq3kgf003trhsoxqpyd3hd","tag_id":"cjjiq3kej000irhso94u4rcqi","_id":"cjjiq3kh1005zrhso7t4tsaht"},{"post_id":"cjjiq3kgf003trhsoxqpyd3hd","tag_id":"cjjiq3kgz005urhso17uy1h2u","_id":"cjjiq3kh10060rhsophrl7djm"},{"post_id":"cjjiq3kgf003trhsoxqpyd3hd","tag_id":"cjjiq3kh0005xrhsodsypzdw1","_id":"cjjiq3kh20062rhsosir04prb"},{"post_id":"cjjiq3kgg003wrhso74hmea8x","tag_id":"cjjiq3kgp004prhso0oioozm3","_id":"cjjiq3kh30064rhsojodlyjdu"},{"post_id":"cjjiq3kgg003wrhso74hmea8x","tag_id":"cjjiq3kgp004srhsozdiioh9f","_id":"cjjiq3kh30065rhsol5krmb0s"},{"post_id":"cjjiq3kgi0040rhsofvi0pcr9","tag_id":"cjjiq3kgp004prhso0oioozm3","_id":"cjjiq3kh40067rhsom92y8abu"},{"post_id":"cjjiq3kgi0040rhsofvi0pcr9","tag_id":"cjjiq3kgp004srhsozdiioh9f","_id":"cjjiq3kh40068rhsoy38l2mq3"}],"Tag":[{"name":"总结","_id":"cjjiq3ke40005rhsohykqk30d"},{"name":"军规","_id":"cjjiq3ked000crhsoi6lve6fo"},{"name":"Java","_id":"cjjiq3kej000irhso94u4rcqi"},{"name":"字符串","_id":"cjjiq3kem000orhsoawp3alj2"},{"name":"常量池","_id":"cjjiq3keo000wrhsocg2j11ng"},{"name":"迁移","_id":"cjjiq3keq0014rhsoy8chwvkw"},{"name":"Cordova","_id":"cjjiq3kf0001crhso393x2nn7"},{"name":"Jvm","_id":"cjjiq3kf6001prhsokfujmj1t"},{"name":"对象","_id":"cjjiq3kfa001wrhsoairri26n"},{"name":"集合","_id":"cjjiq3kfk002arhsoecrait8f"},{"name":"WebSocket","_id":"cjjiq3kfp002hrhso6qroo269"},{"name":"WebRTC","_id":"cjjiq3kft002orhsoev10n1uv"},{"name":"反射","_id":"cjjiq3kg1002xrhsoeixh7l38"},{"name":"二维码","_id":"cjjiq3kg9003krhsozxxrahr4"},{"name":"接口","_id":"cjjiq3kgk0043rhsoyg1batw8"},{"name":"常量","_id":"cjjiq3kgk0048rhsouryo3g65"},{"name":"泛型","_id":"cjjiq3kgl004drhsoszvwekys"},{"name":"静态动态绑定","_id":"cjjiq3kgn004hrhsoxfn4404u"},{"name":"Logger","_id":"cjjiq3kgn004jrhsovudnaqip"},{"name":"Docker","_id":"cjjiq3kgo004lrhsojqazhke1"},{"name":"Hadoop","_id":"cjjiq3kgo004nrhsodj14vnvw"},{"name":"集群搭建","_id":"cjjiq3kgo004orhsommfgjcrt"},{"name":"Spring","_id":"cjjiq3kgp004prhso0oioozm3"},{"name":"框架","_id":"cjjiq3kgp004srhsozdiioh9f"},{"name":"mysql","_id":"cjjiq3kgp004urhsou3gt2flk"},{"name":"自增序号","_id":"cjjiq3kgq004xrhsor2s59p0p"},{"name":"nginx","_id":"cjjiq3kgq004yrhsow8xbxozx"},{"name":"分库","_id":"cjjiq3kgs0054rhso7cnonoh6"},{"name":"JavaScript","_id":"cjjiq3kgt0057rhso29ui1ni5"},{"name":"Ajax","_id":"cjjiq3kgt0059rhso73urxqcx"},{"name":"cache","_id":"cjjiq3kgu005arhsoxah8roq1"},{"name":"小插件","_id":"cjjiq3kgu005brhso0iad4uvg"},{"name":"排序","_id":"cjjiq3kgv005erhsomkvimucs"},{"name":"多线程","_id":"cjjiq3kgx005jrhsoo1iwcz9i"},{"name":"饥饿","_id":"cjjiq3kgx005lrhso4hh8d5o6"},{"name":"公平","_id":"cjjiq3kgy005mrhso4yp6kbly"},{"name":"优化","_id":"cjjiq3kgy005nrhsoiq4tsm9i"},{"name":"时间复杂度","_id":"cjjiq3kgz005qrhsortfkky7r"},{"name":"空间复杂度","_id":"cjjiq3kgz005trhsojd37ea1m"},{"name":"黑车","_id":"cjjiq3kgz005urhso17uy1h2u"},{"name":"种子","_id":"cjjiq3kh0005xrhsodsypzdw1"}]}}